(self.webpackChunk_ibm_aiops_ui_extension_template=self.webpackChunk_ibm_aiops_ui_extension_template||[]).push([[804],{1804:function(__unused_webpack_module,exports){eval("(function (global, factory) {\n   true ? factory(exports) : 0;\n})(this, function (exports) {\n  'use strict';\n\n  function tokenToString(token) {\n    if (token.text !== undefined && token.text !== '') {\n      return `'${token.type}' with value '${token.text}'`;\n    } else {\n      return `'${token.type}'`;\n    }\n  }\n  class NoParsletFoundError extends Error {\n    constructor(token) {\n      super(`No parslet found for token: ${tokenToString(token)}`);\n      this.token = token;\n      Object.setPrototypeOf(this, NoParsletFoundError.prototype);\n    }\n    getToken() {\n      return this.token;\n    }\n  }\n  class EarlyEndOfParseError extends Error {\n    constructor(token) {\n      super(`The parsing ended early. The next token was: ${tokenToString(token)}`);\n      this.token = token;\n      Object.setPrototypeOf(this, EarlyEndOfParseError.prototype);\n    }\n    getToken() {\n      return this.token;\n    }\n  }\n  class UnexpectedTypeError extends Error {\n    constructor(result, message) {\n      let error = `Unexpected type: '${result.type}'.`;\n      if (message !== undefined) {\n        error += ` Message: ${message}`;\n      }\n      super(error);\n      Object.setPrototypeOf(this, UnexpectedTypeError.prototype);\n    }\n  }\n  // export class UnexpectedTokenError extends Error {\n  //   private expected: Token\n  //   private found: Token\n  //\n  //   constructor (expected: Token, found: Token) {\n  //     super(`The parsing ended early. The next token was: ${tokenToString(token)}`)\n  //\n  //     this.token = token\n  //\n  //     Object.setPrototypeOf(this, EarlyEndOfParseError.prototype)\n  //   }\n  //\n  //   getToken() {\n  //     return this.token\n  //   }\n  // }\n\n  function makePunctuationRule(type) {\n    return text => {\n      if (text.startsWith(type)) {\n        return {\n          type,\n          text: type\n        };\n      } else {\n        return null;\n      }\n    };\n  }\n  function getQuoted(text) {\n    let position = 0;\n    let char;\n    const mark = text[0];\n    let escaped = false;\n    if (mark !== '\\'' && mark !== '\"') {\n      return null;\n    }\n    while (position < text.length) {\n      position++;\n      char = text[position];\n      if (!escaped && char === mark) {\n        position++;\n        break;\n      }\n      escaped = !escaped && char === '\\\\';\n    }\n    if (char !== mark) {\n      throw new Error('Unterminated String');\n    }\n    return text.slice(0, position);\n  }\n  const identifierStartRegex = /[$_\\p{ID_Start}]|\\\\u\\p{Hex_Digit}{4}|\\\\u\\{0*(?:\\p{Hex_Digit}{1,5}|10\\p{Hex_Digit}{4})\\}/u;\n  // A hyphen is not technically allowed, but to keep it liberal for now,\n  //  adding it here\n  const identifierContinueRegex = /[$\\-\\p{ID_Continue}\\u200C\\u200D]|\\\\u\\p{Hex_Digit}{4}|\\\\u\\{0*(?:\\p{Hex_Digit}{1,5}|10\\p{Hex_Digit}{4})\\}/u;\n  function getIdentifier(text) {\n    let char = text[0];\n    if (!identifierStartRegex.test(char)) {\n      return null;\n    }\n    let position = 1;\n    do {\n      char = text[position];\n      if (!identifierContinueRegex.test(char)) {\n        break;\n      }\n      position++;\n    } while (position < text.length);\n    return text.slice(0, position);\n  }\n  // we are a bit more liberal than TypeScript here and allow `NaN`, `Infinity` and `-Infinity`\n  const numberRegex = /^(NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity))/;\n  function getNumber(text) {\n    var _a, _b;\n    return (_b = (_a = numberRegex.exec(text)) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n  }\n  const identifierRule = text => {\n    const value = getIdentifier(text);\n    if (value == null) {\n      return null;\n    }\n    return {\n      type: 'Identifier',\n      text: value\n    };\n  };\n  function makeKeyWordRule(type) {\n    return text => {\n      if (!text.startsWith(type)) {\n        return null;\n      }\n      const prepends = text[type.length];\n      if (prepends !== undefined && identifierContinueRegex.test(prepends)) {\n        return null;\n      }\n      return {\n        type,\n        text: type\n      };\n    };\n  }\n  const stringValueRule = text => {\n    const value = getQuoted(text);\n    if (value == null) {\n      return null;\n    }\n    return {\n      type: 'StringValue',\n      text: value\n    };\n  };\n  const eofRule = text => {\n    if (text.length > 0) {\n      return null;\n    }\n    return {\n      type: 'EOF',\n      text: ''\n    };\n  };\n  const numberRule = text => {\n    const value = getNumber(text);\n    if (value === null) {\n      return null;\n    }\n    return {\n      type: 'Number',\n      text: value\n    };\n  };\n  const rules = [eofRule, makePunctuationRule('=>'), makePunctuationRule('('), makePunctuationRule(')'), makePunctuationRule('{'), makePunctuationRule('}'), makePunctuationRule('['), makePunctuationRule(']'), makePunctuationRule('|'), makePunctuationRule('&'), makePunctuationRule('<'), makePunctuationRule('>'), makePunctuationRule(','), makePunctuationRule(';'), makePunctuationRule('*'), makePunctuationRule('?'), makePunctuationRule('!'), makePunctuationRule('='), makePunctuationRule(':'), makePunctuationRule('...'), makePunctuationRule('.'), makePunctuationRule('#'), makePunctuationRule('~'), makePunctuationRule('/'), makePunctuationRule('@'), makeKeyWordRule('undefined'), makeKeyWordRule('null'), makeKeyWordRule('function'), makeKeyWordRule('this'), makeKeyWordRule('new'), makeKeyWordRule('module'), makeKeyWordRule('event'), makeKeyWordRule('external'), makeKeyWordRule('typeof'), makeKeyWordRule('keyof'), makeKeyWordRule('readonly'), makeKeyWordRule('import'), makeKeyWordRule('is'), makeKeyWordRule('in'), makeKeyWordRule('asserts'), numberRule, identifierRule, stringValueRule];\n  const breakingWhitespaceRegex = /^\\s*\\n\\s*/;\n  class Lexer {\n    static create(text) {\n      const current = this.read(text);\n      text = current.text;\n      const next = this.read(text);\n      text = next.text;\n      return new Lexer(text, undefined, current.token, next.token);\n    }\n    constructor(text, previous, current, next) {\n      this.text = '';\n      this.text = text;\n      this.previous = previous;\n      this.current = current;\n      this.next = next;\n    }\n    static read(text) {\n      let startOfLine = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      startOfLine = startOfLine || breakingWhitespaceRegex.test(text);\n      text = text.trim();\n      for (const rule of rules) {\n        const partial = rule(text);\n        if (partial !== null) {\n          const token = Object.assign(Object.assign({}, partial), {\n            startOfLine\n          });\n          text = text.slice(token.text.length);\n          return {\n            text,\n            token\n          };\n        }\n      }\n      throw new Error('Unexpected Token ' + text);\n    }\n    advance() {\n      const next = Lexer.read(this.text);\n      return new Lexer(next.text, this.current, this.next, next.token);\n    }\n  }\n\n  /**\n   * Throws an error if the provided result is not a {@link RootResult}\n   */\n  function assertRootResult(result) {\n    if (result === undefined) {\n      throw new Error('Unexpected undefined');\n    }\n    if (result.type === 'JsdocTypeKeyValue' || result.type === 'JsdocTypeParameterList' || result.type === 'JsdocTypeProperty' || result.type === 'JsdocTypeReadonlyProperty' || result.type === 'JsdocTypeObjectField' || result.type === 'JsdocTypeJsdocObjectField' || result.type === 'JsdocTypeIndexSignature' || result.type === 'JsdocTypeMappedType') {\n      throw new UnexpectedTypeError(result);\n    }\n    return result;\n  }\n  function assertPlainKeyValueOrRootResult(result) {\n    if (result.type === 'JsdocTypeKeyValue') {\n      return assertPlainKeyValueResult(result);\n    }\n    return assertRootResult(result);\n  }\n  function assertPlainKeyValueOrNameResult(result) {\n    if (result.type === 'JsdocTypeName') {\n      return result;\n    }\n    return assertPlainKeyValueResult(result);\n  }\n  function assertPlainKeyValueResult(result) {\n    if (result.type !== 'JsdocTypeKeyValue') {\n      throw new UnexpectedTypeError(result);\n    }\n    return result;\n  }\n  function assertNumberOrVariadicNameResult(result) {\n    var _a;\n    if (result.type === 'JsdocTypeVariadic') {\n      if (((_a = result.element) === null || _a === void 0 ? void 0 : _a.type) === 'JsdocTypeName') {\n        return result;\n      }\n      throw new UnexpectedTypeError(result);\n    }\n    if (result.type !== 'JsdocTypeNumber' && result.type !== 'JsdocTypeName') {\n      throw new UnexpectedTypeError(result);\n    }\n    return result;\n  }\n  function isSquaredProperty(result) {\n    return result.type === 'JsdocTypeIndexSignature' || result.type === 'JsdocTypeMappedType';\n  }\n\n  // higher precedence = higher importance\n  var Precedence;\n  (function (Precedence) {\n    Precedence[Precedence[\"ALL\"] = 0] = \"ALL\";\n    Precedence[Precedence[\"PARAMETER_LIST\"] = 1] = \"PARAMETER_LIST\";\n    Precedence[Precedence[\"OBJECT\"] = 2] = \"OBJECT\";\n    Precedence[Precedence[\"KEY_VALUE\"] = 3] = \"KEY_VALUE\";\n    Precedence[Precedence[\"INDEX_BRACKETS\"] = 4] = \"INDEX_BRACKETS\";\n    Precedence[Precedence[\"UNION\"] = 5] = \"UNION\";\n    Precedence[Precedence[\"INTERSECTION\"] = 6] = \"INTERSECTION\";\n    Precedence[Precedence[\"PREFIX\"] = 7] = \"PREFIX\";\n    Precedence[Precedence[\"INFIX\"] = 8] = \"INFIX\";\n    Precedence[Precedence[\"TUPLE\"] = 9] = \"TUPLE\";\n    Precedence[Precedence[\"SYMBOL\"] = 10] = \"SYMBOL\";\n    Precedence[Precedence[\"OPTIONAL\"] = 11] = \"OPTIONAL\";\n    Precedence[Precedence[\"NULLABLE\"] = 12] = \"NULLABLE\";\n    Precedence[Precedence[\"KEY_OF_TYPE_OF\"] = 13] = \"KEY_OF_TYPE_OF\";\n    Precedence[Precedence[\"FUNCTION\"] = 14] = \"FUNCTION\";\n    Precedence[Precedence[\"ARROW\"] = 15] = \"ARROW\";\n    Precedence[Precedence[\"ARRAY_BRACKETS\"] = 16] = \"ARRAY_BRACKETS\";\n    Precedence[Precedence[\"GENERIC\"] = 17] = \"GENERIC\";\n    Precedence[Precedence[\"NAME_PATH\"] = 18] = \"NAME_PATH\";\n    Precedence[Precedence[\"PARENTHESIS\"] = 19] = \"PARENTHESIS\";\n    Precedence[Precedence[\"SPECIAL_TYPES\"] = 20] = \"SPECIAL_TYPES\";\n  })(Precedence || (Precedence = {}));\n  class Parser {\n    constructor(grammar, textOrLexer, baseParser) {\n      this.grammar = grammar;\n      if (typeof textOrLexer === 'string') {\n        this._lexer = Lexer.create(textOrLexer);\n      } else {\n        this._lexer = textOrLexer;\n      }\n      this.baseParser = baseParser;\n    }\n    get lexer() {\n      return this._lexer;\n    }\n    /**\n     * Parses a given string and throws an error if the parse ended before the end of the string.\n     */\n    parse() {\n      const result = this.parseType(Precedence.ALL);\n      if (this.lexer.current.type !== 'EOF') {\n        throw new EarlyEndOfParseError(this.lexer.current);\n      }\n      return result;\n    }\n    /**\n     * Parses with the current lexer and asserts that the result is a {@link RootResult}.\n     */\n    parseType(precedence) {\n      return assertRootResult(this.parseIntermediateType(precedence));\n    }\n    /**\n     * The main parsing function. First it tries to parse the current state in the prefix step, and then it continues\n     * to parse the state in the infix step.\n     */\n    parseIntermediateType(precedence) {\n      const result = this.tryParslets(null, precedence);\n      if (result === null) {\n        throw new NoParsletFoundError(this.lexer.current);\n      }\n      return this.parseInfixIntermediateType(result, precedence);\n    }\n    /**\n     * In the infix parsing step the parser continues to parse the current state with all parslets until none returns\n     * a result.\n     */\n    parseInfixIntermediateType(left, precedence) {\n      let result = this.tryParslets(left, precedence);\n      while (result !== null) {\n        left = result;\n        result = this.tryParslets(left, precedence);\n      }\n      return left;\n    }\n    /**\n     * Tries to parse the current state with all parslets in the grammar and returns the first non null result.\n     */\n    tryParslets(left, precedence) {\n      for (const parslet of this.grammar) {\n        const result = parslet(this, precedence, left);\n        if (result !== null) {\n          return result;\n        }\n      }\n      return null;\n    }\n    /**\n     * If the given type equals the current type of the {@link Lexer} advance the lexer. Return true if the lexer was\n     * advanced.\n     */\n    consume(types) {\n      if (!Array.isArray(types)) {\n        types = [types];\n      }\n      if (types.includes(this.lexer.current.type)) {\n        this._lexer = this.lexer.advance();\n        return true;\n      } else {\n        return false;\n      }\n    }\n    acceptLexerState(parser) {\n      this._lexer = parser.lexer;\n    }\n  }\n  function isQuestionMarkUnknownType(next) {\n    return next === 'EOF' || next === '|' || next === ',' || next === ')' || next === '>';\n  }\n  const nullableParslet = (parser, precedence, left) => {\n    const type = parser.lexer.current.type;\n    const next = parser.lexer.next.type;\n    const accept = left == null && type === '?' && !isQuestionMarkUnknownType(next) || left != null && type === '?';\n    if (!accept) {\n      return null;\n    }\n    parser.consume('?');\n    if (left == null) {\n      return {\n        type: 'JsdocTypeNullable',\n        element: parser.parseType(Precedence.NULLABLE),\n        meta: {\n          position: 'prefix'\n        }\n      };\n    } else {\n      return {\n        type: 'JsdocTypeNullable',\n        element: assertRootResult(left),\n        meta: {\n          position: 'suffix'\n        }\n      };\n    }\n  };\n  function composeParslet(options) {\n    const parslet = (parser, curPrecedence, left) => {\n      const type = parser.lexer.current.type;\n      const next = parser.lexer.next.type;\n      if (left === null) {\n        if ('parsePrefix' in options) {\n          if (options.accept(type, next)) {\n            return options.parsePrefix(parser);\n          }\n        }\n      } else {\n        if ('parseInfix' in options) {\n          if (options.precedence > curPrecedence && options.accept(type, next)) {\n            return options.parseInfix(parser, left);\n          }\n        }\n      }\n      return null;\n    };\n    // for debugging\n    Object.defineProperty(parslet, 'name', {\n      value: options.name\n    });\n    return parslet;\n  }\n  const optionalParslet = composeParslet({\n    name: 'optionalParslet',\n    accept: type => type === '=',\n    precedence: Precedence.OPTIONAL,\n    parsePrefix: parser => {\n      parser.consume('=');\n      return {\n        type: 'JsdocTypeOptional',\n        element: parser.parseType(Precedence.OPTIONAL),\n        meta: {\n          position: 'prefix'\n        }\n      };\n    },\n    parseInfix: (parser, left) => {\n      parser.consume('=');\n      return {\n        type: 'JsdocTypeOptional',\n        element: assertRootResult(left),\n        meta: {\n          position: 'suffix'\n        }\n      };\n    }\n  });\n  const numberParslet = composeParslet({\n    name: 'numberParslet',\n    accept: type => type === 'Number',\n    parsePrefix: parser => {\n      const value = parseFloat(parser.lexer.current.text);\n      parser.consume('Number');\n      return {\n        type: 'JsdocTypeNumber',\n        value\n      };\n    }\n  });\n  const parenthesisParslet = composeParslet({\n    name: 'parenthesisParslet',\n    accept: type => type === '(',\n    parsePrefix: parser => {\n      parser.consume('(');\n      if (parser.consume(')')) {\n        return {\n          type: 'JsdocTypeParameterList',\n          elements: []\n        };\n      }\n      const result = parser.parseIntermediateType(Precedence.ALL);\n      if (!parser.consume(')')) {\n        throw new Error('Unterminated parenthesis');\n      }\n      if (result.type === 'JsdocTypeParameterList') {\n        return result;\n      } else if (result.type === 'JsdocTypeKeyValue') {\n        return {\n          type: 'JsdocTypeParameterList',\n          elements: [result]\n        };\n      }\n      return {\n        type: 'JsdocTypeParenthesis',\n        element: assertRootResult(result)\n      };\n    }\n  });\n  const specialTypesParslet = composeParslet({\n    name: 'specialTypesParslet',\n    accept: (type, next) => type === '?' && isQuestionMarkUnknownType(next) || type === 'null' || type === 'undefined' || type === '*',\n    parsePrefix: parser => {\n      if (parser.consume('null')) {\n        return {\n          type: 'JsdocTypeNull'\n        };\n      }\n      if (parser.consume('undefined')) {\n        return {\n          type: 'JsdocTypeUndefined'\n        };\n      }\n      if (parser.consume('*')) {\n        return {\n          type: 'JsdocTypeAny'\n        };\n      }\n      if (parser.consume('?')) {\n        return {\n          type: 'JsdocTypeUnknown'\n        };\n      }\n      throw new Error('Unacceptable token: ' + parser.lexer.current.text);\n    }\n  });\n  const notNullableParslet = composeParslet({\n    name: 'notNullableParslet',\n    accept: type => type === '!',\n    precedence: Precedence.NULLABLE,\n    parsePrefix: parser => {\n      parser.consume('!');\n      return {\n        type: 'JsdocTypeNotNullable',\n        element: parser.parseType(Precedence.NULLABLE),\n        meta: {\n          position: 'prefix'\n        }\n      };\n    },\n    parseInfix: (parser, left) => {\n      parser.consume('!');\n      return {\n        type: 'JsdocTypeNotNullable',\n        element: assertRootResult(left),\n        meta: {\n          position: 'suffix'\n        }\n      };\n    }\n  });\n  function createParameterListParslet(_ref) {\n    let {\n      allowTrailingComma\n    } = _ref;\n    return composeParslet({\n      name: 'parameterListParslet',\n      accept: type => type === ',',\n      precedence: Precedence.PARAMETER_LIST,\n      parseInfix: (parser, left) => {\n        const elements = [assertPlainKeyValueOrRootResult(left)];\n        parser.consume(',');\n        do {\n          try {\n            const next = parser.parseIntermediateType(Precedence.PARAMETER_LIST);\n            elements.push(assertPlainKeyValueOrRootResult(next));\n          } catch (e) {\n            if (allowTrailingComma && e instanceof NoParsletFoundError) {\n              break;\n            } else {\n              throw e;\n            }\n          }\n        } while (parser.consume(','));\n        if (elements.length > 0 && elements.slice(0, -1).some(e => e.type === 'JsdocTypeVariadic')) {\n          throw new Error('Only the last parameter may be a rest parameter');\n        }\n        return {\n          type: 'JsdocTypeParameterList',\n          elements\n        };\n      }\n    });\n  }\n  const genericParslet = composeParslet({\n    name: 'genericParslet',\n    accept: (type, next) => type === '<' || type === '.' && next === '<',\n    precedence: Precedence.GENERIC,\n    parseInfix: (parser, left) => {\n      const dot = parser.consume('.');\n      parser.consume('<');\n      const objects = [];\n      do {\n        objects.push(parser.parseType(Precedence.PARAMETER_LIST));\n      } while (parser.consume(','));\n      if (!parser.consume('>')) {\n        throw new Error('Unterminated generic parameter list');\n      }\n      return {\n        type: 'JsdocTypeGeneric',\n        left: assertRootResult(left),\n        elements: objects,\n        meta: {\n          brackets: 'angle',\n          dot\n        }\n      };\n    }\n  });\n  const unionParslet = composeParslet({\n    name: 'unionParslet',\n    accept: type => type === '|',\n    precedence: Precedence.UNION,\n    parseInfix: (parser, left) => {\n      parser.consume('|');\n      const elements = [];\n      do {\n        elements.push(parser.parseType(Precedence.UNION));\n      } while (parser.consume('|'));\n      return {\n        type: 'JsdocTypeUnion',\n        elements: [assertRootResult(left), ...elements]\n      };\n    }\n  });\n  const baseGrammar = [nullableParslet, optionalParslet, numberParslet, parenthesisParslet, specialTypesParslet, notNullableParslet, createParameterListParslet({\n    allowTrailingComma: true\n  }), genericParslet, unionParslet, optionalParslet];\n  function createNamePathParslet(_ref2) {\n    let {\n      allowSquareBracketsOnAnyType,\n      allowJsdocNamePaths,\n      pathGrammar\n    } = _ref2;\n    return function namePathParslet(parser, precedence, left) {\n      if (left == null || precedence >= Precedence.NAME_PATH) {\n        return null;\n      }\n      const type = parser.lexer.current.type;\n      const next = parser.lexer.next.type;\n      const accept = type === '.' && next !== '<' || type === '[' && (allowSquareBracketsOnAnyType || left.type === 'JsdocTypeName') || allowJsdocNamePaths && (type === '~' || type === '#');\n      if (!accept) {\n        return null;\n      }\n      let pathType;\n      let brackets = false;\n      if (parser.consume('.')) {\n        pathType = 'property';\n      } else if (parser.consume('[')) {\n        pathType = 'property-brackets';\n        brackets = true;\n      } else if (parser.consume('~')) {\n        pathType = 'inner';\n      } else {\n        parser.consume('#');\n        pathType = 'instance';\n      }\n      const pathParser = pathGrammar !== null ? new Parser(pathGrammar, parser.lexer, parser) : parser;\n      const parsed = pathParser.parseIntermediateType(Precedence.NAME_PATH);\n      parser.acceptLexerState(pathParser);\n      let right;\n      switch (parsed.type) {\n        case 'JsdocTypeName':\n          right = {\n            type: 'JsdocTypeProperty',\n            value: parsed.value,\n            meta: {\n              quote: undefined\n            }\n          };\n          break;\n        case 'JsdocTypeNumber':\n          right = {\n            type: 'JsdocTypeProperty',\n            value: parsed.value.toString(10),\n            meta: {\n              quote: undefined\n            }\n          };\n          break;\n        case 'JsdocTypeStringValue':\n          right = {\n            type: 'JsdocTypeProperty',\n            value: parsed.value,\n            meta: {\n              quote: parsed.meta.quote\n            }\n          };\n          break;\n        case 'JsdocTypeSpecialNamePath':\n          if (parsed.specialType === 'event') {\n            right = parsed;\n          } else {\n            throw new UnexpectedTypeError(parsed, 'Type \\'JsdocTypeSpecialNamePath\\' is only allowed with specialType \\'event\\'');\n          }\n          break;\n        default:\n          throw new UnexpectedTypeError(parsed, 'Expecting \\'JsdocTypeName\\', \\'JsdocTypeNumber\\', \\'JsdocStringValue\\' or \\'JsdocTypeSpecialNamePath\\'');\n      }\n      if (brackets && !parser.consume(']')) {\n        const token = parser.lexer.current;\n        throw new Error(`Unterminated square brackets. Next token is '${token.type}' ` + `with text '${token.text}'`);\n      }\n      return {\n        type: 'JsdocTypeNamePath',\n        left: assertRootResult(left),\n        right,\n        pathType\n      };\n    };\n  }\n  function createNameParslet(_ref3) {\n    let {\n      allowedAdditionalTokens\n    } = _ref3;\n    return composeParslet({\n      name: 'nameParslet',\n      accept: type => type === 'Identifier' || type === 'this' || type === 'new' || allowedAdditionalTokens.includes(type),\n      parsePrefix: parser => {\n        const {\n          type,\n          text\n        } = parser.lexer.current;\n        parser.consume(type);\n        return {\n          type: 'JsdocTypeName',\n          value: text\n        };\n      }\n    });\n  }\n  const stringValueParslet = composeParslet({\n    name: 'stringValueParslet',\n    accept: type => type === 'StringValue',\n    parsePrefix: parser => {\n      const text = parser.lexer.current.text;\n      parser.consume('StringValue');\n      return {\n        type: 'JsdocTypeStringValue',\n        value: text.slice(1, -1),\n        meta: {\n          quote: text[0] === '\\'' ? 'single' : 'double'\n        }\n      };\n    }\n  });\n  function createSpecialNamePathParslet(_ref4) {\n    let {\n      pathGrammar,\n      allowedTypes\n    } = _ref4;\n    return composeParslet({\n      name: 'specialNamePathParslet',\n      accept: type => allowedTypes.includes(type),\n      parsePrefix: parser => {\n        const type = parser.lexer.current.type;\n        parser.consume(type);\n        if (!parser.consume(':')) {\n          return {\n            type: 'JsdocTypeName',\n            value: type\n          };\n        }\n        let result;\n        let token = parser.lexer.current;\n        if (parser.consume('StringValue')) {\n          result = {\n            type: 'JsdocTypeSpecialNamePath',\n            value: token.text.slice(1, -1),\n            specialType: type,\n            meta: {\n              quote: token.text[0] === '\\'' ? 'single' : 'double'\n            }\n          };\n        } else {\n          let value = '';\n          const allowed = ['Identifier', '@', '/'];\n          while (allowed.some(type => parser.consume(type))) {\n            value += token.text;\n            token = parser.lexer.current;\n          }\n          result = {\n            type: 'JsdocTypeSpecialNamePath',\n            value,\n            specialType: type,\n            meta: {\n              quote: undefined\n            }\n          };\n        }\n        const moduleParser = new Parser(pathGrammar, parser.lexer, parser);\n        const moduleResult = moduleParser.parseInfixIntermediateType(result, Precedence.ALL);\n        parser.acceptLexerState(moduleParser);\n        return assertRootResult(moduleResult);\n      }\n    });\n  }\n  const basePathGrammar = [createNameParslet({\n    allowedAdditionalTokens: ['external', 'module']\n  }), stringValueParslet, numberParslet, createNamePathParslet({\n    allowSquareBracketsOnAnyType: false,\n    allowJsdocNamePaths: true,\n    pathGrammar: null\n  })];\n  const pathGrammar = [...basePathGrammar, createSpecialNamePathParslet({\n    allowedTypes: ['event'],\n    pathGrammar: basePathGrammar\n  })];\n  function getParameters(value) {\n    let parameters;\n    if (value.type === 'JsdocTypeParameterList') {\n      parameters = value.elements;\n    } else if (value.type === 'JsdocTypeParenthesis') {\n      parameters = [value.element];\n    } else {\n      throw new UnexpectedTypeError(value);\n    }\n    return parameters.map(p => assertPlainKeyValueOrRootResult(p));\n  }\n  function getUnnamedParameters(value) {\n    const parameters = getParameters(value);\n    if (parameters.some(p => p.type === 'JsdocTypeKeyValue')) {\n      throw new Error('No parameter should be named');\n    }\n    return parameters;\n  }\n  function createFunctionParslet(_ref5) {\n    let {\n      allowNamedParameters,\n      allowNoReturnType,\n      allowWithoutParenthesis,\n      allowNewAsFunctionKeyword\n    } = _ref5;\n    return composeParslet({\n      name: 'functionParslet',\n      accept: (type, next) => type === 'function' || allowNewAsFunctionKeyword && type === 'new' && next === '(',\n      parsePrefix: parser => {\n        const newKeyword = parser.consume('new');\n        parser.consume('function');\n        const hasParenthesis = parser.lexer.current.type === '(';\n        if (!hasParenthesis) {\n          if (!allowWithoutParenthesis) {\n            throw new Error('function is missing parameter list');\n          }\n          return {\n            type: 'JsdocTypeName',\n            value: 'function'\n          };\n        }\n        let result = {\n          type: 'JsdocTypeFunction',\n          parameters: [],\n          arrow: false,\n          constructor: newKeyword,\n          parenthesis: hasParenthesis\n        };\n        const value = parser.parseIntermediateType(Precedence.FUNCTION);\n        if (allowNamedParameters === undefined) {\n          result.parameters = getUnnamedParameters(value);\n        } else if (newKeyword && value.type === 'JsdocTypeFunction' && value.arrow) {\n          result = value;\n          result.constructor = true;\n          return result;\n        } else {\n          result.parameters = getParameters(value);\n          for (const p of result.parameters) {\n            if (p.type === 'JsdocTypeKeyValue' && !allowNamedParameters.includes(p.key)) {\n              throw new Error(`only allowed named parameters are ${allowNamedParameters.join(', ')} but got ${p.type}`);\n            }\n          }\n        }\n        if (parser.consume(':')) {\n          result.returnType = parser.parseType(Precedence.PREFIX);\n        } else {\n          if (!allowNoReturnType) {\n            throw new Error('function is missing return type');\n          }\n        }\n        return result;\n      }\n    });\n  }\n  function createVariadicParslet(_ref6) {\n    let {\n      allowPostfix,\n      allowEnclosingBrackets\n    } = _ref6;\n    return composeParslet({\n      name: 'variadicParslet',\n      accept: type => type === '...',\n      precedence: Precedence.PREFIX,\n      parsePrefix: parser => {\n        parser.consume('...');\n        const brackets = allowEnclosingBrackets && parser.consume('[');\n        try {\n          const element = parser.parseType(Precedence.PREFIX);\n          if (brackets && !parser.consume(']')) {\n            throw new Error('Unterminated variadic type. Missing \\']\\'');\n          }\n          return {\n            type: 'JsdocTypeVariadic',\n            element: assertRootResult(element),\n            meta: {\n              position: 'prefix',\n              squareBrackets: brackets\n            }\n          };\n        } catch (e) {\n          if (e instanceof NoParsletFoundError) {\n            if (brackets) {\n              throw new Error('Empty square brackets for variadic are not allowed.');\n            }\n            return {\n              type: 'JsdocTypeVariadic',\n              meta: {\n                position: undefined,\n                squareBrackets: false\n              }\n            };\n          } else {\n            throw e;\n          }\n        }\n      },\n      parseInfix: allowPostfix ? (parser, left) => {\n        parser.consume('...');\n        return {\n          type: 'JsdocTypeVariadic',\n          element: assertRootResult(left),\n          meta: {\n            position: 'suffix',\n            squareBrackets: false\n          }\n        };\n      } : undefined\n    });\n  }\n  const symbolParslet = composeParslet({\n    name: 'symbolParslet',\n    accept: type => type === '(',\n    precedence: Precedence.SYMBOL,\n    parseInfix: (parser, left) => {\n      if (left.type !== 'JsdocTypeName') {\n        throw new Error('Symbol expects a name on the left side. (Reacting on \\'(\\')');\n      }\n      parser.consume('(');\n      const result = {\n        type: 'JsdocTypeSymbol',\n        value: left.value\n      };\n      if (!parser.consume(')')) {\n        const next = parser.parseIntermediateType(Precedence.SYMBOL);\n        result.element = assertNumberOrVariadicNameResult(next);\n        if (!parser.consume(')')) {\n          throw new Error('Symbol does not end after value');\n        }\n      }\n      return result;\n    }\n  });\n  const arrayBracketsParslet = composeParslet({\n    name: 'arrayBracketsParslet',\n    precedence: Precedence.ARRAY_BRACKETS,\n    accept: (type, next) => type === '[' && next === ']',\n    parseInfix: (parser, left) => {\n      parser.consume('[');\n      parser.consume(']');\n      return {\n        type: 'JsdocTypeGeneric',\n        left: {\n          type: 'JsdocTypeName',\n          value: 'Array'\n        },\n        elements: [assertRootResult(left)],\n        meta: {\n          brackets: 'square',\n          dot: false\n        }\n      };\n    }\n  });\n  function createObjectParslet(_ref7) {\n    let {\n      objectFieldGrammar,\n      allowKeyTypes\n    } = _ref7;\n    return composeParslet({\n      name: 'objectParslet',\n      accept: type => type === '{',\n      parsePrefix: parser => {\n        parser.consume('{');\n        const result = {\n          type: 'JsdocTypeObject',\n          meta: {\n            separator: 'comma'\n          },\n          elements: []\n        };\n        if (!parser.consume('}')) {\n          let separator;\n          const fieldParser = new Parser(objectFieldGrammar, parser.lexer, parser);\n          while (true) {\n            fieldParser.acceptLexerState(parser);\n            let field = fieldParser.parseIntermediateType(Precedence.OBJECT);\n            parser.acceptLexerState(fieldParser);\n            if (field === undefined && allowKeyTypes) {\n              field = parser.parseIntermediateType(Precedence.OBJECT);\n            }\n            let optional = false;\n            if (field.type === 'JsdocTypeNullable') {\n              optional = true;\n              field = field.element;\n            }\n            if (field.type === 'JsdocTypeNumber' || field.type === 'JsdocTypeName' || field.type === 'JsdocTypeStringValue') {\n              let quote;\n              if (field.type === 'JsdocTypeStringValue') {\n                quote = field.meta.quote;\n              }\n              result.elements.push({\n                type: 'JsdocTypeObjectField',\n                key: field.value.toString(),\n                right: undefined,\n                optional,\n                readonly: false,\n                meta: {\n                  quote\n                }\n              });\n            } else if (field.type === 'JsdocTypeObjectField' || field.type === 'JsdocTypeJsdocObjectField') {\n              result.elements.push(field);\n            } else {\n              throw new UnexpectedTypeError(field);\n            }\n            if (parser.lexer.current.startOfLine) {\n              separator = 'linebreak';\n            } else if (parser.consume(',')) {\n              separator = 'comma';\n            } else if (parser.consume(';')) {\n              separator = 'semicolon';\n            } else {\n              break;\n            }\n            const type = parser.lexer.current.type;\n            if (type === '}') {\n              break;\n            }\n          }\n          result.meta.separator = separator !== null && separator !== void 0 ? separator : 'comma'; // TODO: use undefined here\n          if (!parser.consume('}')) {\n            throw new Error('Unterminated record type. Missing \\'}\\'');\n          }\n        }\n        return result;\n      }\n    });\n  }\n  function createObjectFieldParslet(_ref8) {\n    let {\n      allowSquaredProperties,\n      allowKeyTypes,\n      allowReadonly,\n      allowOptional\n    } = _ref8;\n    return composeParslet({\n      name: 'objectFieldParslet',\n      precedence: Precedence.KEY_VALUE,\n      accept: type => type === ':',\n      parseInfix: (parser, left) => {\n        var _a;\n        let optional = false;\n        let readonlyProperty = false;\n        if (allowOptional && left.type === 'JsdocTypeNullable') {\n          optional = true;\n          left = left.element;\n        }\n        if (allowReadonly && left.type === 'JsdocTypeReadonlyProperty') {\n          readonlyProperty = true;\n          left = left.element;\n        }\n        // object parslet uses a special grammar and for the value we want to switch back to the parent\n        const parentParser = (_a = parser.baseParser) !== null && _a !== void 0 ? _a : parser;\n        parentParser.acceptLexerState(parser);\n        if (left.type === 'JsdocTypeNumber' || left.type === 'JsdocTypeName' || left.type === 'JsdocTypeStringValue' || isSquaredProperty(left)) {\n          if (isSquaredProperty(left) && !allowSquaredProperties) {\n            throw new UnexpectedTypeError(left);\n          }\n          parentParser.consume(':');\n          let quote;\n          if (left.type === 'JsdocTypeStringValue') {\n            quote = left.meta.quote;\n          }\n          const right = parentParser.parseType(Precedence.KEY_VALUE);\n          parser.acceptLexerState(parentParser);\n          return {\n            type: 'JsdocTypeObjectField',\n            key: isSquaredProperty(left) ? left : left.value.toString(),\n            right,\n            optional,\n            readonly: readonlyProperty,\n            meta: {\n              quote\n            }\n          };\n        } else {\n          if (!allowKeyTypes) {\n            throw new UnexpectedTypeError(left);\n          }\n          parentParser.consume(':');\n          const right = parentParser.parseType(Precedence.KEY_VALUE);\n          parser.acceptLexerState(parentParser);\n          return {\n            type: 'JsdocTypeJsdocObjectField',\n            left: assertRootResult(left),\n            right\n          };\n        }\n      }\n    });\n  }\n  function createKeyValueParslet(_ref9) {\n    let {\n      allowOptional,\n      allowVariadic\n    } = _ref9;\n    return composeParslet({\n      name: 'keyValueParslet',\n      precedence: Precedence.KEY_VALUE,\n      accept: type => type === ':',\n      parseInfix: (parser, left) => {\n        let optional = false;\n        let variadic = false;\n        if (allowOptional && left.type === 'JsdocTypeNullable') {\n          optional = true;\n          left = left.element;\n        }\n        if (allowVariadic && left.type === 'JsdocTypeVariadic' && left.element !== undefined) {\n          variadic = true;\n          left = left.element;\n        }\n        if (left.type !== 'JsdocTypeName') {\n          throw new UnexpectedTypeError(left);\n        }\n        parser.consume(':');\n        const right = parser.parseType(Precedence.KEY_VALUE);\n        return {\n          type: 'JsdocTypeKeyValue',\n          key: left.value,\n          right,\n          optional,\n          variadic\n        };\n      }\n    });\n  }\n  const jsdocBaseGrammar = [...baseGrammar, createFunctionParslet({\n    allowWithoutParenthesis: true,\n    allowNamedParameters: ['this', 'new'],\n    allowNoReturnType: true,\n    allowNewAsFunctionKeyword: false\n  }), stringValueParslet, createSpecialNamePathParslet({\n    allowedTypes: ['module', 'external', 'event'],\n    pathGrammar\n  }), createVariadicParslet({\n    allowEnclosingBrackets: true,\n    allowPostfix: true\n  }), createNameParslet({\n    allowedAdditionalTokens: ['keyof']\n  }), symbolParslet, arrayBracketsParslet, createNamePathParslet({\n    allowSquareBracketsOnAnyType: false,\n    allowJsdocNamePaths: true,\n    pathGrammar\n  })];\n  const jsdocGrammar = [...jsdocBaseGrammar, createObjectParslet({\n    // jsdoc syntax allows full types as keys, so we need to pull in the full grammar here\n    // we leave out the object type deliberately\n    objectFieldGrammar: [createNameParslet({\n      allowedAdditionalTokens: ['module', 'in']\n    }), createObjectFieldParslet({\n      allowSquaredProperties: false,\n      allowKeyTypes: true,\n      allowOptional: false,\n      allowReadonly: false\n    }), ...jsdocBaseGrammar],\n    allowKeyTypes: true\n  }), createKeyValueParslet({\n    allowOptional: true,\n    allowVariadic: true\n  })];\n  const typeOfParslet = composeParslet({\n    name: 'typeOfParslet',\n    accept: type => type === 'typeof',\n    parsePrefix: parser => {\n      parser.consume('typeof');\n      return {\n        type: 'JsdocTypeTypeof',\n        element: assertRootResult(parser.parseType(Precedence.KEY_OF_TYPE_OF))\n      };\n    }\n  });\n  const objectFieldGrammar$1 = [createNameParslet({\n    allowedAdditionalTokens: ['module', 'keyof', 'event', 'external', 'in']\n  }), nullableParslet, optionalParslet, stringValueParslet, numberParslet, createObjectFieldParslet({\n    allowSquaredProperties: false,\n    allowKeyTypes: false,\n    allowOptional: false,\n    allowReadonly: false\n  })];\n  const closureGrammar = [...baseGrammar, createObjectParslet({\n    allowKeyTypes: false,\n    objectFieldGrammar: objectFieldGrammar$1\n  }), createNameParslet({\n    allowedAdditionalTokens: ['event', 'external', 'in']\n  }), typeOfParslet, createFunctionParslet({\n    allowWithoutParenthesis: false,\n    allowNamedParameters: ['this', 'new'],\n    allowNoReturnType: true,\n    allowNewAsFunctionKeyword: false\n  }), createVariadicParslet({\n    allowEnclosingBrackets: false,\n    allowPostfix: false\n  }),\n  // additional name parslet is needed for some special cases\n  createNameParslet({\n    allowedAdditionalTokens: ['keyof']\n  }), createSpecialNamePathParslet({\n    allowedTypes: ['module'],\n    pathGrammar\n  }), createNamePathParslet({\n    allowSquareBracketsOnAnyType: false,\n    allowJsdocNamePaths: true,\n    pathGrammar\n  }), createKeyValueParslet({\n    allowOptional: false,\n    allowVariadic: false\n  }), symbolParslet];\n  const assertsParslet = composeParslet({\n    name: 'assertsParslet',\n    accept: type => type === 'asserts',\n    parsePrefix: parser => {\n      parser.consume('asserts');\n      const left = parser.parseIntermediateType(Precedence.SYMBOL);\n      if (left.type !== 'JsdocTypeName') {\n        throw new UnexpectedTypeError(left, 'A typescript asserts always has to have a name on the left side.');\n      }\n      parser.consume('is');\n      return {\n        type: 'JsdocTypeAsserts',\n        left,\n        right: assertRootResult(parser.parseIntermediateType(Precedence.INFIX))\n      };\n    }\n  });\n  function createTupleParslet(_ref10) {\n    let {\n      allowQuestionMark\n    } = _ref10;\n    return composeParslet({\n      name: 'tupleParslet',\n      accept: type => type === '[',\n      parsePrefix: parser => {\n        parser.consume('[');\n        const result = {\n          type: 'JsdocTypeTuple',\n          elements: []\n        };\n        if (parser.consume(']')) {\n          return result;\n        }\n        const typeList = parser.parseIntermediateType(Precedence.ALL);\n        if (typeList.type === 'JsdocTypeParameterList') {\n          if (typeList.elements[0].type === 'JsdocTypeKeyValue') {\n            result.elements = typeList.elements.map(assertPlainKeyValueResult);\n          } else {\n            result.elements = typeList.elements.map(assertRootResult);\n          }\n        } else {\n          if (typeList.type === 'JsdocTypeKeyValue') {\n            result.elements = [assertPlainKeyValueResult(typeList)];\n          } else {\n            result.elements = [assertRootResult(typeList)];\n          }\n        }\n        if (!parser.consume(']')) {\n          throw new Error('Unterminated \\'[\\'');\n        }\n        if (!allowQuestionMark && result.elements.some(e => e.type === 'JsdocTypeUnknown')) {\n          throw new Error('Question mark in tuple not allowed');\n        }\n        return result;\n      }\n    });\n  }\n  const keyOfParslet = composeParslet({\n    name: 'keyOfParslet',\n    accept: type => type === 'keyof',\n    parsePrefix: parser => {\n      parser.consume('keyof');\n      return {\n        type: 'JsdocTypeKeyof',\n        element: assertRootResult(parser.parseType(Precedence.KEY_OF_TYPE_OF))\n      };\n    }\n  });\n  const importParslet = composeParslet({\n    name: 'importParslet',\n    accept: type => type === 'import',\n    parsePrefix: parser => {\n      parser.consume('import');\n      if (!parser.consume('(')) {\n        throw new Error('Missing parenthesis after import keyword');\n      }\n      const path = parser.parseType(Precedence.PREFIX);\n      if (path.type !== 'JsdocTypeStringValue') {\n        throw new Error('Only string values are allowed as paths for imports');\n      }\n      if (!parser.consume(')')) {\n        throw new Error('Missing closing parenthesis after import keyword');\n      }\n      return {\n        type: 'JsdocTypeImport',\n        element: path\n      };\n    }\n  });\n  const readonlyPropertyParslet = composeParslet({\n    name: 'readonlyPropertyParslet',\n    accept: type => type === 'readonly',\n    parsePrefix: parser => {\n      parser.consume('readonly');\n      return {\n        type: 'JsdocTypeReadonlyProperty',\n        element: parser.parseType(Precedence.KEY_VALUE)\n      };\n    }\n  });\n  const arrowFunctionParslet = composeParslet({\n    name: 'arrowFunctionParslet',\n    precedence: Precedence.ARROW,\n    accept: type => type === '=>',\n    parseInfix: (parser, left) => {\n      parser.consume('=>');\n      return {\n        type: 'JsdocTypeFunction',\n        parameters: getParameters(left).map(assertPlainKeyValueOrNameResult),\n        arrow: true,\n        constructor: false,\n        parenthesis: true,\n        returnType: parser.parseType(Precedence.OBJECT)\n      };\n    }\n  });\n  const intersectionParslet = composeParslet({\n    name: 'intersectionParslet',\n    accept: type => type === '&',\n    precedence: Precedence.INTERSECTION,\n    parseInfix: (parser, left) => {\n      parser.consume('&');\n      const elements = [];\n      do {\n        elements.push(parser.parseType(Precedence.INTERSECTION));\n      } while (parser.consume('&'));\n      return {\n        type: 'JsdocTypeIntersection',\n        elements: [assertRootResult(left), ...elements]\n      };\n    }\n  });\n  const predicateParslet = composeParslet({\n    name: 'predicateParslet',\n    precedence: Precedence.INFIX,\n    accept: type => type === 'is',\n    parseInfix: (parser, left) => {\n      if (left.type !== 'JsdocTypeName') {\n        throw new UnexpectedTypeError(left, 'A typescript predicate always has to have a name on the left side.');\n      }\n      parser.consume('is');\n      return {\n        type: 'JsdocTypePredicate',\n        left,\n        right: assertRootResult(parser.parseIntermediateType(Precedence.INFIX))\n      };\n    }\n  });\n  const objectSquaredPropertyParslet = composeParslet({\n    name: 'objectSquareBracketPropertyParslet',\n    accept: type => type === '[',\n    parsePrefix: parser => {\n      if (parser.baseParser === undefined) {\n        throw new Error('Only allowed inside object grammar');\n      }\n      parser.consume('[');\n      const key = parser.lexer.current.text;\n      parser.consume('Identifier');\n      let result;\n      if (parser.consume(':')) {\n        const parentParser = parser.baseParser;\n        parentParser.acceptLexerState(parser);\n        result = {\n          type: 'JsdocTypeIndexSignature',\n          key,\n          right: parentParser.parseType(Precedence.INDEX_BRACKETS)\n        };\n        parser.acceptLexerState(parentParser);\n      } else if (parser.consume('in')) {\n        const parentParser = parser.baseParser;\n        parentParser.acceptLexerState(parser);\n        result = {\n          type: 'JsdocTypeMappedType',\n          key,\n          right: parentParser.parseType(Precedence.ARRAY_BRACKETS)\n        };\n        parser.acceptLexerState(parentParser);\n      } else {\n        throw new Error('Missing \\':\\' or \\'in\\' inside square bracketed property.');\n      }\n      if (!parser.consume(']')) {\n        throw new Error('Unterminated square brackets');\n      }\n      return result;\n    }\n  });\n  const objectFieldGrammar = [readonlyPropertyParslet, createNameParslet({\n    allowedAdditionalTokens: ['module', 'event', 'keyof', 'event', 'external', 'in']\n  }), nullableParslet, optionalParslet, stringValueParslet, numberParslet, createObjectFieldParslet({\n    allowSquaredProperties: true,\n    allowKeyTypes: false,\n    allowOptional: true,\n    allowReadonly: true\n  }), objectSquaredPropertyParslet];\n  const typescriptGrammar = [...baseGrammar, createObjectParslet({\n    allowKeyTypes: false,\n    objectFieldGrammar\n  }), typeOfParslet, keyOfParslet, importParslet, stringValueParslet, createFunctionParslet({\n    allowWithoutParenthesis: true,\n    allowNoReturnType: false,\n    allowNamedParameters: ['this', 'new', 'args'],\n    allowNewAsFunctionKeyword: true\n  }), createTupleParslet({\n    allowQuestionMark: false\n  }), createVariadicParslet({\n    allowEnclosingBrackets: false,\n    allowPostfix: false\n  }), assertsParslet, createNameParslet({\n    allowedAdditionalTokens: ['event', 'external', 'in']\n  }), createSpecialNamePathParslet({\n    allowedTypes: ['module'],\n    pathGrammar\n  }), arrayBracketsParslet, arrowFunctionParslet, createNamePathParslet({\n    allowSquareBracketsOnAnyType: true,\n    allowJsdocNamePaths: false,\n    pathGrammar\n  }), intersectionParslet, predicateParslet, createKeyValueParslet({\n    allowVariadic: true,\n    allowOptional: true\n  })];\n\n  /**\n   * This function parses the given expression in the given mode and produces a {@link RootResult}.\n   * @param expression\n   * @param mode\n   */\n  function parse(expression, mode) {\n    switch (mode) {\n      case 'closure':\n        return new Parser(closureGrammar, expression).parse();\n      case 'jsdoc':\n        return new Parser(jsdocGrammar, expression).parse();\n      case 'typescript':\n        return new Parser(typescriptGrammar, expression).parse();\n    }\n  }\n  /**\n   * This function tries to parse the given expression in multiple modes and returns the first successful\n   * {@link RootResult}. By default it tries `'typescript'`, `'closure'` and `'jsdoc'` in this order. If\n   * no mode was successful it throws the error that was produced by the last parsing attempt.\n   * @param expression\n   * @param modes\n   */\n  function tryParse(expression) {\n    let modes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ['typescript', 'closure', 'jsdoc'];\n    let error;\n    for (const mode of modes) {\n      try {\n        return parse(expression, mode);\n      } catch (e) {\n        error = e;\n      }\n    }\n    throw error;\n  }\n  function transform(rules, parseResult) {\n    const rule = rules[parseResult.type];\n    if (rule === undefined) {\n      throw new Error(`In this set of transform rules exists no rule for type ${parseResult.type}.`);\n    }\n    return rule(parseResult, aParseResult => transform(rules, aParseResult));\n  }\n  function notAvailableTransform(parseResult) {\n    throw new Error('This transform is not available. Are you trying the correct parsing mode?');\n  }\n  function extractSpecialParams(source) {\n    const result = {\n      params: []\n    };\n    for (const param of source.parameters) {\n      if (param.type === 'JsdocTypeKeyValue') {\n        if (param.key === 'this') {\n          result.this = param.right;\n        } else if (param.key === 'new') {\n          result.new = param.right;\n        } else {\n          result.params.push(param);\n        }\n      } else {\n        result.params.push(param);\n      }\n    }\n    return result;\n  }\n  function applyPosition(position, target, value) {\n    return position === 'prefix' ? value + target : target + value;\n  }\n  function quote(value, quote) {\n    switch (quote) {\n      case 'double':\n        return `\"${value}\"`;\n      case 'single':\n        return `'${value}'`;\n      case undefined:\n        return value;\n    }\n  }\n  function stringifyRules() {\n    return {\n      JsdocTypeParenthesis: (result, transform) => `(${result.element !== undefined ? transform(result.element) : ''})`,\n      JsdocTypeKeyof: (result, transform) => `keyof ${transform(result.element)}`,\n      JsdocTypeFunction: (result, transform) => {\n        if (!result.arrow) {\n          let stringified = result.constructor ? 'new' : 'function';\n          if (!result.parenthesis) {\n            return stringified;\n          }\n          stringified += `(${result.parameters.map(transform).join(', ')})`;\n          if (result.returnType !== undefined) {\n            stringified += `: ${transform(result.returnType)}`;\n          }\n          return stringified;\n        } else {\n          if (result.returnType === undefined) {\n            throw new Error('Arrow function needs a return type.');\n          }\n          let stringified = `(${result.parameters.map(transform).join(', ')}) => ${transform(result.returnType)}`;\n          if (result.constructor) {\n            stringified = 'new ' + stringified;\n          }\n          return stringified;\n        }\n      },\n      JsdocTypeName: result => result.value,\n      JsdocTypeTuple: (result, transform) => `[${result.elements.map(transform).join(', ')}]`,\n      JsdocTypeVariadic: (result, transform) => result.meta.position === undefined ? '...' : applyPosition(result.meta.position, transform(result.element), '...'),\n      JsdocTypeNamePath: (result, transform) => {\n        const left = transform(result.left);\n        const right = transform(result.right);\n        switch (result.pathType) {\n          case 'inner':\n            return `${left}~${right}`;\n          case 'instance':\n            return `${left}#${right}`;\n          case 'property':\n            return `${left}.${right}`;\n          case 'property-brackets':\n            return `${left}[${right}]`;\n        }\n      },\n      JsdocTypeStringValue: result => quote(result.value, result.meta.quote),\n      JsdocTypeAny: () => '*',\n      JsdocTypeGeneric: (result, transform) => {\n        if (result.meta.brackets === 'square') {\n          const element = result.elements[0];\n          const transformed = transform(element);\n          if (element.type === 'JsdocTypeUnion' || element.type === 'JsdocTypeIntersection') {\n            return `(${transformed})[]`;\n          } else {\n            return `${transformed}[]`;\n          }\n        } else {\n          return `${transform(result.left)}${result.meta.dot ? '.' : ''}<${result.elements.map(transform).join(', ')}>`;\n        }\n      },\n      JsdocTypeImport: (result, transform) => `import(${transform(result.element)})`,\n      JsdocTypeObjectField: (result, transform) => {\n        let text = '';\n        if (result.readonly) {\n          text += 'readonly ';\n        }\n        if (typeof result.key === 'string') {\n          text += quote(result.key, result.meta.quote);\n        } else {\n          text += transform(result.key);\n        }\n        if (result.optional) {\n          text += '?';\n        }\n        if (result.right === undefined) {\n          return text;\n        } else {\n          return text + `: ${transform(result.right)}`;\n        }\n      },\n      JsdocTypeJsdocObjectField: (result, transform) => {\n        return `${transform(result.left)}: ${transform(result.right)}`;\n      },\n      JsdocTypeKeyValue: (result, transform) => {\n        let text = result.key;\n        if (result.optional) {\n          text += '?';\n        }\n        if (result.variadic) {\n          text = '...' + text;\n        }\n        if (result.right === undefined) {\n          return text;\n        } else {\n          return text + `: ${transform(result.right)}`;\n        }\n      },\n      JsdocTypeSpecialNamePath: result => `${result.specialType}:${quote(result.value, result.meta.quote)}`,\n      JsdocTypeNotNullable: (result, transform) => applyPosition(result.meta.position, transform(result.element), '!'),\n      JsdocTypeNull: () => 'null',\n      JsdocTypeNullable: (result, transform) => applyPosition(result.meta.position, transform(result.element), '?'),\n      JsdocTypeNumber: result => result.value.toString(),\n      JsdocTypeObject: (result, transform) => `{${result.elements.map(transform).join((result.meta.separator === 'comma' ? ',' : ';') + ' ')}}`,\n      JsdocTypeOptional: (result, transform) => applyPosition(result.meta.position, transform(result.element), '='),\n      JsdocTypeSymbol: (result, transform) => `${result.value}(${result.element !== undefined ? transform(result.element) : ''})`,\n      JsdocTypeTypeof: (result, transform) => `typeof ${transform(result.element)}`,\n      JsdocTypeUndefined: () => 'undefined',\n      JsdocTypeUnion: (result, transform) => result.elements.map(transform).join(' | '),\n      JsdocTypeUnknown: () => '?',\n      JsdocTypeIntersection: (result, transform) => result.elements.map(transform).join(' & '),\n      JsdocTypeProperty: result => quote(result.value, result.meta.quote),\n      JsdocTypePredicate: (result, transform) => `${transform(result.left)} is ${transform(result.right)}`,\n      JsdocTypeIndexSignature: (result, transform) => `[${result.key}: ${transform(result.right)}]`,\n      JsdocTypeMappedType: (result, transform) => `[${result.key} in ${transform(result.right)}]`,\n      JsdocTypeAsserts: (result, transform) => `asserts ${transform(result.left)} is ${transform(result.right)}`\n    };\n  }\n  const storedStringifyRules = stringifyRules();\n  function stringify(result) {\n    return transform(storedStringifyRules, result);\n  }\n  const reservedWords = ['null', 'true', 'false', 'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'export', 'extends', 'finally', 'for', 'function', 'if', 'import', 'in', 'instanceof', 'new', 'return', 'super', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield'];\n  function makeName(value) {\n    const result = {\n      type: 'NameExpression',\n      name: value\n    };\n    if (reservedWords.includes(value)) {\n      result.reservedWord = true;\n    }\n    return result;\n  }\n  const catharsisTransformRules = {\n    JsdocTypeOptional: (result, transform) => {\n      const transformed = transform(result.element);\n      transformed.optional = true;\n      return transformed;\n    },\n    JsdocTypeNullable: (result, transform) => {\n      const transformed = transform(result.element);\n      transformed.nullable = true;\n      return transformed;\n    },\n    JsdocTypeNotNullable: (result, transform) => {\n      const transformed = transform(result.element);\n      transformed.nullable = false;\n      return transformed;\n    },\n    JsdocTypeVariadic: (result, transform) => {\n      if (result.element === undefined) {\n        throw new Error('dots without value are not allowed in catharsis mode');\n      }\n      const transformed = transform(result.element);\n      transformed.repeatable = true;\n      return transformed;\n    },\n    JsdocTypeAny: () => ({\n      type: 'AllLiteral'\n    }),\n    JsdocTypeNull: () => ({\n      type: 'NullLiteral'\n    }),\n    JsdocTypeStringValue: result => makeName(quote(result.value, result.meta.quote)),\n    JsdocTypeUndefined: () => ({\n      type: 'UndefinedLiteral'\n    }),\n    JsdocTypeUnknown: () => ({\n      type: 'UnknownLiteral'\n    }),\n    JsdocTypeFunction: (result, transform) => {\n      const params = extractSpecialParams(result);\n      const transformed = {\n        type: 'FunctionType',\n        params: params.params.map(transform)\n      };\n      if (params.this !== undefined) {\n        transformed.this = transform(params.this);\n      }\n      if (params.new !== undefined) {\n        transformed.new = transform(params.new);\n      }\n      if (result.returnType !== undefined) {\n        transformed.result = transform(result.returnType);\n      }\n      return transformed;\n    },\n    JsdocTypeGeneric: (result, transform) => ({\n      type: 'TypeApplication',\n      applications: result.elements.map(o => transform(o)),\n      expression: transform(result.left)\n    }),\n    JsdocTypeSpecialNamePath: result => makeName(result.specialType + ':' + quote(result.value, result.meta.quote)),\n    JsdocTypeName: result => {\n      if (result.value !== 'function') {\n        return makeName(result.value);\n      } else {\n        return {\n          type: 'FunctionType',\n          params: []\n        };\n      }\n    },\n    JsdocTypeNumber: result => makeName(result.value.toString()),\n    JsdocTypeObject: (result, transform) => {\n      const transformed = {\n        type: 'RecordType',\n        fields: []\n      };\n      for (const field of result.elements) {\n        if (field.type !== 'JsdocTypeObjectField' && field.type !== 'JsdocTypeJsdocObjectField') {\n          transformed.fields.push({\n            type: 'FieldType',\n            key: transform(field),\n            value: undefined\n          });\n        } else {\n          transformed.fields.push(transform(field));\n        }\n      }\n      return transformed;\n    },\n    JsdocTypeObjectField: (result, transform) => {\n      if (typeof result.key !== 'string') {\n        throw new Error('Index signatures and mapped types are not supported');\n      }\n      return {\n        type: 'FieldType',\n        key: makeName(quote(result.key, result.meta.quote)),\n        value: result.right === undefined ? undefined : transform(result.right)\n      };\n    },\n    JsdocTypeJsdocObjectField: (result, transform) => ({\n      type: 'FieldType',\n      key: transform(result.left),\n      value: transform(result.right)\n    }),\n    JsdocTypeUnion: (result, transform) => ({\n      type: 'TypeUnion',\n      elements: result.elements.map(e => transform(e))\n    }),\n    JsdocTypeKeyValue: (result, transform) => {\n      return {\n        type: 'FieldType',\n        key: makeName(result.key),\n        value: result.right === undefined ? undefined : transform(result.right)\n      };\n    },\n    JsdocTypeNamePath: (result, transform) => {\n      const leftResult = transform(result.left);\n      let rightValue;\n      if (result.right.type === 'JsdocTypeSpecialNamePath') {\n        rightValue = transform(result.right).name;\n      } else {\n        rightValue = quote(result.right.value, result.right.meta.quote);\n      }\n      const joiner = result.pathType === 'inner' ? '~' : result.pathType === 'instance' ? '#' : '.';\n      return makeName(`${leftResult.name}${joiner}${rightValue}`);\n    },\n    JsdocTypeSymbol: result => {\n      let value = '';\n      let element = result.element;\n      let trailingDots = false;\n      if ((element === null || element === void 0 ? void 0 : element.type) === 'JsdocTypeVariadic') {\n        if (element.meta.position === 'prefix') {\n          value = '...';\n        } else {\n          trailingDots = true;\n        }\n        element = element.element;\n      }\n      if ((element === null || element === void 0 ? void 0 : element.type) === 'JsdocTypeName') {\n        value += element.value;\n      } else if ((element === null || element === void 0 ? void 0 : element.type) === 'JsdocTypeNumber') {\n        value += element.value.toString();\n      }\n      if (trailingDots) {\n        value += '...';\n      }\n      return makeName(`${result.value}(${value})`);\n    },\n    JsdocTypeParenthesis: (result, transform) => transform(assertRootResult(result.element)),\n    JsdocTypeMappedType: notAvailableTransform,\n    JsdocTypeIndexSignature: notAvailableTransform,\n    JsdocTypeImport: notAvailableTransform,\n    JsdocTypeKeyof: notAvailableTransform,\n    JsdocTypeTuple: notAvailableTransform,\n    JsdocTypeTypeof: notAvailableTransform,\n    JsdocTypeIntersection: notAvailableTransform,\n    JsdocTypeProperty: notAvailableTransform,\n    JsdocTypePredicate: notAvailableTransform,\n    JsdocTypeAsserts: notAvailableTransform\n  };\n  function catharsisTransform(result) {\n    return transform(catharsisTransformRules, result);\n  }\n  function getQuoteStyle(quote) {\n    switch (quote) {\n      case undefined:\n        return 'none';\n      case 'single':\n        return 'single';\n      case 'double':\n        return 'double';\n    }\n  }\n  function getMemberType(type) {\n    switch (type) {\n      case 'inner':\n        return 'INNER_MEMBER';\n      case 'instance':\n        return 'INSTANCE_MEMBER';\n      case 'property':\n        return 'MEMBER';\n      case 'property-brackets':\n        return 'MEMBER';\n    }\n  }\n  function nestResults(type, results) {\n    if (results.length === 2) {\n      return {\n        type,\n        left: results[0],\n        right: results[1]\n      };\n    } else {\n      return {\n        type,\n        left: results[0],\n        right: nestResults(type, results.slice(1))\n      };\n    }\n  }\n  const jtpRules = {\n    JsdocTypeOptional: (result, transform) => ({\n      type: 'OPTIONAL',\n      value: transform(result.element),\n      meta: {\n        syntax: result.meta.position === 'prefix' ? 'PREFIX_EQUAL_SIGN' : 'SUFFIX_EQUALS_SIGN'\n      }\n    }),\n    JsdocTypeNullable: (result, transform) => ({\n      type: 'NULLABLE',\n      value: transform(result.element),\n      meta: {\n        syntax: result.meta.position === 'prefix' ? 'PREFIX_QUESTION_MARK' : 'SUFFIX_QUESTION_MARK'\n      }\n    }),\n    JsdocTypeNotNullable: (result, transform) => ({\n      type: 'NOT_NULLABLE',\n      value: transform(result.element),\n      meta: {\n        syntax: result.meta.position === 'prefix' ? 'PREFIX_BANG' : 'SUFFIX_BANG'\n      }\n    }),\n    JsdocTypeVariadic: (result, transform) => {\n      const transformed = {\n        type: 'VARIADIC',\n        meta: {\n          syntax: result.meta.position === 'prefix' ? 'PREFIX_DOTS' : result.meta.position === 'suffix' ? 'SUFFIX_DOTS' : 'ONLY_DOTS'\n        }\n      };\n      if (result.element !== undefined) {\n        transformed.value = transform(result.element);\n      }\n      return transformed;\n    },\n    JsdocTypeName: result => ({\n      type: 'NAME',\n      name: result.value\n    }),\n    JsdocTypeTypeof: (result, transform) => ({\n      type: 'TYPE_QUERY',\n      name: transform(result.element)\n    }),\n    JsdocTypeTuple: (result, transform) => ({\n      type: 'TUPLE',\n      entries: result.elements.map(transform)\n    }),\n    JsdocTypeKeyof: (result, transform) => ({\n      type: 'KEY_QUERY',\n      value: transform(result.element)\n    }),\n    JsdocTypeImport: result => ({\n      type: 'IMPORT',\n      path: {\n        type: 'STRING_VALUE',\n        quoteStyle: getQuoteStyle(result.element.meta.quote),\n        string: result.element.value\n      }\n    }),\n    JsdocTypeUndefined: () => ({\n      type: 'NAME',\n      name: 'undefined'\n    }),\n    JsdocTypeAny: () => ({\n      type: 'ANY'\n    }),\n    JsdocTypeFunction: (result, transform) => {\n      const specialParams = extractSpecialParams(result);\n      const transformed = {\n        type: result.arrow ? 'ARROW' : 'FUNCTION',\n        params: specialParams.params.map(param => {\n          if (param.type === 'JsdocTypeKeyValue') {\n            if (param.right === undefined) {\n              throw new Error('Function parameter without \\':\\' is not expected to be \\'KEY_VALUE\\'');\n            }\n            return {\n              type: 'NAMED_PARAMETER',\n              name: param.key,\n              typeName: transform(param.right)\n            };\n          } else {\n            return transform(param);\n          }\n        }),\n        new: null,\n        returns: null\n      };\n      if (specialParams.this !== undefined) {\n        transformed.this = transform(specialParams.this);\n      } else if (!result.arrow) {\n        transformed.this = null;\n      }\n      if (specialParams.new !== undefined) {\n        transformed.new = transform(specialParams.new);\n      }\n      if (result.returnType !== undefined) {\n        transformed.returns = transform(result.returnType);\n      }\n      return transformed;\n    },\n    JsdocTypeGeneric: (result, transform) => {\n      const transformed = {\n        type: 'GENERIC',\n        subject: transform(result.left),\n        objects: result.elements.map(transform),\n        meta: {\n          syntax: result.meta.brackets === 'square' ? 'SQUARE_BRACKET' : result.meta.dot ? 'ANGLE_BRACKET_WITH_DOT' : 'ANGLE_BRACKET'\n        }\n      };\n      if (result.meta.brackets === 'square' && result.elements[0].type === 'JsdocTypeFunction' && !result.elements[0].parenthesis) {\n        transformed.objects[0] = {\n          type: 'NAME',\n          name: 'function'\n        };\n      }\n      return transformed;\n    },\n    JsdocTypeObjectField: (result, transform) => {\n      if (typeof result.key !== 'string') {\n        throw new Error('Index signatures and mapped types are not supported');\n      }\n      if (result.right === undefined) {\n        return {\n          type: 'RECORD_ENTRY',\n          key: result.key,\n          quoteStyle: getQuoteStyle(result.meta.quote),\n          value: null,\n          readonly: false\n        };\n      }\n      let right = transform(result.right);\n      if (result.optional) {\n        right = {\n          type: 'OPTIONAL',\n          value: right,\n          meta: {\n            syntax: 'SUFFIX_KEY_QUESTION_MARK'\n          }\n        };\n      }\n      return {\n        type: 'RECORD_ENTRY',\n        key: result.key.toString(),\n        quoteStyle: getQuoteStyle(result.meta.quote),\n        value: right,\n        readonly: false\n      };\n    },\n    JsdocTypeJsdocObjectField: () => {\n      throw new Error('Keys may not be typed in jsdoctypeparser.');\n    },\n    JsdocTypeKeyValue: (result, transform) => {\n      if (result.right === undefined) {\n        return {\n          type: 'RECORD_ENTRY',\n          key: result.key,\n          quoteStyle: 'none',\n          value: null,\n          readonly: false\n        };\n      }\n      let right = transform(result.right);\n      if (result.optional) {\n        right = {\n          type: 'OPTIONAL',\n          value: right,\n          meta: {\n            syntax: 'SUFFIX_KEY_QUESTION_MARK'\n          }\n        };\n      }\n      return {\n        type: 'RECORD_ENTRY',\n        key: result.key,\n        quoteStyle: 'none',\n        value: right,\n        readonly: false\n      };\n    },\n    JsdocTypeObject: (result, transform) => {\n      const entries = [];\n      for (const field of result.elements) {\n        if (field.type === 'JsdocTypeObjectField' || field.type === 'JsdocTypeJsdocObjectField') {\n          entries.push(transform(field));\n        }\n      }\n      return {\n        type: 'RECORD',\n        entries\n      };\n    },\n    JsdocTypeSpecialNamePath: result => {\n      if (result.specialType !== 'module') {\n        throw new Error(`jsdoctypeparser does not support type ${result.specialType} at this point.`);\n      }\n      return {\n        type: 'MODULE',\n        value: {\n          type: 'FILE_PATH',\n          quoteStyle: getQuoteStyle(result.meta.quote),\n          path: result.value\n        }\n      };\n    },\n    JsdocTypeNamePath: (result, transform) => {\n      let hasEventPrefix = false;\n      let name;\n      let quoteStyle;\n      if (result.right.type === 'JsdocTypeSpecialNamePath' && result.right.specialType === 'event') {\n        hasEventPrefix = true;\n        name = result.right.value;\n        quoteStyle = getQuoteStyle(result.right.meta.quote);\n      } else {\n        name = result.right.value;\n        quoteStyle = getQuoteStyle(result.right.meta.quote);\n      }\n      const transformed = {\n        type: getMemberType(result.pathType),\n        owner: transform(result.left),\n        name,\n        quoteStyle,\n        hasEventPrefix\n      };\n      if (transformed.owner.type === 'MODULE') {\n        const tModule = transformed.owner;\n        transformed.owner = transformed.owner.value;\n        tModule.value = transformed;\n        return tModule;\n      } else {\n        return transformed;\n      }\n    },\n    JsdocTypeUnion: (result, transform) => nestResults('UNION', result.elements.map(transform)),\n    JsdocTypeParenthesis: (result, transform) => ({\n      type: 'PARENTHESIS',\n      value: transform(assertRootResult(result.element))\n    }),\n    JsdocTypeNull: () => ({\n      type: 'NAME',\n      name: 'null'\n    }),\n    JsdocTypeUnknown: () => ({\n      type: 'UNKNOWN'\n    }),\n    JsdocTypeStringValue: result => ({\n      type: 'STRING_VALUE',\n      quoteStyle: getQuoteStyle(result.meta.quote),\n      string: result.value\n    }),\n    JsdocTypeIntersection: (result, transform) => nestResults('INTERSECTION', result.elements.map(transform)),\n    JsdocTypeNumber: result => ({\n      type: 'NUMBER_VALUE',\n      number: result.value.toString()\n    }),\n    JsdocTypeSymbol: notAvailableTransform,\n    JsdocTypeProperty: notAvailableTransform,\n    JsdocTypePredicate: notAvailableTransform,\n    JsdocTypeMappedType: notAvailableTransform,\n    JsdocTypeIndexSignature: notAvailableTransform,\n    JsdocTypeAsserts: notAvailableTransform\n  };\n  function jtpTransform(result) {\n    return transform(jtpRules, result);\n  }\n  function identityTransformRules() {\n    return {\n      JsdocTypeIntersection: (result, transform) => ({\n        type: 'JsdocTypeIntersection',\n        elements: result.elements.map(transform)\n      }),\n      JsdocTypeGeneric: (result, transform) => ({\n        type: 'JsdocTypeGeneric',\n        left: transform(result.left),\n        elements: result.elements.map(transform),\n        meta: {\n          dot: result.meta.dot,\n          brackets: result.meta.brackets\n        }\n      }),\n      JsdocTypeNullable: result => result,\n      JsdocTypeUnion: (result, transform) => ({\n        type: 'JsdocTypeUnion',\n        elements: result.elements.map(transform)\n      }),\n      JsdocTypeUnknown: result => result,\n      JsdocTypeUndefined: result => result,\n      JsdocTypeTypeof: (result, transform) => ({\n        type: 'JsdocTypeTypeof',\n        element: transform(result.element)\n      }),\n      JsdocTypeSymbol: (result, transform) => {\n        const transformed = {\n          type: 'JsdocTypeSymbol',\n          value: result.value\n        };\n        if (result.element !== undefined) {\n          transformed.element = transform(result.element);\n        }\n        return transformed;\n      },\n      JsdocTypeOptional: (result, transform) => ({\n        type: 'JsdocTypeOptional',\n        element: transform(result.element),\n        meta: {\n          position: result.meta.position\n        }\n      }),\n      JsdocTypeObject: (result, transform) => ({\n        type: 'JsdocTypeObject',\n        meta: {\n          separator: 'comma'\n        },\n        elements: result.elements.map(transform)\n      }),\n      JsdocTypeNumber: result => result,\n      JsdocTypeNull: result => result,\n      JsdocTypeNotNullable: (result, transform) => ({\n        type: 'JsdocTypeNotNullable',\n        element: transform(result.element),\n        meta: {\n          position: result.meta.position\n        }\n      }),\n      JsdocTypeSpecialNamePath: result => result,\n      JsdocTypeObjectField: (result, transform) => ({\n        type: 'JsdocTypeObjectField',\n        key: result.key,\n        right: result.right === undefined ? undefined : transform(result.right),\n        optional: result.optional,\n        readonly: result.readonly,\n        meta: result.meta\n      }),\n      JsdocTypeJsdocObjectField: (result, transform) => ({\n        type: 'JsdocTypeJsdocObjectField',\n        left: transform(result.left),\n        right: transform(result.right)\n      }),\n      JsdocTypeKeyValue: (result, transform) => {\n        return {\n          type: 'JsdocTypeKeyValue',\n          key: result.key,\n          right: result.right === undefined ? undefined : transform(result.right),\n          optional: result.optional,\n          variadic: result.variadic\n        };\n      },\n      JsdocTypeImport: (result, transform) => ({\n        type: 'JsdocTypeImport',\n        element: transform(result.element)\n      }),\n      JsdocTypeAny: result => result,\n      JsdocTypeStringValue: result => result,\n      JsdocTypeNamePath: result => result,\n      JsdocTypeVariadic: (result, transform) => {\n        const transformed = {\n          type: 'JsdocTypeVariadic',\n          meta: {\n            position: result.meta.position,\n            squareBrackets: result.meta.squareBrackets\n          }\n        };\n        if (result.element !== undefined) {\n          transformed.element = transform(result.element);\n        }\n        return transformed;\n      },\n      JsdocTypeTuple: (result, transform) => ({\n        type: 'JsdocTypeTuple',\n        elements: result.elements.map(transform)\n      }),\n      JsdocTypeName: result => result,\n      JsdocTypeFunction: (result, transform) => {\n        const transformed = {\n          type: 'JsdocTypeFunction',\n          arrow: result.arrow,\n          parameters: result.parameters.map(transform),\n          constructor: result.constructor,\n          parenthesis: result.parenthesis\n        };\n        if (result.returnType !== undefined) {\n          transformed.returnType = transform(result.returnType);\n        }\n        return transformed;\n      },\n      JsdocTypeKeyof: (result, transform) => ({\n        type: 'JsdocTypeKeyof',\n        element: transform(result.element)\n      }),\n      JsdocTypeParenthesis: (result, transform) => ({\n        type: 'JsdocTypeParenthesis',\n        element: transform(result.element)\n      }),\n      JsdocTypeProperty: result => result,\n      JsdocTypePredicate: (result, transform) => ({\n        type: 'JsdocTypePredicate',\n        left: transform(result.left),\n        right: transform(result.right)\n      }),\n      JsdocTypeIndexSignature: (result, transform) => ({\n        type: 'JsdocTypeIndexSignature',\n        key: result.key,\n        right: transform(result.right)\n      }),\n      JsdocTypeMappedType: (result, transform) => ({\n        type: 'JsdocTypeMappedType',\n        key: result.key,\n        right: transform(result.right)\n      }),\n      JsdocTypeAsserts: (result, transform) => ({\n        type: 'JsdocTypeAsserts',\n        left: transform(result.left),\n        right: transform(result.right)\n      })\n    };\n  }\n  const visitorKeys = {\n    JsdocTypeAny: [],\n    JsdocTypeFunction: ['parameters', 'returnType'],\n    JsdocTypeGeneric: ['left', 'elements'],\n    JsdocTypeImport: [],\n    JsdocTypeIndexSignature: ['right'],\n    JsdocTypeIntersection: ['elements'],\n    JsdocTypeKeyof: ['element'],\n    JsdocTypeKeyValue: ['right'],\n    JsdocTypeMappedType: ['right'],\n    JsdocTypeName: [],\n    JsdocTypeNamePath: ['left', 'right'],\n    JsdocTypeNotNullable: ['element'],\n    JsdocTypeNull: [],\n    JsdocTypeNullable: ['element'],\n    JsdocTypeNumber: [],\n    JsdocTypeObject: ['elements'],\n    JsdocTypeObjectField: ['right'],\n    JsdocTypeJsdocObjectField: ['left', 'right'],\n    JsdocTypeOptional: ['element'],\n    JsdocTypeParenthesis: ['element'],\n    JsdocTypeSpecialNamePath: [],\n    JsdocTypeStringValue: [],\n    JsdocTypeSymbol: ['element'],\n    JsdocTypeTuple: ['elements'],\n    JsdocTypeTypeof: ['element'],\n    JsdocTypeUndefined: [],\n    JsdocTypeUnion: ['elements'],\n    JsdocTypeUnknown: [],\n    JsdocTypeVariadic: ['element'],\n    JsdocTypeProperty: [],\n    JsdocTypePredicate: ['left', 'right'],\n    JsdocTypeAsserts: ['left', 'right']\n  };\n  function _traverse(node, parentNode, property, onEnter, onLeave) {\n    onEnter === null || onEnter === void 0 ? void 0 : onEnter(node, parentNode, property);\n    const keysToVisit = visitorKeys[node.type];\n    for (const key of keysToVisit) {\n      const value = node[key];\n      if (value !== undefined) {\n        if (Array.isArray(value)) {\n          for (const element of value) {\n            _traverse(element, node, key, onEnter, onLeave);\n          }\n        } else {\n          _traverse(value, node, key, onEnter, onLeave);\n        }\n      }\n    }\n    onLeave === null || onLeave === void 0 ? void 0 : onLeave(node, parentNode, property);\n  }\n  /**\n   * A function to traverse an AST. It traverses it depth first.\n   * @param node the node to start traversing at.\n   * @param onEnter node visitor function that will be called on entering the node. This corresponds to preorder traversing.\n   * @param onLeave node visitor function that will be called on leaving the node. This corresponds to postorder traversing.\n   */\n  function traverse(node, onEnter, onLeave) {\n    _traverse(node, undefined, undefined, onEnter, onLeave);\n  }\n  exports.catharsisTransform = catharsisTransform;\n  exports.identityTransformRules = identityTransformRules;\n  exports.jtpTransform = jtpTransform;\n  exports.parse = parse;\n  exports.stringify = stringify;\n  exports.stringifyRules = stringifyRules;\n  exports.transform = transform;\n  exports.traverse = traverse;\n  exports.tryParse = tryParse;\n  exports.visitorKeys = visitorKeys;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1804\n")}}]);