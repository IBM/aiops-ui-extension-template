"use strict";(self.webpackChunk_ibm_aiops_ui_extension_template=self.webpackChunk_ibm_aiops_ui_extension_template||[]).push([[732],{6732:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  nD3: function() { return /* reexport */ Accordion; },\n  AsP: function() { return /* reexport */ AccordionItem; },\n  sg: function() { return /* reexport */ AccordionSkeleton; },\n  kZS: function() { return /* reexport */ ActionableNotification; },\n  $nd: function() { return /* reexport */ Button; },\n  Sc0: function() { return /* reexport */ Checkbox; },\n  msM: function() { return /* reexport */ Dropdown; },\n  Rhj: function() { return /* reexport */ Loading; },\n  KFt: function() { return /* reexport */ MultiSelect; }\n});\n\n// UNUSED EXPORTS: AILabel, AILabelActions, AILabelContent, AISkeletonIcon, AISkeletonPlaceholder, AISkeletonText, AspectRatio, Breadcrumb, BreadcrumbItem, BreadcrumbSkeleton, ButtonKinds, ButtonSet, ButtonSizes, ButtonSkeleton, ButtonTooltipAlignments, ButtonTooltipPositions, Callout, CheckboxGroup, CheckboxSkeleton, ClassPrefix, ClickableTile, CodeSnippet, CodeSnippetSkeleton, Column, ColumnHang, ComboBox, ComboButton, ComposedModal, ContainedList, ContainedListItem, Content, ContentSwitcher, ControlledPasswordInput, Copy, CopyButton, DangerButton, DataTable, DataTableSkeleton, DatePicker, DatePickerInput, DatePickerSkeleton, DefinitionTooltip, DismissibleTag, DropdownSkeleton, ErrorBoundary, ErrorBoundaryContext, ExpandableSearch, ExpandableTile, FeatureFlags, FileUploader, FileUploaderButton, FileUploaderDropContainer, FileUploaderItem, FileUploaderSkeleton, Filename, FilterableMultiSelect, FlexGrid, FluidForm, Form, FormContext, FormGroup, FormItem, FormLabel, GlobalTheme, Grid, GridSettings, HStack, Header, HeaderContainer, HeaderGlobalAction, HeaderGlobalBar, HeaderMenu, HeaderMenuButton, HeaderMenuItem, HeaderName, HeaderNavigation, HeaderPanel, HeaderSideNavItems, Heading, IconButton, IconButtonKinds, IconSkeleton, IconSwitch, IconTab, IdPrefix, InlineLoading, InlineNotification, Layer, Link, ListItem, Menu, MenuButton, MenuItem, MenuItemDivider, MenuItemGroup, MenuItemRadioGroup, MenuItemSelectable, Modal, ModalBody, ModalFooter, ModalHeader, ModalWrapper, NotificationActionButton, NotificationButton, NumberInput, NumberInputSkeleton, OperationalTag, OrderedList, OverflowMenu, OverflowMenuItem, Pagination, PaginationNav, PaginationSkeleton, PasswordInput, Popover, PopoverContent, PrefixContext, PrimaryButton, ProgressBar, ProgressIndicator, ProgressIndicatorSkeleton, ProgressStep, RadioButton, RadioButtonGroup, RadioButtonSkeleton, RadioTile, Row, Search, SearchSkeleton, SecondaryButton, Section, Select, SelectItem, SelectItemGroup, SelectSkeleton, SelectableTag, SelectableTile, SideNav, SideNavDetails, SideNavDivider, SideNavFooter, SideNavHeader, SideNavIcon, SideNavItem, SideNavItems, SideNavLink, SideNavLinkText, SideNavMenu, SideNavMenuItem, SideNavSwitcher, SkeletonIcon, SkeletonPlaceholder, SkeletonText, SkipToContent, Slider, SliderSkeleton, Stack, StaticNotification, StructuredListBody, StructuredListCell, StructuredListHead, StructuredListInput, StructuredListRow, StructuredListSkeleton, StructuredListWrapper, Switch, Switcher, SwitcherDivider, SwitcherItem, Tab, TabContent, TabList, TabListVertical, TabPanel, TabPanels, Table, TableActionList, TableBatchAction, TableBatchActions, TableBody, TableCell, TableContainer, TableDecoratorRow, TableExpandHeader, TableExpandRow, TableExpandedRow, TableHead, TableHeader, TableRow, TableSelectAll, TableSelectRow, TableSlugRow, TableToolbar, TableToolbarAction, TableToolbarContent, TableToolbarMenu, TableToolbarSearch, Tabs, TabsSkeleton, TabsVertical, Tag, TagSkeleton, TextArea, TextAreaSkeleton, TextInput, TextInputSkeleton, Theme, ThemeContext, Tile, TileAboveTheFoldContent, TileBelowTheFoldContent, TileGroup, TimePicker, TimePickerSelect, ToastNotification, Toggle, ToggleSkeleton, ToggleSmallSkeleton, Toggletip, ToggletipActions, ToggletipButton, ToggletipContent, ToggletipLabel, Tooltip, TreeNode, TreeView, UnorderedList, VStack, unstable_FeatureFlags, unstable_Layout, unstable_LayoutDirection, unstable_OverflowMenuV2, unstable_PageSelector, unstable_Pagination, unstable_Text, unstable_TextDirection, unstable__AiSkeletonIcon, unstable__AiSkeletonPlaceholder, unstable__AiSkeletonText, unstable__ChatButton, unstable__ChatButtonSkeleton, unstable__FluidComboBox, unstable__FluidComboBoxSkeleton, unstable__FluidDatePicker, unstable__FluidDatePickerInput, unstable__FluidDatePickerSkeleton, unstable__FluidDropdown, unstable__FluidDropdownSkeleton, unstable__FluidMultiSelect, unstable__FluidMultiSelectSkeleton, unstable__FluidNumberInput, unstable__FluidNumberInputSkeleton, unstable__FluidSearch, unstable__FluidSearchSkeleton, unstable__FluidSelect, unstable__FluidSelectSkeleton, unstable__FluidTextArea, unstable__FluidTextAreaSkeleton, unstable__FluidTextInput, unstable__FluidTextInputSkeleton, unstable__FluidTimePicker, unstable__FluidTimePickerSelect, unstable__FluidTimePickerSkeleton, unstable__IconIndicator, unstable__PageHeader, unstable__ShapeIndicator, unstable__Slug, unstable__SlugActions, unstable__SlugContent, unstable_useFeatureFlag, unstable_useFeatureFlags, unstable_useLayoutDirection, useContextMenu, useFeatureFlag, useFeatureFlags, useIdPrefix, useLayer, usePrefersDarkScheme, usePrefix, useTheme\n\n// EXTERNAL MODULE: ./node_modules/@carbon/feature-flags/es/index.js\nvar es = __webpack_require__(9952);\n;// ./node_modules/@carbon/react/es/feature-flags.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nes/* merge */.h1({\n  'enable-css-custom-properties': true,\n  'enable-css-grid': true,\n  'enable-v11-release': true,\n  'enable-experimental-tile-contrast': false,\n  'enable-v12-tile-radio-icons': false,\n  'enable-v12-structured-list-visible-icons': false,\n  'enable-v12-dynamic-floating-styles': false\n});\n;// ./node_modules/@carbon/react/es/_virtual/_rollupPluginBabelHelpers.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(4176);\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(4674);\n;// ./node_modules/@carbon/react/es/internal/usePrefix.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst PrefixContext = /*#__PURE__*/react.createContext('cds');\nfunction usePrefix() {\n  return react.useContext(PrefixContext);\n}\n\n// EXTERNAL MODULE: ./node_modules/prop-types/index.js\nvar prop_types = __webpack_require__(4370);\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\n;// ./node_modules/@carbon/react/es/components/Accordion/AccordionProvider.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst AccordionContext = /*#__PURE__*/(0,react.createContext)({\n  disabled: false\n});\nconst AccordionProvider = _ref => {\n  let {\n    disabled,\n    children\n  } = _ref;\n  return /*#__PURE__*/react.createElement(AccordionContext.Provider, {\n    value: {\n      disabled\n    }\n  }, children);\n};\n\n;// ./node_modules/@carbon/react/es/components/Accordion/Accordion.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\nfunction Accordion(_ref) {\n  let {\n    align = 'end',\n    children,\n    className: customClassName,\n    disabled = false,\n    isFlush = false,\n    ordered = false,\n    size,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const className = classnames_default()(`${prefix}--accordion`, customClassName, {\n    [`${prefix}--accordion--${align}`]: align,\n    [`${prefix}--accordion--${size}`]: size,\n    // TODO: V12 - Remove this class\n    [`${prefix}--layout--size-${size}`]: size,\n    [`${prefix}--accordion--flush`]: isFlush && align !== 'start'\n  });\n  const ListTag = ordered ? 'ol' : 'ul';\n  return /*#__PURE__*/react.createElement(AccordionProvider, {\n    disabled: disabled\n  }, /*#__PURE__*/react.createElement(ListTag, _extends({\n    className: className\n  }, rest), children));\n}\nAccordion.propTypes = {\n  /**\n   * Specify the alignment of the accordion heading title and chevron.\n   */\n  align: prop_types_default().oneOf(['start', 'end']),\n  /**\n   * Pass in the children that will be rendered within the Accordion\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify whether an individual AccordionItem should be disabled\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Specify whether Accordion text should be flush, default is false, does not work with align=\"start\"\n   */\n  isFlush: (prop_types_default()).bool,\n  /**\n   * Specify if the Accordion should be an ordered list,\n   * default is `false`\n   */\n  ordered: (prop_types_default()).bool,\n  /**\n   * Specify the size of the Accordion. Currently supports the following:\n   */\n  size: prop_types_default().oneOf(['sm', 'md', 'lg'])\n};\n\n// EXTERNAL MODULE: ./node_modules/@carbon/icons-react/es/generated/bucket-3.js\nvar bucket_3 = __webpack_require__(1626);\n;// ./node_modules/@carbon/react/es/internal/keyboard/keys.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst Tab = {\n  key: 'Tab',\n  which: 9,\n  keyCode: 9,\n  code: 'Tab'\n};\nconst Enter = {\n  key: 'Enter',\n  which: 13,\n  keyCode: 13,\n  code: 'Enter'\n};\nconst Escape = {\n  key: ['Escape',\n  // IE11 Escape\n  'Esc'],\n  which: 27,\n  keyCode: 27,\n  code: 'Esc'\n};\nconst Space = {\n  key: ' ',\n  which: 32,\n  keyCode: 32,\n  code: 'Space'\n};\nconst End = {\n  key: 'End',\n  which: 35,\n  keyCode: 35,\n  code: 'Numpad1'\n};\nconst Home = {\n  key: 'Home',\n  which: 36,\n  keyCode: 36,\n  code: 'Numpad7'\n};\nconst keys_ArrowLeft = {\n  key: 'ArrowLeft',\n  which: 37,\n  keyCode: 37,\n  code: 'ArrowLeft'\n};\nconst ArrowUp = {\n  key: 'ArrowUp',\n  which: 38,\n  keyCode: 38,\n  code: 'ArrowUp'\n};\nconst keys_ArrowRight = {\n  key: 'ArrowRight',\n  which: 39,\n  keyCode: 39,\n  code: 'ArrowRight'\n};\nconst ArrowDown = {\n  key: 'ArrowDown',\n  which: 40,\n  keyCode: 40,\n  code: 'ArrowDown'\n};\nconst Delete = {\n  key: 'Delete',\n  which: 8,\n  keyCode: 8,\n  code: 'ArrowDecimal'\n};\n\n;// ./node_modules/@carbon/react/es/internal/keyboard/match.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Check to see if at least one key code matches the key code of the\n * given event.\n *\n * @param event - The event to test.\n * @param keysToMatch - An array of key definitions to match against.\n * @returns `true` if one of the keys matches.\n */\nconst matches = (event, keysToMatch) => {\n  for (let i = 0; i < keysToMatch.length; i++) {\n    if (match_match(event, keysToMatch[i])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/**\n * Check to see if the given key matches the corresponding keyboard event. Also\n * supports passing in the value directly if you can't use the given event.\n *\n * @param eventOrCode - A `KeyboardEvent`, a number, or a string value.\n * @param keyObj - An object with key properties to match against.\n * @returns `true` if the event or code matches the key definition.\n */\nconst match_match = (eventOrCode, _ref) => {\n  let {\n    key,\n    which,\n    keyCode,\n    code\n  } = _ref;\n  if (typeof eventOrCode === 'string') {\n    return eventOrCode === key;\n  }\n  if (typeof eventOrCode === 'number') {\n    return eventOrCode === which || eventOrCode === keyCode;\n  }\n  if (eventOrCode.key && Array.isArray(key)) {\n    return key.includes(eventOrCode.key);\n  }\n  return eventOrCode.key === key ||\n  // TODO: When can these checks for deprecated properties be deleted?\n  // Presumably, the `Key` type should also be pruned of these properties.\n  eventOrCode.which === which || eventOrCode.keyCode === keyCode || eventOrCode.code === code;\n};\n\n;// ./node_modules/@carbon/react/es/tools/setupGetInstanceId.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Creates an instance ID generator.\n *\n * @returns A function that returns a unique sequential ID on each call.\n */\nconst setupGetInstanceId = () => {\n  let instanceId = 0;\n  return () => ++instanceId;\n};\n\n;// ./node_modules/@carbon/react/es/internal/environment.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Indicate whether current execution environment can access the DOM.\n *\n * @see https://github.com/facebook/fbjs/blob/4d1751311d3f67af2dcce2e40df8512a23c7b9c6/packages/fbjs/src/core/ExecutionEnvironment.js#L12\n */\nconst canUseDOM = !!(typeof window !== 'undefined' &&\n// TODO: `ssr-friendly` doesn't support ESLint v9.\n// https://github.com/kopiro/eslint-plugin-ssr-friendly/issues/30\n// https://github.com/carbon-design-system/carbon/issues/18991\n/*\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\n*/\nwindow.document &&\n/*\n// eslint-disable-next-line ssr-friendly/no-dom-globals-in-module-scope\n*/\nwindow.document.createElement);\n\n;// ./node_modules/@carbon/react/es/internal/useIdPrefix.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst IdPrefixContext = /*#__PURE__*/react.createContext(null);\nfunction useIdPrefix() {\n  return react.useContext(IdPrefixContext);\n}\n\n;// ./node_modules/@carbon/react/es/internal/useId.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n// This file was heavily inspired by:\n\n// This tricks bundlers so they can't statically analyze this and produce\n// compilation warnings/errors.\n// https://github.com/webpack/webpack/issues/14814\n// https://github.com/mui/material-ui/issues/41190\nconst _React = {\n  ...react\n};\nconst instanceId = setupGetInstanceId();\nconst useIsomorphicLayoutEffect = canUseDOM ? react.useLayoutEffect : react.useEffect;\nlet serverHandoffCompleted = false;\nconst defaultId = 'id';\n\n/**\n * Generate a unique ID for React <=17 with an optional prefix prepended to it.\n * This is an internal utility, not intended for public usage.\n * @param {string} [prefix]\n * @returns {string}\n */\nfunction useCompatibleId() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultId;\n  const contextPrefix = useIdPrefix();\n  const [id, setId] = (0,react.useState)(() => {\n    if (serverHandoffCompleted) {\n      return `${contextPrefix ? `${contextPrefix}-` : ``}${prefix}-${instanceId()}`;\n    }\n    return null;\n  });\n  useIsomorphicLayoutEffect(() => {\n    if (id === null) {\n      setId(`${contextPrefix ? `${contextPrefix}-` : ``}${prefix}-${instanceId()}`);\n    }\n  }, [instanceId]);\n  (0,react.useEffect)(() => {\n    if (serverHandoffCompleted === false) {\n      serverHandoffCompleted = true;\n    }\n  }, []);\n  return id;\n}\n\n/**\n * Generate a unique ID for React >=18 with an optional prefix prepended to it.\n * This is an internal utility, not intended for public usage.\n * @param {string} [prefix]\n * @returns {string}\n */\nfunction useReactId() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultId;\n  const contextPrefix = useIdPrefix();\n  return `${contextPrefix ? `${contextPrefix}-` : ``}${prefix}-${_React.useId()}`;\n}\n\n/**\n * Uses React 18's built-in `useId()` when available, or falls back to a\n * slightly less performant (requiring a double render) implementation for\n * earlier React versions.\n */\nconst useId = _React.useId ? useReactId : useCompatibleId;\n\n/**\n * Generate a unique id if a given `id` is not provided\n * This is an internal utility, not intended for public usage.\n * @param {string|undefined} id\n * @returns {string}\n */\nfunction useFallbackId(id) {\n  const fallback = useId();\n  return id ?? fallback;\n}\n\n;// ./node_modules/@carbon/react/es/prop-types/deprecate.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst didWarnAboutDeprecation = {};\nfunction deprecate(propType, message) {\n  function checker(props, propName, componentName) {\n    if (props[propName] === undefined) {\n      return;\n    }\n    if (!didWarnAboutDeprecation[componentName] || !didWarnAboutDeprecation[componentName][propName]) {\n      didWarnAboutDeprecation[componentName] = {\n        ...didWarnAboutDeprecation[componentName],\n        [propName]: true\n      };\n       false ? 0 : void 0;\n    }\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n    return propType(props, propName, componentName, ...rest);\n  }\n  return checker;\n}\n\n;// ./node_modules/@carbon/react/es/components/Text/TextDirectionContext.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst TextDirectionContext = /*#__PURE__*/(0,react.createContext)({\n  direction: 'auto',\n  getTextDirection: {\n    current: undefined\n  }\n});\n\n;// ./node_modules/@carbon/react/es/components/Text/Text.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\nconst TextBase = /*#__PURE__*/react.forwardRef((_ref, ref) => {\n  let {\n    as,\n    children,\n    dir = 'auto',\n    ...rest\n  } = _ref;\n  const context = (0,react.useContext)(TextDirectionContext);\n  const textProps = {};\n  const BaseComponent = as ?? 'span';\n  const value = {\n    ...context\n  };\n  if (!context) {\n    textProps.dir = dir;\n    value.direction = dir;\n  } else {\n    const {\n      direction: parentDirection,\n      getTextDirection\n    } = context;\n    if (getTextDirection && getTextDirection.current) {\n      const text = getTextFromChildren(children);\n      const override = getTextDirection.current(text);\n      if (parentDirection !== override) {\n        textProps.dir = override;\n        value.direction = override;\n      } else if (parentDirection === 'auto') {\n        textProps.dir = override;\n      }\n    } else if (parentDirection !== dir) {\n      textProps.dir = dir;\n      value.direction = dir;\n    } else if (parentDirection === 'auto') {\n      textProps.dir = dir;\n    }\n  }\n  return /*#__PURE__*/react.createElement(TextDirectionContext.Provider, {\n    value: value\n  }, /*#__PURE__*/react.createElement(BaseComponent, _extends({\n    ref: ref\n  }, rest, textProps), children));\n});\nconst Text = TextBase;\nText.propTypes = {\n  /**\n   * Provide a custom element type used to render the outermost node\n   */\n  as: prop_types_default().oneOfType([(prop_types_default()).func, (prop_types_default()).string, (prop_types_default()).elementType]),\n  /**\n   * Provide child elements or text to be rendered inside of this component\n   */\n  children: (prop_types_default()).node.isRequired,\n  /**\n   * Specify the text direction to be used for this component and any of its\n   * children\n   */\n  dir: prop_types_default().oneOf(['ltr', 'rtl', 'auto'])\n};\nconst getTextFromChildren = children => {\n  if (typeof children === 'string') {\n    return children;\n  }\n  const text = react.Children.map(children, child => {\n    if (typeof child === 'string') {\n      return child;\n    }\n    return null;\n  })?.filter(text => {\n    return text !== null;\n  });\n  if (text?.length === 1) {\n    return text[0];\n  }\n  return text;\n};\n\n;// ./node_modules/@carbon/react/es/components/Accordion/AccordionItem.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst defaultRenderToggle = props => /*#__PURE__*/react.createElement(\"button\", _extends({\n  type: \"button\"\n}, props));\nfunction AccordionItem(_ref) {\n  let {\n    children,\n    className: customClassName = '',\n    open = false,\n    onHeadingClick,\n    renderExpando = defaultRenderToggle,\n    // remove renderExpando in next major release\n    renderToggle,\n    title = 'title',\n    disabled: controlledDisabled,\n    handleAnimationEnd,\n    ...rest\n  } = _ref;\n  const [isOpen, setIsOpen] = (0,react.useState)(open);\n  const [prevIsOpen, setPrevIsOpen] = (0,react.useState)(open);\n  const accordionState = (0,react.useContext)(AccordionContext);\n  const disabledIsControlled = typeof controlledDisabled === 'boolean';\n  const disabled = disabledIsControlled ? controlledDisabled : accordionState.disabled;\n  const id = useId('accordion-item');\n  const prefix = usePrefix();\n  const className = classnames_default()({\n    [`${prefix}--accordion__item`]: true,\n    [`${prefix}--accordion__item--active`]: isOpen && !disabled,\n    [`${prefix}--accordion__item--disabled`]: disabled,\n    [customClassName]: !!customClassName\n  });\n  const Toggle = renderToggle || renderExpando; // remove renderExpando in next major release\n\n  const content = react.useCallback(node => {\n    if (!node) {\n      return;\n    }\n    if (isOpen) {\n      // accordion closes\n      node.style.maxBlockSize = '';\n    }\n  }, [isOpen]);\n  if (open !== prevIsOpen) {\n    setIsOpen(open);\n    setPrevIsOpen(open);\n  }\n\n  // When the AccordionItem heading is clicked, toggle the open state of the\n  // panel\n  function onClick(event) {\n    const nextValue = !isOpen;\n    setIsOpen(nextValue);\n    if (onHeadingClick) {\n      // TODO: normalize signature, potentially:\n      // onHeadingClick :: (event: Event, state: { isOpen: Boolean }) => any\n      onHeadingClick({\n        isOpen: nextValue,\n        event\n      });\n    }\n  }\n\n  // If the AccordionItem is open, and the user hits the ESC key, then close it\n  function onKeyDown(event) {\n    if (isOpen && match_match(event, Escape)) {\n      setIsOpen(false);\n    }\n  }\n  function onAnimationEnd(event) {\n    if (handleAnimationEnd) {\n      handleAnimationEnd(event);\n    }\n  }\n  return /*#__PURE__*/react.createElement(\"li\", _extends({\n    className: className\n  }, rest), /*#__PURE__*/react.createElement(Toggle, {\n    disabled: disabled,\n    \"aria-controls\": id,\n    \"aria-expanded\": isOpen,\n    className: `${prefix}--accordion__heading`,\n    onClick: onClick,\n    onKeyDown: onKeyDown,\n    type: \"button\"\n  }, /*#__PURE__*/react.createElement(bucket_3/* ChevronRight */.c_, {\n    className: `${prefix}--accordion__arrow`\n  }), /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--accordion__title`\n  }, title)), /*#__PURE__*/react.createElement(\"div\", {\n    ref: content,\n    className: `${prefix}--accordion__wrapper`,\n    onTransitionEnd: onAnimationEnd\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    id: id,\n    className: `${prefix}--accordion__content`\n  }, children)));\n}\nAccordionItem.propTypes = {\n  /**\n   * Provide the contents of your AccordionItem\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify whether an individual AccordionItem should be disabled\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * The handler of the massaged `click` event.\n   */\n  onClick: (prop_types_default()).func,\n  /**\n   * The handler of the massaged `click` event on the heading.\n   */\n  onHeadingClick: (prop_types_default()).func,\n  /**\n   * `true` to open the expand.\n   */\n  open: (prop_types_default()).bool,\n  /**\n   * The callback function to render the expand button.\n   * Can be a React component class.\n   */\n  renderExpando: deprecate((prop_types_default()).func, 'The `renderExpando` prop has been deprecated and will be removed in the next major release of Carbon. Use the `renderToggle` prop instead.'),\n  /**\n   * The callback function to render the expand button.\n   * Can be a React component class.\n   */\n  renderToggle: (prop_types_default()).func,\n  /**\n   * The accordion title.\n   */\n  title: (prop_types_default()).node\n};\n\n;// ./node_modules/@carbon/react/es/internal/useIsomorphicEffect.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n/** `useLayoutEffect` on the client, `useEffect` on the server */\nconst useIsomorphicEffect = typeof window !== 'undefined' ? react.useLayoutEffect : react.useEffect;\n\n;// ./node_modules/@carbon/react/es/components/SkeletonText/SkeletonText.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\nconst randoms = [0.973051493507435, 0.15334737213558558, 0.5671034553053769];\nfunction getRandomInt(min, max, n) {\n  return Math.floor(randoms[n % 3] * (max - min + 1)) + min;\n}\nconst SkeletonText = _ref => {\n  let {\n    paragraph = false,\n    lineCount = 3,\n    width = '100%',\n    heading = false,\n    className = '',\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const skeletonTextClasses = classnames_default()({\n    [`${prefix}--skeleton__text`]: true,\n    [`${prefix}--skeleton__heading`]: heading,\n    [className]: className\n  });\n  const widthNum = parseInt(width, 10);\n  const widthPx = width.includes('px');\n  const widthPercent = width.includes('%');\n  let lineCountNumber = 1;\n  if (paragraph) {\n    lineCountNumber = lineCount;\n  }\n  const refs = (0,react.useRef)([]);\n  useIsomorphicEffect(() => {\n    refs.current.map((item, j) => {\n      const randomPercentWidth = getRandomInt(0, 75, j) + 'px';\n      const randomPxWidth = getRandomInt(Math.max(widthNum - 75, 0), widthNum, j) + 'px';\n      if (item) {\n        if (widthPercent && paragraph) {\n          item.style.width = `calc(${width} - ${randomPercentWidth})`;\n        } else if (widthPx && paragraph) {\n          item.style.width = randomPxWidth;\n        } else {\n          item.style.width = width;\n        }\n      }\n    });\n  }, [lineCountNumber, paragraph, refs, width, widthNum, widthPercent, widthPx]);\n  const lines = [];\n  for (let i = 0; i < lineCountNumber; i++) {\n    lines.push(/*#__PURE__*/react.createElement(\"p\", _extends({\n      className: skeletonTextClasses,\n      key: i,\n      ref: el => {\n        refs.current = [...refs.current, el];\n      }\n    }, rest)));\n  }\n  if (lineCountNumber !== 1) {\n    return /*#__PURE__*/react.createElement(\"div\", null, lines);\n  }\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/react.createElement(react.Fragment, null, lines);\n};\nSkeletonText.propTypes = {\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: (prop_types_default()).string,\n  /**\n   * generates skeleton text at a larger size\n   */\n  heading: (prop_types_default()).bool,\n  /**\n   * the number of lines shown if paragraph is true\n   */\n  lineCount: (prop_types_default()).number,\n  /**\n   * will generate multiple lines of text\n   */\n  paragraph: (prop_types_default()).bool,\n  /**\n   * width (in px or %) of single line of text or max-width of paragraph lines\n   */\n  width: (prop_types_default()).string\n};\n\n;// ./node_modules/@carbon/react/es/components/Accordion/Accordion.Skeleton.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\nvar _SkeletonText, _SkeletonText2, _SkeletonText3;\nfunction AccordionSkeleton(_ref) {\n  let {\n    align = 'end',\n    className,\n    count = 4,\n    isFlush,\n    open = true,\n    ordered = false,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const classes = classnames_default()(`${prefix}--accordion`, `${prefix}--skeleton`, className, {\n    [`${prefix}--accordion--${align}`]: align,\n    [`${prefix}--accordion--flush`]: isFlush && align !== 'start'\n  });\n  const numSkeletonItems = open ? count - 1 : count;\n  const ListTag = ordered ? 'ol' : 'ul';\n  return /*#__PURE__*/react.createElement(ListTag, _extends({\n    className: classes\n  }, rest), open && /*#__PURE__*/react.createElement(\"li\", {\n    className: `${prefix}--accordion__item ${prefix}--accordion__item--active`\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    className: `${prefix}--accordion__heading`\n  }, /*#__PURE__*/react.createElement(bucket_3/* ChevronRight */.c_, {\n    className: `${prefix}--accordion__arrow`\n  }), /*#__PURE__*/react.createElement(SkeletonText, {\n    className: `${prefix}--accordion__title`\n  })), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--accordion__content`\n  }, _SkeletonText || (_SkeletonText = /*#__PURE__*/react.createElement(SkeletonText, {\n    width: \"90%\"\n  })), _SkeletonText2 || (_SkeletonText2 = /*#__PURE__*/react.createElement(SkeletonText, {\n    width: \"80%\"\n  })), _SkeletonText3 || (_SkeletonText3 = /*#__PURE__*/react.createElement(SkeletonText, {\n    width: \"95%\"\n  })))), Array.from({\n    length: numSkeletonItems\n  }).map((_, i) => /*#__PURE__*/react.createElement(AccordionSkeletonItem, {\n    key: i\n  })));\n}\nAccordionSkeleton.propTypes = {\n  /**\n   * Specify the alignment of the accordion heading title and chevron.\n   */\n  align: prop_types_default().oneOf(['start', 'end']),\n  /**\n   * Specify an optional className to add.\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Set number of items to render\n   */\n  count: (prop_types_default()).number,\n  /**\n   * Specify whether an individual AccordionItem should be flush, default is false\n   */\n  isFlush: (prop_types_default()).bool,\n  /**\n   * `false` to not display the first item opened\n   */\n  open: (prop_types_default()).bool\n};\nfunction AccordionSkeletonItem() {\n  const prefix = usePrefix();\n  return /*#__PURE__*/react.createElement(\"li\", {\n    className: `${prefix}--accordion__item`\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    className: `${prefix}--accordion__heading`\n  }, /*#__PURE__*/react.createElement(bucket_3/* ChevronRight */.c_, {\n    className: `${prefix}--accordion__arrow`\n  }), /*#__PURE__*/react.createElement(SkeletonText, {\n    className: `${prefix}--accordion__title`\n  })));\n}\n\n;// ./node_modules/@carbon/react/es/prop-types/deprecateValuesWithin.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst deprecateValuesWithin_didWarnAboutDeprecation = {};\nfunction deprecateValuesWithin(propType, allowedValues, propMappingFunction) {\n  return function checker(props, propName, componentName) {\n    if (props[propName] === undefined) {\n      return;\n    }\n    if (!deprecateValuesWithin_didWarnAboutDeprecation[componentName] || !deprecateValuesWithin_didWarnAboutDeprecation[componentName][propName]) {\n      deprecateValuesWithin_didWarnAboutDeprecation[componentName] = {\n        ...deprecateValuesWithin_didWarnAboutDeprecation[componentName],\n        [propName]: true\n      };\n      const deprecatedValue = props[propName];\n      const newValue = propMappingFunction ? propMappingFunction(deprecatedValue) : null;\n      if (allowedValues && !allowedValues.includes(deprecatedValue)) {\n        const message = propMappingFunction ? `\"${deprecatedValue}\" is a deprecated value for the \"${propName}\" prop on the \"${componentName}\" component. Use \"${newValue}\" instead. \"${deprecatedValue}\" will be removed in the next major release.` : `\"${deprecatedValue}\" is a deprecated value for the \"${propName}\" prop on the \"${componentName}\" component. Allowed values is/are: ${allowedValues.join(', ')}.  \"${deprecatedValue}\" will be removed in the next major release. `;\n         false ? 0 : void 0;\n      }\n    }\n    for (var _len = arguments.length, rest = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      rest[_key - 3] = arguments[_key];\n    }\n    return propType(props, propName, componentName, ...rest);\n  };\n}\n\n;// ./node_modules/@carbon/react/es/internal/useMergedRefs.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n/**\n * Merges multiple refs into a single callback ref.\n *\n * This hook is useful when you need to attach multiple refs (for example, a ref\n * passed from `forwardRef` and a local ref from `useRef`) to the same node. It\n * accepts an array of refs and returns a callback ref that, when attached to a\n * node, assigns that node to every ref in the array.\n */\nconst useMergedRefs = refs => {\n  return (0,react.useCallback)(node => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(node);\n      } else if (ref) {\n        ref.current = node;\n      }\n    });\n  }, [refs]);\n};\n\n;// ./node_modules/@carbon/react/es/internal/useEvent.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst useEvent = (elementOrRef, eventName, callback) => {\n  const savedCallback = useRef(null);\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  useEffect(() => {\n    const handler = event => {\n      if (savedCallback.current) {\n        savedCallback.current(event);\n      }\n    };\n    const element = 'current' in elementOrRef ? elementOrRef.current : elementOrRef;\n    element?.addEventListener(eventName, handler);\n    return () => {\n      element?.removeEventListener(eventName, handler);\n    };\n  }, [elementOrRef, eventName]);\n};\nconst useWindowEvent = (eventName, callback) => {\n  const savedCallback = (0,react.useRef)(null);\n  (0,react.useEffect)(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n  (0,react.useEffect)(() => {\n    const handler = event => {\n      if (savedCallback.current) {\n        savedCallback.current(event);\n      }\n    };\n    window.addEventListener(eventName, handler);\n    return () => {\n      window.removeEventListener(eventName, handler);\n    };\n  }, [eventName]);\n};\n\n;// ./node_modules/@carbon/react/es/tools/mapPopoverAlign.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst popoverAlignMapping = {\n  'top-left': 'top-start',\n  'top-right': 'top-end',\n  'bottom-left': 'bottom-start',\n  'bottom-right': 'bottom-end',\n  'left-bottom': 'left-end',\n  'left-top': 'left-start',\n  'right-bottom': 'right-end',\n  'right-top': 'right-start'\n};\n\n/**\n * Maps popover alignment values to their corresponding replacement values.\n *\n * @param align - The original align value.\n * @returns The new align value based on mapping or the original align if no\n *          mapping exists.\n */\nconst mapPopoverAlign = align => popoverAlignMapping[align] ?? align;\n\n// EXTERNAL MODULE: ./node_modules/@floating-ui/react/dist/floating-ui.react.mjs\nvar floating_ui_react = __webpack_require__(8689);\n// EXTERNAL MODULE: ./node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs\nvar floating_ui_react_dom = __webpack_require__(4743);\n// EXTERNAL MODULE: ./node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs + 1 modules\nvar floating_ui_dom = __webpack_require__(6885);\n;// ./node_modules/@carbon/react/es/components/FeatureFlags/index.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n/**\n * Our FeatureFlagContext is used alongside the FeatureFlags component to enable\n * or disable feature flags in a given React tree\n */\nconst FeatureFlagContext = /*#__PURE__*/(0,react.createContext)(es/* FeatureFlags */.gH);\n\n/**\n * Supports an object of feature flag values with the `flags` prop, merging them\n * along with the current `FeatureFlagContext` to provide consumers to check if\n * a feature flag is enabled or disabled in a given React tree\n */\nfunction FeatureFlags(_ref) {\n  let {\n    children,\n    flags = {},\n    enableV12TileDefaultIcons = false,\n    enableV12TileRadioIcons = false,\n    enableV12Overflowmenu = false,\n    enableTreeviewControllable = false,\n    enableExperimentalFocusWrapWithoutSentinels = false,\n    enableDialogElement = false,\n    enableV12DynamicFloatingStyles = false\n  } = _ref;\n  const parentScope = (0,react.useContext)(FeatureFlagContext);\n  const [prevParentScope, setPrevParentScope] = (0,react.useState)(parentScope);\n  const combinedFlags = {\n    'enable-v12-tile-default-icons': enableV12TileDefaultIcons,\n    'enable-v12-tile-radio-icons': enableV12TileRadioIcons,\n    'enable-v12-overflowmenu': enableV12Overflowmenu,\n    'enable-treeview-controllable': enableTreeviewControllable,\n    'enable-experimental-focus-wrap-without-sentinels': enableExperimentalFocusWrapWithoutSentinels,\n    'enable-dialog-element': enableDialogElement,\n    'enable-v12-dynamic-floating-styles': enableV12DynamicFloatingStyles,\n    ...flags\n  };\n  const [scope, updateScope] = (0,react.useState)(() => {\n    const scope = (0,es/* createScope */.Ds)(combinedFlags);\n    scope.mergeWithScope(parentScope);\n    return scope;\n  });\n  if (parentScope !== prevParentScope) {\n    const scope = (0,es/* createScope */.Ds)(combinedFlags);\n    scope.mergeWithScope(parentScope);\n    updateScope(scope);\n    setPrevParentScope(parentScope);\n  }\n\n  // We use a custom hook to detect if any of the keys or their values change\n  // for flags that are passed in. If they have changed, then we re-create the\n  // FeatureFlagScope using the new flags\n  useChangedValue(combinedFlags, isEqual, changedFlags => {\n    const scope = (0,es/* createScope */.Ds)(changedFlags);\n    scope.mergeWithScope(parentScope);\n    updateScope(scope);\n  });\n  return /*#__PURE__*/react.createElement(FeatureFlagContext.Provider, {\n    value: scope\n  }, children);\n}\nFeatureFlags.propTypes = {\n  children: (prop_types_default()).node,\n  /**\n   * Provide the feature flags to enabled or disabled in the current Rea,ct tree\n   */\n  flags: deprecate(prop_types_default().objectOf((prop_types_default()).bool), 'The `flags` prop for `FeatureFlag` has ' + 'been deprecated. Please run the `featureflag-deprecate-flags-prop` codemod to migrate to individual boolean props.' + `npx @carbon/upgrade migrate featureflag-deprecate-flags-prop --write`),\n  enableV12TileDefaultIcons: (prop_types_default()).bool,\n  enableV12TileRadioIcons: (prop_types_default()).bool,\n  enableV12Overflowmenu: (prop_types_default()).bool,\n  enableTreeviewControllable: (prop_types_default()).bool,\n  enableExperimentalFocusWrapWithoutSentinels: (prop_types_default()).bool,\n  enableDialogElement: (prop_types_default()).bool,\n  enableV12DynamicFloatingStyles: (prop_types_default()).bool\n};\n\n/**\n * This hook will store previous versions of the given `value` and compare the\n * current value to the previous one using the `compare` function. If the\n * compare function returns true, then the given `callback` is invoked in an\n * effect.\n *\n * @param {any} value\n * @param {Function} compare\n * @param {Function} callback\n */\nfunction useChangedValue(value, compare, callback) {\n  const initialRender = (0,react.useRef)(false);\n  const savedCallback = (0,react.useRef)(callback);\n  const [prevValue, setPrevValue] = (0,react.useState)(value);\n  if (!compare(prevValue, value)) {\n    setPrevValue(value);\n  }\n  (0,react.useEffect)(() => {\n    savedCallback.current = callback;\n  });\n  (0,react.useEffect)(() => {\n    // We only want the callback triggered after the first render\n    if (initialRender.current) {\n      savedCallback.current(prevValue);\n    }\n  }, [prevValue]);\n  (0,react.useEffect)(() => {\n    initialRender.current = true;\n  }, []);\n}\n\n/**\n * Access whether a given flag is enabled or disabled in a given\n * FeatureFlagContext\n *\n * @returns {boolean}\n */\nfunction useFeatureFlag(flag) {\n  const scope = (0,react.useContext)(FeatureFlagContext);\n  return scope.enabled(flag);\n}\n\n/**\n * Access all feature flag information for the given FeatureFlagContext\n *\n * @returns {FeatureFlagScope}\n */\nfunction useFeatureFlags() {\n  return useContext(FeatureFlagContext);\n}\n\n/**\n * Compare two objects and determine if they are equal. This is a shallow\n * comparison since the objects we are comparing are objects with boolean flags\n * from the flags prop in the `FeatureFlags` component\n *\n * @param {object} a\n * @param {object} b\n * @returns {boolean}\n */\nfunction isEqual(a, b) {\n  if (a === b) {\n    return true;\n  }\n  for (const key of Object.keys(a)) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  for (const key of Object.keys(b)) {\n    if (b[key] !== a[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n;// ./node_modules/@carbon/react/es/components/Popover/index.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst PopoverContext = /*#__PURE__*/react.createContext({\n  setFloating: {\n    current: null\n  },\n  caretRef: {\n    current: null\n  },\n  autoAlign: null\n});\n\n/**\n * Deprecated popover alignment values.\n * @deprecated Use NewPopoverAlignment instead.\n */\n\nconst Popover = /*#__PURE__*/react.forwardRef(function PopoverRenderFunction(_ref,\n//this is a workaround, have to come back and fix this.\nforwardRef) {\n  let {\n    isTabTip,\n    align: initialAlign = isTabTip ? 'bottom-start' : 'bottom',\n    as: BaseComponent = 'span',\n    autoAlign = false,\n    autoAlignBoundary,\n    caret = isTabTip ? false : true,\n    className: customClassName,\n    children,\n    dropShadow = true,\n    highContrast = false,\n    onRequestClose,\n    open,\n    alignmentAxisOffset,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const floating = (0,react.useRef)(null);\n  const caretRef = (0,react.useRef)(null);\n  const popover = (0,react.useRef)(null);\n  const enableFloatingStyles = useFeatureFlag('enable-v12-dynamic-floating-styles') || autoAlign;\n  let align = mapPopoverAlign(initialAlign);\n\n  // If the `Popover` is the last focusable item in the tab order, it should also close when the browser window loses focus  (#12922)\n  useWindowEvent('blur', () => {\n    if (open) {\n      onRequestClose?.();\n    }\n  });\n  useWindowEvent('click', _ref2 => {\n    let {\n      target\n    } = _ref2;\n    if (open && target instanceof Node && !popover.current?.contains(target)) {\n      onRequestClose?.();\n    }\n  });\n\n  // Slug styling places a border around the popover content so the caret\n  // needs to be placed 1px further outside the popover content. To do so,\n  // we look to see if any of the children has a className containing \"slug\"\n  const initialCaretHeight = react.Children.toArray(children).some(x => {\n    return x?.props?.className?.includes('slug') || x?.props?.className?.includes('ai-label');\n  }) ? 7 : 6;\n  // These defaults match the defaults defined in packages/styles/scss/components/popover/_popover.scss\n  const popoverDimensions = (0,react.useRef)({\n    offset: 10,\n    caretHeight: initialCaretHeight\n  });\n  useIsomorphicEffect(() => {\n    // The popover is only offset when a caret is present. Technically, the custom properties\n    // accessed below can be set by a user even if caret=false, but doing so does not follow\n    // the design specification for Popover.\n    if (caret && popover.current) {\n      // Gather the dimensions of the caret and prefer the values set via custom properties.\n      // If a value is not set via a custom property, provide a default value that matches the\n      // default values defined in the sass style file\n      const getStyle = window.getComputedStyle(popover.current, null);\n      const offsetProperty = getStyle.getPropertyValue('--cds-popover-offset');\n      const caretProperty = getStyle.getPropertyValue('--cds-popover-caret-height');\n\n      // Handle if the property values are in px or rem.\n      // We want to store just the base number value without a unit suffix\n      if (offsetProperty) {\n        popoverDimensions.current.offset = offsetProperty.includes('px') ? Number(offsetProperty.split('px', 1)[0]) * 1 : Number(offsetProperty.split('rem', 1)[0]) * 16;\n      }\n      if (caretProperty) {\n        popoverDimensions.current.caretHeight = caretProperty.includes('px') ? Number(caretProperty.split('px', 1)[0]) * 1 : Number(caretProperty.split('rem', 1)[0]) * 16;\n      }\n    }\n  });\n  const {\n    refs,\n    floatingStyles,\n    placement,\n    middlewareData\n  } = (0,floating_ui_react/* useFloating */.we)(enableFloatingStyles ? {\n    placement: align,\n    // The floating element is positioned relative to its nearest\n    // containing block (usually the viewport). It will in many cases also\n    // “break” the floating element out of a clipping ancestor.\n    // https://floating-ui.com/docs/misc#clipping\n    strategy: 'fixed',\n    // Middleware order matters, arrow should be last\n    middleware: [(0,floating_ui_react_dom/* offset */.cY)(!isTabTip ? {\n      alignmentAxis: alignmentAxisOffset,\n      mainAxis: popoverDimensions?.current?.offset\n    } : 0), autoAlign && (0,floating_ui_react_dom/* flip */.UU)({\n      fallbackPlacements: isTabTip ? align.includes('bottom') ? ['bottom-start', 'bottom-end', 'top-start', 'top-end'] : ['top-start', 'top-end', 'bottom-start', 'bottom-end'] : align.includes('bottom') ? ['bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end', 'top', 'top-start', 'top-end'] : ['top', 'top-start', 'top-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end', 'bottom', 'bottom-start', 'bottom-end'],\n      fallbackStrategy: 'initialPlacement',\n      fallbackAxisSideDirection: 'start',\n      boundary: autoAlignBoundary\n    }), (0,floating_ui_react_dom/* arrow */.UE)({\n      element: caretRef\n    }), autoAlign && (0,floating_ui_react_dom/* hide */.jD)()],\n    whileElementsMounted: floating_ui_dom/* autoUpdate */.ll\n  } : {}\n  // When autoAlign is turned off & the `enable-v12-dynamic-floating-styles` feature flag is not\n  // enabled, floating-ui will not be used\n  );\n  const value = (0,react.useMemo)(() => {\n    return {\n      floating,\n      setFloating: refs.setFloating,\n      caretRef,\n      autoAlign: autoAlign\n    };\n  }, [refs.setFloating, autoAlign]);\n  if (isTabTip) {\n    const tabTipAlignments = ['bottom-start', 'bottom-end'];\n    if (!tabTipAlignments.includes(align)) {\n      align = 'bottom-start';\n    }\n  }\n  (0,react.useEffect)(() => {\n    if (enableFloatingStyles) {\n      const updatedFloatingStyles = {\n        ...floatingStyles,\n        visibility: middlewareData.hide?.referenceHidden ? 'hidden' : 'visible'\n      };\n      Object.keys(updatedFloatingStyles).forEach(style => {\n        if (refs.floating.current) {\n          refs.floating.current.style[style] = updatedFloatingStyles[style];\n        }\n      });\n      if (caret && middlewareData && middlewareData.arrow && caretRef?.current) {\n        const {\n          x,\n          y\n        } = middlewareData.arrow;\n        const staticSide = {\n          top: 'bottom',\n          right: 'left',\n          bottom: 'top',\n          left: 'right'\n        }[placement.split('-')[0]];\n        caretRef.current.style.left = x != null ? `${x}px` : '';\n        caretRef.current.style.top = y != null ? `${y}px` : '';\n\n        // Ensure the static side gets unset when flipping to other placements' axes.\n        caretRef.current.style.right = '';\n        caretRef.current.style.bottom = '';\n        if (staticSide) {\n          caretRef.current.style[staticSide] = `${-popoverDimensions?.current?.caretHeight}px`;\n        }\n      }\n    }\n  }, [floatingStyles, refs.floating, enableFloatingStyles, middlewareData, placement, caret]);\n  const ref = useMergedRefs([forwardRef, popover]);\n  const currentAlignment = autoAlign && placement !== align ? placement : align;\n  const className = classnames_default()({\n    [`${prefix}--popover-container`]: true,\n    [`${prefix}--popover--caret`]: caret,\n    [`${prefix}--popover--drop-shadow`]: dropShadow,\n    [`${prefix}--popover--high-contrast`]: highContrast,\n    [`${prefix}--popover--open`]: open,\n    [`${prefix}--popover--auto-align ${prefix}--autoalign`]: enableFloatingStyles,\n    [`${prefix}--popover--${currentAlignment}`]: true,\n    [`${prefix}--popover--tab-tip`]: isTabTip\n  }, customClassName);\n  const mappedChildren = react.Children.map(children, child => {\n    const item = child;\n    const displayName = item?.type?.displayName;\n\n    /**\n     * Only trigger elements (button) or trigger components (ToggletipButton) should be\n     * cloned because these will be decorated with a trigger-specific className and ref.\n     *\n     * There are also some specific components that should not be cloned when autoAlign\n     * is on, even if they are a trigger element.\n     */\n    const isTriggerElement = item?.type === 'button';\n    const isTriggerComponent = enableFloatingStyles && displayName && ['ToggletipButton'].includes(displayName);\n    const isAllowedTriggerComponent = enableFloatingStyles && !['ToggletipContent', 'PopoverContent'].includes(displayName);\n    if (/*#__PURE__*/ /*#__PURE__*/react.isValidElement(item) && (isTriggerElement || isTriggerComponent || isAllowedTriggerComponent)) {\n      const className = item?.props?.className;\n      const ref = (item?.props).ref;\n      const tabTipClasses = classnames_default()(`${prefix}--popover--tab-tip__button`, className);\n      return /*#__PURE__*/react.cloneElement(item, {\n        className: isTabTip && item?.type === 'button' ? tabTipClasses : className || '',\n        // With cloneElement, if you pass a `ref`, it overrides the original ref.\n        // https://react.dev/reference/react/cloneElement#parameters\n        // The block below works around this and ensures that the original ref is still\n        // called while allowing the floating-ui reference element to be set as well.\n        // `useMergedRefs` can't be used here because hooks can't be called from within a callback.\n        // More here: https://github.com/facebook/react/issues/8873#issuecomment-489579878\n        ref: node => {\n          // For a popover, there isn't an explicit trigger component, it's just the first child that's\n          // passed in which should *not* be PopoverContent.\n          // For a toggletip there is a specific trigger component, ToggletipButton.\n          // In either of these cases we want to set this as the reference node for floating-ui autoAlign\n          // positioning.\n          if (enableFloatingStyles && item?.type?.displayName !== 'PopoverContent' || enableFloatingStyles && item?.type?.displayName === 'ToggletipButton') {\n            // Set the reference element for floating-ui\n            refs.setReference(node);\n          }\n\n          // Call the original ref, if any\n          if (typeof ref === 'function') {\n            ref(node);\n          } else if (ref !== null && ref !== undefined) {\n            ref.current = node;\n          }\n        }\n      });\n    } else {\n      return item;\n    }\n  });\n  const BaseComponentAsAny = BaseComponent;\n  return /*#__PURE__*/react.createElement(PopoverContext.Provider, {\n    value: value\n  }, /*#__PURE__*/react.createElement(BaseComponentAsAny, _extends({}, rest, {\n    className: className,\n    ref: ref\n  }), enableFloatingStyles || isTabTip ? mappedChildren : children));\n});\n\n// Note: this displayName is temporarily set so that Storybook ArgTable\n// correctly displays the name of this component\nif (false) {}\nPopover.propTypes = {\n  /**\n   * Specify how the popover should align with the trigger element\n   */\n  align: deprecateValuesWithin(prop_types_default().oneOf(['top', 'top-left',\n  // deprecated use top-start instead\n  'top-right',\n  // deprecated use top-end instead\n\n  'bottom', 'bottom-left',\n  // deprecated use bottom-start instead\n  'bottom-right',\n  // deprecated use bottom-end instead\n\n  'left', 'left-bottom',\n  // deprecated use left-end instead\n  'left-top',\n  // deprecated use left-start instead\n\n  'right', 'right-bottom',\n  // deprecated use right-end instead\n  'right-top',\n  // deprecated use right-start instead\n\n  // new values to match floating-ui\n  'top-start', 'top-end', 'bottom-start', 'bottom-end', 'left-end', 'left-start', 'right-end', 'right-start']), ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end'], mapPopoverAlign),\n  /**\n   * Provide a custom element or component to render the top-level node for the\n   * component.\n   */\n  as: prop_types_default().oneOfType([(prop_types_default()).string, (prop_types_default()).elementType]),\n  /**\n   * Will auto-align the popover on first render if it is not visible. This prop is currently experimental and is subject to future changes.\n   */\n  autoAlign: (prop_types_default()).bool,\n  /**\n   * Specify a bounding element to be used for autoAlign calculations. The viewport is used by default. This prop is currently experimental and is subject to future changes.\n   */\n  autoAlignBoundary: prop_types_default().oneOfType([prop_types_default().oneOf(['clippingAncestors']), (prop_types_default()).elementType, prop_types_default().arrayOf((prop_types_default()).elementType), prop_types_default().exact({\n    x: (prop_types_default()).number.isRequired,\n    y: (prop_types_default()).number.isRequired,\n    width: (prop_types_default()).number.isRequired,\n    height: (prop_types_default()).number.isRequired\n  })]),\n  /**\n   * Specify whether a caret should be rendered\n   */\n  caret: (prop_types_default()).bool,\n  /**\n   * Provide elements to be rendered inside of the component\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify whether a drop shadow should be rendered on the popover\n   */\n  dropShadow: (prop_types_default()).bool,\n  /**\n   * Render the component using the high-contrast variant\n   */\n  highContrast: (prop_types_default()).bool,\n  /**\n   * Render the component using the tab tip variant\n   */\n  isTabTip: (prop_types_default()).bool,\n  /**\n   * Specify a handler for closing popover.\n   * The handler should take care of closing the popover, e.g. changing the `open` prop.\n   */\n  onRequestClose: (prop_types_default()).func,\n  /**\n   * Specify whether the component is currently open or closed\n   */\n  open: (prop_types_default()).bool.isRequired\n};\nfunction PopoverContentRenderFunction(\n// eslint-disable-next-line react/prop-types\n_ref3, forwardRef) {\n  let {\n    className,\n    children,\n    ...rest\n  } = _ref3;\n  const prefix = usePrefix();\n  const {\n    setFloating,\n    caretRef,\n    autoAlign\n  } = react.useContext(PopoverContext);\n  const ref = useMergedRefs([setFloating, forwardRef]);\n  const enableFloatingStyles = useFeatureFlag('enable-v12-dynamic-floating-styles') || autoAlign;\n  return /*#__PURE__*/react.createElement(\"span\", _extends({}, rest, {\n    className: `${prefix}--popover`\n  }), /*#__PURE__*/react.createElement(\"span\", {\n    className: classnames_default()(`${prefix}--popover-content`, className),\n    ref: ref\n  }, children, enableFloatingStyles && /*#__PURE__*/react.createElement(\"span\", {\n    className: classnames_default()({\n      [`${prefix}--popover-caret`]: true,\n      [`${prefix}--popover--auto-align`]: true\n    }),\n    ref: caretRef\n  })), !enableFloatingStyles && /*#__PURE__*/react.createElement(\"span\", {\n    className: classnames_default()({\n      [`${prefix}--popover-caret`]: true\n    }),\n    ref: caretRef\n  }));\n}\nconst PopoverContent = /*#__PURE__*/react.forwardRef(PopoverContentRenderFunction);\nPopoverContent.displayName = 'PopoverContent';\nPopoverContent.propTypes = {\n  /**\n   * Provide elements to be rendered inside of the component\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: (prop_types_default()).string\n};\n\n;// ./node_modules/@carbon/react/es/internal/useDelayedState.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n/**\n * `useDelayedState` mirrors `useState` but also allows you to add a delay to\n * when your state updates. You can provide a second argument to `setState`,\n * `delayMs`, which will be the time in milliseconds after which the state is\n * updated.\n *\n * This hook will clean up pending timers in `useEffect` and will cancel any\n * pending timers when a `setState` is called before the state is updated from\n * a previous call\n */\n\nfunction useDelayedState(initialState) {\n  const [state, setState] = (0,react.useState)(initialState);\n  const timeoutId = (0,react.useRef)(null);\n  // We use `useCallback` to match the signature of React's `useState` which will\n  // always return the same reference for the `setState` updater\n  const setStateWithDelay = (0,react.useCallback)(function (stateToSet) {\n    let delayMs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    window.clearTimeout(timeoutId.current ?? undefined);\n    timeoutId.current = null;\n    if (delayMs === 0) {\n      setState(stateToSet);\n      return;\n    }\n    timeoutId.current = window.setTimeout(() => {\n      setState(stateToSet);\n      timeoutId.current = null;\n    }, delayMs);\n  }, []);\n  (0,react.useEffect)(() => {\n    return () => {\n      window.clearTimeout(timeoutId.current ?? undefined);\n    };\n  }, []);\n  return [state, setStateWithDelay];\n}\n\n;// ./node_modules/@carbon/react/es/internal/useNoInteractiveChildren.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nfunction useNoInteractiveChildren(ref) {\n  let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'component should have no interactive child nodes';\n  if (false) {}\n}\nfunction useInteractiveChildrenNeedDescription(ref) {\n  let message = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : `interactive child node(s) should have an \\`aria-describedby\\` property`;\n  if (false) {}\n}\n\n/**\n * Determines if a given DOM node has interactive content, or is itself\n * interactive. It returns the interactive node if one is found\n *\n * @param {HTMLElement} node\n * @returns {HTMLElement}\n */\nfunction getInteractiveContent(node) {\n  if (!node || !node.childNodes) {\n    return null;\n  }\n  if (isFocusable(node)) {\n    return node;\n  }\n  for (const childNode of node.childNodes) {\n    const interactiveNode = getInteractiveContent(childNode);\n    if (interactiveNode) {\n      return interactiveNode;\n    }\n  }\n  return null;\n}\n\n/**\n * Determines if a given DOM node has a role, or has itself a role.\n * It returns the node with a role if one is found\n *\n * @param {HTMLElement} node\n * @returns {HTMLElement}\n */\nfunction getRoleContent(node) {\n  if (!node || !node.childNodes) {\n    return null;\n  }\n  if (node?.getAttribute?.('role') && node.getAttribute('role') !== '') {\n    return node;\n  }\n  for (const childNode of node.childNodes) {\n    const roleNode = getRoleContent(childNode);\n    if (roleNode) {\n      return roleNode;\n    }\n  }\n  return null;\n}\n\n/**\n * Determines if the given element is focusable, or not\n *\n * @param {HTMLElement} element\n * @returns {boolean}\n * @see https://github.com/w3c/aria-practices/blob/0553bb51588ffa517506e2a1b2ca1422ed438c5f/examples/js/utils.js#L68\n */\nfunction isFocusable(element) {\n  if (element.tabIndex === undefined || element.tabIndex < 0) {\n    return false;\n  }\n  if (element.disabled) {\n    return false;\n  }\n  switch (element.nodeName) {\n    case 'A':\n      return !!element.href && element.rel !== 'ignore';\n    case 'INPUT':\n      return element.type !== 'hidden';\n    default:\n      return true;\n  }\n}\n\n;// ./node_modules/@carbon/react/es/components/Tooltip/Tooltip.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Event types that trigger a \"drag\" to stop.\n */\nconst DRAG_STOP_EVENT_TYPES = new Set(['mouseup', 'touchend', 'touchcancel']);\nconst Tooltip = /*#__PURE__*/react.forwardRef((_ref, ref) => {\n  let {\n    as,\n    align = 'top',\n    className: customClassName,\n    children,\n    label,\n    description,\n    enterDelayMs = 100,\n    leaveDelayMs = 300,\n    defaultOpen = false,\n    closeOnActivation = false,\n    dropShadow = false,\n    highContrast = true,\n    ...rest\n  } = _ref;\n  const tooltipRef = (0,react.useRef)(null);\n  const [open, setOpen] = useDelayedState(defaultOpen);\n  const [isDragging, setIsDragging] = (0,react.useState)(false);\n  const [focusByMouse, setFocusByMouse] = (0,react.useState)(false);\n  const [isPointerIntersecting, setIsPointerIntersecting] = (0,react.useState)(false);\n  const id = useId('tooltip');\n  const prefix = usePrefix();\n  const child = react.Children.only(children);\n  const {\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledBy,\n    'aria-describedby': ariaDescribedBy\n  } = child?.props ?? {};\n  const hasLabel = !!label;\n  const hasAriaLabel = typeof ariaLabel === 'string' ? ariaLabel.trim() !== '' : false;\n\n  // An `aria-label` takes precedence over `aria-describedby`, but when it's\n  // needed and the user doesn't specify one, the fallback `id` is used.\n  const labelledBy = hasAriaLabel ? null : hasLabel ? ariaLabelledBy ?? id : undefined;\n\n  // If `aria-label` is present, use any provided `aria-describedby`.\n  // If not, fallback to child's `aria-describedby` or the tooltip `id` if needed.\n  const describedBy = hasAriaLabel ? ariaDescribedBy : ariaDescribedBy ?? (!hasLabel && !ariaLabelledBy ? id : undefined);\n  const triggerProps = {\n    onFocus: () => !focusByMouse && setOpen(true),\n    onBlur: () => {\n      setOpen(false);\n      setFocusByMouse(false);\n    },\n    onClick: () => closeOnActivation && setOpen(false),\n    // This should be placed on the trigger in case the element is disabled\n    onMouseEnter,\n    onMouseLeave,\n    onMouseDown,\n    onMouseMove: onMouseMove,\n    onTouchStart: onDragStart,\n    'aria-labelledby': labelledBy,\n    'aria-describedby': describedBy\n  };\n  function getChildEventHandlers(childProps) {\n    const eventHandlerFunctions = Object.keys(triggerProps).filter(prop => prop.startsWith('on'));\n    const eventHandlers = {};\n    eventHandlerFunctions.forEach(functionName => {\n      eventHandlers[functionName] = evt => {\n        triggerProps[functionName](evt);\n        if (childProps?.[functionName]) {\n          childProps?.[functionName](evt);\n        }\n      };\n    });\n    return eventHandlers;\n  }\n  const onKeyDown = (0,react.useCallback)(event => {\n    if (open && match_match(event, Escape)) {\n      event.stopPropagation();\n      setOpen(false);\n    }\n    if (open && closeOnActivation && (match_match(event, Enter) || match_match(event, Space))) {\n      setOpen(false);\n    }\n  }, [closeOnActivation, open, setOpen]);\n  useIsomorphicEffect(() => {\n    if (!open) {\n      return undefined;\n    }\n    function handleKeyDown(event) {\n      if (match_match(event, Escape)) {\n        onKeyDown(event);\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [open, onKeyDown]);\n  function onMouseEnter() {\n    // Interactive Tags should not support onMouseEnter\n    if (!rest?.onMouseEnter) {\n      setIsPointerIntersecting(true);\n      setOpen(true, enterDelayMs);\n    }\n  }\n  function onMouseDown() {\n    setFocusByMouse(true);\n    onDragStart();\n  }\n  function onMouseLeave() {\n    setIsPointerIntersecting(false);\n    if (isDragging) {\n      return;\n    }\n    setOpen(false, leaveDelayMs);\n  }\n  function onMouseMove(evt) {\n    if (evt.buttons === 1) {\n      setIsDragging(true);\n    } else {\n      setIsDragging(false);\n    }\n  }\n  function onDragStart() {\n    setIsDragging(true);\n  }\n  const onDragStop = (0,react.useCallback)(() => {\n    setIsDragging(false);\n    // Close the tooltip, unless the mouse pointer is within the bounds of the\n    // trigger.\n    if (!isPointerIntersecting) {\n      setOpen(false, leaveDelayMs);\n    }\n  }, [isPointerIntersecting, leaveDelayMs, setOpen]);\n  useNoInteractiveChildren(tooltipRef, 'The Tooltip component must have no interactive content rendered by the' + '`label` or `description` prop');\n  (0,react.useEffect)(() => {\n    if (isDragging) {\n      // Register drag stop handlers.\n      DRAG_STOP_EVENT_TYPES.forEach(eventType => {\n        document.addEventListener(eventType, onDragStop);\n      });\n    }\n    return () => {\n      DRAG_STOP_EVENT_TYPES.forEach(eventType => {\n        document.removeEventListener(eventType, onDragStop);\n      });\n    };\n  }, [isDragging, onDragStop]);\n  return /*#__PURE__*/react.createElement(Popover, _extends({\n    as: as,\n    ref: ref\n  }, rest, {\n    align: align,\n    className: classnames_default()(`${prefix}--tooltip`, customClassName),\n    dropShadow: dropShadow,\n    highContrast: highContrast,\n    onKeyDown: onKeyDown,\n    onMouseLeave: onMouseLeave,\n    open: open\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--tooltip-trigger__wrapper`\n  }, child !== undefined ? /*#__PURE__*/react.cloneElement(child, {\n    ...triggerProps,\n    ...getChildEventHandlers(child.props)\n  }) : null), /*#__PURE__*/react.createElement(PopoverContent, {\n    \"aria-hidden\": open ? 'false' : 'true',\n    className: `${prefix}--tooltip-content`,\n    id: id,\n    onMouseEnter: onMouseEnter,\n    role: \"tooltip\"\n  }, label || description));\n});\nTooltip.propTypes = {\n  /**\n   * Specify how the trigger should align with the tooltip\n   */\n  align: prop_types_default().oneOf(['top', 'top-left',\n  // deprecated use top-start instead\n  'top-right',\n  // deprecated use top-end instead\n\n  'bottom', 'bottom-left',\n  // deprecated use bottom-start instead\n  'bottom-right',\n  // deprecated use bottom-end instead\n\n  'left', 'left-bottom',\n  // deprecated use left-end instead\n  'left-top',\n  // deprecated use left-start instead\n\n  'right', 'right-bottom',\n  // deprecated use right-end instead\n  'right-top',\n  // deprecated use right-start instead\n\n  // new values to match floating-ui\n  'top-start', 'top-end', 'bottom-start', 'bottom-end', 'left-end', 'left-start', 'right-end', 'right-start']),\n  /**\n   * Pass in the child to which the tooltip will be applied\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be applied to the container node\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Determines wether the tooltip should close when inner content is activated (click, Enter or Space)\n   */\n  closeOnActivation: (prop_types_default()).bool,\n  /**\n   * Specify whether the tooltip should be open when it first renders\n   */\n  defaultOpen: (prop_types_default()).bool,\n  /**\n   * Provide the description to be rendered inside of the Tooltip. The\n   * description will use `aria-describedby` and will describe the child node\n   * in addition to the text rendered inside of the child. This means that if you\n   * have text in the child node, that it will be announced alongside the\n   * description to the screen reader.\n   *\n   * Note: if label and description are both provided, label will be used and\n   * description will not be used\n   */\n  description: (prop_types_default()).node,\n  /**\n   * Specify whether a drop shadow should be rendered\n   */\n  dropShadow: (prop_types_default()).bool,\n  /**\n   * Specify the duration in milliseconds to delay before displaying the tooltip\n   */\n  enterDelayMs: (prop_types_default()).number,\n  /**\n   * Render the component using the high-contrast theme\n   */\n  highContrast: (prop_types_default()).bool,\n  /**\n   * Provide the label to be rendered inside of the Tooltip. The label will use\n   * `aria-labelledby` and will fully describe the child node that is provided.\n   * This means that if you have text in the child node, that it will not be\n   * announced to the screen reader.\n   *\n   * Note: if label and description are both provided, description will not be\n   * used\n   */\n  label: (prop_types_default()).node,\n  /**\n   * Specify the duration in milliseconds to delay before hiding the tooltip\n   */\n  leaveDelayMs: (prop_types_default()).number\n};\n\n;// ./node_modules/@carbon/react/es/components/Button/ButtonBase.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\nconst ButtonBase = /*#__PURE__*/react.forwardRef(function ButtonBase(_ref, ref) {\n  let {\n    as,\n    children,\n    className,\n    dangerDescription = 'danger',\n    disabled = false,\n    hasIconOnly = false,\n    href,\n    iconDescription,\n    isExpressive = false,\n    isSelected,\n    kind = 'primary',\n    onBlur,\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    renderIcon: ButtonImageElement,\n    size,\n    tabIndex,\n    type = 'button',\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const buttonClasses = classnames_default()(className, {\n    [`${prefix}--btn`]: true,\n    [`${prefix}--btn--sm`]: size === 'sm' && !isExpressive,\n    // TODO: V12 - Remove this class\n    [`${prefix}--btn--md`]: size === 'md' && !isExpressive,\n    // TODO: V12 - Remove this class\n    [`${prefix}--btn--lg`]: size === 'lg' && !isExpressive,\n    // TODO: V12 - Remove this class\n    [`${prefix}--btn--xl`]: size === 'xl',\n    // TODO: V12 - Remove this class\n    [`${prefix}--btn--2xl`]: size === '2xl',\n    // TODO: V12 - Remove this class\n    [`${prefix}--layout--size-${size}`]: size,\n    [`${prefix}--btn--${kind}`]: kind,\n    [`${prefix}--btn--disabled`]: disabled,\n    [`${prefix}--btn--expressive`]: isExpressive,\n    [`${prefix}--btn--icon-only`]: hasIconOnly,\n    [`${prefix}--btn--selected`]: hasIconOnly && isSelected && kind === 'ghost'\n  });\n  const commonProps = {\n    tabIndex,\n    className: buttonClasses,\n    ref\n  };\n  const buttonImage = !ButtonImageElement ? null : /*#__PURE__*/react.createElement(ButtonImageElement, {\n    \"aria-label\": iconDescription,\n    className: `${prefix}--btn__icon`,\n    \"aria-hidden\": \"true\"\n  });\n  const dangerButtonVariants = ['danger', 'danger--tertiary', 'danger--ghost'];\n  let component = 'button';\n  const assistiveId = useId('danger-description');\n  const {\n    'aria-pressed': ariaPressed,\n    'aria-describedby': ariaDescribedBy\n  } = rest;\n  let otherProps = {\n    disabled,\n    type,\n    'aria-describedby': dangerButtonVariants.includes(kind) ? assistiveId : ariaDescribedBy || undefined,\n    'aria-pressed': ariaPressed ?? (hasIconOnly && kind === 'ghost' ? isSelected : undefined)\n  };\n  const anchorProps = {\n    href\n  };\n  let assistiveText = null;\n  if (dangerButtonVariants.includes(kind)) {\n    assistiveText = /*#__PURE__*/react.createElement(\"span\", {\n      id: assistiveId,\n      className: `${prefix}--visually-hidden`\n    }, dangerDescription);\n  }\n  if (as) {\n    component = as;\n    otherProps = {\n      ...otherProps,\n      ...anchorProps\n    };\n  } else if (href && !disabled) {\n    component = 'a';\n    otherProps = anchorProps;\n  }\n  return /*#__PURE__*/react.createElement(component, {\n    onMouseEnter,\n    onMouseLeave,\n    onFocus,\n    onBlur,\n    onClick,\n    ...rest,\n    ...commonProps,\n    ...otherProps\n  }, assistiveText, children, buttonImage);\n});\n\n;// ./node_modules/@carbon/react/es/components/BadgeIndicator/index.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\nconst BadgeIndicator = /*#__PURE__*/react.forwardRef(function BadgeIndicatorContent(_ref, ref) {\n  let {\n    className: customClassName,\n    count,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const classNames = classnames_default()(`${prefix}--badge-indicator`, customClassName, {\n    [`${prefix}--badge-indicator--count`]: count\n  });\n  const displayCount = count && count > 999 ? '999+' : count;\n  return /*#__PURE__*/react.createElement(\"div\", _extends({\n    className: classNames,\n    ref: ref\n  }, rest), displayCount);\n});\nBadgeIndicator.propTypes = {\n  /**\n   * Specify an optional className to add.\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Count of badge indicator\n   */\n  count: (prop_types_default()).number,\n  /**\n   * Provide an `id` to uniquely identify the BadgeIndidcator\n   */\n  id: (prop_types_default()).string\n};\n\n;// ./node_modules/@carbon/react/es/components/IconButton/index.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst IconButtonKinds = ['primary', 'secondary', 'ghost', 'tertiary'];\nconst IconButton = /*#__PURE__*/react.forwardRef(function IconButton(_ref, ref) {\n  let {\n    align,\n    autoAlign = false,\n    badgeCount,\n    children,\n    className,\n    closeOnActivation = true,\n    defaultOpen = false,\n    disabled,\n    dropShadow = false,\n    enterDelayMs = 100,\n    highContrast = true,\n    kind,\n    label,\n    leaveDelayMs = 100,\n    wrapperClasses,\n    size,\n    isSelected,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const tooltipClasses = classnames_default()(wrapperClasses, `${prefix}--icon-tooltip`, {\n    [`${prefix}--icon-tooltip--disabled`]: disabled\n  });\n  if (badgeCount && (kind !== 'ghost' || size !== 'lg')) {\n    console.warn(\"The prop BadgeCount must be used with hasIconOnly=true, kind='ghost' and size='lg'\");\n  }\n  const badgeId = useId('badge-indicator');\n  return /*#__PURE__*/react.createElement(Tooltip, {\n    align: align,\n    autoAlign: autoAlign,\n    closeOnActivation: closeOnActivation,\n    className: tooltipClasses,\n    defaultOpen: defaultOpen,\n    dropShadow: dropShadow,\n    enterDelayMs: enterDelayMs,\n    highContrast: highContrast,\n    label: label,\n    leaveDelayMs: leaveDelayMs\n  }, /*#__PURE__*/react.createElement(ButtonBase, _extends({}, rest, {\n    disabled: disabled,\n    kind: kind,\n    ref: ref,\n    size: size,\n    isSelected: isSelected,\n    hasIconOnly: true,\n    className: className,\n    \"aria-describedby\": rest['aria-describedby'] || badgeCount && badgeId\n  }), children, !disabled && badgeCount !== undefined && /*#__PURE__*/react.createElement(BadgeIndicator, {\n    id: badgeId,\n    count: badgeCount > 0 ? badgeCount : undefined\n  })));\n});\nIconButton.propTypes = {\n  /**\n   * Specify how the trigger should align with the tooltip\n   */\n  align: deprecateValuesWithin(prop_types_default().oneOf(['top', 'top-left',\n  // deprecated use top-start instead\n  'top-right',\n  // deprecated use top-end instead\n\n  'bottom', 'bottom-left',\n  // deprecated use bottom-start instead\n  'bottom-right',\n  // deprecated use bottom-end instead\n\n  'left', 'left-bottom',\n  // deprecated use left-end instead\n  'left-top',\n  // deprecated use left-start instead\n\n  'right', 'right-bottom',\n  // deprecated use right-end instead\n  'right-top',\n  // deprecated use right-start instead\n\n  // new values to match floating-ui\n  'top-start', 'top-end', 'bottom-start', 'bottom-end', 'left-end', 'left-start', 'right-end', 'right-start']), ['top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'left', 'left-start', 'left-end', 'right', 'right-start', 'right-end'], mapPopoverAlign),\n  /**\n   * **Experimental**: Will attempt to automatically align the tooltip\n   */\n  autoAlign: (prop_types_default()).bool,\n  /**\n   * **Experimental**: Display a badge on the button. An empty/dot badge if 0, a numbered badge if > 0.\n   * Must be used with size=\"lg\", kind=\"ghost\" and hasIconOnly=true\n   */\n  badgeCount: (prop_types_default()).number,\n  /**\n   * Optionally specify an href for your IconButton to become an `<a>` element\n   */\n  href: (prop_types_default()).string,\n  /**\n   * Provide an icon or asset to be rendered inside of the IconButton\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be added to your Button\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Determines whether the tooltip should close when inner content is activated (click, Enter or Space)\n   */\n  closeOnActivation: (prop_types_default()).bool,\n  /**\n   * Specify whether the tooltip should be open when it first renders\n   */\n  defaultOpen: (prop_types_default()).bool,\n  /**\n   * Specify whether a drop shadow should be rendered on the tooltip\n   */\n  dropShadow: (prop_types_default()).bool,\n  /**\n   * Specify whether the Button should be disabled, or not\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Specify the duration in milliseconds to delay before displaying the tooltip\n   */\n  enterDelayMs: (prop_types_default()).number,\n  /**\n   * Specify whether the IconButton is currently selected\n   */\n  isSelected: (prop_types_default()).bool,\n  /**\n   * Render the tooltip using the high-contrast theme\n   */\n  highContrast: (prop_types_default()).bool,\n  /**\n   * Specify the type of button to be used as the base for the IconButton\n   */\n  kind: prop_types_default().oneOf(IconButtonKinds),\n  /**\n   * Provide the label to be rendered inside of the Tooltip. The label will use\n   * `aria-labelledby` and will fully describe the child node that is provided.\n   * If the child node already has an `aria-label`, the tooltip will not apply\n   * `aria-labelledby`. If the child node has `aria-labelledby`, that value will\n   * be used instead. Otherwise, the tooltip will use its own ID as the label.\n   * This means that if you have text in the child node it will not be\n   * announced to the screen reader.\n   * If using `badgeCount={0}`, make sure the label explains that there is a\n   * new notification.\n   */\n  label: (prop_types_default()).node.isRequired,\n  /**\n   * Specify the duration in milliseconds to delay before hiding the tooltip\n   */\n  leaveDelayMs: (prop_types_default()).number,\n  /**\n   * Optionally specify a `rel` when using an `<a>` element.\n   */\n  rel: (prop_types_default()).string,\n  /**\n   * Specify the size of the Button.\n   */\n  size: prop_types_default().oneOf(['sm', 'md', 'lg']),\n  /**\n   * Optionally specify a `target` when using an `<a>` element.\n   */\n  target: (prop_types_default()).string,\n  /**\n   * Specify an optional className to be added to your Tooltip wrapper\n   */\n  wrapperClasses: (prop_types_default()).string\n};\n\n;// ./node_modules/@carbon/react/es/components/Button/Button.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\nconst ButtonKinds = ['primary', 'secondary', 'danger', 'ghost', 'danger--primary', 'danger--ghost', 'danger--tertiary', 'tertiary'];\nconst ButtonSizes = (/* unused pure expression or super */ null && (['sm', 'md', 'lg', 'xl', '2xl']));\nconst ButtonTooltipAlignments = (/* unused pure expression or super */ null && (['start', 'center', 'end']));\nconst ButtonTooltipPositions = (/* unused pure expression or super */ null && (['top', 'right', 'bottom', 'left']));\nfunction isIconOnlyButton(hasIconOnly, _kind) {\n  if (hasIconOnly === true) {\n    return true;\n  }\n  return false;\n}\nconst Button = /*#__PURE__*/react.forwardRef((props, ref) => {\n  const {\n    as,\n    autoAlign = false,\n    children,\n    hasIconOnly = false,\n    tooltipHighContrast = true,\n    tooltipDropShadow = false,\n    iconDescription,\n    kind = 'primary',\n    onBlur,\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseLeave,\n    renderIcon: ButtonImageElement,\n    size,\n    tooltipAlignment = 'center',\n    tooltipPosition = 'top',\n    ...rest\n  } = props;\n  if (ButtonImageElement && !children && !iconDescription) {\n    console.error('Button: renderIcon property specified without also providing an iconDescription property. ' + 'This may impact accessibility for screen reader users.');\n  }\n  const iconOnlyImage = !ButtonImageElement ? null : /*#__PURE__*/react.createElement(ButtonImageElement, null);\n  if (!isIconOnlyButton(hasIconOnly)) {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const {\n      tooltipAlignment,\n      ...propsWithoutTooltipAlignment\n    } = props;\n    return /*#__PURE__*/react.createElement(ButtonBase, _extends({\n      ref: ref\n    }, propsWithoutTooltipAlignment));\n  } else {\n    let align = undefined;\n    if (tooltipPosition === 'top' || tooltipPosition === 'bottom') {\n      if (tooltipAlignment === 'center') {\n        align = tooltipPosition;\n      }\n      if (tooltipAlignment === 'end') {\n        align = `${tooltipPosition}-end`;\n      }\n      if (tooltipAlignment === 'start') {\n        align = `${tooltipPosition}-start`;\n      }\n    }\n    if (tooltipPosition === 'right' || tooltipPosition === 'left') {\n      align = tooltipPosition;\n    }\n    return (/*#__PURE__*/\n      // @ts-expect-error - `IconButton` does not support all `size`s that\n      // `Button` supports.\n      //\n      // TODO: What should be done here?\n      // 1. Should the `IconButton` not be rendered if the `size` is not\n      //    supported?\n      // 2. Should an error be thrown?\n      // 3. Something else?\n      react.createElement(IconButton, _extends({}, rest, {\n        ref: ref,\n        as: as,\n        align: align,\n        label: iconDescription,\n        kind: kind,\n        size: size,\n        highContrast: tooltipHighContrast,\n        dropShadow: tooltipDropShadow,\n        onMouseEnter: onMouseEnter,\n        onMouseLeave: onMouseLeave,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        autoAlign: autoAlign,\n        onClick: onClick,\n        renderIcon: iconOnlyImage ? null : ButtonImageElement // avoid doubling the icon.\n      }), iconOnlyImage ?? children)\n    );\n  }\n});\nButton.displayName = 'Button';\nButton.propTypes = {\n  /**\n   * Specify how the button itself should be rendered.\n   * Make sure to apply all props to the root node and render children appropriately\n   */\n  as: prop_types_default().oneOfType([(prop_types_default()).func, (prop_types_default()).string, (prop_types_default()).elementType]),\n  /**\n   * **Experimental**: Will attempt to automatically align the tooltip\n   */\n  autoAlign: (prop_types_default()).bool,\n  /**\n   * Specify the content of your Button\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be added to your Button\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify the message read by screen readers for the danger button variant\n   */\n  dangerDescription: (prop_types_default()).string,\n  /**\n   * Specify whether the Button should be disabled, or not\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Specify if the button is an icon-only button\n   */\n  hasIconOnly: (prop_types_default()).bool,\n  /**\n   * Optionally specify an href for your Button to become an `<a>` element\n   */\n  href: (prop_types_default()).string,\n  /**\n   * If specifying the `renderIcon` prop, provide a description for that icon that can\n   * be read by screen readers\n   */\n  iconDescription: props => {\n    if (props.renderIcon && !props.children && !props.iconDescription) {\n      return new Error('renderIcon property specified without also providing an iconDescription property.');\n    }\n    return null;\n  },\n  /**\n   * Specify whether the Button is expressive, or not\n   */\n  isExpressive: (prop_types_default()).bool,\n  /**\n   * Specify whether the Button is currently selected. Only applies to the Ghost variant.\n   */\n  isSelected: (prop_types_default()).bool,\n  /**\n   * Specify the kind of Button you want to create\n   */\n  kind: (props, propName, componentName) => {\n    const {\n      hasIconOnly\n    } = props;\n    const validKinds = hasIconOnly ? IconButtonKinds : ButtonKinds;\n    if (props[propName] === undefined) {\n      return null;\n    }\n    if (!validKinds.includes(props[propName])) {\n      return new Error(`Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Expected one of ${validKinds.join(', ')}.`);\n    }\n    return null;\n  },\n  /**\n   * Provide an optional function to be called when the button element\n   * loses focus\n   */\n  onBlur: (prop_types_default()).func,\n  /**\n   * Provide an optional function to be called when the button element\n   * is clicked\n   */\n  onClick: (prop_types_default()).func,\n  /**\n   * Provide an optional function to be called when the button element\n   * receives focus\n   */\n  onFocus: (prop_types_default()).func,\n  /**\n   * Provide an optional function to be called when the mouse\n   * enters the button element\n   */\n  onMouseEnter: (prop_types_default()).func,\n  /**\n   * Provide an optional function to be called when the mouse\n   * leaves the button element\n   */\n  onMouseLeave: (prop_types_default()).func,\n  /**\n   * Optionally specify a `rel` when using an `<a>` element.\n   */\n  rel: (prop_types_default()).string,\n  /**\n   * A component used to render an icon.\n   */\n  renderIcon: prop_types_default().oneOfType([(prop_types_default()).func, (prop_types_default()).object]),\n  /**\n   * Optional prop to specify the role of the Button\n   */\n  role: (prop_types_default()).string,\n  /**\n   * Specify the size of the button, from the following list of sizes:\n   */\n  size: prop_types_default().oneOf(['sm', 'md', 'lg', 'xl', '2xl']),\n  /**\n   * Optional prop to specify the tabIndex of the Button\n   */\n  tabIndex: (prop_types_default()).number,\n  /**\n   * Optionally specify a `target` when using an `<a>` element.\n   */\n  target: (prop_types_default()).string,\n  /**\n   * Specify the alignment of the tooltip to the icon-only button.\n   * Can be one of: start, center, or end.\n   */\n  tooltipAlignment: prop_types_default().oneOf(['start', 'center', 'end']),\n  /**\n   * Enable drop shadow for tooltips for icon-only buttons.\n   */\n  tooltipDropShadow: (prop_types_default()).bool,\n  /**\n   * Enable high-contrast theme for tooltips for icon-only buttons.\n   * Defaults to true.\n   */\n  tooltipHighContrast: (prop_types_default()).bool,\n  /**\n   * Specify the direction of the tooltip for icon-only buttons.\n   * Can be either top, right, bottom, or left.\n   */\n  tooltipPosition: prop_types_default().oneOf(['top', 'right', 'bottom', 'left']),\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: prop_types_default().oneOf(['button', 'reset', 'submit'])\n};\n\n// EXTERNAL MODULE: ./node_modules/@carbon/icons-react/es/generated/bucket-18.js\nvar bucket_18 = __webpack_require__(42);\n;// ./node_modules/@carbon/react/es/internal/noopFn.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nconst noopFn = () => {};\n\n;// ./node_modules/@carbon/react/es/components/Checkbox/Checkbox.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\nconst Checkbox = /*#__PURE__*/react.forwardRef((_ref, ref) => {\n  let {\n    className,\n    decorator,\n    helperText,\n    id,\n    labelText,\n    onChange = noopFn,\n    onClick,\n    indeterminate = false,\n    invalid,\n    invalidText,\n    hideLabel,\n    readOnly,\n    title = '',\n    warn,\n    warnText,\n    slug,\n    ...other\n  } = _ref;\n  const prefix = usePrefix();\n  const showWarning = !readOnly && !invalid && warn;\n  const showHelper = !invalid && !warn;\n  const checkboxGroupInstanceId = useId();\n  const helperId = !helperText ? undefined : `checkbox-helper-text-${checkboxGroupInstanceId}`;\n  const helper = helperText ? /*#__PURE__*/react.createElement(\"div\", {\n    id: helperId,\n    className: `${prefix}--form__helper-text`\n  }, helperText) : null;\n  const wrapperClasses = classnames_default()(`${prefix}--form-item`, `${prefix}--checkbox-wrapper`, className, {\n    [`${prefix}--checkbox-wrapper--readonly`]: readOnly,\n    [`${prefix}--checkbox-wrapper--invalid`]: !readOnly && invalid,\n    [`${prefix}--checkbox-wrapper--warning`]: showWarning,\n    [`${prefix}--checkbox-wrapper--slug`]: slug,\n    [`${prefix}--checkbox-wrapper--decorator`]: decorator\n  });\n  const innerLabelClasses = classnames_default()(`${prefix}--checkbox-label-text`, {\n    [`${prefix}--visually-hidden`]: hideLabel\n  });\n  let normalizedDecorator = /*#__PURE__*/ /*#__PURE__*/react.isValidElement(slug ?? decorator) ? slug ?? decorator : null;\n  if (normalizedDecorator && normalizedDecorator['type']?.displayName === 'AILabel') {\n    const size = normalizedDecorator.props?.['kind'] === 'inline' ? 'md' : 'mini';\n    normalizedDecorator = /*#__PURE__*/react.cloneElement(normalizedDecorator, {\n      size\n    });\n  }\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: wrapperClasses\n  }, /*#__PURE__*/react.createElement(\"input\", _extends({}, other, {\n    type: \"checkbox\",\n    \"data-invalid\": invalid ? true : undefined,\n    onChange: evt => {\n      if (!readOnly && onChange) {\n        onChange(evt, {\n          checked: evt.target.checked,\n          id\n        });\n      }\n    },\n    className: `${prefix}--checkbox`,\n    id: id,\n    ref: el => {\n      if (el) {\n        el.indeterminate = indeterminate ?? false;\n      }\n      if (typeof ref === 'function') {\n        ref(el);\n      } else if (ref && 'current' in ref) {\n        ref.current = el;\n      }\n    }\n    // readonly attribute not applicable to type=\"checkbox\"\n    // see - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox\n    ,\n\n    \"aria-readonly\": readOnly,\n    onClick: evt => {\n      if (readOnly) {\n        // prevent default stops the checkbox being updated\n        evt.preventDefault();\n      }\n      // pass onClick event on to the user even if readonly\n      if (onClick) {\n        onClick(evt);\n      }\n    }\n  })), /*#__PURE__*/react.createElement(\"label\", {\n    htmlFor: id,\n    className: `${prefix}--checkbox-label`,\n    title: title\n  }, /*#__PURE__*/react.createElement(Text, {\n    className: innerLabelClasses\n  }, labelText, slug ? normalizedDecorator : decorator ? /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--checkbox-wrapper-inner--decorator`\n  }, normalizedDecorator) : '')), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--checkbox__validation-msg`\n  }, !readOnly && invalid && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(bucket_18/* WarningFilled */.BF, {\n    className: `${prefix}--checkbox__invalid-icon`\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--form-requirement`\n  }, invalidText)), showWarning && /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(bucket_18/* WarningAltFilled */.OR, {\n    className: `${prefix}--checkbox__invalid-icon ${prefix}--checkbox__invalid-icon--warning`\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--form-requirement`\n  }, warnText))), showHelper && helper);\n});\nCheckbox.propTypes = {\n  /**\n   * Specify whether the underlying input should be checked\n   */\n  checked: (prop_types_default()).bool,\n  /**\n   * Specify an optional className to be applied to the <label> node\n   */\n  className: (prop_types_default()).string,\n  /**\n   * **Experimental**: Provide a decorator component to be rendered inside the `Checkbox` component\n   */\n  decorator: (prop_types_default()).node,\n  /**\n   * Specify whether the underlying input should be checked by default\n   */\n  defaultChecked: (prop_types_default()).bool,\n  /**\n   * Specify whether the Checkbox should be disabled\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Provide text for the form group for additional help\n   */\n  helperText: (prop_types_default()).node,\n  /**\n   * Specify whether the label should be hidden, or not\n   */\n  hideLabel: (prop_types_default()).bool,\n  /**\n   * Provide an `id` to uniquely identify the Checkbox input\n   */\n  id: (prop_types_default()).string.isRequired,\n  /**\n   * Specify whether the Checkbox is in an indeterminate state\n   */\n  indeterminate: (prop_types_default()).bool,\n  /**\n   * Specify whether the Checkbox is currently invalid\n   */\n  invalid: (prop_types_default()).bool,\n  /**\n   * Provide the text that is displayed when the Checkbox is in an invalid state\n   */\n  invalidText: (prop_types_default()).node,\n  /**\n   * Provide a label to provide a description of the Checkbox input that you are\n   * exposing to the user\n   */\n  labelText: (prop_types_default()).node.isRequired,\n  /**\n   * Provide an optional handler that is called when the internal state of\n   * Checkbox changes. This handler is called with event and state info.\n   * `(event, { checked, id }) => void`\n   */\n  onChange: (prop_types_default()).func,\n  /**\n   * Specify whether the Checkbox is read-only\n   */\n  readOnly: (prop_types_default()).bool,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `Checkbox` component\n   */\n  slug: deprecate((prop_types_default()).node, 'The `slug` prop has been deprecated and will be removed in the next major version. Use the decorator prop instead.'),\n  /**\n   * Specify a title for the <label> node for the Checkbox\n   */\n  title: (prop_types_default()).string,\n  /**\n   * Specify whether the Checkbox is currently in warning state\n   */\n  warn: (prop_types_default()).bool,\n  /**\n   * Provide the text that is displayed when the Checkbox is in warning state\n   */\n  warnText: (prop_types_default()).node\n};\nCheckbox.displayName = 'Checkbox';\n\n// EXTERNAL MODULE: ./node_modules/downshift/dist/downshift.esm.js + 1 modules\nvar downshift_esm = __webpack_require__(4656);\n;// ./node_modules/@carbon/react/es/components/FluidForm/FormContext.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst FormContext = /*#__PURE__*/(0,react.createContext)({\n  isFluid: false\n});\n\n;// ./node_modules/@carbon/react/es/components/ListBox/ListBoxPropTypes.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst listBoxTypes = ['default', 'inline'];\nconst listBoxSizes = ['sm', 'md', 'lg'];\nconst ListBoxTypePropType = prop_types_default().oneOf(listBoxTypes);\nconst ListBoxSizePropType = prop_types_default().oneOf(listBoxSizes);\n\n;// ./node_modules/@carbon/react/es/components/ListBox/ListBox.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\nconst handleOnKeyDown = event => {\n  if (event.keyCode === 27) {\n    event.stopPropagation();\n  }\n};\nconst handleClick = event => {\n  event.preventDefault();\n  event.stopPropagation();\n};\n/**\n * `ListBox` is a generic container component that handles creating the\n * container class name in response to certain props.\n */\nconst ListBox = /*#__PURE__*/(0,react.forwardRef)((props, ref) => {\n  const {\n    children,\n    className: containerClassName,\n    disabled = false,\n    type = 'default',\n    size,\n    invalid,\n    invalidText,\n    invalidTextId,\n    warn,\n    warnText,\n    warnTextId,\n    light,\n    isOpen,\n    ...rest\n  } = props;\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = (0,react.useContext)(FormContext);\n  const showWarning = !invalid && warn;\n  const className = classnames_default()({\n    ...(containerClassName && {\n      [containerClassName]: true\n    }),\n    [`${prefix}--list-box`]: true,\n    [`${prefix}--list-box--${size}`]: size,\n    [`${prefix}--list-box--inline`]: type === 'inline',\n    [`${prefix}--list-box--disabled`]: disabled,\n    [`${prefix}--list-box--light`]: light,\n    [`${prefix}--list-box--expanded`]: isOpen,\n    [`${prefix}--list-box--invalid`]: invalid,\n    [`${prefix}--list-box--warning`]: showWarning\n  });\n  return /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(\"div\", _extends({}, rest, {\n    className: className,\n    ref: ref,\n    onKeyDown: handleOnKeyDown,\n    onClick: handleClick,\n    \"data-invalid\": invalid || undefined\n  }), children), isFluid && /*#__PURE__*/react.createElement(\"hr\", {\n    className: `${prefix}--list-box__divider`\n  }), invalid ? /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--form-requirement`,\n    id: invalidTextId\n  }, invalidText) : null, showWarning ? /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--form-requirement`,\n    id: warnTextId\n  }, warnText) : null);\n});\nListBox.displayName = 'ListBox';\nListBox.propTypes = {\n  /**\n   * Provide the contents of your ListBox\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify a class name to be applied on the containing list box node\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify whether the ListBox is currently disabled\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Specify whether the control is currently invalid\n   */\n  invalid: (prop_types_default()).bool,\n  /**\n   * Specify the text to be displayed when the control is invalid\n   */\n  invalidText: (prop_types_default()).node,\n  /**\n   * Specify the id to be applied to the element containing the invalid text\n   */\n  invalidTextId: (prop_types_default()).string,\n  /**\n   * Specify if the control should render open\n   */\n  isOpen: (prop_types_default()).bool,\n  /**\n   * `true` to use the light version. For use on $ui-01 backgrounds only.\n   * Don't use this to make tile background color same as container background color.\n   */\n  light: deprecate((prop_types_default()).bool, 'The `light` prop for `ListBox` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxSizePropType,\n  /**\n   * Specify the \"type\" of the ListBox. Currently supports either `default` or\n   * `inline` as an option.\n   */\n  type: ListBoxTypePropType,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: (prop_types_default()).bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: (prop_types_default()).string,\n  /**\n   * Specify the id to be applied to the element containing the warn text\n   */\n  warnTextId: (prop_types_default()).string\n};\n\n;// ./node_modules/@carbon/react/es/components/ListBox/ListBoxField.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n/**\n * `ListBoxField` is responsible for creating the containing node for valid\n * elements inside of a field. It also provides a11y-related attributes like\n * `role` to make sure a user can focus the given field.\n */\nfunction ListBoxField(_ref) {\n  let {\n    children,\n    disabled,\n    tabIndex,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  return /*#__PURE__*/react.createElement(\"div\", _extends({\n    className: `${prefix}--list-box__field`,\n    tabIndex: !disabled && tabIndex || -1\n  }, rest), children);\n}\nListBoxField.propTypes = {\n  /**\n   * Typically set by `getToggleButtonProps`, this should specify whether the\n   * field has a popup.\n   */\n  'aria-haspopup': prop_types_default().oneOfType([(prop_types_default()).string, (prop_types_default()).bool]),\n  /**\n   * Provide the contents of your ListBoxField\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify if the parent <ListBox> is disabled\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * The role for the component, should be set by `getToggleButtonProps` coming\n   * from Downshift\n   */\n  role: (prop_types_default()).string,\n  /**\n   * Optional prop to specify the tabIndex of the <ListBox> trigger button\n   */\n  tabIndex: prop_types_default().oneOfType([(prop_types_default()).number, (prop_types_default()).string])\n};\n\n;// ./node_modules/@carbon/react/es/components/ListBox/ListBoxMenuItem.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n/**\n * Determines if the content of an element is truncated.\n *\n * Merges a forwarded ref with a local ref to check the element's dimensions.\n *\n * @template T\n * @param forwardedRef - A ref passed from the parent component.\n * @param deps - Dependencies to re-run the truncation check.\n * @returns An object containing the truncation state and the merged ref.\n */\nconst useIsTruncated = function (forwardedRef) {\n  let deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const localRef = (0,react.useRef)(null);\n  const mergedRef = useMergedRefs([...(forwardedRef ? [forwardedRef] : []), localRef]);\n  const [isTruncated, setIsTruncated] = (0,react.useState)(false);\n  (0,react.useEffect)(() => {\n    const element = localRef.current;\n    if (element) {\n      const {\n        offsetWidth,\n        scrollWidth\n      } = element;\n      setIsTruncated(offsetWidth < scrollWidth);\n    }\n  }, [localRef, ...deps]);\n  return {\n    isTruncated,\n    ref: mergedRef\n  };\n};\n/**\n * `ListBoxMenuItem` is a helper component for managing the container class\n * name, alongside any classes for any corresponding states, for a generic list\n * box menu item.\n */\nconst ListBoxMenuItem = /*#__PURE__*/(0,react.forwardRef)((_ref, forwardedRef) => {\n  let {\n    children,\n    isActive = false,\n    isHighlighted = false,\n    title,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const menuItemOptionRefProp = forwardedRef && typeof forwardedRef !== 'function' ? forwardedRef.menuItemOptionRef : undefined;\n  const {\n    isTruncated,\n    ref: menuItemOptionRef\n  } = useIsTruncated(menuItemOptionRefProp, [children]);\n  const className = classnames_default()(`${prefix}--list-box__menu-item`, {\n    [`${prefix}--list-box__menu-item--active`]: isActive,\n    [`${prefix}--list-box__menu-item--highlighted`]: isHighlighted\n  });\n  return /*#__PURE__*/react.createElement(\"li\", _extends({}, rest, {\n    className: className,\n    title: isTruncated ? title : undefined\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--list-box__menu-item__option`,\n    ref: menuItemOptionRef\n  }, children));\n});\nListBoxMenuItem.displayName = 'ListBoxMenuItem';\nListBoxMenuItem.propTypes = {\n  /**\n   * Specify any children nodes that should be rendered inside of the ListBox\n   * Menu Item\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify if the item should be disabled\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Specify whether the current menu item is \"active\".\n   */\n  isActive: (prop_types_default()).bool,\n  /**\n   * Specify whether the current menu item is \"highlighted\".\n   */\n  isHighlighted: (prop_types_default()).bool,\n  /**\n   * Provide an optional tooltip for the ListBoxMenuItem\n   */\n  title: (prop_types_default()).string\n};\n\n;// ./node_modules/@carbon/react/es/components/ListBox/ListBoxMenu.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\nconst frFn = react.forwardRef;\n\n/**\n * `ListBoxMenu` is a simple container node that isolates the `list-box__menu`\n * class into a single component. It is also being used to validate given\n * `children` components.\n */\nconst ListBoxMenu = frFn((_ref, ref) => {\n  let {\n    children,\n    id,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  return /*#__PURE__*/react.createElement(\"ul\", _extends({\n    ref: ref,\n    id: id,\n    className: `${prefix}--list-box__menu`,\n    role: \"listbox\"\n  }, rest), children);\n});\nListBoxMenu.displayName = 'ListBoxMenu';\nListBoxMenu.propTypes = {\n  /**\n   * Provide the contents of your ListBoxMenu\n   */\n  children: prop_types_default().oneOfType([(prop_types_default()).node, prop_types_default().arrayOf(prop_types_default().oneOf([ListBoxMenuItem])),\n  /**\n   * allow single item using the workaround for functional components\n   * https://github.com/facebook/react/issues/2979#issuecomment-222379916\n   */\n  prop_types_default().shape({\n    type: prop_types_default().oneOf([ListBoxMenuItem])\n  }), (prop_types_default()).bool // used in Dropdown for closed state\n  ]),\n  /**\n   * Specify a custom `id`\n   */\n  id: (prop_types_default()).string.isRequired\n};\n\n;// ./node_modules/@carbon/react/es/components/ListBox/ListBoxMenuIcon.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\nconst defaultTranslations = {\n  'close.menu': 'Close menu',\n  'open.menu': 'Open menu'\n};\nconst defaultTranslateWithId = id => defaultTranslations[id];\n/**\n * `ListBoxMenuIcon` is used to orient the icon up or down depending on the\n * state of the menu for a given `ListBox`\n */\nconst ListBoxMenuIcon = _ref => {\n  let {\n    isOpen,\n    translateWithId: t = defaultTranslateWithId\n  } = _ref;\n  const prefix = usePrefix();\n  const className = classnames_default()(`${prefix}--list-box__menu-icon`, {\n    [`${prefix}--list-box__menu-icon--open`]: isOpen\n  });\n  const description = isOpen ? t('close.menu') : t('open.menu');\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: className\n  }, /*#__PURE__*/react.createElement(bucket_3/* ChevronDown */.yQ, {\n    name: \"chevron--down\",\n    \"aria-label\": description\n  }, /*#__PURE__*/react.createElement(\"title\", null, description)));\n};\nListBoxMenuIcon.propTypes = {\n  /**\n   * Specify whether the menu is currently open, which will influence the\n   * direction of the menu icon\n   */\n  isOpen: (prop_types_default()).bool.isRequired,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes a ListBoxMenuIconTranslationKey and should\n   * return a string message for that given message id.\n   */\n  translateWithId: (prop_types_default()).func\n};\n\n;// ./node_modules/@carbon/react/es/components/ListBox/ListBoxSelection.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\nvar _Close, _Close2;\nconst translationIds = {\n  'clear.all': 'clear.all',\n  'clear.selection': 'clear.selection'\n};\n\n/**\n * Message ids that will be passed to translateWithId().\n */\n\nconst ListBoxSelection_defaultTranslations = {\n  [translationIds['clear.all']]: 'Clear all selected items',\n  [translationIds['clear.selection']]: 'Clear selected item'\n};\nconst ListBoxSelection_defaultTranslateWithId = id => ListBoxSelection_defaultTranslations[id];\n\n/**\n * `ListBoxSelection` is used to provide controls for clearing a selection, in\n * addition to conditionally rendering a badge if the control has more than one\n * selection.\n */\nconst ListBoxSelection = _ref => {\n  let {\n    clearSelection,\n    selectionCount,\n    translateWithId: t = ListBoxSelection_defaultTranslateWithId,\n    disabled,\n    onClearSelection,\n    readOnly\n  } = _ref;\n  const prefix = usePrefix();\n  const className = classnames_default()(`${prefix}--list-box__selection`, {\n    [`${prefix}--tag--filter`]: selectionCount,\n    [`${prefix}--list-box__selection--multi`]: selectionCount\n  });\n  const handleOnClick = event => {\n    event.stopPropagation();\n    if (disabled || readOnly) {\n      return;\n    }\n    clearSelection(event);\n    if (onClearSelection) {\n      onClearSelection(event);\n    }\n  };\n  const description = selectionCount ? t('clear.all') : t('clear.selection');\n  const tagClasses = classnames_default()(`${prefix}--tag`, `${prefix}--tag--filter`, `${prefix}--tag--high-contrast`, {\n    [`${prefix}--tag--disabled`]: disabled\n  });\n\n  /* eslint-disable jsx-a11y/click-events-have-key-events */\n  return selectionCount ? /*#__PURE__*/react.createElement(\"div\", {\n    className: tagClasses\n  }, /*#__PURE__*/react.createElement(\"span\", {\n    className: `${prefix}--tag__label`,\n    title: `${selectionCount}`\n  }, selectionCount), /*#__PURE__*/react.createElement(\"div\", {\n    role: \"button\",\n    tabIndex: -1,\n    className: `${prefix}--tag__close-icon`,\n    onClick: handleOnClick,\n    \"aria-label\": t('clear.all'),\n    title: description,\n    \"aria-disabled\": readOnly ? true : undefined\n  }, _Close || (_Close = /*#__PURE__*/react.createElement(bucket_3/* Close */.bm, null)))) : /*#__PURE__*/react.createElement(\"div\", {\n    role: \"button\",\n    className: className,\n    tabIndex: -1,\n    onClick: handleOnClick,\n    \"aria-label\": description,\n    title: description\n  }, selectionCount, _Close2 || (_Close2 = /*#__PURE__*/react.createElement(bucket_3/* Close */.bm, null)));\n};\nListBoxSelection.propTypes = {\n  /**\n   * Specify a function to be invoked when a user interacts with the clear\n   * selection element.\n   */\n  clearSelection: (prop_types_default()).func.isRequired,\n  /**\n   * Specify whether or not the clear selection element should be disabled\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Specify an optional `onClearSelection` handler that is called when the underlying\n   * element is cleared\n   */\n  onClearSelection: (prop_types_default()).func,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: (prop_types_default()).bool,\n  /**\n   * Specify an optional `selectionCount` value that will be used to determine\n   * whether the selection should display a badge or a single clear icon.\n   */\n  selectionCount: (prop_types_default()).number,\n  /**\n   * i18n hook used to provide the appropriate description for the given menu\n   * icon. This function takes in an id defined in `translationIds` and should\n   * return a string message for that given message id.\n   */\n  translateWithId: (prop_types_default()).func\n};\n\n;// ./node_modules/@carbon/react/es/components/ListBox/index.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\nconst ListBox_ListBox = Object.assign(ListBox, {\n  Field: ListBoxField,\n  Menu: ListBoxMenu,\n  MenuIcon: ListBoxMenuIcon,\n  MenuItem: ListBoxMenuItem,\n  Selection: ListBoxSelection\n});\n\n;// ./node_modules/@carbon/react/es/tools/mergeRefs.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * @param {...Ref<Element>} refs List of React refs to merge.\n * @returns {Ref<Element>} Merged React ref.\n */\nconst mergeRefs = function () {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return el => {\n    refs.forEach(ref => {\n      // https://github.com/facebook/react/issues/13029#issuecomment-410002316\n      if (typeof ref === 'function') {\n        ref(el);\n      } else if (Object(ref) === ref) {\n        ref.current = el;\n      }\n    });\n  };\n};\nvar mergeRefs$1 = mergeRefs;\n\n;// ./node_modules/@carbon/react/es/components/Dropdown/Dropdown.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst {\n  ItemMouseMove,\n  MenuMouseLeave\n} = downshift_esm/* useSelect */.WM.stateChangeTypes;\nconst defaultItemToString = item => {\n  if (typeof item === 'string') {\n    return item;\n  }\n  if (typeof item === 'number') {\n    return `${item}`;\n  }\n  if (item !== null && typeof item === 'object' && 'label' in item && typeof item['label'] === 'string') {\n    return item['label'];\n  }\n  return '';\n};\n/**\n * Custom state reducer for `useSelect` in Downshift, providing control over\n * state changes.\n *\n * This function is called each time `useSelect` updates its internal state or\n * triggers `onStateChange`. It allows for fine-grained control of state\n * updates by modifying or overriding the default changes from Downshift's\n * reducer.\n * https://github.com/downshift-js/downshift/tree/master/src/hooks/useSelect#statereducer\n *\n * @param {Object} state - The current full state of the Downshift component.\n * @param {Object} actionAndChanges - Contains the action type and proposed\n * changes from the default Downshift reducer.\n * @param {Object} actionAndChanges.changes - Suggested state changes.\n * @param {string} actionAndChanges.type - The action type for the state\n * change (e.g., item selection).\n * @returns {Object} - The modified state based on custom logic or default\n * changes if no custom logic applies.\n */\nfunction stateReducer(state, actionAndChanges) {\n  const {\n    changes,\n    type\n  } = actionAndChanges;\n  switch (type) {\n    case ItemMouseMove:\n    case MenuMouseLeave:\n      if (changes.highlightedIndex === state.highlightedIndex) {\n        // Prevent state update if highlightedIndex hasn't changed\n        return state;\n      }\n      return changes;\n    default:\n      return changes;\n  }\n}\nconst Dropdown = /*#__PURE__*/react.forwardRef((_ref, ref) => {\n  let {\n    autoAlign = false,\n    className: containerClassName,\n    decorator,\n    disabled = false,\n    direction = 'bottom',\n    items: itemsProp,\n    label,\n    ['aria-label']: ariaLabel,\n    ariaLabel: deprecatedAriaLabel,\n    itemToString = defaultItemToString,\n    itemToElement = null,\n    renderSelectedItem,\n    type = 'default',\n    size: size$1,\n    onChange,\n    id,\n    titleText = '',\n    hideLabel,\n    helperText = '',\n    translateWithId,\n    light,\n    invalid,\n    invalidText,\n    warn,\n    warnText,\n    initialSelectedItem,\n    selectedItem: controlledSelectedItem,\n    downshiftProps,\n    readOnly,\n    slug,\n    ...other\n  } = _ref;\n  const enableFloatingStyles = useFeatureFlag('enable-v12-dynamic-floating-styles');\n  const {\n    refs,\n    floatingStyles,\n    middlewareData\n  } = (0,floating_ui_react/* useFloating */.we)(enableFloatingStyles || autoAlign ? {\n    placement: direction,\n    // The floating element is positioned relative to its nearest\n    // containing block (usually the viewport). It will in many cases also\n    // “break” the floating element out of a clipping ancestor.\n    // https://floating-ui.com/docs/misc#clipping\n    strategy: 'fixed',\n    // Middleware order matters, arrow should be last\n    middleware: [(0,floating_ui_react_dom/* size */.Ej)({\n      apply(_ref2) {\n        let {\n          rects,\n          elements\n        } = _ref2;\n        Object.assign(elements.floating.style, {\n          width: `${rects.reference.width}px`\n        });\n      }\n    }), autoAlign && (0,floating_ui_react_dom/* flip */.UU)(), autoAlign && (0,floating_ui_react_dom/* hide */.jD)()],\n    whileElementsMounted: floating_ui_dom/* autoUpdate */.ll\n  } : {}\n  // When autoAlign is turned off & the `enable-v12-dynamic-floating-styles` feature flag is not\n  // enabled, floating-ui will not be used\n  );\n  (0,react.useEffect)(() => {\n    if (enableFloatingStyles || autoAlign) {\n      const updatedFloatingStyles = {\n        ...floatingStyles,\n        visibility: middlewareData.hide?.referenceHidden ? 'hidden' : 'visible'\n      };\n      Object.keys(updatedFloatingStyles).forEach(style => {\n        if (refs.floating.current) {\n          refs.floating.current.style[style] = updatedFloatingStyles[style];\n        }\n      });\n    }\n  }, [floatingStyles, autoAlign, refs.floating]);\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = (0,react.useContext)(FormContext);\n  const onSelectedItemChange = (0,react.useCallback)(_ref3 => {\n    let {\n      selectedItem\n    } = _ref3;\n    if (onChange) {\n      onChange({\n        selectedItem: selectedItem ?? null\n      });\n    }\n  }, [onChange]);\n  const isItemDisabled = (0,react.useCallback)((item, _index) => {\n    const isObject = item !== null && typeof item === 'object';\n    return isObject && 'disabled' in item && item.disabled === true;\n  }, []);\n  const onHighlightedIndexChange = (0,react.useCallback)(changes => {\n    const {\n      highlightedIndex\n    } = changes;\n    if (highlightedIndex !== undefined && highlightedIndex > -1 && typeof window !== undefined) {\n      const itemArray = document.querySelectorAll(`li.${prefix}--list-box__menu-item[role=\"option\"]`);\n      const highlightedItem = itemArray[highlightedIndex];\n      if (highlightedItem) {\n        highlightedItem.scrollIntoView({\n          behavior: 'smooth',\n          block: 'nearest'\n        });\n      }\n    }\n  }, [prefix]);\n  const items = (0,react.useMemo)(() => itemsProp, [itemsProp]);\n  const selectProps = (0,react.useMemo)(() => ({\n    items,\n    itemToString,\n    initialSelectedItem,\n    onSelectedItemChange,\n    stateReducer,\n    isItemDisabled,\n    onHighlightedIndexChange,\n    ...downshiftProps\n  }), [items, itemToString, initialSelectedItem, onSelectedItemChange, stateReducer, isItemDisabled, onHighlightedIndexChange, downshiftProps]);\n  const dropdownInstanceId = useId();\n\n  // only set selectedItem if the prop is defined. Setting if it is undefined\n  // will overwrite default selected items from useSelect\n  if (controlledSelectedItem !== undefined) {\n    selectProps.selectedItem = controlledSelectedItem;\n  }\n  const {\n    isOpen,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    selectedItem,\n    highlightedIndex\n  } = (0,downshift_esm/* useSelect */.WM)(selectProps);\n  const inline = type === 'inline';\n  const showWarning = !invalid && warn;\n  const [isFocused, setIsFocused] = (0,react.useState)(false);\n  const className = classnames_default()(`${prefix}--dropdown`, {\n    [`${prefix}--dropdown--invalid`]: invalid,\n    [`${prefix}--dropdown--warning`]: showWarning,\n    [`${prefix}--dropdown--open`]: isOpen,\n    [`${prefix}--dropdown--focus`]: isFocused,\n    [`${prefix}--dropdown--inline`]: inline,\n    [`${prefix}--dropdown--disabled`]: disabled,\n    [`${prefix}--dropdown--light`]: light,\n    [`${prefix}--dropdown--readonly`]: readOnly,\n    [`${prefix}--dropdown--${size$1}`]: size$1,\n    [`${prefix}--list-box--up`]: direction === 'top',\n    [`${prefix}--autoalign`]: autoAlign\n  });\n  const titleClasses = classnames_default()(`${prefix}--label`, {\n    [`${prefix}--label--disabled`]: disabled,\n    [`${prefix}--visually-hidden`]: hideLabel\n  });\n  const helperClasses = classnames_default()(`${prefix}--form__helper-text`, {\n    [`${prefix}--form__helper-text--disabled`]: disabled\n  });\n  const wrapperClasses = classnames_default()(`${prefix}--dropdown__wrapper`, `${prefix}--list-box__wrapper`, containerClassName, {\n    [`${prefix}--dropdown__wrapper--inline`]: inline,\n    [`${prefix}--list-box__wrapper--inline`]: inline,\n    [`${prefix}--dropdown__wrapper--inline--invalid`]: inline && invalid,\n    [`${prefix}--list-box__wrapper--inline--invalid`]: inline && invalid,\n    [`${prefix}--list-box__wrapper--fluid--invalid`]: isFluid && invalid,\n    [`${prefix}--list-box__wrapper--slug`]: slug,\n    [`${prefix}--list-box__wrapper--decorator`]: decorator\n  });\n  const helperId = !helperText ? undefined : `dropdown-helper-text-${dropdownInstanceId}`;\n\n  // needs to be Capitalized for react to render it correctly\n  const ItemToElement = itemToElement;\n  const toggleButtonProps = getToggleButtonProps({\n    'aria-label': ariaLabel || deprecatedAriaLabel\n  });\n  const helper = helperText && !isFluid ? /*#__PURE__*/react.createElement(\"div\", {\n    id: helperId,\n    className: helperClasses\n  }, helperText) : null;\n  const handleFocus = evt => {\n    setIsFocused(evt.type === 'focus' && !selectedItem ? true : false);\n  };\n  const mergedRef = mergeRefs$1(toggleButtonProps.ref, ref);\n  const [currTimer, setCurrTimer] = (0,react.useState)();\n  const [isTyping, setIsTyping] = (0,react.useState)(false);\n  const onKeyDownHandler = (0,react.useCallback)(evt => {\n    if (evt.code !== 'Space' || !['ArrowDown', 'ArrowUp', ' ', 'Enter'].includes(evt.key)) {\n      setIsTyping(true);\n    }\n    if (isTyping && evt.code === 'Space' || !['ArrowDown', 'ArrowUp', ' ', 'Enter'].includes(evt.key)) {\n      if (currTimer) {\n        clearTimeout(currTimer);\n      }\n      setCurrTimer(setTimeout(() => {\n        setIsTyping(false);\n      }, 3000));\n    }\n    if (['ArrowDown'].includes(evt.key)) {\n      setIsFocused(false);\n    }\n    if (['Enter'].includes(evt.key) && !selectedItem && !isOpen) {\n      setIsFocused(true);\n    }\n\n    // For Dropdowns the arrow up key is only allowed if the Dropdown is open\n    if (toggleButtonProps.onKeyDown && (evt.key !== 'ArrowUp' || isOpen && evt.key === 'ArrowUp')) {\n      toggleButtonProps.onKeyDown(evt);\n    }\n  }, [isTyping, currTimer, toggleButtonProps]);\n  const readOnlyEventHandlers = (0,react.useMemo)(() => {\n    if (readOnly) {\n      return {\n        onClick: evt => {\n          // NOTE: does not prevent click\n          evt.preventDefault();\n          // focus on the element as per readonly input behavior\n          mergedRef?.current?.focus();\n        },\n        onKeyDown: evt => {\n          const selectAccessKeys = ['ArrowDown', 'ArrowUp', ' ', 'Enter'];\n          // This prevents the select from opening for the above keys\n          if (selectAccessKeys.includes(evt.key)) {\n            evt.preventDefault();\n          }\n        }\n      };\n    } else {\n      return {\n        onKeyDown: onKeyDownHandler\n      };\n    }\n  }, [readOnly, onKeyDownHandler]);\n  const menuProps = (0,react.useMemo)(() => getMenuProps({\n    ref: enableFloatingStyles || autoAlign ? refs.setFloating : null\n  }), [autoAlign, getMenuProps, refs.setFloating, enableFloatingStyles]);\n\n  // AILabel is always size `mini`\n  const normalizedDecorator = (0,react.useMemo)(() => {\n    let element = slug ?? decorator;\n    if (element && element['type']?.displayName === 'AILabel') {\n      return /*#__PURE__*/react.cloneElement(element, {\n        size: 'mini'\n      });\n    }\n    return /*#__PURE__*/ /*#__PURE__*/react.isValidElement(element) ? element : null;\n  }, [slug, decorator]);\n  const allLabelProps = getLabelProps();\n  const labelProps = /*#__PURE__*/ /*#__PURE__*/(0,react.isValidElement)(titleText) ? {\n    id: allLabelProps.id\n  } : allLabelProps;\n  return /*#__PURE__*/react.createElement(\"div\", _extends({\n    className: wrapperClasses\n  }, other), titleText && /*#__PURE__*/react.createElement(\"label\", _extends({\n    className: titleClasses\n  }, labelProps), titleText), /*#__PURE__*/react.createElement(ListBox_ListBox, {\n    onFocus: handleFocus,\n    onBlur: handleFocus,\n    size: size$1,\n    className: className,\n    invalid: invalid,\n    invalidText: invalidText,\n    warn: warn,\n    warnText: warnText,\n    light: light,\n    isOpen: isOpen,\n    ref: enableFloatingStyles || autoAlign ? refs.setReference : null,\n    id: id\n  }, invalid && /*#__PURE__*/react.createElement(bucket_18/* WarningFilled */.BF, {\n    className: `${prefix}--list-box__invalid-icon`\n  }), showWarning && /*#__PURE__*/react.createElement(bucket_18/* WarningAltFilled */.OR, {\n    className: `${prefix}--list-box__invalid-icon ${prefix}--list-box__invalid-icon--warning`\n  }), /*#__PURE__*/react.createElement(\"button\", _extends({\n    type: \"button\"\n    // aria-expanded is already being passed through {...toggleButtonProps}\n    ,\n\n    className: `${prefix}--list-box__field`,\n    disabled: disabled,\n    \"aria-disabled\": readOnly ? true : undefined // aria-disabled to remain focusable\n    ,\n\n    \"aria-describedby\": !inline && !invalid && !warn && helper ? helperId : undefined,\n    title: selectedItem && itemToString !== undefined ? itemToString(selectedItem) : defaultItemToString(label)\n  }, toggleButtonProps, readOnlyEventHandlers, {\n    ref: mergedRef\n  }), /*#__PURE__*/react.createElement(\"span\", {\n    className: `${prefix}--list-box__label`\n  }, selectedItem ? renderSelectedItem ? renderSelectedItem(selectedItem) : itemToString(selectedItem) : label), /*#__PURE__*/react.createElement(ListBox_ListBox.MenuIcon, {\n    isOpen: isOpen,\n    translateWithId: translateWithId\n  })), slug ? normalizedDecorator : decorator ? /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--list-box__inner-wrapper--decorator`\n  }, normalizedDecorator) : '', /*#__PURE__*/react.createElement(ListBox_ListBox.Menu, menuProps, isOpen && items.map((item, index) => {\n    const isObject = item !== null && typeof item === 'object';\n    const itemProps = getItemProps({\n      item,\n      index\n    });\n    const title = isObject && 'text' in item && itemToElement ? item.text : itemToString(item);\n    return /*#__PURE__*/react.createElement(ListBox_ListBox.MenuItem, _extends({\n      key: itemProps.id,\n      isActive: selectedItem === item,\n      isHighlighted: highlightedIndex === index,\n      title: title,\n      disabled: itemProps['aria-disabled']\n    }, itemProps), typeof item === 'object' && ItemToElement !== undefined && ItemToElement !== null ? /*#__PURE__*/react.createElement(ItemToElement, _extends({\n      key: itemProps.id\n    }, item)) : itemToString(item), selectedItem === item && /*#__PURE__*/react.createElement(bucket_3/* Checkmark */.MG, {\n      className: `${prefix}--list-box__menu-item__selected-icon`\n    }));\n  }))), !inline && !invalid && !warn && helper);\n});\n\n// Workaround problems with forwardRef() and generics.  In the long term, should stop using forwardRef().\n// See https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref.\n\nDropdown.displayName = 'Dropdown';\nDropdown.propTypes = {\n  /**\n   * 'aria-label' of the ListBox component.\n   * Specify a label to be read by screen readers on the container node\n   */\n  ['aria-label']: (prop_types_default()).string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the container note.\n   */\n  ariaLabel: deprecate((prop_types_default()).string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * **Experimental**: Will attempt to automatically align the floating element to avoid collisions with the viewport and being clipped by ancestor elements.\n   */\n  autoAlign: (prop_types_default()).bool,\n  /**\n   * Provide a custom className to be applied on the cds--dropdown node\n   */\n  className: (prop_types_default()).string,\n  /**\n   * **Experimental**: Provide a `decorator` component to be rendered inside the `Dropdown` component\n   */\n  decorator: (prop_types_default()).node,\n  /**\n   * Specify the direction of the dropdown. Can be either top or bottom.\n   */\n  direction: prop_types_default().oneOf(['top', 'bottom']),\n  /**\n   * Disable the control\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Additional props passed to Downshift.\n   *\n   * **Use with caution:** anything you define here overrides the components'\n   * internal handling of that prop. Downshift APIs and internals are subject to\n   * change, and in some cases they can not be shimmed by Carbon to shield you\n   * from potentially breaking changes.\n   */\n  downshiftProps: (prop_types_default()).object,\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: (prop_types_default()).node,\n  /**\n   * Specify whether the title text should be hidden or not\n   */\n  hideLabel: (prop_types_default()).bool,\n  /**\n   * Specify a custom `id`\n   */\n  id: (prop_types_default()).string.isRequired,\n  /**\n   * Allow users to pass in an arbitrary item or a string (in case their items are an array of strings)\n   * from their collection that are pre-selected\n   */\n  initialSelectedItem: prop_types_default().oneOfType([(prop_types_default()).object, (prop_types_default()).string, (prop_types_default()).number]),\n  /**\n   * Specify if the currently selected value is invalid.\n   */\n  invalid: (prop_types_default()).bool,\n  /**\n   * Message which is displayed if the value is invalid.\n   */\n  invalidText: (prop_types_default()).node,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: (prop_types_default()).func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list.\n   */\n  itemToString: (prop_types_default()).func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: (prop_types_default()).array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: (prop_types_default()).node.isRequired,\n  /**\n   * `true` to use the light version.\n   */\n  light: deprecate((prop_types_default()).bool, 'The `light` prop for `Dropdown` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: (prop_types_default()).func,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: (prop_types_default()).bool,\n  /**\n   * An optional callback to render the currently selected item as a react element instead of only\n   * as a string.\n   */\n  renderSelectedItem: (prop_types_default()).func,\n  /**\n   * In the case you want to control the dropdown selection entirely.\n   */\n  selectedItem: prop_types_default().oneOfType([(prop_types_default()).object, (prop_types_default()).string, (prop_types_default()).number]),\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxSizePropType,\n  /**\n   * **Experimental**: Provide a `Slug` component to be rendered inside the `Dropdown` component\n   */\n  slug: deprecate((prop_types_default()).node, 'The `slug` prop for `Dropdown` has ' + 'been deprecated in favor of the new `decorator` prop. It will be removed in the next major release.'),\n  /**\n   * Provide the title text that will be read by a screen reader when\n   * visiting this control\n   */\n  titleText: (prop_types_default()).node.isRequired,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: (prop_types_default()).func,\n  /**\n   * The dropdown type, `default` or `inline`\n   */\n  type: ListBoxTypePropType,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: (prop_types_default()).bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: (prop_types_default()).node\n};\n\n;// ./node_modules/@carbon/react/es/components/Loading/Loading.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\nfunction Loading(_ref) {\n  let {\n    active = true,\n    className: customClassName,\n    withOverlay = true,\n    small = false,\n    description = 'loading',\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const loadingClassName = classnames_default()(customClassName, {\n    [`${prefix}--loading`]: true,\n    [`${prefix}--loading--small`]: small,\n    [`${prefix}--loading--stop`]: !active\n  });\n  const overlayClassName = classnames_default()({\n    [`${prefix}--loading-overlay`]: true,\n    [`${prefix}--loading-overlay--stop`]: !active\n  });\n  const loading = /*#__PURE__*/react.createElement(\"div\", _extends({}, rest, {\n    \"aria-atomic\": \"true\",\n    \"aria-live\": active ? 'assertive' : 'off',\n    className: loadingClassName\n  }), /*#__PURE__*/react.createElement(\"svg\", {\n    className: `${prefix}--loading__svg`,\n    viewBox: \"0 0 100 100\"\n  }, /*#__PURE__*/react.createElement(\"title\", null, description), small ? /*#__PURE__*/react.createElement(\"circle\", {\n    className: `${prefix}--loading__background`,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: \"42\"\n  }) : null, /*#__PURE__*/react.createElement(\"circle\", {\n    className: `${prefix}--loading__stroke`,\n    cx: \"50%\",\n    cy: \"50%\",\n    r: small ? '42' : '44'\n  })));\n  return withOverlay ? /*#__PURE__*/react.createElement(\"div\", {\n    className: overlayClassName\n  }, loading) : loading;\n}\nLoading.propTypes = {\n  /**\n   * Specify whether you want the loading indicator to be spinning or not\n   */\n  active: (prop_types_default()).bool,\n  /**\n   * Provide an optional className to be applied to the containing node\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify a description that would be used to best describe the loading state\n   */\n  description: (prop_types_default()).string,\n  /**\n   * Provide an `id` to uniquely identify the label\n   */\n  id: deprecate((prop_types_default()).string, `\\nThe prop \\`id\\` is no longer needed.`),\n  /**\n   * Specify whether you would like the small variant of <Loading>\n   */\n  small: (prop_types_default()).bool,\n  /**\n   * Specify whether you want the loader to be applied with an overlay\n   */\n  withOverlay: (prop_types_default()).bool\n};\n\n// EXTERNAL MODULE: ./node_modules/react-fast-compare/index.js\nvar react_fast_compare = __webpack_require__(7817);\nvar react_fast_compare_default = /*#__PURE__*/__webpack_require__.n(react_fast_compare);\n;// ./node_modules/@carbon/react/es/components/MultiSelect/MultiSelectPropTypes.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\nconst sortingPropTypes = {\n  /**\n   * Provide a compare function that is used to determine the ordering of\n   * options. `compareItems` has the following function signature:\n   *\n   * compareFunction :\n   *  (itemA: string, itemB: string, { locale: string }) => number\n   */\n  compareItems: (prop_types_default()).func,\n  /**\n   * Provide a method that sorts all options in the control. Overriding this\n   * prop means that you also have to handle the sort logic for selected versus\n   * un-selected items. If you just want to control ordering, consider the\n   * `compareItems` prop instead.\n   *\n   * `sortItems` has the following signature:\n   *\n   * sortItems :\n   *   (items: Array<Item>, {\n   *     selectedItems: Array<Item>,\n   *     itemToString: Item => string,\n   *     compareItems: (itemA: string, itemB: string, {\n   *       locale: string\n   *     }) => number,\n   *     locale: string,\n   *   }) => Array<Item>\n   */\n  sortItems: (prop_types_default()).func\n};\n\n;// ./node_modules/@carbon/react/es/components/MultiSelect/tools/sorting.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Use the locale `localeCompare` with the `numeric` option to sort two\n * alpha-numeric strings.\n *\n * @param {string} itemA - The first string to compare.\n * @param {string} itemB - The second string to compare.\n * @param {object} options - Options for comparing.\n * @param {string} options.locale - The locale to use for comparison.\n * @returns {number} A negative number if itemA comes before itemB, a positive\n *   number if itemA comes after itemB, or 0 if they are equal.\n */\nconst defaultCompareItems = (itemA, itemB, _ref) => {\n  let {\n    locale\n  } = _ref;\n  return itemA.localeCompare(itemB, locale, {\n    numeric: true\n  });\n};\n\n/**\n * Default sorting algorithm for options in a selection control\n */\nconst defaultSortItems = (items, _ref2) => {\n  let {\n    selectedItems = [],\n    itemToString,\n    compareItems,\n    locale = 'en'\n  } = _ref2;\n  return items.sort((itemA, itemB) => {\n    // Always place \"select all\" option at the beginning\n    if (itemA.isSelectAll) return -1;\n    if (itemB.isSelectAll) return 1;\n    const hasItemA = selectedItems.includes(itemA);\n    const hasItemB = selectedItems.includes(itemB);\n    if (hasItemA && !hasItemB) return -1;\n    if (hasItemB && !hasItemA) return 1;\n    return compareItems(itemToString(itemA), itemToString(itemB), {\n      locale\n    });\n  });\n};\n\n;// ./node_modules/@carbon/react/es/internal/Selection.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nconst callOnChangeHandler = _ref => {\n  let {\n    isControlled,\n    isMounted,\n    onChangeHandlerControlled,\n    onChangeHandlerUncontrolled,\n    selectedItems\n  } = _ref;\n  if (isControlled) {\n    if (isMounted && onChangeHandlerControlled) {\n      onChangeHandlerControlled({\n        selectedItems\n      });\n    }\n  } else {\n    onChangeHandlerUncontrolled(selectedItems);\n  }\n};\nconst useSelection = _ref2 => {\n  let {\n    disabled,\n    onChange,\n    initialSelectedItems = [],\n    selectedItems: controlledItems,\n    selectAll = false,\n    filteredItems = []\n  } = _ref2;\n  const isMounted = (0,react.useRef)(false);\n  const savedOnChange = (0,react.useRef)(onChange);\n  const [uncontrolledItems, setUncontrolledItems] = (0,react.useState)(initialSelectedItems);\n  const isControlled = !!controlledItems;\n  const selectedItems = isControlled ? controlledItems : uncontrolledItems;\n  const onItemChange = (0,react.useCallback)(item => {\n    if (disabled) return;\n\n    // Assert special properties (e.g., `disabled`, `isSelectAll`, etc.) are\n    // `any` since those properties aren’t part of the generic type.\n    const allSelectableItems = filteredItems.filter(item => !item?.disabled);\n    const disabledItemCount = filteredItems.filter(item => item?.disabled).length;\n    let newSelectedItems;\n\n    // deselect all on click to All/indeterminate option\n    if (item?.isSelectAll && selectedItems.length > 0) {\n      newSelectedItems = [];\n    }\n    // select all options\n    else if (item?.isSelectAll && selectedItems.length === 0) {\n      newSelectedItems = allSelectableItems;\n    } else {\n      const selectedIndex = selectedItems.findLastIndex(selectedItem => react_fast_compare_default()(selectedItem, item));\n      if (selectedIndex === -1) {\n        newSelectedItems = selectedItems.concat(item);\n        // checking if all items are selected then We should select mark the 'select All' option as well\n        if (selectAll && filteredItems.length - 1 === newSelectedItems.length + disabledItemCount) {\n          newSelectedItems = allSelectableItems;\n        }\n      } else {\n        newSelectedItems = removeAtIndex(selectedItems, selectedIndex);\n        newSelectedItems = newSelectedItems.filter(item => !item?.isSelectAll);\n      }\n    }\n    callOnChangeHandler({\n      isControlled,\n      isMounted: isMounted.current,\n      onChangeHandlerControlled: savedOnChange.current,\n      onChangeHandlerUncontrolled: setUncontrolledItems,\n      selectedItems: newSelectedItems\n    });\n  }, [disabled, selectedItems, filteredItems, selectAll, isControlled]);\n  const clearSelection = (0,react.useCallback)(() => {\n    if (disabled) return;\n    callOnChangeHandler({\n      isControlled,\n      isMounted: isMounted.current,\n      onChangeHandlerControlled: savedOnChange.current,\n      onChangeHandlerUncontrolled: setUncontrolledItems,\n      selectedItems: []\n    });\n  }, [disabled, isControlled]);\n  (0,react.useEffect)(() => {\n    savedOnChange.current = onChange;\n  }, [onChange]);\n  (0,react.useEffect)(() => {\n    if (isMounted.current && savedOnChange.current && !isControlled) {\n      savedOnChange.current({\n        selectedItems\n      });\n    }\n  }, [isControlled, selectedItems]);\n  (0,react.useEffect)(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return {\n    clearSelection,\n    onItemChange,\n    selectedItems\n  };\n};\n\n/**\n * Generic utility for safely removing an element at a given index from an\n * array.\n */\nconst removeAtIndex = (array, index) => {\n  const result = array.slice();\n  result.splice(index, 1);\n  return result;\n};\n\n;// ./node_modules/@carbon/react/es/components/MultiSelect/MultiSelect.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst {\n  ItemClick,\n  ToggleButtonBlur,\n  ToggleButtonKeyDownArrowDown,\n  ToggleButtonKeyDownArrowUp,\n  ToggleButtonKeyDownEnter,\n  ToggleButtonKeyDownEscape,\n  ToggleButtonKeyDownSpaceButton,\n  ItemMouseMove: MultiSelect_ItemMouseMove,\n  MenuMouseLeave: MultiSelect_MenuMouseLeave,\n  ToggleButtonClick,\n  ToggleButtonKeyDownPageDown,\n  ToggleButtonKeyDownPageUp,\n  FunctionSetHighlightedIndex\n} = downshift_esm/* useSelect */.WM.stateChangeTypes;\nconst MultiSelect_defaultItemToString = item => {\n  if (typeof item === 'string') {\n    return item;\n  }\n  if (typeof item === 'number') {\n    return `${item}`;\n  }\n  if (item !== null && typeof item === 'object' && 'label' in item && typeof item['label'] === 'string') {\n    return item['label'];\n  }\n  return '';\n};\nconst MultiSelect = /*#__PURE__*/react.forwardRef((_ref, ref) => {\n  let {\n    autoAlign = false,\n    className: containerClassName,\n    decorator,\n    id,\n    items,\n    itemToElement,\n    itemToString = MultiSelect_defaultItemToString,\n    titleText = false,\n    hideLabel,\n    helperText,\n    label,\n    type = 'default',\n    size: size$1,\n    disabled = false,\n    initialSelectedItems = [],\n    sortItems = defaultSortItems,\n    compareItems = defaultCompareItems,\n    clearSelectionText = 'To clear selection, press Delete or Backspace',\n    clearAnnouncement = 'all items have been cleared',\n    clearSelectionDescription = 'Total items selected: ',\n    light,\n    invalid,\n    invalidText,\n    warn,\n    warnText,\n    useTitleInItem,\n    translateWithId,\n    downshiftProps,\n    open = false,\n    selectionFeedback = 'top-after-reopen',\n    onChange,\n    onMenuChange,\n    direction = 'bottom',\n    selectedItems: selected,\n    readOnly,\n    locale = 'en',\n    slug\n  } = _ref;\n  const filteredItems = (0,react.useMemo)(() => {\n    return items.filter(item => {\n      if (typeof item === 'object' && item !== null) {\n        for (const key in item) {\n          if (Object.hasOwn(item, key) && item[key] === undefined) {\n            return false; // Return false if any property has an undefined value\n          }\n        }\n      }\n      return true; // Return true if item is not an object with undefined values\n    });\n  }, [items]);\n  let selectAll = filteredItems.some(item => item.isSelectAll);\n  if ((selected ?? []).length > 0 && selectAll) {\n    console.warn('Warning: `selectAll` should not be used when `selectedItems` is provided. Please pass either `selectAll` or `selectedItems`, not both.');\n    selectAll = false;\n  }\n  const prefix = usePrefix();\n  const {\n    isFluid\n  } = (0,react.useContext)(FormContext);\n  const multiSelectInstanceId = useId();\n  const [isFocused, setIsFocused] = (0,react.useState)(false);\n  const [inputFocused, setInputFocused] = (0,react.useState)(false);\n  const [isOpen, setIsOpen] = (0,react.useState)(open || false);\n  const [prevOpenProp, setPrevOpenProp] = (0,react.useState)(open);\n  const [topItems, setTopItems] = (0,react.useState)([]);\n  const [itemsCleared, setItemsCleared] = (0,react.useState)(false);\n  const enableFloatingStyles = useFeatureFlag('enable-v12-dynamic-floating-styles') || autoAlign;\n  const {\n    refs,\n    floatingStyles,\n    middlewareData\n  } = (0,floating_ui_react/* useFloating */.we)(enableFloatingStyles ? {\n    placement: direction,\n    // The floating element is positioned relative to its nearest\n    // containing block (usually the viewport). It will in many cases also\n    // “break” the floating element out of a clipping ancestor.\n    // https://floating-ui.com/docs/misc#clipping\n    strategy: 'fixed',\n    // Middleware order matters, arrow should be last\n    middleware: [autoAlign && (0,floating_ui_react_dom/* flip */.UU)({\n      crossAxis: false\n    }), (0,floating_ui_react_dom/* size */.Ej)({\n      apply(_ref2) {\n        let {\n          rects,\n          elements\n        } = _ref2;\n        Object.assign(elements.floating.style, {\n          width: `${rects.reference.width}px`\n        });\n      }\n    }), autoAlign && (0,floating_ui_react_dom/* hide */.jD)()],\n    whileElementsMounted: floating_ui_dom/* autoUpdate */.ll\n  } : {});\n  (0,react.useLayoutEffect)(() => {\n    if (enableFloatingStyles) {\n      const updatedFloatingStyles = {\n        ...floatingStyles,\n        visibility: middlewareData.hide?.referenceHidden ? 'hidden' : 'visible'\n      };\n      Object.keys(updatedFloatingStyles).forEach(style => {\n        if (refs.floating.current) {\n          refs.floating.current.style[style] = updatedFloatingStyles[style];\n        }\n      });\n    }\n  }, [enableFloatingStyles, floatingStyles, refs.floating, middlewareData, open]);\n  const {\n    selectedItems: controlledSelectedItems,\n    onItemChange,\n    clearSelection\n  } = useSelection({\n    disabled,\n    initialSelectedItems,\n    onChange,\n    selectedItems: selected,\n    selectAll,\n    filteredItems\n  });\n  const sortOptions = {\n    selectedItems: controlledSelectedItems,\n    itemToString,\n    compareItems,\n    locale\n  };\n  const selectProps = {\n    stateReducer,\n    isOpen,\n    itemToString: filteredItems => {\n      return Array.isArray(filteredItems) && filteredItems.map(function (item) {\n        return itemToString(item);\n      }).join(', ') || '';\n    },\n    selectedItem: controlledSelectedItems,\n    items: filteredItems,\n    isItemDisabled(item, _index) {\n      return item?.disabled;\n    },\n    ...downshiftProps\n  };\n  const {\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    selectedItem,\n    highlightedIndex,\n    setHighlightedIndex\n  } = (0,downshift_esm/* useSelect */.WM)(selectProps);\n  const toggleButtonProps = getToggleButtonProps({\n    onFocus: () => {\n      setInputFocused(true);\n    },\n    onBlur: () => {\n      setInputFocused(false);\n    },\n    onKeyDown: e => {\n      if (!disabled) {\n        if ((match_match(e, Delete) || match_match(e, Escape)) && !isOpen) {\n          clearSelection();\n          e.stopPropagation();\n        }\n        if (!isOpen && match_match(e, Delete) && selectedItems.length > 0) {\n          setItemsCleared(true);\n        }\n        if ((match_match(e, Space) || match_match(e, ArrowDown) || match_match(e, Enter)) && !isOpen) {\n          setHighlightedIndex(0);\n          setItemsCleared(false);\n          setIsOpenWrapper(true);\n        }\n        if (match_match(e, ArrowDown) && selectedItems.length === 0) {\n          setInputFocused(false);\n          setIsFocused(false);\n        }\n        if (match_match(e, Escape) && isOpen) {\n          setInputFocused(true);\n        }\n        if (match_match(e, Enter) && isOpen) {\n          setInputFocused(true);\n        }\n      }\n    }\n  });\n  const mergedRef = mergeRefs$1(toggleButtonProps.ref, ref);\n  const selectedItems = selectedItem;\n\n  /**\n   * wrapper function to forward changes to consumer\n   */\n  const setIsOpenWrapper = open => {\n    setIsOpen(open);\n    if (onMenuChange) {\n      onMenuChange(open);\n    }\n  };\n\n  /**\n   * programmatically control this `open` prop\n   */\n  if (prevOpenProp !== open) {\n    setIsOpenWrapper(open);\n    setPrevOpenProp(open);\n  }\n  const inline = type === 'inline';\n  const showWarning = !invalid && warn;\n  const wrapperClasses = classnames_default()(`${prefix}--multi-select__wrapper`, `${prefix}--list-box__wrapper`, containerClassName, {\n    [`${prefix}--multi-select__wrapper--inline`]: inline,\n    [`${prefix}--list-box__wrapper--inline`]: inline,\n    [`${prefix}--multi-select__wrapper--inline--invalid`]: inline && invalid,\n    [`${prefix}--list-box__wrapper--inline--invalid`]: inline && invalid,\n    [`${prefix}--list-box__wrapper--fluid--invalid`]: isFluid && invalid,\n    [`${prefix}--list-box__wrapper--slug`]: slug,\n    [`${prefix}--list-box__wrapper--decorator`]: decorator\n  });\n  const titleClasses = classnames_default()(`${prefix}--label`, {\n    [`${prefix}--label--disabled`]: disabled,\n    [`${prefix}--visually-hidden`]: hideLabel\n  });\n  const helperId = !helperText ? undefined : `multiselect-helper-text-${multiSelectInstanceId}`;\n  const fieldLabelId = `multiselect-field-label-${multiSelectInstanceId}`;\n  const helperClasses = classnames_default()(`${prefix}--form__helper-text`, {\n    [`${prefix}--form__helper-text--disabled`]: disabled\n  });\n  const className = classnames_default()(`${prefix}--multi-select`, {\n    [`${prefix}--multi-select--invalid`]: invalid,\n    [`${prefix}--multi-select--invalid--focused`]: invalid && inputFocused,\n    [`${prefix}--multi-select--warning`]: showWarning,\n    [`${prefix}--multi-select--inline`]: inline,\n    [`${prefix}--multi-select--selected`]: selectedItems && selectedItems.length > 0,\n    [`${prefix}--list-box--up`]: direction === 'top',\n    [`${prefix}--multi-select--readonly`]: readOnly,\n    [`${prefix}--autoalign`]: enableFloatingStyles,\n    [`${prefix}--multi-select--selectall`]: selectAll\n  });\n\n  // needs to be capitalized for react to render it correctly\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const ItemToElement = itemToElement;\n  if (selectionFeedback === 'fixed') {\n    sortOptions.selectedItems = [];\n  } else if (selectionFeedback === 'top-after-reopen') {\n    sortOptions.selectedItems = topItems;\n  }\n  function stateReducer(state, actionAndChanges) {\n    const {\n      changes,\n      props,\n      type\n    } = actionAndChanges;\n    const {\n      highlightedIndex\n    } = changes;\n    if (changes.isOpen && !isOpen) {\n      setTopItems(controlledSelectedItems);\n    }\n    switch (type) {\n      case ToggleButtonKeyDownSpaceButton:\n      case ToggleButtonKeyDownEnter:\n        if (changes.selectedItem === undefined) {\n          break;\n        }\n        if (Array.isArray(changes.selectedItem)) {\n          break;\n        }\n        onItemChange(changes.selectedItem);\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case ToggleButtonBlur:\n      case ToggleButtonKeyDownEscape:\n        setIsOpenWrapper(false);\n        break;\n      case ToggleButtonClick:\n        setIsOpenWrapper(changes.isOpen || false);\n        return {\n          ...changes,\n          highlightedIndex: controlledSelectedItems.length > 0 ? 0 : undefined\n        };\n      case ItemClick:\n        setHighlightedIndex(changes.selectedItem);\n        onItemChange(changes.selectedItem);\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case MultiSelect_MenuMouseLeave:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n      case FunctionSetHighlightedIndex:\n        if (!isOpen) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        } else {\n          return {\n            ...changes,\n            highlightedIndex: filteredItems.indexOf(highlightedIndex)\n          };\n        }\n      case ToggleButtonKeyDownArrowDown:\n      case ToggleButtonKeyDownArrowUp:\n      case ToggleButtonKeyDownPageDown:\n      case ToggleButtonKeyDownPageUp:\n        if (highlightedIndex > -1) {\n          const itemArray = document.querySelectorAll(`li.${prefix}--list-box__menu-item[role=\"option\"]`);\n          props.scrollIntoView(itemArray[highlightedIndex]);\n        }\n        if (highlightedIndex === -1) {\n          return {\n            ...changes,\n            highlightedIndex: 0\n          };\n        }\n        return changes;\n      case MultiSelect_ItemMouseMove:\n        return {\n          ...changes,\n          highlightedIndex: state.highlightedIndex\n        };\n    }\n    return changes;\n  }\n  const multiSelectFieldWrapperClasses = classnames_default()(`${prefix}--list-box__field--wrapper`, {\n    [`${prefix}--list-box__field--wrapper--input-focused`]: inputFocused\n  });\n  const handleFocus = evt => {\n    evt.target.classList.contains(`${prefix}--tag__close-icon`) ? setIsFocused(false) : setIsFocused(evt.type === 'focus' ? true : false);\n  };\n  const readOnlyEventHandlers = readOnly ? {\n    onClick: evt => {\n      // NOTE: does not prevent click\n      evt.preventDefault();\n      // focus on the element as per readonly input behavior\n      if (mergedRef.current !== undefined) {\n        mergedRef.current.focus();\n      }\n    },\n    onKeyDown: evt => {\n      const selectAccessKeys = ['ArrowDown', 'ArrowUp', ' ', 'Enter'];\n      // This prevents the select from opening for the above keys\n      if (selectAccessKeys.includes(evt.key)) {\n        evt.preventDefault();\n      }\n    }\n  } : {};\n\n  // AILabel always size `mini`\n  let normalizedDecorator = /*#__PURE__*/ /*#__PURE__*/react.isValidElement(slug ?? decorator) ? slug ?? decorator : null;\n  if (normalizedDecorator && normalizedDecorator['type']?.displayName === 'AILabel') {\n    normalizedDecorator = /*#__PURE__*/react.cloneElement(normalizedDecorator, {\n      size: 'mini'\n    });\n  }\n  const itemsSelectedText = selectedItems.length > 0 && selectedItems.map(item => item?.text);\n  const selectedItemsLength = selectAll ? selectedItems.filter(item => !item.isSelectAll).length : selectedItems.length;\n\n  // Memoize the value of getMenuProps to avoid an infinite loop\n  const menuProps = (0,react.useMemo)(() => getMenuProps({\n    ref: enableFloatingStyles ? refs.setFloating : null\n  }), [enableFloatingStyles, getMenuProps, refs.setFloating]);\n  const allLabelProps = getLabelProps();\n  const labelProps = /*#__PURE__*/ /*#__PURE__*/(0,react.isValidElement)(titleText) ? {\n    id: allLabelProps.id\n  } : allLabelProps;\n  const getSelectionStats = (0,react.useCallback)((selectedItems, filteredItems) => {\n    const hasIndividualSelections = selectedItems.some(selected => !selected.isSelectAll);\n    const nonSelectAllSelectedCount = selectedItems.filter(selected => !selected.isSelectAll).length;\n    const totalSelectableCount = filteredItems.filter(item => !item.isSelectAll && !item.disabled).length;\n    return {\n      hasIndividualSelections,\n      nonSelectAllSelectedCount,\n      totalSelectableCount\n    };\n  }, [selectedItems, filteredItems]);\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: wrapperClasses\n  }, /*#__PURE__*/react.createElement(\"label\", _extends({\n    className: titleClasses\n  }, labelProps), titleText && titleText, selectedItems.length > 0 && /*#__PURE__*/react.createElement(\"span\", {\n    className: `${prefix}--visually-hidden`\n  }, clearSelectionDescription, \" \", selectedItems.length, ' ', itemsSelectedText, \",\", clearSelectionText)), /*#__PURE__*/react.createElement(ListBox_ListBox, {\n    onFocus: isFluid ? handleFocus : undefined,\n    onBlur: isFluid ? handleFocus : undefined,\n    type: type,\n    size: size$1,\n    className: className,\n    disabled: disabled,\n    light: light,\n    invalid: invalid,\n    invalidText: invalidText,\n    warn: warn,\n    warnText: warnText,\n    isOpen: isOpen,\n    id: id\n  }, invalid && /*#__PURE__*/react.createElement(bucket_18/* WarningFilled */.BF, {\n    className: `${prefix}--list-box__invalid-icon`\n  }), showWarning && /*#__PURE__*/react.createElement(bucket_18/* WarningAltFilled */.OR, {\n    className: `${prefix}--list-box__invalid-icon ${prefix}--list-box__invalid-icon--warning`\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: multiSelectFieldWrapperClasses,\n    ref: enableFloatingStyles ? refs.setReference : null\n  }, selectedItems.length > 0 && /*#__PURE__*/react.createElement(ListBox_ListBox.Selection, {\n    readOnly: readOnly,\n    clearSelection: !disabled && !readOnly ? clearSelection : noopFn,\n    selectionCount: selectedItemsLength\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    ,\n\n    translateWithId: translateWithId,\n    disabled: disabled\n  }), /*#__PURE__*/react.createElement(\"button\", _extends({\n    type: \"button\",\n    className: `${prefix}--list-box__field`,\n    disabled: disabled,\n    \"aria-disabled\": disabled || readOnly,\n    \"aria-describedby\": !inline && !invalid && !warn && helperText ? helperId : undefined\n  }, toggleButtonProps, {\n    ref: mergedRef\n  }, readOnlyEventHandlers), /*#__PURE__*/react.createElement(\"span\", {\n    id: fieldLabelId,\n    className: `${prefix}--list-box__label`\n  }, label), /*#__PURE__*/react.createElement(ListBox_ListBox.MenuIcon, {\n    isOpen: isOpen,\n    translateWithId: translateWithId\n  })), slug ? normalizedDecorator : decorator ? /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--list-box__inner-wrapper--decorator`\n  }, normalizedDecorator) : ''), /*#__PURE__*/react.createElement(ListBox_ListBox.Menu, menuProps, isOpen && sortItems(filteredItems, sortOptions).map((item, index) => {\n    const isChecked = selectedItems.filter(selected => react_fast_compare_default()(selected, item)).length > 0;\n    const {\n      hasIndividualSelections,\n      nonSelectAllSelectedCount,\n      totalSelectableCount\n    } = getSelectionStats(selectedItems, filteredItems);\n    const isIndeterminate = item['isSelectAll'] && hasIndividualSelections && nonSelectAllSelectedCount < totalSelectableCount;\n    const itemProps = getItemProps({\n      item,\n      // we don't want Downshift to set aria-selected for us\n      // we also don't want to set 'false' for reader verbosity's sake\n      ['aria-selected']: isChecked\n    });\n    const itemText = itemToString(item);\n    return /*#__PURE__*/react.createElement(ListBox_ListBox.MenuItem, _extends({\n      key: itemProps.id,\n      isActive: isChecked && !item['isSelectAll'],\n      \"aria-label\": itemText,\n      isHighlighted: highlightedIndex === index,\n      title: itemText,\n      disabled: itemProps['aria-disabled']\n    }, itemProps), /*#__PURE__*/react.createElement(\"div\", {\n      className: `${prefix}--checkbox-wrapper`\n    }, /*#__PURE__*/react.createElement(Checkbox, {\n      id: `${itemProps.id}__checkbox`,\n      labelText: itemToElement ? /*#__PURE__*/react.createElement(ItemToElement, _extends({\n        key: itemProps.id\n      }, item)) : itemText,\n      checked: isChecked,\n      title: useTitleInItem ? itemText : undefined,\n      indeterminate: isIndeterminate,\n      disabled: disabled\n    })));\n  })), itemsCleared && /*#__PURE__*/react.createElement(\"span\", {\n    \"aria-live\": \"assertive\",\n    \"aria-label\": clearAnnouncement\n  })), !inline && !invalid && !warn && helperText && /*#__PURE__*/react.createElement(\"div\", {\n    id: helperId,\n    className: helperClasses\n  }, helperText));\n});\nMultiSelect.displayName = 'MultiSelect';\nMultiSelect.propTypes = {\n  ...sortingPropTypes,\n  /**\n   * **Experimental**: Will attempt to automatically align the floating\n   * element to avoid collisions with the viewport and being clipped by\n   * ancestor elements.\n   */\n  autoAlign: (prop_types_default()).bool,\n  /**\n   * Provide a custom class name to be added to the outermost node in the\n   * component\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify the text that should be read for screen readers that describes total items selected\n   */\n  clearSelectionDescription: (prop_types_default()).string,\n  /**\n   * Specify the text that should be read for screen readers to clear selection.\n   */\n  clearSelectionText: (prop_types_default()).string,\n  /**\n   * Provide a compare function that is used to determine the ordering of\n   * options. See 'sortItems' for more control. Consider\n   * declaring function with `useCallback` to prevent unnecessary re-renders.\n   */\n  compareItems: (prop_types_default()).func,\n  /**\n   * **Experimental**: Provide a decorator component to be rendered inside the `MultiSelect` component\n   */\n  decorator: (prop_types_default()).node,\n  /**\n   * Specify the direction of the multiselect dropdown. Can be either top or bottom.\n   */\n  direction: prop_types_default().oneOf(['top', 'bottom']),\n  /**\n   * Disable the control\n   */\n  disabled: (prop_types_default()).bool,\n  /**\n   * Additional props passed to Downshift.\n   *\n   * **Use with caution:** anything you define here overrides the components'\n   * internal handling of that prop. Downshift APIs and internals are subject to\n   * change, and in some cases they can not be shimmed by Carbon to shield you\n   * from potentially breaking changes.\n   */\n  downshiftProps: (prop_types_default()).object,\n  /**\n   * Provide helper text that is used alongside the control label for\n   * additional help\n   */\n  helperText: (prop_types_default()).node,\n  /**\n   * Specify whether the title text should be hidden or not\n   */\n  hideLabel: (prop_types_default()).bool,\n  /**\n   * Specify a custom `id`\n   */\n  id: (prop_types_default()).string.isRequired,\n  /**\n   * Allow users to pass in arbitrary items from their collection that are\n   * pre-selected\n   */\n  initialSelectedItems: (prop_types_default()).array,\n  /**\n   * Is the current selection invalid?\n   */\n  invalid: (prop_types_default()).bool,\n  /**\n   * If invalid, what is the error?\n   */\n  invalidText: (prop_types_default()).node,\n  /**\n   * Function to render items as custom components instead of strings.\n   * Defaults to null and is overridden by a getter\n   */\n  itemToElement: (prop_types_default()).func,\n  /**\n   * Helper function passed to downshift that allows the library to render a\n   * given item to a string label. By default, it extracts the `label` field\n   * from a given item to serve as the item label in the list. Consider\n   * declaring function with `useCallback` to prevent unnecessary re-renders.\n   */\n  itemToString: (prop_types_default()).func,\n  /**\n   * We try to stay as generic as possible here to allow individuals to pass\n   * in a collection of whatever kind of data structure they prefer\n   */\n  items: (prop_types_default()).array.isRequired,\n  /**\n   * Generic `label` that will be used as the textual representation of what\n   * this field is for\n   */\n  label: (prop_types_default()).node.isRequired,\n  /**\n   * `true` to use the light version.\n   */\n  light: deprecate((prop_types_default()).bool, 'The `light` prop for `MultiSelect` has ' + 'been deprecated in favor of the new `Layer` component. It will be removed in the next major release.'),\n  /**\n   * Specify the locale of the control. Used for the default `compareItems`\n   * used for sorting the list of items in the control.\n   */\n  locale: (prop_types_default()).string,\n  /**\n   * `onChange` is a utility for this controlled component to communicate to a\n   * consuming component what kind of internal state changes are occurring.\n   */\n  onChange: (prop_types_default()).func,\n  /**\n   * `onMenuChange` is a utility for this controlled component to communicate to a\n   * consuming component that the menu was open(`true`)/closed(`false`).\n   */\n  onMenuChange: (prop_types_default()).func,\n  /**\n   * Initialize the component with an open(`true`)/closed(`false`) menu.\n   */\n  open: (prop_types_default()).bool,\n  /**\n   * Whether or not the Dropdown is readonly\n   */\n  readOnly: (prop_types_default()).bool,\n  /**\n   * For full control of the selected items\n   */\n  selectedItems: (prop_types_default()).array,\n  /**\n   * Specify feedback (mode) of the selection.\n   * `top`: selected item jumps to top\n   * `fixed`: selected item stays at it's position\n   * `top-after-reopen`: selected item jump to top after reopen dropdown\n   */\n  selectionFeedback: prop_types_default().oneOf(['top', 'fixed', 'top-after-reopen']),\n  /**\n   * Specify the size of the ListBox. Currently supports either `sm`, `md` or `lg` as an option.\n   */\n  size: ListBoxSizePropType,\n  slug: deprecate((prop_types_default()).node, 'The `slug` prop has been deprecated and will be removed in the next major version. Use the decorator prop instead.'),\n  /**\n   * Provide a method that sorts all options in the control. Overriding this\n   * prop means that you also have to handle the sort logic for selected versus\n   * un-selected items. If you just want to control ordering, consider the\n   * `compareItems` prop instead.\n   *\n   * The return value should be a number whose sign indicates the relative order\n   * of the two elements: negative if a is less than b, positive if a is greater\n   * than b, and zero if they are equal.\n   *\n   * sortItems :\n   *   (items: Array<Item>, {\n   *     selectedItems: Array<Item>,\n   *     itemToString: Item => string,\n   *     compareItems: (itemA: string, itemB: string, {\n   *       locale: string\n   *     }) => number,\n   *     locale: string,\n   *   }) => Array<Item>\n   */\n  sortItems: (prop_types_default()).func,\n  /**\n   * Provide text to be used in a `<label>` element that is tied to the\n   * multiselect via ARIA attributes.\n   */\n  titleText: (prop_types_default()).node,\n  /**\n   * Callback function for translating ListBoxMenuIcon SVG title\n   */\n  translateWithId: (prop_types_default()).func,\n  /**\n   * Specify 'inline' to create an inline multi-select.\n   */\n  type: ListBoxTypePropType,\n  /**\n   * Specify title to show title on hover\n   */\n  useTitleInItem: (prop_types_default()).bool,\n  /**\n   * Specify whether the control is currently in warning state\n   */\n  warn: (prop_types_default()).bool,\n  /**\n   * Provide the text that is displayed when the control is in warning state\n   */\n  warnText: (prop_types_default()).node\n};\n\n// EXTERNAL MODULE: ./node_modules/@carbon/icons-react/es/generated/bucket-6.js\nvar bucket_6 = __webpack_require__(3861);\n// EXTERNAL MODULE: ./node_modules/@carbon/icons-react/es/generated/bucket-9.js\nvar bucket_9 = __webpack_require__(1032);\n// EXTERNAL MODULE: ./node_modules/tabbable/dist/index.esm.js\nvar index_esm = __webpack_require__(968);\n;// ./node_modules/@carbon/react/es/internal/keyboard/navigation.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n/**\n * A \"ring buffer\" function that takes an array and, depending on an ArrowRight\n * or ArrowLeft key input, loops from last index to first or first index to last.\n *\n * @param key - the left or right arrow key (KeyboardEvent, number, or string)\n * @param index - the current index in the array\n * @param arrayLength - the total length of the array\n *\n * @example\n *  getNextIndex(keyCodes.RIGHT, 0, 4)\n */\nconst getNextIndex = (key, index, arrayLength) => {\n  if (match(key, ArrowRight)) {\n    return (index + 1) % arrayLength;\n  }\n  if (match(key, ArrowLeft)) {\n    return (index + arrayLength - 1) % arrayLength;\n  }\n  return;\n};\n\n/**\n * CSS selector that selects major nodes that are sequentially focusable.\n */\nconst selectorTabbable = `\n  a[href], area[href], input:not([disabled]):not([tabindex='-1']),\n  button:not([disabled]):not([tabindex='-1']),select:not([disabled]):not([tabindex='-1']),\n  textarea:not([disabled]):not([tabindex='-1']),\n  iframe, object, embed, *[tabindex]:not([tabindex='-1']):not([disabled]), *[contenteditable=true]\n`;\n\n/**\n * CSS selector that selects major nodes that are click focusable.\n */\nconst selectorFocusable = (/* unused pure expression or super */ null && (`\n  a[href], area[href], input:not([disabled]),\n  button:not([disabled]),select:not([disabled]),\n  textarea:not([disabled]),\n  iframe, object, embed, *[tabindex]:not([disabled]), *[contenteditable=true]\n`));\n\n;// ./node_modules/@carbon/react/es/internal/wrapFocus.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n/**\n * A flag `node.compareDocumentPosition(target)` returns that indicates\n * `target` is located earlier than `node` in the document or `target` contains `node`.\n */\nconst DOCUMENT_POSITION_BROAD_PRECEDING = typeof Node !== 'undefined' ? Node.DOCUMENT_POSITION_PRECEDING | Node.DOCUMENT_POSITION_CONTAINS : 0;\n\n/**\n * A flag `node.compareDocumentPosition(target)` returns that indicates\n * `target` is located later than `node` in the document or `node` contains `target`.\n */\nconst DOCUMENT_POSITION_BROAD_FOLLOWING = typeof Node !== 'undefined' ? Node.DOCUMENT_POSITION_FOLLOWING | Node.DOCUMENT_POSITION_CONTAINED_BY : 0;\n\n/**\n * Checks whether the given node or one of its ancestors matches any of the\n * specified floating menu selectors.\n *\n * @param {Node} node - A DOM node.\n * @param {string[]} selectorsFloatingMenus - Additional CSS selectors that\n * match floating menus.\n * @returns {boolean} Whether the node or one of its ancestors is in a floating\n * menu.\n */\nconst elementOrParentIsFloatingMenu = function (node) {\n  let selectorsFloatingMenus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (node instanceof Element && typeof node.closest === 'function') {\n    const allSelectorsFloatingMenus = ['.cds--overflow-menu-options', '.cds--tooltip', '.flatpickr-calendar', ...selectorsFloatingMenus];\n    return allSelectorsFloatingMenus.some(selector => !!node.closest(selector));\n  }\n  return false;\n};\n\n/**\n * Ensures the focus is kept within the given container by implementing\n * \"focus-wrap\" behavior.\n */\nconst wrapFocus = _ref => {\n  let {\n    bodyNode,\n    startTrapNode,\n    endTrapNode,\n    currentActiveNode,\n    oldActiveNode,\n    selectorsFloatingMenus\n  } = _ref;\n  if (bodyNode && currentActiveNode && oldActiveNode && !bodyNode.contains(currentActiveNode) && !elementOrParentIsFloatingMenu(currentActiveNode, selectorsFloatingMenus)) {\n    const comparisonResult = oldActiveNode.compareDocumentPosition(currentActiveNode);\n    if (currentActiveNode === startTrapNode || comparisonResult & DOCUMENT_POSITION_BROAD_PRECEDING) {\n      const tabbableElement = Array.from(bodyNode.querySelectorAll(selectorTabbable)).reverse().find(_ref2 => {\n        let {\n          offsetParent\n        } = _ref2;\n        return Boolean(offsetParent);\n      });\n      if (tabbableElement) {\n        tabbableElement.focus();\n      } else if (bodyNode !== oldActiveNode) {\n        bodyNode.focus();\n      }\n    } else if (currentActiveNode === endTrapNode || comparisonResult & DOCUMENT_POSITION_BROAD_FOLLOWING) {\n      const tabbableElement = Array.from(bodyNode.querySelectorAll(selectorTabbable)).find(_ref3 => {\n        let {\n          offsetParent\n        } = _ref3;\n        return Boolean(offsetParent);\n      });\n      if (tabbableElement) {\n        tabbableElement.focus();\n      } else if (bodyNode !== oldActiveNode) {\n        bodyNode.focus();\n      }\n    }\n  }\n};\n\n/**\n * Ensures the focus is kept in the given container, implementing \"focus-wrap\"\n * behavior.\n *\n * Note: This must be called *before* focus moves using `onKeyDown` or similar.\n */\nconst wrapFocusWithoutSentinels = _ref4 => {\n  let {\n    containerNode,\n    currentActiveNode,\n    event\n  } = _ref4;\n  if (!containerNode) return;\n  if (['blur', 'focusout', 'focusin', 'focus'].includes(event.type) && \"production\" !== 'production') {}\n\n  // Use `tabbable` to get the focusable elements in tab order.\n  // `selectorTabbable` returns elements in DOM order which is why it's not\n  // used.\n  const tabbables = (0,index_esm/* tabbable */.Kr)(containerNode);\n  const firstTabbable = tabbables[0];\n  const lastTabbable = tabbables[tabbables.length - 1];\n\n  // The shift key indicates if focus is moving forwards or backwards.\n  if (currentActiveNode === lastTabbable && !event.shiftKey) {\n    // Cancel the current movement of focus because we're going to place it ourselves\n    event.preventDefault();\n    firstTabbable.focus();\n  }\n  if (currentActiveNode === firstTabbable && event.shiftKey) {\n    // Cancel the current movement of focus because we're going to place it ourselves\n    event.preventDefault();\n    lastTabbable.focus();\n  }\n};\n\n;// ./node_modules/@carbon/react/es/components/Notification/Notification.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Conditionally call a callback when the escape key is pressed\n * @param {node} ref - ref of the container element to scope the functionality to\n * @param {func} callback - function to be called\n * @param {bool} override - escape hatch to conditionally call the callback\n */\nfunction useEscapeToClose(ref, callback) {\n  let override = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const handleKeyDown = event => {\n    // The callback should only be called when focus is on or within the container\n    const elementContainsFocus = ref.current && document.activeElement === ref.current || ref.current?.contains(document.activeElement);\n    if (matches(event, [Escape]) && override && elementContainsFocus) {\n      callback(event);\n    }\n  };\n  useIsomorphicEffect(() => {\n    if (ref.current !== null) {\n      document.addEventListener('keydown', handleKeyDown, false);\n    }\n    return () => document.removeEventListener('keydown', handleKeyDown, false);\n  });\n}\nfunction NotificationActionButton(_ref) {\n  let {\n    children,\n    className: customClassName,\n    onClick,\n    inline,\n    ...rest\n  } = _ref;\n  const prefix = usePrefix();\n  const className = classnames_default()(customClassName, {\n    [`${prefix}--actionable-notification__action-button`]: true\n  });\n  return /*#__PURE__*/react.createElement(Button, _extends({\n    className: className,\n    kind: inline ? 'ghost' : 'tertiary',\n    onClick: onClick,\n    size: \"sm\"\n  }, rest), children);\n}\nNotificationActionButton.propTypes = {\n  /**\n   * Specify the content of the notification action button.\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be applied to the notification action button\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify if the visual treatment of the button should be for an inline notification\n   */\n  inline: (prop_types_default()).bool,\n  /**\n   * Optionally specify a click handler for the notification action button.\n   */\n  onClick: (prop_types_default()).func\n};\n\n/**\n * NotificationButton\n * ==================\n */\n\nfunction NotificationButton(_ref2) {\n  let {\n    'aria-label': ariaLabel = 'close notification',\n    ariaLabel: deprecatedAriaLabel,\n    className,\n    type = 'button',\n    renderIcon: IconTag = bucket_3/* Close */.bm,\n    name,\n    notificationType = 'toast',\n    ...rest\n  } = _ref2;\n  const prefix = usePrefix();\n  const buttonClassName = classnames_default()(className, {\n    [`${prefix}--${notificationType}-notification__close-button`]: notificationType\n  });\n  const iconClassName = classnames_default()({\n    [`${prefix}--${notificationType}-notification__close-icon`]: notificationType\n  });\n  return /*#__PURE__*/react.createElement(\"button\", _extends({}, rest, {\n    // eslint-disable-next-line react/button-has-type\n    type: type,\n    \"aria-label\": deprecatedAriaLabel || ariaLabel,\n    title: deprecatedAriaLabel || ariaLabel,\n    className: buttonClassName\n  }), IconTag && /*#__PURE__*/react.createElement(IconTag, {\n    className: iconClassName,\n    name: name\n  }));\n}\nNotificationButton.propTypes = {\n  /**\n   * Specify a label to be read by screen readers on the container node\n   */\n  ['aria-label']: (prop_types_default()).string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Specify a label to be read by screen readers on the container note.\n   */\n  ariaLabel: deprecate((prop_types_default()).string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify an optional className to be applied to the notification button\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify an optional icon for the Button through a string,\n   * if something but regular \"close\" icon is desirable\n   */\n  name: (prop_types_default()).string,\n  /**\n   * Specify the notification type\n   */\n  notificationType: prop_types_default().oneOf(['toast', 'inline', 'actionable']),\n  /**\n   * A component used to render an icon.\n   */\n  renderIcon: prop_types_default().oneOfType([(prop_types_default()).func, (prop_types_default()).object]),\n  /**\n   * Optional prop to specify the type of the Button\n   */\n  type: (prop_types_default()).string\n};\n\n/**\n * NotificationIcon\n * ================\n */\n\nconst iconTypes = {\n  error: bucket_6/* ErrorFilled */.x,\n  success: bucket_3/* CheckmarkFilled */._j,\n  warning: bucket_18/* WarningFilled */.BF,\n  ['warning-alt']: bucket_18/* WarningAltFilled */.OR,\n  info: bucket_9/* InformationFilled */.NM,\n  ['info-square']: bucket_9/* InformationSquareFilled */.mR\n};\nfunction NotificationIcon(_ref3) {\n  let {\n    iconDescription,\n    kind,\n    notificationType\n  } = _ref3;\n  const prefix = usePrefix();\n  const IconForKind = iconTypes[kind];\n  if (!IconForKind) {\n    return null;\n  }\n  return /*#__PURE__*/react.createElement(IconForKind, {\n    className: `${prefix}--${notificationType}-notification__icon`,\n    size: 20\n  }, /*#__PURE__*/react.createElement(\"title\", null, iconDescription));\n}\nNotificationIcon.propTypes = {\n  iconDescription: (prop_types_default()).string.isRequired,\n  kind: prop_types_default().oneOf(['error', 'success', 'warning', 'warning-alt', 'info', 'info-square']).isRequired,\n  notificationType: prop_types_default().oneOf(['inline', 'toast']).isRequired\n};\n\n/**\n * ToastNotification\n * =================\n */\n\nfunction ToastNotification(_ref4) {\n  let {\n    ['aria-label']: ariaLabel,\n    // @ts-expect-error: deprecated prop\n    ariaLabel: deprecatedAriaLabel,\n    role = 'status',\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    children,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    timeout = 0,\n    title,\n    caption,\n    subtitle,\n    ...rest\n  } = _ref4;\n  const [isOpen, setIsOpen] = (0,react.useState)(true);\n  const prefix = usePrefix();\n  const containerClassName = classnames_default()(className, {\n    [`${prefix}--toast-notification`]: true,\n    [`${prefix}--toast-notification--low-contrast`]: lowContrast,\n    [`${prefix}--toast-notification--${kind}`]: kind\n  });\n  const contentRef = (0,react.useRef)(null);\n  useNoInteractiveChildren(contentRef);\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  const ref = (0,react.useRef)(null);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  const savedOnClose = (0,react.useRef)(onClose);\n  (0,react.useEffect)(() => {\n    savedOnClose.current = onClose;\n  });\n  (0,react.useEffect)(() => {\n    if (!timeout) {\n      return;\n    }\n    const timeoutId = window.setTimeout(event => {\n      setIsOpen(false);\n      if (savedOnClose.current) {\n        savedOnClose.current(event);\n      }\n    }, timeout);\n    return () => {\n      window.clearTimeout(timeoutId);\n    };\n  }, [timeout]);\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/react.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/react.createElement(NotificationIcon, {\n    notificationType: \"toast\",\n    kind: kind,\n    iconDescription: statusIconDescription || `${kind} icon`\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    ref: contentRef,\n    className: `${prefix}--toast-notification__details`\n  }, title && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--toast-notification__title`\n  }, title), subtitle && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--toast-notification__subtitle`\n  }, subtitle), caption && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--toast-notification__caption`\n  }, caption), children), !hideCloseButton && /*#__PURE__*/react.createElement(NotificationButton, {\n    notificationType: \"toast\",\n    onClick: handleCloseButtonClick,\n    \"aria-label\": deprecatedAriaLabel || ariaLabel\n  }));\n}\nToastNotification.propTypes = {\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: (prop_types_default()).string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ariaLabel: deprecate((prop_types_default()).string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify the caption\n   */\n  caption: (prop_types_default()).string,\n  /**\n   * Specify the content\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: (prop_types_default()).bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: prop_types_default().oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the ToastNotification.\n   */\n  lowContrast: (prop_types_default()).bool,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: (prop_types_default()).func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: (prop_types_default()).func,\n  /**\n   * By default, this value is \"status\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side\n   */\n  role: prop_types_default().oneOf(['alert', 'log', 'status']),\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: (prop_types_default()).string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: (prop_types_default()).string,\n  /**\n   * Specify an optional duration the notification should be closed in\n   */\n  timeout: (prop_types_default()).number,\n  /**\n   * Specify the title\n   */\n  title: (prop_types_default()).string\n};\n\n/**\n * InlineNotification\n * ==================\n */\n\nfunction InlineNotification(_ref5) {\n  let {\n    ['aria-label']: ariaLabel,\n    children,\n    title,\n    subtitle,\n    role = 'status',\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    ...rest\n  } = _ref5;\n  const [isOpen, setIsOpen] = (0,react.useState)(true);\n  const prefix = usePrefix();\n  const containerClassName = classnames_default()(className, {\n    [`${prefix}--inline-notification`]: true,\n    [`${prefix}--inline-notification--low-contrast`]: lowContrast,\n    [`${prefix}--inline-notification--${kind}`]: kind,\n    [`${prefix}--inline-notification--hide-close-button`]: hideCloseButton\n  });\n  const contentRef = (0,react.useRef)(null);\n  useNoInteractiveChildren(contentRef);\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  const ref = (0,react.useRef)(null);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/react.createElement(\"div\", _extends({\n    ref: ref\n  }, rest, {\n    role: role,\n    className: containerClassName\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--inline-notification__details`\n  }, /*#__PURE__*/react.createElement(NotificationIcon, {\n    notificationType: \"inline\",\n    kind: kind,\n    iconDescription: statusIconDescription || `${kind} icon`\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    ref: contentRef,\n    className: `${prefix}--inline-notification__text-wrapper`\n  }, title && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--inline-notification__title`\n  }, title), subtitle && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--inline-notification__subtitle`\n  }, subtitle), children)), !hideCloseButton && /*#__PURE__*/react.createElement(NotificationButton, {\n    notificationType: \"inline\",\n    onClick: handleCloseButtonClick,\n    \"aria-label\": ariaLabel\n  }));\n}\nInlineNotification.propTypes = {\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: (prop_types_default()).string,\n  /**\n   * Specify the content\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: (prop_types_default()).bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: prop_types_default().oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the InlineNotification.\n   */\n  lowContrast: (prop_types_default()).bool,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: (prop_types_default()).func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: (prop_types_default()).func,\n  /**\n   * By default, this value is \"status\". You can also provide an alternate\n   * role if it makes sense from the accessibility-side.\n   */\n  role: prop_types_default().oneOf(['alert', 'log', 'status']),\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: (prop_types_default()).string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: (prop_types_default()).string,\n  /**\n   * Specify the title\n   */\n  title: (prop_types_default()).string\n};\n\n/**\n * ActionableNotification\n * ======================\n */\n\nfunction ActionableNotification(_ref6) {\n  let {\n    actionButtonLabel,\n    ['aria-label']: ariaLabel,\n    // @ts-expect-error: deprecated prop\n    ariaLabel: deprecatedAriaLabel,\n    children,\n    role = 'alertdialog',\n    onActionButtonClick,\n    onClose,\n    onCloseButtonClick = noopFn,\n    statusIconDescription,\n    className,\n    inline = false,\n    kind = 'error',\n    lowContrast,\n    hideCloseButton = false,\n    hasFocus = true,\n    closeOnEscape = true,\n    title,\n    subtitle,\n    ...rest\n  } = _ref6;\n  const [isOpen, setIsOpen] = (0,react.useState)(true);\n  const prefix = usePrefix();\n  const id = useId('actionable-notification');\n  const subtitleId = useId('actionable-notification-subtitle');\n  const containerClassName = classnames_default()(className, {\n    [`${prefix}--actionable-notification`]: true,\n    [`${prefix}--actionable-notification--toast`]: !inline,\n    [`${prefix}--actionable-notification--low-contrast`]: lowContrast,\n    [`${prefix}--actionable-notification--${kind}`]: kind,\n    [`${prefix}--actionable-notification--hide-close-button`]: hideCloseButton\n  });\n  const innerModal = (0,react.useRef)(null);\n  const startTrap = (0,react.useRef)(null);\n  const endTrap = (0,react.useRef)(null);\n  const ref = (0,react.useRef)(null);\n  const focusTrapWithoutSentinels = useFeatureFlag('enable-experimental-focus-wrap-without-sentinels');\n  useIsomorphicEffect(() => {\n    if (hasFocus && role === 'alertdialog') {\n      const button = document.querySelector('button.cds--actionable-notification__action-button');\n      button?.focus();\n    }\n  });\n  function handleBlur(_ref7) {\n    let {\n      target: oldActiveNode,\n      relatedTarget: currentActiveNode\n    } = _ref7;\n    if (isOpen && currentActiveNode && oldActiveNode && role === 'alertdialog') {\n      const {\n        current: bodyNode\n      } = innerModal;\n      const {\n        current: startTrapNode\n      } = startTrap;\n      const {\n        current: endTrapNode\n      } = endTrap;\n      wrapFocus({\n        bodyNode,\n        startTrapNode,\n        endTrapNode,\n        currentActiveNode,\n        oldActiveNode\n      });\n    }\n  }\n  function handleKeyDown(event) {\n    if (isOpen && match_match(event, Tab) && ref.current && role === 'alertdialog') {\n      wrapFocusWithoutSentinels({\n        containerNode: ref.current,\n        currentActiveNode: event.target,\n        event\n      });\n    }\n  }\n  const handleClose = evt => {\n    if (!onClose || onClose(evt) !== false) {\n      setIsOpen(false);\n    }\n  };\n  useEscapeToClose(ref, handleCloseButtonClick, closeOnEscape);\n  function handleCloseButtonClick(event) {\n    onCloseButtonClick(event);\n    handleClose(event);\n  }\n  if (!isOpen) {\n    return null;\n  }\n  return /*#__PURE__*/react.createElement(\"div\", _extends({}, rest, {\n    ref: ref,\n    role: role,\n    className: containerClassName,\n    \"aria-labelledby\": title ? id : subtitleId,\n    onBlur: !focusTrapWithoutSentinels ? handleBlur : () => {},\n    onKeyDown: focusTrapWithoutSentinels ? handleKeyDown : () => {}\n  }), !focusTrapWithoutSentinels && /*#__PURE__*/react.createElement(\"span\", {\n    ref: startTrap,\n    tabIndex: 0,\n    role: \"link\",\n    className: `${prefix}--visually-hidden`\n  }, \"Focus sentinel\"), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__details`\n  }, /*#__PURE__*/react.createElement(NotificationIcon, {\n    notificationType: inline ? 'inline' : 'toast',\n    kind: kind,\n    iconDescription: statusIconDescription || `${kind} icon`\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__text-wrapper`\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__content`\n  }, title && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--actionable-notification__title`,\n    id: id\n  }, title), subtitle && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--actionable-notification__subtitle`,\n    id: subtitleId\n  }, subtitle), children))), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__button-wrapper`,\n    ref: innerModal\n  }, actionButtonLabel && /*#__PURE__*/react.createElement(NotificationActionButton, {\n    onClick: onActionButtonClick,\n    inline: inline\n  }, actionButtonLabel), !hideCloseButton && /*#__PURE__*/react.createElement(NotificationButton, {\n    \"aria-label\": deprecatedAriaLabel || ariaLabel,\n    notificationType: \"actionable\",\n    onClick: handleCloseButtonClick\n  })), !focusTrapWithoutSentinels && /*#__PURE__*/react.createElement(\"span\", {\n    ref: endTrap,\n    tabIndex: 0,\n    role: \"link\",\n    className: `${prefix}--visually-hidden`\n  }, \"Focus sentinel\"));\n}\nActionableNotification.propTypes = {\n  /**\n   * Pass in the action button label that will be rendered within the ActionableNotification.\n   */\n  actionButtonLabel: (prop_types_default()).string,\n  /**\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ['aria-label']: (prop_types_default()).string,\n  /**\n   * Deprecated, please use `aria-label` instead.\n   * Provide a description for \"close\" icon button that can be read by screen readers\n   */\n  ariaLabel: deprecate((prop_types_default()).string, 'This prop syntax has been deprecated. Please use the new `aria-label`.'),\n  /**\n   * Specify the content\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify if pressing the escape key should close notifications\n   */\n  closeOnEscape: (prop_types_default()).bool,\n  /**\n   * Specify if focus should be moved to the component when the notification contains actions\n   */\n  hasFocus: deprecate((prop_types_default()).bool, 'hasFocus is deprecated. To conform to accessibility requirements hasFocus ' + 'should always be `true` for ActionableNotification. If you were ' + 'setting this prop to `false`, consider using the Callout component instead.'),\n  /**\n   * Specify the close button should be disabled, or not\n   */\n  hideCloseButton: (prop_types_default()).bool,\n  /*\n   * Specify if the notification should have inline styling applied instead of toast\n   */\n  inline: (prop_types_default()).bool,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: prop_types_default().oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']),\n  /**\n   * Specify whether you are using the low contrast variant of the ActionableNotification.\n   */\n  lowContrast: (prop_types_default()).bool,\n  /**\n   * Provide a function that is called when the action is clicked\n   */\n  onActionButtonClick: (prop_types_default()).func,\n  /**\n   * Provide a function that is called when menu is closed\n   */\n  onClose: (prop_types_default()).func,\n  /**\n   * Provide a function that is called when the close button is clicked\n   */\n  onCloseButtonClick: (prop_types_default()).func,\n  /**\n   * Provide an accessible role to be used. Defaults to `alertdialog`. Any other\n   * value will disable the wrapping of focus. To remain accessible, additional\n   * work is required. See the storybook docs for more info:\n   * https://react.carbondesignsystem.com/?path=/docs/components-notifications-actionable--overview#using-the-role-prop\n   */\n  role: (prop_types_default()).string,\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: (prop_types_default()).string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: (prop_types_default()).node,\n  /**\n   * Specify the title\n   */\n  title: (prop_types_default()).string\n};\n\n/**\n * Callout\n * ==================\n */\n\n/**\n * Deprecated callout kind values.\n * @deprecated Use NewKindProps instead.\n */\n\nconst propMappingFunction = deprecatedValue => {\n  const mapping = {\n    error: 'warning',\n    // only redirect error -> warning\n    success: 'info' // only redirect success -> info\n  };\n  return mapping[deprecatedValue];\n};\nfunction Callout(_ref8) {\n  let {\n    actionButtonLabel,\n    children,\n    onActionButtonClick,\n    title,\n    titleId,\n    subtitle,\n    statusIconDescription,\n    className,\n    kind = 'info',\n    lowContrast,\n    ...rest\n  } = _ref8;\n  const prefix = usePrefix();\n  const containerClassName = classnames_default()(className, {\n    [`${prefix}--actionable-notification`]: true,\n    [`${prefix}--actionable-notification--low-contrast`]: lowContrast,\n    [`${prefix}--actionable-notification--${kind}`]: kind,\n    [`${prefix}--actionable-notification--hide-close-button`]: true\n  });\n  const childrenContainer = (0,react.useRef)(null);\n  useInteractiveChildrenNeedDescription(childrenContainer, `interactive child node(s) should have an \\`aria-describedby\\` property with a value matching the value of \\`titleId\\``);\n  return /*#__PURE__*/react.createElement(\"div\", _extends({}, rest, {\n    className: containerClassName\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__details`\n  }, /*#__PURE__*/react.createElement(NotificationIcon, {\n    notificationType: \"inline\",\n    kind: kind,\n    iconDescription: statusIconDescription || `${kind} icon`\n  }), /*#__PURE__*/react.createElement(\"div\", {\n    ref: childrenContainer,\n    className: `${prefix}--actionable-notification__text-wrapper`\n  }, title && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    id: titleId,\n    className: `${prefix}--actionable-notification__title`\n  }, title), subtitle && /*#__PURE__*/react.createElement(Text, {\n    as: \"div\",\n    className: `${prefix}--actionable-notification__subtitle`\n  }, subtitle), children)), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${prefix}--actionable-notification__button-wrapper`\n  }, actionButtonLabel && /*#__PURE__*/react.createElement(NotificationActionButton, {\n    onClick: onActionButtonClick,\n    \"aria-describedby\": titleId,\n    inline: true\n  }, actionButtonLabel)));\n}\nCallout.propTypes = {\n  /**\n   * Pass in the action button label that will be rendered within the ActionableNotification.\n   */\n  actionButtonLabel: (prop_types_default()).string,\n  /**\n   * Specify the content\n   */\n  children: (prop_types_default()).node,\n  /**\n   * Specify an optional className to be applied to the notification box\n   */\n  className: (prop_types_default()).string,\n  /**\n   * Specify what state the notification represents\n   */\n  kind: deprecateValuesWithin(prop_types_default().oneOf(['error', 'info', 'info-square', 'success', 'warning', 'warning-alt']), ['warning', 'info'], propMappingFunction),\n  /**\n   * Specify whether you are using the low contrast variant of the Callout.\n   */\n  lowContrast: (prop_types_default()).bool,\n  /**\n   * Provide a function that is called when the action is clicked\n   */\n  onActionButtonClick: (prop_types_default()).func,\n  /**\n   * Provide a description for \"status\" icon that can be read by screen readers\n   */\n  statusIconDescription: (prop_types_default()).string,\n  /**\n   * Specify the subtitle\n   */\n  subtitle: (prop_types_default()).node,\n  /**\n   * Specify the title\n   */\n  title: (prop_types_default()).string,\n  /**\n   * Specify the id for the element containing the title\n   */\n  titleId: (prop_types_default()).string\n};\n\n// In renaming StaticNotification to Callout, the legacy StaticNotification\n// export and it's types should remain usable until Callout is moved to stable.\n// The StaticNotification component below forwards props to Callout and inherits\n// CalloutProps to ensure consumer usage is not impacted, while providing them\n// a deprecation warning.\n// TODO: remove this when Callout moves to stable OR in v12, whichever is first\n/**\n * @deprecated Use `CalloutProps` instead.\n */\n\nlet Notification_didWarnAboutDeprecation = false;\nconst StaticNotification = props => {\n  if (false) {}\n  return /*#__PURE__*/React.createElement(Callout, props);\n};\n\n;// ./node_modules/@carbon/react/es/index.js\n/**\n * Copyright IBM Corp. 2016, 2023\n *\n * This source code is licensed under the Apache-2.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6732\n")}}]);