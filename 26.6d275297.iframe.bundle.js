"use strict";(self.webpackChunk_ibm_aiops_ui_extension_template=self.webpackChunk_ibm_aiops_ui_extension_template||[]).push([[26],{8645:function(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__){eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Wh: function() { return /* binding */ et; },\n/* harmony export */   bl: function() { return /* binding */ cU; },\n/* harmony export */   dM: function() { return /* binding */ oU; },\n/* harmony export */   kf: function() { return /* binding */ mU; },\n/* harmony export */   rW: function() { return /* binding */ dU; }\n/* harmony export */ });\n/* unused harmony exports Alignments, AlluvialChart, AreaChart, AreaEvent, ArrowDirections, ArrowLeftMarker, ArrowRightMarker, AxisEvent, AxisFlavor, AxisPositions, AxisTitleOrientations, BarEvent, BoxplotChart, BoxplotEvent, BubbleChart, BulletChart, CalloutDirections, CanvasZoomEvent, CardNode, CardNodeColumn, CardNodeLabel, CardNodeSubtitle, CardNodeTitle, CartesianOrientations, ChartEvent, ChartTheme, ChartTypes, ChoroplethChart, CircleMarker, CirclePackChart, ColorClassNameTypes, ColorLegendType, ComboChart, DiamondMarker, DividerStatus, DominantBaseline, DonutChart, Edge, ExperimentalChoroplethChart, GaugeChart, GaugeEvent, GaugeTypes, GroupedBarChart, HistogramChart, LayoutAlignItems, LayoutDirection, LayoutGrowth, LegendItemType, LegendOrientations, LegendPositions, LineEvent, LollipopChart, Marker, MeterChart, ModalEvent, ModelEvent, PieEvent, Projection, RadarChart, RadarEvent, RenderTypes, ScatterChart, ScatterEvent, ShapeNode, Skeletons, SquareMarker, StackedAreaChart, StackedBarChart, Statuses, TeeMarker, TextAnchor, ThresholdEvent, TickRotations, ToolbarControlTypes, TooltipEvent, TreeChart, TreeEvent, TreeTypes, TreemapChart, TreemapEvent, TruncationTypes, WordCloudChart, WordCloudEvent, ZoomBarTypes, ZoomDomainEvent, ZoombarEvent */\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4674);\nvar u0 = Object.defineProperty;\nvar h0 = (e, t, n) => t in e ? u0(e, t, { enumerable: !0, configurable: !0, writable: !0, value: n }) : e[t] = n;\nvar So = (e, t, n) => h0(e, typeof t != "symbol" ? t + "" : t, n);\n\nvar Ip = /* @__PURE__ */ ((e) => (e.RENDER_FINISHED = "render-finished", e.RESIZE = "chart-resize", e.MOUSEOVER = "chart-mouseover", e.MOUSEOUT = "chart-mouseout", e))(Ip || {}), Np = /* @__PURE__ */ ((e) => (e.SHOW = "show-modal", e.HIDE = "hide-modal", e))(Np || {}), Pp = /* @__PURE__ */ ((e) => (e.UPDATE = "model-update", e))(Pp || {}), Up = /* @__PURE__ */ ((e) => (e.SHOW_OVERFLOW_MENU = "show-toolbar-overflow-menu", e.HIDE_OVERFLOW_MENU = "hide-toolbar-overflow-menu", e.BUTTON_CLICK = "toolbar-button-click", e.SHOW_TOOLTIP = "toolbar-show-tooltip", e.HIDE_TOOLTIP = "toolbar-hide-tooltip", e))(Up || {}), Bp = /* @__PURE__ */ ((e) => (e.UPDATE = "zoom-bar-update", e.SELECTION_START = "zoom-bar-selection-start", e.SELECTION_IN_PROGRESS = "zoom-bar-selection-in-progress", e.SELECTION_END = "zoom-bar-selection-end", e))(Bp || {}), Hp = /* @__PURE__ */ ((e) => (e.CHANGE = "zoom-domain-change", e))(Hp || {}), Vp = /* @__PURE__ */ ((e) => (e.CANVAS_ZOOM_IN = "canvas-zoom-in", e.CANVAS_ZOOM_OUT = "canvas-zoom-out", e))(Vp || {}), Gp = /* @__PURE__ */ ((e) => (e.LABEL_MOUSEOVER = "axis-label-mouseover", e.LABEL_MOUSEMOVE = "axis-label-mousemove", e.LABEL_CLICK = "axis-label-click", e.LABEL_MOUSEOUT = "axis-label-mouseout", e.LABEL_FOCUS = "axis-label-focus", e.LABEL_BLUR = "axis-label-blur", e.RENDER_COMPLETE = "axis-render-complete", e))(Gp || {}), zp = /* @__PURE__ */ ((e) => (e.POINT_MOUSEOVER = "scatter-mouseover", e.POINT_MOUSEMOVE = "scatter-mousemove", e.POINT_CLICK = "scatter-click", e.POINT_MOUSEOUT = "scatter-mouseout", e))(zp || {}), Fp = /* @__PURE__ */ ((e) => (e.WORD_MOUSEOVER = "wordcloud-word-mouseover", e.WORD_MOUSEMOVE = "wordcloud-word-mousemove", e.WORD_CLICK = "wordcloud-word-click", e.WORD_MOUSEOUT = "wordcloud-word-mouseout", e))(Fp || {}), jp = /* @__PURE__ */ ((e) => (e.SLICE_MOUSEOVER = "pie-slice-mouseover", e.SLICE_MOUSEMOVE = "pie-slice-mousemove", e.SLICE_CLICK = "pie-slice-click", e.SLICE_MOUSEOUT = "pie-slice-mouseout", e))(jp || {}), Wp = /* @__PURE__ */ ((e) => (e.ARC_MOUSEOVER = "gauge-arc-mouseover", e.ARC_MOUSEMOVE = "gauge-arc-mousemove", e.ARC_CLICK = "gauge-arc-click", e.ARC_MOUSEOUT = "gauge-arc-mouseout", e))(Wp || {}), qp = /* @__PURE__ */ ((e) => (e.BAR_MOUSEOVER = "bar-mouseover", e.BAR_MOUSEMOVE = "bar-mousemove", e.BAR_CLICK = "bar-click", e.BAR_MOUSEOUT = "bar-mouseout", e))(qp || {}), Yp = /* @__PURE__ */ ((e) => (e.BOX_MOUSEOVER = "box-mouseover", e.BOX_MOUSEMOVE = "box-mousemove", e.BOX_CLICK = "box-click", e.BOX_MOUSEOUT = "box-mouseout", e.OUTLIER_MOUSEOVER = "outlier-mouseover", e.OUTLIER_MOUSEMOVE = "outlier-mousemove", e.OUTLIER_CLICK = "outlier-click", e.OUTLIER_MOUSEOUT = "outlier-mouseout", e))(Yp || {}), Xp = /* @__PURE__ */ ((e) => (e.SCATTER_MOUSEOVER = "scatter-mouseover", e.SCATTER_MOUSEMOVE = "scatter-mousemove", e.SCATTER_CLICK = "scatter-click", e.SCATTER_MOUSEOUT = "scatter-mouseout", e))(Xp || {}), Zp = /* @__PURE__ */ ((e) => (e.POINT_MOUSEOVER = "scatter-mouseover", e.POINT_MOUSEMOVE = "scatter-mousemove", e.POINT_CLICK = "scatter-click", e.POINT_MOUSEOUT = "scatter-mouseout", e))(Zp || {}), Kp = /* @__PURE__ */ ((e) => (e.X_AXIS_MOUSEOVER = "radar-x-axis-mouseover", e.X_AXIS_MOUSEMOVE = "radar-x-axis-mousemove", e.X_AXIS_CLICK = "radar-x-axis-click", e.X_AXIS_MOUSEOUT = "radar-x-axis-mouseout", e))(Kp || {}), Qp = /* @__PURE__ */ ((e) => (e.NODE_MOUSEOVER = "tree-node-mouseover", e.NODE_CLICK = "tree-node-click", e.NODE_MOUSEOUT = "tree-node-mouseout", e))(Qp || {}), Jp = /* @__PURE__ */ ((e) => (e.LEAF_MOUSEOVER = "leaf-mouseover", e.LEAF_MOUSEMOVE = "leaf-mousemove", e.LEAF_CLICK = "leaf-click", e.LEAF_MOUSEOUT = "leaf-mouseout", e))(Jp || {}), Ii = /* @__PURE__ */ ((e) => (e.SHOW = "show-tooltip", e.MOVE = "move-tooltip", e.HIDE = "hide-tooltip", e))(Ii || {}), tf = /* @__PURE__ */ ((e) => (e.SHOW = "show-threshold", e.HIDE = "hide-threshold", e))(tf || {}), ef = /* @__PURE__ */ ((e) => (e.ITEM_HOVER = "legend-item-onhover", e.ITEM_CLICK = "legend-item-onclick", e.ITEM_MOUSEOUT = "legend-item-onmouseout", e.ITEMS_UPDATE = "legend-items-update", e))(ef || {}), nf = /* @__PURE__ */ ((e) => (e.CIRCLE_MOUSEOVER = "circle-leaf-mouseover", e.CIRCLE_CLICK = "circle-leaf-click", e.CIRCLE_MOUSEOUT = "circle-leaf-mouseout", e.CIRCLE_MOUSEMOVE = "circle-leaf-mousemove", e))(nf || {}), rf = /* @__PURE__ */ ((e) => (e.NODE_MOUSEOVER = "alluvial-node-mouseover", e.NODE_CLICK = "alluvial-node-click", e.NODE_MOUSEOUT = "alluvial-node-mouseout", e.NODE_MOUSEMOVE = "alluvial-node-mousemove", e.LINE_MOUSEOVER = "alluvial-line-mouseover", e.LINE_CLICK = "alluvial-line-click", e.LINE_MOUSEOUT = "alluvial-line-mouseout", e.LINE_MOUSEMOVE = "alluvial-line-mousemove", e))(rf || {}), sf = /* @__PURE__ */ ((e) => (e.METER_MOUSEOVER = "meter-mouseover", e.METER_CLICK = "meter-click", e.METER_MOUSEOUT = "meter-mouseout", e.METER_MOUSEMOVE = "meter-mousemove", e))(sf || {}), af = /* @__PURE__ */ ((e) => (e.HEATMAP_MOUSEOVER = "heatmap-mouseover", e.HEATMAP_CLICK = "heatmap-click", e.HEATMAP_MOUSEOUT = "heatmap-mouseout", e.HEATMAP_MOUSEMOVE = "hetmap-mousemove", e))(af || {}), Dr = /* @__PURE__ */ ((e) => (e.CHOROPLETH_MOUSEOVER = "choropleth-mouseover", e.CHOROPLETH_CLICK = "choropleth-click", e.CHOROPLETH_MOUSEOUT = "choropleth-mouseout", e.CHOROPLETH_MOUSEMOVE = "choropleth-mousemove", e))(Dr || {});\nconst d0 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  Alluvial: rf,\n  Area: zp,\n  Axis: Gp,\n  Bar: qp,\n  Boxplot: Yp,\n  CanvasZoom: Vp,\n  Chart: Ip,\n  Choropleth: Dr,\n  CirclePack: nf,\n  Gauge: Wp,\n  Heatmap: af,\n  Legend: ef,\n  Line: Zp,\n  Meter: sf,\n  Modal: Np,\n  Model: Pp,\n  Pie: jp,\n  Radar: Kp,\n  Scatter: Xp,\n  Threshold: tf,\n  Toolbar: Up,\n  Tooltip: Ii,\n  Tree: Qp,\n  Treemap: Jp,\n  WordCloud: Fp,\n  ZoomBar: Bp,\n  ZoomDomain: Hp\n}, Symbol.toStringTag, { value: "Module" })), T = d0;\nvar rt = /* @__PURE__ */ ((e) => (e.HTML = "html", e.SVG = "svg", e))(rt || {}), of = /* @__PURE__ */ ((e) => (e.WHITE = "white", e.G100 = "g100", e.G90 = "g90", e.G10 = "g10", e))(of || {}), it = /* @__PURE__ */ ((e) => (e.BACKGROUND = "background", e.FILL = "fill", e.STROKE = "stroke", e.TOOLTIP = "tooltip", e))(it || {}), G = /* @__PURE__ */ ((e) => (e.LEFT = "left", e.RIGHT = "right", e.TOP = "top", e.BOTTOM = "bottom", e))(G || {}), Ke = /* @__PURE__ */ ((e) => (e.GRAPH_VIEW = "graph_view", e.SLIDER_VIEW = "slider_view", e))(Ke || {}), Ve = /* @__PURE__ */ ((e) => (e.END_LINE = "end_line", e.MID_LINE = "mid_line", e.FRONT_LINE = "front_line", e.NONE = "none", e))(Ve || {}), Ft = /* @__PURE__ */ ((e) => (e.VERTICAL = "vertical", e.HORIZONTAL = "horizontal", e))(Ft || {}), et = /* @__PURE__ */ ((e) => (e.TIME = "time", e.LINEAR = "linear", e.LOG = "log", e.LABELS = "labels", e.LABELS_RATIO = "labels-ratio", e))(et || {}), Ni = /* @__PURE__ */ ((e) => (e.RIGHT = "right", e.LEFT = "left", e.TOP = "top", e.BOTTOM = "bottom", e))(Ni || {}), jt = /* @__PURE__ */ ((e) => (e.LEFT = "left", e.CENTER = "center", e.RIGHT = "right", e))(jt || {}), ji = /* @__PURE__ */ ((e) => (e.HORIZONTAL = "horizontal", e.VERTICAL = "vertical", e))(ji || {}), pc = /* @__PURE__ */ ((e) => (e.TREE = "tree", e.DENDROGRAM = "dendrogram", e))(pc || {}), At = /* @__PURE__ */ ((e) => (e.ROW = "row", e.COLUMN = "column", e.ROW_REVERSE = "row-reverse", e.COLUMN_REVERSE = "column-reverse", e))(At || {}), ct = /* @__PURE__ */ ((e) => (e.FIXED = "fixed", e.PREFERRED = "preferred", e.STRETCH = "stretch", e))(ct || {}), ni = /* @__PURE__ */ ((e) => (e.CENTER = "center", e))(ni || {}), Fs = /* @__PURE__ */ ((e) => (e.LEFT = "left", e.RIGHT = "right", e))(Fs || {}), zt = /* @__PURE__ */ ((e) => (e.GRID = "grid", e.VERT_OR_HORIZ = "vertOrHoriz", e.PIE = "pie", e.DONUT = "donut", e))(zt || {}), dn = /* @__PURE__ */ ((e) => (e.START = "start", e.MIDDLE = "middle", e.END = "end", e))(dn || {}), pn = /* @__PURE__ */ ((e) => (e.BASELINE = "baseline", e.MIDDLE = "middle", e.HANGING = "hanging", e))(pn || {}), Rr = /* @__PURE__ */ ((e) => (e.SEMI = "semi", e.FULL = "full", e))(Rr || {}), pl = /* @__PURE__ */ ((e) => (e.UP = "up", e.DOWN = "down", e))(pl || {}), js = /* @__PURE__ */ ((e) => (e.SUCCESS = "success", e.WARNING = "warning", e.DANGER = "danger", e))(js || {}), Ws = /* @__PURE__ */ ((e) => (e.ALWAYS = "always", e.AUTO = "auto", e.NEVER = "never", e))(Ws || {}), we = /* @__PURE__ */ ((e) => (e.SCATTER = "scatter", e.LINE = "line", e.SIMPLE_BAR = "simple-bar", e.STACKED_BAR = "stacked-bar", e.GROUPED_BAR = "grouped-bar", e.AREA = "area", e.STACKED_AREA = "stacked-area", e))(we || {}), _t = /* @__PURE__ */ ((e) => (e.EXPORT_CSV = "Export as CSV", e.EXPORT_PNG = "Export as PNG", e.EXPORT_JPG = "Export as JPG", e.ZOOM_IN = "Zoom in", e.ZOOM_OUT = "Zoom out", e.RESET_ZOOM = "Reset zoom", e.MAKE_FULLSCREEN = "Make fullscreen", e.EXIT_FULLSCREEN = "Exit fullscreen", e.SHOW_AS_DATATABLE = "Show as data-table", e.CUSTOM = "Custom", e))(_t || {}), fl = /* @__PURE__ */ ((e) => (e.LEFT = "left", e.RIGHT = "right", e))(fl || {}), Gt = /* @__PURE__ */ ((e) => (e.CHECKBOX = "checkbox", e.RADIUS = "radius", e.AREA = "area", e.SIZE = "size", e.LINE = "line", e.QUARTILE = "quartile", e.ZOOM = "zoom", e))(Gt || {}), qs = /* @__PURE__ */ ((e) => (e.LINEAR = "linear", e.QUANTIZE = "quantize", e))(qs || {}), Pi = /* @__PURE__ */ ((e) => (e.ON = "on", e.AUTO = "auto", e.OFF = "off", e))(Pi || {}), Ga = /* @__PURE__ */ ((e) => (e.DEFAULT = "default", e.HOVERABLE = "hoverable", e))(Ga || {}), gn = /* @__PURE__ */ ((e) => (e.geoEqualEarth = "geoEqualEarth", e.geoAlbers = "geoAlbers", e.geoConicEqualArea = "geoConicEqualArea", e.geoConicEquidistant = "geoConicEquidistant", e.geoEquirectangular = "geoEquirectangular", e.geoMercator = "geoMercator", e.geoNaturalEarth1 = "geoNaturalEarth1", e))(gn || {}), lf = /* @__PURE__ */ ((e) => (e["15seconds"] = "15seconds", e.minute = "minute", e["30minutes"] = "30minutes", e.hourly = "hourly", e.daily = "daily", e.weekly = "weekly", e.monthly = "monthly", e.quarterly = "quarterly", e.yearly = "yearly", e))(lf || {});\nfunction To(e) {\n  return (t = {}) => {\n    const n = t.width ? String(t.width) : e.defaultWidth;\n    return e.formats[n] || e.formats[e.defaultWidth];\n  };\n}\nfunction ui(e) {\n  return (t, n) => {\n    const r = n != null && n.context ? String(n.context) : "standalone";\n    let i;\n    if (r === "formatting" && e.formattingValues) {\n      const a = e.defaultFormattingWidth || e.defaultWidth, o = n != null && n.width ? String(n.width) : a;\n      i = e.formattingValues[o] || e.formattingValues[a];\n    } else {\n      const a = e.defaultWidth, o = n != null && n.width ? String(n.width) : e.defaultWidth;\n      i = e.values[o] || e.values[a];\n    }\n    const s = e.argumentCallback ? e.argumentCallback(t) : t;\n    return i[s];\n  };\n}\nfunction hi(e) {\n  return (t, n = {}) => {\n    const r = n.width, i = r && e.matchPatterns[r] || e.matchPatterns[e.defaultMatchWidth], s = t.match(i);\n    if (!s)\n      return null;\n    const a = s[0], o = r && e.parsePatterns[r] || e.parsePatterns[e.defaultParseWidth], l = Array.isArray(o) ? f0(o, (d) => d.test(a)) : (\n      // [TODO] -- I challenge you to fix the type\n      p0(o, (d) => d.test(a))\n    );\n    let c;\n    c = e.valueCallback ? e.valueCallback(l) : l, c = n.valueCallback ? (\n      // [TODO] -- I challenge you to fix the type\n      n.valueCallback(c)\n    ) : c;\n    const u = t.slice(a.length);\n    return { value: c, rest: u };\n  };\n}\nfunction p0(e, t) {\n  for (const n in e)\n    if (Object.prototype.hasOwnProperty.call(e, n) && t(e[n]))\n      return n;\n}\nfunction f0(e, t) {\n  for (let n = 0; n < e.length; n++)\n    if (t(e[n]))\n      return n;\n}\nfunction m0(e) {\n  return (t, n = {}) => {\n    const r = t.match(e.matchPattern);\n    if (!r) return null;\n    const i = r[0], s = t.match(e.parsePattern);\n    if (!s) return null;\n    let a = e.valueCallback ? e.valueCallback(s[0]) : s[0];\n    a = n.valueCallback ? n.valueCallback(a) : a;\n    const o = t.slice(i.length);\n    return { value: a, rest: o };\n  };\n}\nconst cf = 6048e5, g0 = 864e5, uf = 6e4, hf = 36e5, Ru = Symbol.for("constructDateFrom");\nfunction Le(e, t) {\n  return typeof e == "function" ? e(t) : e && typeof e == "object" && Ru in e ? e[Ru](t) : e instanceof Date ? new e.constructor(t) : new Date(t);\n}\nfunction ur(e, ...t) {\n  const n = Le.bind(\n    null,\n    t.find((r) => typeof r == "object")\n  );\n  return t.map(n);\n}\nlet v0 = {};\nfunction za() {\n  return v0;\n}\nfunction Ht(e, t) {\n  return Le(t || e, e);\n}\nfunction Wi(e, t) {\n  var n, r, i, s;\n  const a = za(), o = (t == null ? void 0 : t.weekStartsOn) ?? ((r = (n = t == null ? void 0 : t.locale) == null ? void 0 : n.options) == null ? void 0 : r.weekStartsOn) ?? a.weekStartsOn ?? ((s = (i = a.locale) == null ? void 0 : i.options) == null ? void 0 : s.weekStartsOn) ?? 0, l = Ht(e, t == null ? void 0 : t.in), c = l.getDay(), u = (c < o ? 7 : 0) + c - o;\n  return l.setDate(l.getDate() - u), l.setHours(0, 0, 0, 0), l;\n}\nconst y0 = {\n  lessThanXSeconds: {\n    one: "less than a second",\n    other: "less than {{count}} seconds"\n  },\n  xSeconds: {\n    one: "1 second",\n    other: "{{count}} seconds"\n  },\n  halfAMinute: "half a minute",\n  lessThanXMinutes: {\n    one: "less than a minute",\n    other: "less than {{count}} minutes"\n  },\n  xMinutes: {\n    one: "1 minute",\n    other: "{{count}} minutes"\n  },\n  aboutXHours: {\n    one: "about 1 hour",\n    other: "about {{count}} hours"\n  },\n  xHours: {\n    one: "1 hour",\n    other: "{{count}} hours"\n  },\n  xDays: {\n    one: "1 day",\n    other: "{{count}} days"\n  },\n  aboutXWeeks: {\n    one: "about 1 week",\n    other: "about {{count}} weeks"\n  },\n  xWeeks: {\n    one: "1 week",\n    other: "{{count}} weeks"\n  },\n  aboutXMonths: {\n    one: "about 1 month",\n    other: "about {{count}} months"\n  },\n  xMonths: {\n    one: "1 month",\n    other: "{{count}} months"\n  },\n  aboutXYears: {\n    one: "about 1 year",\n    other: "about {{count}} years"\n  },\n  xYears: {\n    one: "1 year",\n    other: "{{count}} years"\n  },\n  overXYears: {\n    one: "over 1 year",\n    other: "over {{count}} years"\n  },\n  almostXYears: {\n    one: "almost 1 year",\n    other: "almost {{count}} years"\n  }\n}, x0 = (e, t, n) => {\n  let r;\n  const i = y0[e];\n  return typeof i == "string" ? r = i : t === 1 ? r = i.one : r = i.other.replace("{{count}}", t.toString()), n != null && n.addSuffix ? n.comparison && n.comparison > 0 ? "in " + r : r + " ago" : r;\n}, b0 = {\n  lastWeek: "\'last\' eeee \'at\' p",\n  yesterday: "\'yesterday at\' p",\n  today: "\'today at\' p",\n  tomorrow: "\'tomorrow at\' p",\n  nextWeek: "eeee \'at\' p",\n  other: "P"\n}, _0 = (e, t, n, r) => b0[e], E0 = {\n  narrow: ["B", "A"],\n  abbreviated: ["BC", "AD"],\n  wide: ["Before Christ", "Anno Domini"]\n}, O0 = {\n  narrow: ["1", "2", "3", "4"],\n  abbreviated: ["Q1", "Q2", "Q3", "Q4"],\n  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]\n}, S0 = {\n  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],\n  abbreviated: [\n    "Jan",\n    "Feb",\n    "Mar",\n    "Apr",\n    "May",\n    "Jun",\n    "Jul",\n    "Aug",\n    "Sep",\n    "Oct",\n    "Nov",\n    "Dec"\n  ],\n  wide: [\n    "January",\n    "February",\n    "March",\n    "April",\n    "May",\n    "June",\n    "July",\n    "August",\n    "September",\n    "October",\n    "November",\n    "December"\n  ]\n}, T0 = {\n  narrow: ["S", "M", "T", "W", "T", "F", "S"],\n  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],\n  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n  wide: [\n    "Sunday",\n    "Monday",\n    "Tuesday",\n    "Wednesday",\n    "Thursday",\n    "Friday",\n    "Saturday"\n  ]\n}, w0 = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night"\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night"\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "morning",\n    afternoon: "afternoon",\n    evening: "evening",\n    night: "night"\n  }\n}, $0 = {\n  narrow: {\n    am: "a",\n    pm: "p",\n    midnight: "mi",\n    noon: "n",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night"\n  },\n  abbreviated: {\n    am: "AM",\n    pm: "PM",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night"\n  },\n  wide: {\n    am: "a.m.",\n    pm: "p.m.",\n    midnight: "midnight",\n    noon: "noon",\n    morning: "in the morning",\n    afternoon: "in the afternoon",\n    evening: "in the evening",\n    night: "at night"\n  }\n}, M0 = (e, t) => {\n  const n = Number(e), r = n % 100;\n  if (r > 20 || r < 10)\n    switch (r % 10) {\n      case 1:\n        return n + "st";\n      case 2:\n        return n + "nd";\n      case 3:\n        return n + "rd";\n    }\n  return n + "th";\n}, C0 = {\n  ordinalNumber: M0,\n  era: ui({\n    values: E0,\n    defaultWidth: "wide"\n  }),\n  quarter: ui({\n    values: O0,\n    defaultWidth: "wide",\n    argumentCallback: (e) => e - 1\n  }),\n  month: ui({\n    values: S0,\n    defaultWidth: "wide"\n  }),\n  day: ui({\n    values: T0,\n    defaultWidth: "wide"\n  }),\n  dayPeriod: ui({\n    values: w0,\n    defaultWidth: "wide",\n    formattingValues: $0,\n    defaultFormattingWidth: "wide"\n  })\n}, A0 = /^(\\d+)(th|st|nd|rd)?/i, L0 = /\\d+/i, k0 = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n}, D0 = {\n  any: [/^b/i, /^(a|c)/i]\n}, R0 = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n}, I0 = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n}, N0 = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n}, P0 = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i\n  ],\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i\n  ]\n}, U0 = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n}, B0 = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n}, H0 = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n}, V0 = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n}, G0 = {\n  ordinalNumber: m0({\n    matchPattern: A0,\n    parsePattern: L0,\n    valueCallback: (e) => parseInt(e, 10)\n  }),\n  era: hi({\n    matchPatterns: k0,\n    defaultMatchWidth: "wide",\n    parsePatterns: D0,\n    defaultParseWidth: "any"\n  }),\n  quarter: hi({\n    matchPatterns: R0,\n    defaultMatchWidth: "wide",\n    parsePatterns: I0,\n    defaultParseWidth: "any",\n    valueCallback: (e) => e + 1\n  }),\n  month: hi({\n    matchPatterns: N0,\n    defaultMatchWidth: "wide",\n    parsePatterns: P0,\n    defaultParseWidth: "any"\n  }),\n  day: hi({\n    matchPatterns: U0,\n    defaultMatchWidth: "wide",\n    parsePatterns: B0,\n    defaultParseWidth: "any"\n  }),\n  dayPeriod: hi({\n    matchPatterns: H0,\n    defaultMatchWidth: "any",\n    parsePatterns: V0,\n    defaultParseWidth: "any"\n  })\n}, z0 = {\n  full: "EEEE, MMMM do, y",\n  long: "MMMM do, y",\n  medium: "MMM d, y",\n  short: "MM/dd/yyyy"\n}, F0 = {\n  full: "h:mm:ss a zzzz",\n  long: "h:mm:ss a z",\n  medium: "h:mm:ss a",\n  short: "h:mm a"\n}, j0 = {\n  full: "{{date}} \'at\' {{time}}",\n  long: "{{date}} \'at\' {{time}}",\n  medium: "{{date}}, {{time}}",\n  short: "{{date}}, {{time}}"\n}, W0 = {\n  date: To({\n    formats: z0,\n    defaultWidth: "full"\n  }),\n  time: To({\n    formats: F0,\n    defaultWidth: "full"\n  }),\n  dateTime: To({\n    formats: j0,\n    defaultWidth: "full"\n  })\n}, df = {\n  code: "en-US",\n  formatDistance: x0,\n  formatLong: W0,\n  formatRelative: _0,\n  localize: C0,\n  match: G0,\n  options: {\n    weekStartsOn: 0,\n    firstWeekContainsDate: 1\n  }\n};\nvar pf = typeof global == "object" && global && global.Object === Object && global, q0 = typeof self == "object" && self && self.Object === Object && self, We = pf || q0 || Function("return this")(), ke = We.Symbol, ff = Object.prototype, Y0 = ff.hasOwnProperty, X0 = ff.toString, di = ke ? ke.toStringTag : void 0;\nfunction Z0(e) {\n  var t = Y0.call(e, di), n = e[di];\n  try {\n    e[di] = void 0;\n    var r = !0;\n  } catch {\n  }\n  var i = X0.call(e);\n  return r && (t ? e[di] = n : delete e[di]), i;\n}\nvar K0 = Object.prototype, Q0 = K0.toString;\nfunction J0(e) {\n  return Q0.call(e);\n}\nvar t1 = "[object Null]", e1 = "[object Undefined]", Iu = ke ? ke.toStringTag : void 0;\nfunction hr(e) {\n  return e == null ? e === void 0 ? e1 : t1 : Iu && Iu in Object(e) ? Z0(e) : J0(e);\n}\nfunction rn(e) {\n  return e != null && typeof e == "object";\n}\nvar n1 = "[object Symbol]";\nfunction Fa(e) {\n  return typeof e == "symbol" || rn(e) && hr(e) == n1;\n}\nfunction fc(e, t) {\n  for (var n = -1, r = e == null ? 0 : e.length, i = Array(r); ++n < r; )\n    i[n] = t(e[n], n, e);\n  return i;\n}\nvar Kt = Array.isArray, Nu = ke ? ke.prototype : void 0, Pu = Nu ? Nu.toString : void 0;\nfunction mf(e) {\n  if (typeof e == "string")\n    return e;\n  if (Kt(e))\n    return fc(e, mf) + "";\n  if (Fa(e))\n    return Pu ? Pu.call(e) : "";\n  var t = e + "";\n  return t == "0" && 1 / e == -1 / 0 ? "-0" : t;\n}\nfunction De(e) {\n  var t = typeof e;\n  return e != null && (t == "object" || t == "function");\n}\nfunction mc(e) {\n  return e;\n}\nvar r1 = "[object AsyncFunction]", i1 = "[object Function]", s1 = "[object GeneratorFunction]", a1 = "[object Proxy]";\nfunction gc(e) {\n  if (!De(e))\n    return !1;\n  var t = hr(e);\n  return t == i1 || t == s1 || t == r1 || t == a1;\n}\nvar wo = We["__core-js_shared__"], Uu = function() {\n  var e = /[^.]+$/.exec(wo && wo.keys && wo.keys.IE_PROTO || "");\n  return e ? "Symbol(src)_1." + e : "";\n}();\nfunction o1(e) {\n  return !!Uu && Uu in e;\n}\nvar l1 = Function.prototype, c1 = l1.toString;\nfunction dr(e) {\n  if (e != null) {\n    try {\n      return c1.call(e);\n    } catch {\n    }\n    try {\n      return e + "";\n    } catch {\n    }\n  }\n  return "";\n}\nvar u1 = /[\\\\^$.*+?()[\\]{}|]/g, h1 = /^\\[object .+?Constructor\\]$/, d1 = Function.prototype, p1 = Object.prototype, f1 = d1.toString, m1 = p1.hasOwnProperty, g1 = RegExp(\n  "^" + f1.call(m1).replace(u1, "\\\\$&").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, "$1.*?") + "$"\n);\nfunction v1(e) {\n  if (!De(e) || o1(e))\n    return !1;\n  var t = gc(e) ? g1 : h1;\n  return t.test(dr(e));\n}\nfunction y1(e, t) {\n  return e == null ? void 0 : e[t];\n}\nfunction pr(e, t) {\n  var n = y1(e, t);\n  return v1(n) ? n : void 0;\n}\nvar ml = pr(We, "WeakMap"), Bu = Object.create, x1 = /* @__PURE__ */ function() {\n  function e() {\n  }\n  return function(t) {\n    if (!De(t))\n      return {};\n    if (Bu)\n      return Bu(t);\n    e.prototype = t;\n    var n = new e();\n    return e.prototype = void 0, n;\n  };\n}();\nfunction b1(e, t, n) {\n  switch (n.length) {\n    case 0:\n      return e.call(t);\n    case 1:\n      return e.call(t, n[0]);\n    case 2:\n      return e.call(t, n[0], n[1]);\n    case 3:\n      return e.call(t, n[0], n[1], n[2]);\n  }\n  return e.apply(t, n);\n}\nfunction _1() {\n}\nfunction gf(e, t) {\n  var n = -1, r = e.length;\n  for (t || (t = Array(r)); ++n < r; )\n    t[n] = e[n];\n  return t;\n}\nvar E1 = 800, O1 = 16, S1 = Date.now;\nfunction T1(e) {\n  var t = 0, n = 0;\n  return function() {\n    var r = S1(), i = O1 - (r - n);\n    if (n = r, i > 0) {\n      if (++t >= E1)\n        return arguments[0];\n    } else\n      t = 0;\n    return e.apply(void 0, arguments);\n  };\n}\nfunction w1(e) {\n  return function() {\n    return e;\n  };\n}\nvar aa = function() {\n  try {\n    var e = pr(Object, "defineProperty");\n    return e({}, "", {}), e;\n  } catch {\n  }\n}(), $1 = aa ? function(e, t) {\n  return aa(e, "toString", {\n    configurable: !0,\n    enumerable: !1,\n    value: w1(t),\n    writable: !0\n  });\n} : mc, vf = T1($1);\nfunction M1(e, t) {\n  for (var n = -1, r = e == null ? 0 : e.length; ++n < r && t(e[n], n, e) !== !1; )\n    ;\n  return e;\n}\nfunction C1(e, t, n, r) {\n  for (var i = e.length, s = n + -1; ++s < i; )\n    if (t(e[s], s, e))\n      return s;\n  return -1;\n}\nfunction A1(e) {\n  return e !== e;\n}\nfunction L1(e, t, n) {\n  for (var r = n - 1, i = e.length; ++r < i; )\n    if (e[r] === t)\n      return r;\n  return -1;\n}\nfunction k1(e, t, n) {\n  return t === t ? L1(e, t, n) : C1(e, A1, n);\n}\nfunction D1(e, t) {\n  var n = e == null ? 0 : e.length;\n  return !!n && k1(e, t, 0) > -1;\n}\nvar R1 = 9007199254740991, I1 = /^(?:0|[1-9]\\d*)$/;\nfunction vc(e, t) {\n  var n = typeof e;\n  return t = t ?? R1, !!t && (n == "number" || n != "symbol" && I1.test(e)) && e > -1 && e % 1 == 0 && e < t;\n}\nfunction ja(e, t, n) {\n  t == "__proto__" && aa ? aa(e, t, {\n    configurable: !0,\n    enumerable: !0,\n    value: n,\n    writable: !0\n  }) : e[t] = n;\n}\nfunction os(e, t) {\n  return e === t || e !== e && t !== t;\n}\nvar N1 = Object.prototype, P1 = N1.hasOwnProperty;\nfunction yf(e, t, n) {\n  var r = e[t];\n  (!(P1.call(e, t) && os(r, n)) || n === void 0 && !(t in e)) && ja(e, t, n);\n}\nfunction ri(e, t, n, r) {\n  var i = !n;\n  n || (n = {});\n  for (var s = -1, a = t.length; ++s < a; ) {\n    var o = t[s], l = void 0;\n    l === void 0 && (l = e[o]), i ? ja(n, o, l) : yf(n, o, l);\n  }\n  return n;\n}\nvar Hu = Math.max;\nfunction xf(e, t, n) {\n  return t = Hu(t === void 0 ? e.length - 1 : t, 0), function() {\n    for (var r = arguments, i = -1, s = Hu(r.length - t, 0), a = Array(s); ++i < s; )\n      a[i] = r[t + i];\n    i = -1;\n    for (var o = Array(t + 1); ++i < t; )\n      o[i] = r[i];\n    return o[t] = n(a), b1(e, this, o);\n  };\n}\nfunction yc(e, t) {\n  return vf(xf(e, t, mc), e + "");\n}\nvar U1 = 9007199254740991;\nfunction xc(e) {\n  return typeof e == "number" && e > -1 && e % 1 == 0 && e <= U1;\n}\nfunction fr(e) {\n  return e != null && xc(e.length) && !gc(e);\n}\nfunction B1(e, t, n) {\n  if (!De(n))\n    return !1;\n  var r = typeof t;\n  return (r == "number" ? fr(n) && vc(t, n.length) : r == "string" && t in n) ? os(n[t], e) : !1;\n}\nfunction H1(e) {\n  return yc(function(t, n) {\n    var r = -1, i = n.length, s = i > 1 ? n[i - 1] : void 0, a = i > 2 ? n[2] : void 0;\n    for (s = e.length > 3 && typeof s == "function" ? (i--, s) : void 0, a && B1(n[0], n[1], a) && (s = i < 3 ? void 0 : s, i = 1), t = Object(t); ++r < i; ) {\n      var o = n[r];\n      o && e(t, o, r, s);\n    }\n    return t;\n  });\n}\nvar V1 = Object.prototype;\nfunction Wa(e) {\n  var t = e && e.constructor, n = typeof t == "function" && t.prototype || V1;\n  return e === n;\n}\nfunction G1(e, t) {\n  for (var n = -1, r = Array(e); ++n < e; )\n    r[n] = t(n);\n  return r;\n}\nvar z1 = "[object Arguments]";\nfunction Vu(e) {\n  return rn(e) && hr(e) == z1;\n}\nvar bf = Object.prototype, F1 = bf.hasOwnProperty, j1 = bf.propertyIsEnumerable, jr = Vu(/* @__PURE__ */ function() {\n  return arguments;\n}()) ? Vu : function(e) {\n  return rn(e) && F1.call(e, "callee") && !j1.call(e, "callee");\n};\nfunction W1() {\n  return !1;\n}\nvar _f = typeof exports == "object" && exports && !exports.nodeType && exports, Gu = _f && typeof module == "object" && module && !module.nodeType && module, q1 = Gu && Gu.exports === _f, zu = q1 ? We.Buffer : void 0, Y1 = zu ? zu.isBuffer : void 0, Wr = Y1 || W1, X1 = "[object Arguments]", Z1 = "[object Array]", K1 = "[object Boolean]", Q1 = "[object Date]", J1 = "[object Error]", ty = "[object Function]", ey = "[object Map]", ny = "[object Number]", ry = "[object Object]", iy = "[object RegExp]", sy = "[object Set]", ay = "[object String]", oy = "[object WeakMap]", ly = "[object ArrayBuffer]", cy = "[object DataView]", uy = "[object Float32Array]", hy = "[object Float64Array]", dy = "[object Int8Array]", py = "[object Int16Array]", fy = "[object Int32Array]", my = "[object Uint8Array]", gy = "[object Uint8ClampedArray]", vy = "[object Uint16Array]", yy = "[object Uint32Array]", Lt = {};\nLt[uy] = Lt[hy] = Lt[dy] = Lt[py] = Lt[fy] = Lt[my] = Lt[gy] = Lt[vy] = Lt[yy] = !0;\nLt[X1] = Lt[Z1] = Lt[ly] = Lt[K1] = Lt[cy] = Lt[Q1] = Lt[J1] = Lt[ty] = Lt[ey] = Lt[ny] = Lt[ry] = Lt[iy] = Lt[sy] = Lt[ay] = Lt[oy] = !1;\nfunction xy(e) {\n  return rn(e) && xc(e.length) && !!Lt[hr(e)];\n}\nfunction bc(e) {\n  return function(t) {\n    return e(t);\n  };\n}\nvar Ef = typeof exports == "object" && exports && !exports.nodeType && exports, Ui = Ef && typeof module == "object" && module && !module.nodeType && module, by = Ui && Ui.exports === Ef, $o = by && pf.process, qr = function() {\n  try {\n    var e = Ui && Ui.require && Ui.require("util").types;\n    return e || $o && $o.binding && $o.binding("util");\n  } catch {\n  }\n}(), Fu = qr && qr.isTypedArray, qa = Fu ? bc(Fu) : xy, _y = Object.prototype, Ey = _y.hasOwnProperty;\nfunction Of(e, t) {\n  var n = Kt(e), r = !n && jr(e), i = !n && !r && Wr(e), s = !n && !r && !i && qa(e), a = n || r || i || s, o = a ? G1(e.length, String) : [], l = o.length;\n  for (var c in e)\n    (t || Ey.call(e, c)) && !(a && // Safari 9 has enumerable `arguments.length` in strict mode.\n    (c == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.\n    i && (c == "offset" || c == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.\n    s && (c == "buffer" || c == "byteLength" || c == "byteOffset") || // Skip index properties.\n    vc(c, l))) && o.push(c);\n  return o;\n}\nfunction Sf(e, t) {\n  return function(n) {\n    return e(t(n));\n  };\n}\nvar Oy = Sf(Object.keys, Object), Sy = Object.prototype, Ty = Sy.hasOwnProperty;\nfunction Tf(e) {\n  if (!Wa(e))\n    return Oy(e);\n  var t = [];\n  for (var n in Object(e))\n    Ty.call(e, n) && n != "constructor" && t.push(n);\n  return t;\n}\nfunction ls(e) {\n  return fr(e) ? Of(e) : Tf(e);\n}\nfunction wy(e) {\n  var t = [];\n  if (e != null)\n    for (var n in Object(e))\n      t.push(n);\n  return t;\n}\nvar $y = Object.prototype, My = $y.hasOwnProperty;\nfunction Cy(e) {\n  if (!De(e))\n    return wy(e);\n  var t = Wa(e), n = [];\n  for (var r in e)\n    r == "constructor" && (t || !My.call(e, r)) || n.push(r);\n  return n;\n}\nfunction cs(e) {\n  return fr(e) ? Of(e, !0) : Cy(e);\n}\nvar Ay = /\\.|\\[(?:[^[\\]]*|(["\'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/, Ly = /^\\w*$/;\nfunction _c(e, t) {\n  if (Kt(e))\n    return !1;\n  var n = typeof e;\n  return n == "number" || n == "symbol" || n == "boolean" || e == null || Fa(e) ? !0 : Ly.test(e) || !Ay.test(e) || t != null && e in Object(t);\n}\nvar qi = pr(Object, "create");\nfunction ky() {\n  this.__data__ = qi ? qi(null) : {}, this.size = 0;\n}\nfunction Dy(e) {\n  var t = this.has(e) && delete this.__data__[e];\n  return this.size -= t ? 1 : 0, t;\n}\nvar Ry = "__lodash_hash_undefined__", Iy = Object.prototype, Ny = Iy.hasOwnProperty;\nfunction Py(e) {\n  var t = this.__data__;\n  if (qi) {\n    var n = t[e];\n    return n === Ry ? void 0 : n;\n  }\n  return Ny.call(t, e) ? t[e] : void 0;\n}\nvar Uy = Object.prototype, By = Uy.hasOwnProperty;\nfunction Hy(e) {\n  var t = this.__data__;\n  return qi ? t[e] !== void 0 : By.call(t, e);\n}\nvar Vy = "__lodash_hash_undefined__";\nfunction Gy(e, t) {\n  var n = this.__data__;\n  return this.size += this.has(e) ? 0 : 1, n[e] = qi && t === void 0 ? Vy : t, this;\n}\nfunction er(e) {\n  var t = -1, n = e == null ? 0 : e.length;\n  for (this.clear(); ++t < n; ) {\n    var r = e[t];\n    this.set(r[0], r[1]);\n  }\n}\ner.prototype.clear = ky;\ner.prototype.delete = Dy;\ner.prototype.get = Py;\ner.prototype.has = Hy;\ner.prototype.set = Gy;\nfunction zy() {\n  this.__data__ = [], this.size = 0;\n}\nfunction Ya(e, t) {\n  for (var n = e.length; n--; )\n    if (os(e[n][0], t))\n      return n;\n  return -1;\n}\nvar Fy = Array.prototype, jy = Fy.splice;\nfunction Wy(e) {\n  var t = this.__data__, n = Ya(t, e);\n  if (n < 0)\n    return !1;\n  var r = t.length - 1;\n  return n == r ? t.pop() : jy.call(t, n, 1), --this.size, !0;\n}\nfunction qy(e) {\n  var t = this.__data__, n = Ya(t, e);\n  return n < 0 ? void 0 : t[n][1];\n}\nfunction Yy(e) {\n  return Ya(this.__data__, e) > -1;\n}\nfunction Xy(e, t) {\n  var n = this.__data__, r = Ya(n, e);\n  return r < 0 ? (++this.size, n.push([e, t])) : n[r][1] = t, this;\n}\nfunction Ln(e) {\n  var t = -1, n = e == null ? 0 : e.length;\n  for (this.clear(); ++t < n; ) {\n    var r = e[t];\n    this.set(r[0], r[1]);\n  }\n}\nLn.prototype.clear = zy;\nLn.prototype.delete = Wy;\nLn.prototype.get = qy;\nLn.prototype.has = Yy;\nLn.prototype.set = Xy;\nvar Yi = pr(We, "Map");\nfunction Zy() {\n  this.size = 0, this.__data__ = {\n    hash: new er(),\n    map: new (Yi || Ln)(),\n    string: new er()\n  };\n}\nfunction Ky(e) {\n  var t = typeof e;\n  return t == "string" || t == "number" || t == "symbol" || t == "boolean" ? e !== "__proto__" : e === null;\n}\nfunction Xa(e, t) {\n  var n = e.__data__;\n  return Ky(t) ? n[typeof t == "string" ? "string" : "hash"] : n.map;\n}\nfunction Qy(e) {\n  var t = Xa(this, e).delete(e);\n  return this.size -= t ? 1 : 0, t;\n}\nfunction Jy(e) {\n  return Xa(this, e).get(e);\n}\nfunction tx(e) {\n  return Xa(this, e).has(e);\n}\nfunction ex(e, t) {\n  var n = Xa(this, e), r = n.size;\n  return n.set(e, t), this.size += n.size == r ? 0 : 1, this;\n}\nfunction kn(e) {\n  var t = -1, n = e == null ? 0 : e.length;\n  for (this.clear(); ++t < n; ) {\n    var r = e[t];\n    this.set(r[0], r[1]);\n  }\n}\nkn.prototype.clear = Zy;\nkn.prototype.delete = Qy;\nkn.prototype.get = Jy;\nkn.prototype.has = tx;\nkn.prototype.set = ex;\nvar nx = "Expected a function";\nfunction Ec(e, t) {\n  if (typeof e != "function" || t != null && typeof t != "function")\n    throw new TypeError(nx);\n  var n = function() {\n    var r = arguments, i = t ? t.apply(this, r) : r[0], s = n.cache;\n    if (s.has(i))\n      return s.get(i);\n    var a = e.apply(this, r);\n    return n.cache = s.set(i, a) || s, a;\n  };\n  return n.cache = new (Ec.Cache || kn)(), n;\n}\nEc.Cache = kn;\nvar rx = 500;\nfunction ix(e) {\n  var t = Ec(e, function(r) {\n    return n.size === rx && n.clear(), r;\n  }), n = t.cache;\n  return t;\n}\nvar sx = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g, ax = /\\\\(\\\\)?/g, ox = ix(function(e) {\n  var t = [];\n  return e.charCodeAt(0) === 46 && t.push(""), e.replace(sx, function(n, r, i, s) {\n    t.push(i ? s.replace(ax, "$1") : r || n);\n  }), t;\n});\nfunction us(e) {\n  return e == null ? "" : mf(e);\n}\nfunction Za(e, t) {\n  return Kt(e) ? e : _c(e, t) ? [e] : ox(us(e));\n}\nfunction hs(e) {\n  if (typeof e == "string" || Fa(e))\n    return e;\n  var t = e + "";\n  return t == "0" && 1 / e == -1 / 0 ? "-0" : t;\n}\nfunction Oc(e, t) {\n  t = Za(t, e);\n  for (var n = 0, r = t.length; e != null && n < r; )\n    e = e[hs(t[n++])];\n  return n && n == r ? e : void 0;\n}\nfunction gt(e, t, n) {\n  var r = e == null ? void 0 : Oc(e, t);\n  return r === void 0 ? n : r;\n}\nfunction Sc(e, t) {\n  for (var n = -1, r = t.length, i = e.length; ++n < r; )\n    e[i + n] = t[n];\n  return e;\n}\nvar ju = ke ? ke.isConcatSpreadable : void 0;\nfunction lx(e) {\n  return Kt(e) || jr(e) || !!(ju && e && e[ju]);\n}\nfunction Ka(e, t, n, r, i) {\n  var s = -1, a = e.length;\n  for (n || (n = lx), i || (i = []); ++s < a; ) {\n    var o = e[s];\n    t > 0 && n(o) ? t > 1 ? Ka(o, t - 1, n, r, i) : Sc(i, o) : r || (i[i.length] = o);\n  }\n  return i;\n}\nvar Tc = Sf(Object.getPrototypeOf, Object), cx = "[object Object]", ux = Function.prototype, hx = Object.prototype, wf = ux.toString, dx = hx.hasOwnProperty, px = wf.call(Object);\nfunction $f(e) {\n  if (!rn(e) || hr(e) != cx)\n    return !1;\n  var t = Tc(e);\n  if (t === null)\n    return !0;\n  var n = dx.call(t, "constructor") && t.constructor;\n  return typeof n == "function" && n instanceof n && wf.call(n) == px;\n}\nfunction fx() {\n  this.__data__ = new Ln(), this.size = 0;\n}\nfunction mx(e) {\n  var t = this.__data__, n = t.delete(e);\n  return this.size = t.size, n;\n}\nfunction gx(e) {\n  return this.__data__.get(e);\n}\nfunction vx(e) {\n  return this.__data__.has(e);\n}\nvar yx = 200;\nfunction xx(e, t) {\n  var n = this.__data__;\n  if (n instanceof Ln) {\n    var r = n.__data__;\n    if (!Yi || r.length < yx - 1)\n      return r.push([e, t]), this.size = ++n.size, this;\n    n = this.__data__ = new kn(r);\n  }\n  return n.set(e, t), this.size = n.size, this;\n}\nfunction Ge(e) {\n  var t = this.__data__ = new Ln(e);\n  this.size = t.size;\n}\nGe.prototype.clear = fx;\nGe.prototype.delete = mx;\nGe.prototype.get = gx;\nGe.prototype.has = vx;\nGe.prototype.set = xx;\nfunction bx(e, t) {\n  return e && ri(t, ls(t), e);\n}\nfunction _x(e, t) {\n  return e && ri(t, cs(t), e);\n}\nvar Mf = typeof exports == "object" && exports && !exports.nodeType && exports, Wu = Mf && typeof module == "object" && module && !module.nodeType && module, Ex = Wu && Wu.exports === Mf, qu = Ex ? We.Buffer : void 0, Yu = qu ? qu.allocUnsafe : void 0;\nfunction Cf(e, t) {\n  if (t)\n    return e.slice();\n  var n = e.length, r = Yu ? Yu(n) : new e.constructor(n);\n  return e.copy(r), r;\n}\nfunction Ox(e, t) {\n  for (var n = -1, r = e == null ? 0 : e.length, i = 0, s = []; ++n < r; ) {\n    var a = e[n];\n    t(a, n, e) && (s[i++] = a);\n  }\n  return s;\n}\nfunction Af() {\n  return [];\n}\nvar Sx = Object.prototype, Tx = Sx.propertyIsEnumerable, Xu = Object.getOwnPropertySymbols, wc = Xu ? function(e) {\n  return e == null ? [] : (e = Object(e), Ox(Xu(e), function(t) {\n    return Tx.call(e, t);\n  }));\n} : Af;\nfunction wx(e, t) {\n  return ri(e, wc(e), t);\n}\nvar $x = Object.getOwnPropertySymbols, Lf = $x ? function(e) {\n  for (var t = []; e; )\n    Sc(t, wc(e)), e = Tc(e);\n  return t;\n} : Af;\nfunction Mx(e, t) {\n  return ri(e, Lf(e), t);\n}\nfunction kf(e, t, n) {\n  var r = t(e);\n  return Kt(e) ? r : Sc(r, n(e));\n}\nfunction gl(e) {\n  return kf(e, ls, wc);\n}\nfunction Df(e) {\n  return kf(e, cs, Lf);\n}\nvar vl = pr(We, "DataView"), yl = pr(We, "Promise"), Vr = pr(We, "Set"), Zu = "[object Map]", Cx = "[object Object]", Ku = "[object Promise]", Qu = "[object Set]", Ju = "[object WeakMap]", th = "[object DataView]", Ax = dr(vl), Lx = dr(Yi), kx = dr(yl), Dx = dr(Vr), Rx = dr(ml), $e = hr;\n(vl && $e(new vl(new ArrayBuffer(1))) != th || Yi && $e(new Yi()) != Zu || yl && $e(yl.resolve()) != Ku || Vr && $e(new Vr()) != Qu || ml && $e(new ml()) != Ju) && ($e = function(e) {\n  var t = hr(e), n = t == Cx ? e.constructor : void 0, r = n ? dr(n) : "";\n  if (r)\n    switch (r) {\n      case Ax:\n        return th;\n      case Lx:\n        return Zu;\n      case kx:\n        return Ku;\n      case Dx:\n        return Qu;\n      case Rx:\n        return Ju;\n    }\n  return t;\n});\nvar Ix = Object.prototype, Nx = Ix.hasOwnProperty;\nfunction Px(e) {\n  var t = e.length, n = new e.constructor(t);\n  return t && typeof e[0] == "string" && Nx.call(e, "index") && (n.index = e.index, n.input = e.input), n;\n}\nvar oa = We.Uint8Array;\nfunction $c(e) {\n  var t = new e.constructor(e.byteLength);\n  return new oa(t).set(new oa(e)), t;\n}\nfunction Ux(e, t) {\n  var n = t ? $c(e.buffer) : e.buffer;\n  return new e.constructor(n, e.byteOffset, e.byteLength);\n}\nvar Bx = /\\w*$/;\nfunction Hx(e) {\n  var t = new e.constructor(e.source, Bx.exec(e));\n  return t.lastIndex = e.lastIndex, t;\n}\nvar eh = ke ? ke.prototype : void 0, nh = eh ? eh.valueOf : void 0;\nfunction Vx(e) {\n  return nh ? Object(nh.call(e)) : {};\n}\nfunction Rf(e, t) {\n  var n = t ? $c(e.buffer) : e.buffer;\n  return new e.constructor(n, e.byteOffset, e.length);\n}\nvar Gx = "[object Boolean]", zx = "[object Date]", Fx = "[object Map]", jx = "[object Number]", Wx = "[object RegExp]", qx = "[object Set]", Yx = "[object String]", Xx = "[object Symbol]", Zx = "[object ArrayBuffer]", Kx = "[object DataView]", Qx = "[object Float32Array]", Jx = "[object Float64Array]", tb = "[object Int8Array]", eb = "[object Int16Array]", nb = "[object Int32Array]", rb = "[object Uint8Array]", ib = "[object Uint8ClampedArray]", sb = "[object Uint16Array]", ab = "[object Uint32Array]";\nfunction ob(e, t, n) {\n  var r = e.constructor;\n  switch (t) {\n    case Zx:\n      return $c(e);\n    case Gx:\n    case zx:\n      return new r(+e);\n    case Kx:\n      return Ux(e, n);\n    case Qx:\n    case Jx:\n    case tb:\n    case eb:\n    case nb:\n    case rb:\n    case ib:\n    case sb:\n    case ab:\n      return Rf(e, n);\n    case Fx:\n      return new r();\n    case jx:\n    case Yx:\n      return new r(e);\n    case Wx:\n      return Hx(e);\n    case qx:\n      return new r();\n    case Xx:\n      return Vx(e);\n  }\n}\nfunction If(e) {\n  return typeof e.constructor == "function" && !Wa(e) ? x1(Tc(e)) : {};\n}\nvar lb = "[object Map]";\nfunction cb(e) {\n  return rn(e) && $e(e) == lb;\n}\nvar rh = qr && qr.isMap, ub = rh ? bc(rh) : cb, hb = "[object Set]";\nfunction db(e) {\n  return rn(e) && $e(e) == hb;\n}\nvar ih = qr && qr.isSet, pb = ih ? bc(ih) : db, fb = 1, mb = 2, gb = 4, Nf = "[object Arguments]", vb = "[object Array]", yb = "[object Boolean]", xb = "[object Date]", bb = "[object Error]", Pf = "[object Function]", _b = "[object GeneratorFunction]", Eb = "[object Map]", Ob = "[object Number]", Uf = "[object Object]", Sb = "[object RegExp]", Tb = "[object Set]", wb = "[object String]", $b = "[object Symbol]", Mb = "[object WeakMap]", Cb = "[object ArrayBuffer]", Ab = "[object DataView]", Lb = "[object Float32Array]", kb = "[object Float64Array]", Db = "[object Int8Array]", Rb = "[object Int16Array]", Ib = "[object Int32Array]", Nb = "[object Uint8Array]", Pb = "[object Uint8ClampedArray]", Ub = "[object Uint16Array]", Bb = "[object Uint32Array]", $t = {};\n$t[Nf] = $t[vb] = $t[Cb] = $t[Ab] = $t[yb] = $t[xb] = $t[Lb] = $t[kb] = $t[Db] = $t[Rb] = $t[Ib] = $t[Eb] = $t[Ob] = $t[Uf] = $t[Sb] = $t[Tb] = $t[wb] = $t[$b] = $t[Nb] = $t[Pb] = $t[Ub] = $t[Bb] = !0;\n$t[bb] = $t[Pf] = $t[Mb] = !1;\nfunction Bi(e, t, n, r, i, s) {\n  var a, o = t & fb, l = t & mb, c = t & gb;\n  if (n && (a = i ? n(e, r, i, s) : n(e)), a !== void 0)\n    return a;\n  if (!De(e))\n    return e;\n  var u = Kt(e);\n  if (u) {\n    if (a = Px(e), !o)\n      return gf(e, a);\n  } else {\n    var d = $e(e), h = d == Pf || d == _b;\n    if (Wr(e))\n      return Cf(e, o);\n    if (d == Uf || d == Nf || h && !i) {\n      if (a = l || h ? {} : If(e), !o)\n        return l ? Mx(e, _x(a, e)) : wx(e, bx(a, e));\n    } else {\n      if (!$t[d])\n        return i ? e : {};\n      a = ob(e, d, o);\n    }\n  }\n  s || (s = new Ge());\n  var p = s.get(e);\n  if (p)\n    return p;\n  s.set(e, a), pb(e) ? e.forEach(function(m) {\n    a.add(Bi(m, t, n, m, e, s));\n  }) : ub(e) && e.forEach(function(m, v) {\n    a.set(v, Bi(m, t, n, v, e, s));\n  });\n  var f = c ? l ? Df : gl : l ? cs : ls, g = u ? void 0 : f(e);\n  return M1(g || e, function(m, v) {\n    g && (v = m, m = e[v]), yf(a, v, Bi(m, t, n, v, e, s));\n  }), a;\n}\nvar Hb = 1, Vb = 4;\nfunction Sn(e) {\n  return Bi(e, Hb | Vb);\n}\nvar Gb = "__lodash_hash_undefined__";\nfunction zb(e) {\n  return this.__data__.set(e, Gb), this;\n}\nfunction Fb(e) {\n  return this.__data__.has(e);\n}\nfunction Xi(e) {\n  var t = -1, n = e == null ? 0 : e.length;\n  for (this.__data__ = new kn(); ++t < n; )\n    this.add(e[t]);\n}\nXi.prototype.add = Xi.prototype.push = zb;\nXi.prototype.has = Fb;\nfunction Bf(e, t) {\n  for (var n = -1, r = e == null ? 0 : e.length; ++n < r; )\n    if (t(e[n], n, e))\n      return !0;\n  return !1;\n}\nfunction Hf(e, t) {\n  return e.has(t);\n}\nvar jb = 1, Wb = 2;\nfunction Vf(e, t, n, r, i, s) {\n  var a = n & jb, o = e.length, l = t.length;\n  if (o != l && !(a && l > o))\n    return !1;\n  var c = s.get(e), u = s.get(t);\n  if (c && u)\n    return c == t && u == e;\n  var d = -1, h = !0, p = n & Wb ? new Xi() : void 0;\n  for (s.set(e, t), s.set(t, e); ++d < o; ) {\n    var f = e[d], g = t[d];\n    if (r)\n      var m = a ? r(g, f, d, t, e, s) : r(f, g, d, e, t, s);\n    if (m !== void 0) {\n      if (m)\n        continue;\n      h = !1;\n      break;\n    }\n    if (p) {\n      if (!Bf(t, function(v, x) {\n        if (!Hf(p, x) && (f === v || i(f, v, n, r, s)))\n          return p.push(x);\n      })) {\n        h = !1;\n        break;\n      }\n    } else if (!(f === g || i(f, g, n, r, s))) {\n      h = !1;\n      break;\n    }\n  }\n  return s.delete(e), s.delete(t), h;\n}\nfunction qb(e) {\n  var t = -1, n = Array(e.size);\n  return e.forEach(function(r, i) {\n    n[++t] = [i, r];\n  }), n;\n}\nfunction Mc(e) {\n  var t = -1, n = Array(e.size);\n  return e.forEach(function(r) {\n    n[++t] = r;\n  }), n;\n}\nvar Yb = 1, Xb = 2, Zb = "[object Boolean]", Kb = "[object Date]", Qb = "[object Error]", Jb = "[object Map]", t_ = "[object Number]", e_ = "[object RegExp]", n_ = "[object Set]", r_ = "[object String]", i_ = "[object Symbol]", s_ = "[object ArrayBuffer]", a_ = "[object DataView]", sh = ke ? ke.prototype : void 0, Mo = sh ? sh.valueOf : void 0;\nfunction o_(e, t, n, r, i, s, a) {\n  switch (n) {\n    case a_:\n      if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset)\n        return !1;\n      e = e.buffer, t = t.buffer;\n    case s_:\n      return !(e.byteLength != t.byteLength || !s(new oa(e), new oa(t)));\n    case Zb:\n    case Kb:\n    case t_:\n      return os(+e, +t);\n    case Qb:\n      return e.name == t.name && e.message == t.message;\n    case e_:\n    case r_:\n      return e == t + "";\n    case Jb:\n      var o = qb;\n    case n_:\n      var l = r & Yb;\n      if (o || (o = Mc), e.size != t.size && !l)\n        return !1;\n      var c = a.get(e);\n      if (c)\n        return c == t;\n      r |= Xb, a.set(e, t);\n      var u = Vf(o(e), o(t), r, i, s, a);\n      return a.delete(e), u;\n    case i_:\n      if (Mo)\n        return Mo.call(e) == Mo.call(t);\n  }\n  return !1;\n}\nvar l_ = 1, c_ = Object.prototype, u_ = c_.hasOwnProperty;\nfunction h_(e, t, n, r, i, s) {\n  var a = n & l_, o = gl(e), l = o.length, c = gl(t), u = c.length;\n  if (l != u && !a)\n    return !1;\n  for (var d = l; d--; ) {\n    var h = o[d];\n    if (!(a ? h in t : u_.call(t, h)))\n      return !1;\n  }\n  var p = s.get(e), f = s.get(t);\n  if (p && f)\n    return p == t && f == e;\n  var g = !0;\n  s.set(e, t), s.set(t, e);\n  for (var m = a; ++d < l; ) {\n    h = o[d];\n    var v = e[h], x = t[h];\n    if (r)\n      var _ = a ? r(x, v, h, t, e, s) : r(v, x, h, e, t, s);\n    if (!(_ === void 0 ? v === x || i(v, x, n, r, s) : _)) {\n      g = !1;\n      break;\n    }\n    m || (m = h == "constructor");\n  }\n  if (g && !m) {\n    var E = e.constructor, b = t.constructor;\n    E != b && "constructor" in e && "constructor" in t && !(typeof E == "function" && E instanceof E && typeof b == "function" && b instanceof b) && (g = !1);\n  }\n  return s.delete(e), s.delete(t), g;\n}\nvar d_ = 1, ah = "[object Arguments]", oh = "[object Array]", Ts = "[object Object]", p_ = Object.prototype, lh = p_.hasOwnProperty;\nfunction f_(e, t, n, r, i, s) {\n  var a = Kt(e), o = Kt(t), l = a ? oh : $e(e), c = o ? oh : $e(t);\n  l = l == ah ? Ts : l, c = c == ah ? Ts : c;\n  var u = l == Ts, d = c == Ts, h = l == c;\n  if (h && Wr(e)) {\n    if (!Wr(t))\n      return !1;\n    a = !0, u = !1;\n  }\n  if (h && !u)\n    return s || (s = new Ge()), a || qa(e) ? Vf(e, t, n, r, i, s) : o_(e, t, l, n, r, i, s);\n  if (!(n & d_)) {\n    var p = u && lh.call(e, "__wrapped__"), f = d && lh.call(t, "__wrapped__");\n    if (p || f) {\n      var g = p ? e.value() : e, m = f ? t.value() : t;\n      return s || (s = new Ge()), i(g, m, n, r, s);\n    }\n  }\n  return h ? (s || (s = new Ge()), h_(e, t, n, r, i, s)) : !1;\n}\nfunction Qa(e, t, n, r, i) {\n  return e === t ? !0 : e == null || t == null || !rn(e) && !rn(t) ? e !== e && t !== t : f_(e, t, n, r, Qa, i);\n}\nvar m_ = 1, g_ = 2;\nfunction v_(e, t, n, r) {\n  var i = n.length, s = i;\n  if (e == null)\n    return !s;\n  for (e = Object(e); i--; ) {\n    var a = n[i];\n    if (a[2] ? a[1] !== e[a[0]] : !(a[0] in e))\n      return !1;\n  }\n  for (; ++i < s; ) {\n    a = n[i];\n    var o = a[0], l = e[o], c = a[1];\n    if (a[2]) {\n      if (l === void 0 && !(o in e))\n        return !1;\n    } else {\n      var u = new Ge(), d;\n      if (!(d === void 0 ? Qa(c, l, m_ | g_, r, u) : d))\n        return !1;\n    }\n  }\n  return !0;\n}\nfunction Gf(e) {\n  return e === e && !De(e);\n}\nfunction y_(e) {\n  for (var t = ls(e), n = t.length; n--; ) {\n    var r = t[n], i = e[r];\n    t[n] = [r, i, Gf(i)];\n  }\n  return t;\n}\nfunction zf(e, t) {\n  return function(n) {\n    return n == null ? !1 : n[e] === t && (t !== void 0 || e in Object(n));\n  };\n}\nfunction x_(e) {\n  var t = y_(e);\n  return t.length == 1 && t[0][2] ? zf(t[0][0], t[0][1]) : function(n) {\n    return n === e || v_(n, e, t);\n  };\n}\nfunction b_(e, t) {\n  return e != null && t in Object(e);\n}\nfunction __(e, t, n) {\n  t = Za(t, e);\n  for (var r = -1, i = t.length, s = !1; ++r < i; ) {\n    var a = hs(t[r]);\n    if (!(s = e != null && n(e, a)))\n      break;\n    e = e[a];\n  }\n  return s || ++r != i ? s : (i = e == null ? 0 : e.length, !!i && xc(i) && vc(a, i) && (Kt(e) || jr(e)));\n}\nfunction E_(e, t) {\n  return e != null && __(e, t, b_);\n}\nvar O_ = 1, S_ = 2;\nfunction T_(e, t) {\n  return _c(e) && Gf(t) ? zf(hs(e), t) : function(n) {\n    var r = gt(n, e);\n    return r === void 0 && r === t ? E_(n, e) : Qa(t, r, O_ | S_);\n  };\n}\nfunction w_(e) {\n  return function(t) {\n    return t == null ? void 0 : t[e];\n  };\n}\nfunction $_(e) {\n  return function(t) {\n    return Oc(t, e);\n  };\n}\nfunction M_(e) {\n  return _c(e) ? w_(hs(e)) : $_(e);\n}\nfunction Ja(e) {\n  return typeof e == "function" ? e : e == null ? mc : typeof e == "object" ? Kt(e) ? T_(e[0], e[1]) : x_(e) : M_(e);\n}\nfunction C_(e) {\n  return function(t, n, r) {\n    for (var i = -1, s = Object(t), a = r(t), o = a.length; o--; ) {\n      var l = a[++i];\n      if (n(s[l], l, s) === !1)\n        break;\n    }\n    return t;\n  };\n}\nvar Ff = C_();\nfunction xl(e, t, n) {\n  (n !== void 0 && !os(e[t], n) || n === void 0 && !(t in e)) && ja(e, t, n);\n}\nfunction bl(e) {\n  return rn(e) && fr(e);\n}\nfunction _l(e, t) {\n  if (!(t === "constructor" && typeof e[t] == "function") && t != "__proto__")\n    return e[t];\n}\nfunction A_(e) {\n  return ri(e, cs(e));\n}\nfunction L_(e, t, n, r, i, s, a) {\n  var o = _l(e, n), l = _l(t, n), c = a.get(l);\n  if (c) {\n    xl(e, n, c);\n    return;\n  }\n  var u = s ? s(o, l, n + "", e, t, a) : void 0, d = u === void 0;\n  if (d) {\n    var h = Kt(l), p = !h && Wr(l), f = !h && !p && qa(l);\n    u = l, h || p || f ? Kt(o) ? u = o : bl(o) ? u = gf(o) : p ? (d = !1, u = Cf(l, !0)) : f ? (d = !1, u = Rf(l, !0)) : u = [] : $f(l) || jr(l) ? (u = o, jr(o) ? u = A_(o) : (!De(o) || gc(o)) && (u = If(l))) : d = !1;\n  }\n  d && (a.set(l, u), i(u, l, r, s, a), a.delete(l)), xl(e, n, u);\n}\nfunction jf(e, t, n, r, i) {\n  e !== t && Ff(t, function(s, a) {\n    if (i || (i = new Ge()), De(s))\n      L_(e, t, a, n, jf, r, i);\n    else {\n      var o = r ? r(_l(e, a), s, a + "", e, t, i) : void 0;\n      o === void 0 && (o = s), xl(e, a, o);\n    }\n  }, cs);\n}\nfunction Wf(e) {\n  var t = e == null ? 0 : e.length;\n  return t ? e[t - 1] : void 0;\n}\nvar k_ = "[object Map]", D_ = "[object Set]", R_ = Object.prototype, I_ = R_.hasOwnProperty;\nfunction Be(e) {\n  if (e == null)\n    return !0;\n  if (fr(e) && (Kt(e) || typeof e == "string" || typeof e.splice == "function" || Wr(e) || qa(e) || jr(e)))\n    return !e.length;\n  var t = $e(e);\n  if (t == k_ || t == D_)\n    return !e.size;\n  if (Wa(e))\n    return !Tf(e).length;\n  for (var n in e)\n    if (I_.call(e, n))\n      return !1;\n  return !0;\n}\nvar at = H1(function(e, t, n) {\n  jf(e, t, n);\n}), N_ = 1 / 0, P_ = Vr && 1 / Mc(new Vr([, -0]))[1] == N_ ? function(e) {\n  return new Vr(e);\n} : _1, U_ = 200;\nfunction qf(e, t, n) {\n  var r = -1, i = D1, s = e.length, a = !0, o = [], l = o;\n  if (s >= U_) {\n    var c = t ? null : P_(e);\n    if (c)\n      return Mc(c);\n    a = !1, i = Hf, l = new Xi();\n  } else\n    l = t ? [] : o;\n  t:\n    for (; ++r < s; ) {\n      var u = e[r], d = t ? t(u) : u;\n      if (u = u !== 0 ? u : 0, a && d === d) {\n        for (var h = l.length; h--; )\n          if (l[h] === d)\n            continue t;\n        t && l.push(d), o.push(u);\n      } else i(l, d, n) || (l !== o && l.push(d), o.push(u));\n    }\n  return o;\n}\nvar B_ = yc(function(e) {\n  var t = Wf(e);\n  return bl(t) && (t = void 0), qf(Ka(e, 1, bl, !0), Ja(t));\n});\nfunction Zi(e) {\n  return e && e.length ? qf(e) : [];\n}\nfunction Jn(e, t) {\n  return e == null || t == null ? NaN : e < t ? -1 : e > t ? 1 : e >= t ? 0 : NaN;\n}\nfunction H_(e, t) {\n  return e == null || t == null ? NaN : t < e ? -1 : t > e ? 1 : t >= e ? 0 : NaN;\n}\nfunction Cc(e) {\n  let t, n, r;\n  e.length !== 2 ? (t = Jn, n = (o, l) => Jn(e(o), l), r = (o, l) => e(o) - l) : (t = e === Jn || e === H_ ? e : V_, n = e, r = e);\n  function i(o, l, c = 0, u = o.length) {\n    if (c < u) {\n      if (t(l, l) !== 0) return u;\n      do {\n        const d = c + u >>> 1;\n        n(o[d], l) < 0 ? c = d + 1 : u = d;\n      } while (c < u);\n    }\n    return c;\n  }\n  function s(o, l, c = 0, u = o.length) {\n    if (c < u) {\n      if (t(l, l) !== 0) return u;\n      do {\n        const d = c + u >>> 1;\n        n(o[d], l) <= 0 ? c = d + 1 : u = d;\n      } while (c < u);\n    }\n    return c;\n  }\n  function a(o, l, c = 0, u = o.length) {\n    const d = i(o, l, c, u - 1);\n    return d > c && r(o[d - 1], l) > -r(o[d], l) ? d - 1 : d;\n  }\n  return { left: i, center: a, right: s };\n}\nfunction V_() {\n  return 0;\n}\nfunction G_(e) {\n  return e === null ? NaN : +e;\n}\nfunction* z_(e, t) {\n  for (let n of e)\n    n != null && (n = +n) >= n && (yield n);\n}\nconst F_ = Cc(Jn), Ac = F_.right;\nCc(G_).center;\nfunction ze(e, t) {\n  let n, r;\n  if (t === void 0)\n    for (const i of e)\n      i != null && (n === void 0 ? i >= i && (n = r = i) : (n > i && (n = i), r < i && (r = i)));\n  else {\n    let i = -1;\n    for (let s of e)\n      (s = t(s, ++i, e)) != null && (n === void 0 ? s >= s && (n = r = s) : (n > s && (n = s), r < s && (r = s)));\n  }\n  return [n, r];\n}\nlet ch = class extends Map {\n  constructor(t, n = q_) {\n    if (super(), Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: n } }), t != null) for (const [r, i] of t) this.set(r, i);\n  }\n  get(t) {\n    return super.get(uh(this, t));\n  }\n  has(t) {\n    return super.has(uh(this, t));\n  }\n  set(t, n) {\n    return super.set(j_(this, t), n);\n  }\n  delete(t) {\n    return super.delete(W_(this, t));\n  }\n};\nfunction uh({ _intern: e, _key: t }, n) {\n  const r = t(n);\n  return e.has(r) ? e.get(r) : n;\n}\nfunction j_({ _intern: e, _key: t }, n) {\n  const r = t(n);\n  return e.has(r) ? e.get(r) : (e.set(r, n), n);\n}\nfunction W_({ _intern: e, _key: t }, n) {\n  const r = t(n);\n  return e.has(r) && (n = e.get(r), e.delete(r)), n;\n}\nfunction q_(e) {\n  return e !== null && typeof e == "object" ? e.valueOf() : e;\n}\nconst Y_ = Math.sqrt(50), X_ = Math.sqrt(10), Z_ = Math.sqrt(2);\nfunction la(e, t, n) {\n  const r = (t - e) / Math.max(0, n), i = Math.floor(Math.log10(r)), s = r / Math.pow(10, i), a = s >= Y_ ? 10 : s >= X_ ? 5 : s >= Z_ ? 2 : 1;\n  let o, l, c;\n  return i < 0 ? (c = Math.pow(10, -i) / a, o = Math.round(e * c), l = Math.round(t * c), o / c < e && ++o, l / c > t && --l, c = -c) : (c = Math.pow(10, i) * a, o = Math.round(e / c), l = Math.round(t / c), o * c < e && ++o, l * c > t && --l), l < o && 0.5 <= n && n < 2 ? la(e, t, n * 2) : [o, l, c];\n}\nfunction ca(e, t, n) {\n  if (t = +t, e = +e, n = +n, !(n > 0)) return [];\n  if (e === t) return [e];\n  const r = t < e, [i, s, a] = r ? la(t, e, n) : la(e, t, n);\n  if (!(s >= i)) return [];\n  const o = s - i + 1, l = new Array(o);\n  if (r)\n    if (a < 0) for (let c = 0; c < o; ++c) l[c] = (s - c) / -a;\n    else for (let c = 0; c < o; ++c) l[c] = (s - c) * a;\n  else if (a < 0) for (let c = 0; c < o; ++c) l[c] = (i + c) / -a;\n  else for (let c = 0; c < o; ++c) l[c] = (i + c) * a;\n  return l;\n}\nfunction Yr(e, t, n) {\n  return t = +t, e = +e, n = +n, la(e, t, n)[2];\n}\nfunction El(e, t, n) {\n  t = +t, e = +e, n = +n;\n  const r = t < e, i = r ? Yr(t, e, n) : Yr(e, t, n);\n  return (r ? -1 : 1) * (i < 0 ? 1 / -i : i);\n}\nfunction nr(e, t) {\n  let n;\n  if (t === void 0)\n    for (const r of e)\n      r != null && (n < r || n === void 0 && r >= r) && (n = r);\n  else {\n    let r = -1;\n    for (let i of e)\n      (i = t(i, ++r, e)) != null && (n < i || n === void 0 && i >= i) && (n = i);\n  }\n  return n;\n}\nfunction Bn(e, t) {\n  let n;\n  for (const r of e)\n    r != null && (n > r || n === void 0 && r >= r) && (n = r);\n  return n;\n}\nvar K_ = { value: () => {\n} };\nfunction Lc() {\n  for (var e = 0, t = arguments.length, n = {}, r; e < t; ++e) {\n    if (!(r = arguments[e] + "") || r in n || /[\\s.]/.test(r)) throw new Error("illegal type: " + r);\n    n[r] = [];\n  }\n  return new Ys(n);\n}\nfunction Ys(e) {\n  this._ = e;\n}\nfunction Q_(e, t) {\n  return e.trim().split(/^|\\s+/).map(function(n) {\n    var r = "", i = n.indexOf(".");\n    if (i >= 0 && (r = n.slice(i + 1), n = n.slice(0, i)), n && !t.hasOwnProperty(n)) throw new Error("unknown type: " + n);\n    return { type: n, name: r };\n  });\n}\nYs.prototype = Lc.prototype = {\n  constructor: Ys,\n  on: function(e, t) {\n    var n = this._, r = Q_(e + "", n), i, s = -1, a = r.length;\n    if (arguments.length < 2) {\n      for (; ++s < a; ) if ((i = (e = r[s]).type) && (i = J_(n[i], e.name))) return i;\n      return;\n    }\n    if (t != null && typeof t != "function") throw new Error("invalid callback: " + t);\n    for (; ++s < a; )\n      if (i = (e = r[s]).type) n[i] = hh(n[i], e.name, t);\n      else if (t == null) for (i in n) n[i] = hh(n[i], e.name, null);\n    return this;\n  },\n  copy: function() {\n    var e = {}, t = this._;\n    for (var n in t) e[n] = t[n].slice();\n    return new Ys(e);\n  },\n  call: function(e, t) {\n    if ((i = arguments.length - 2) > 0) for (var n = new Array(i), r = 0, i, s; r < i; ++r) n[r] = arguments[r + 2];\n    if (!this._.hasOwnProperty(e)) throw new Error("unknown type: " + e);\n    for (s = this._[e], r = 0, i = s.length; r < i; ++r) s[r].value.apply(t, n);\n  },\n  apply: function(e, t, n) {\n    if (!this._.hasOwnProperty(e)) throw new Error("unknown type: " + e);\n    for (var r = this._[e], i = 0, s = r.length; i < s; ++i) r[i].value.apply(t, n);\n  }\n};\nfunction J_(e, t) {\n  for (var n = 0, r = e.length, i; n < r; ++n)\n    if ((i = e[n]).name === t)\n      return i.value;\n}\nfunction hh(e, t, n) {\n  for (var r = 0, i = e.length; r < i; ++r)\n    if (e[r].name === t) {\n      e[r] = K_, e = e.slice(0, r).concat(e.slice(r + 1));\n      break;\n    }\n  return n != null && e.push({ name: t, value: n }), e;\n}\nvar Ol = "http://www.w3.org/1999/xhtml";\nconst dh = {\n  svg: "http://www.w3.org/2000/svg",\n  xhtml: Ol,\n  xlink: "http://www.w3.org/1999/xlink",\n  xml: "http://www.w3.org/XML/1998/namespace",\n  xmlns: "http://www.w3.org/2000/xmlns/"\n};\nfunction to(e) {\n  var t = e += "", n = t.indexOf(":");\n  return n >= 0 && (t = e.slice(0, n)) !== "xmlns" && (e = e.slice(n + 1)), dh.hasOwnProperty(t) ? { space: dh[t], local: e } : e;\n}\nfunction tE(e) {\n  return function() {\n    var t = this.ownerDocument, n = this.namespaceURI;\n    return n === Ol && t.documentElement.namespaceURI === Ol ? t.createElement(e) : t.createElementNS(n, e);\n  };\n}\nfunction eE(e) {\n  return function() {\n    return this.ownerDocument.createElementNS(e.space, e.local);\n  };\n}\nfunction Yf(e) {\n  var t = to(e);\n  return (t.local ? eE : tE)(t);\n}\nfunction nE() {\n}\nfunction kc(e) {\n  return e == null ? nE : function() {\n    return this.querySelector(e);\n  };\n}\nfunction rE(e) {\n  typeof e != "function" && (e = kc(e));\n  for (var t = this._groups, n = t.length, r = new Array(n), i = 0; i < n; ++i)\n    for (var s = t[i], a = s.length, o = r[i] = new Array(a), l, c, u = 0; u < a; ++u)\n      (l = s[u]) && (c = e.call(l, l.__data__, u, s)) && ("__data__" in l && (c.__data__ = l.__data__), o[u] = c);\n  return new _e(r, this._parents);\n}\nfunction iE(e) {\n  return e == null ? [] : Array.isArray(e) ? e : Array.from(e);\n}\nfunction sE() {\n  return [];\n}\nfunction Xf(e) {\n  return e == null ? sE : function() {\n    return this.querySelectorAll(e);\n  };\n}\nfunction aE(e) {\n  return function() {\n    return iE(e.apply(this, arguments));\n  };\n}\nfunction oE(e) {\n  typeof e == "function" ? e = aE(e) : e = Xf(e);\n  for (var t = this._groups, n = t.length, r = [], i = [], s = 0; s < n; ++s)\n    for (var a = t[s], o = a.length, l, c = 0; c < o; ++c)\n      (l = a[c]) && (r.push(e.call(l, l.__data__, c, a)), i.push(l));\n  return new _e(r, i);\n}\nfunction Zf(e) {\n  return function() {\n    return this.matches(e);\n  };\n}\nfunction Kf(e) {\n  return function(t) {\n    return t.matches(e);\n  };\n}\nvar lE = Array.prototype.find;\nfunction cE(e) {\n  return function() {\n    return lE.call(this.children, e);\n  };\n}\nfunction uE() {\n  return this.firstElementChild;\n}\nfunction hE(e) {\n  return this.select(e == null ? uE : cE(typeof e == "function" ? e : Kf(e)));\n}\nvar dE = Array.prototype.filter;\nfunction pE() {\n  return Array.from(this.children);\n}\nfunction fE(e) {\n  return function() {\n    return dE.call(this.children, e);\n  };\n}\nfunction mE(e) {\n  return this.selectAll(e == null ? pE : fE(typeof e == "function" ? e : Kf(e)));\n}\nfunction gE(e) {\n  typeof e != "function" && (e = Zf(e));\n  for (var t = this._groups, n = t.length, r = new Array(n), i = 0; i < n; ++i)\n    for (var s = t[i], a = s.length, o = r[i] = [], l, c = 0; c < a; ++c)\n      (l = s[c]) && e.call(l, l.__data__, c, s) && o.push(l);\n  return new _e(r, this._parents);\n}\nfunction Qf(e) {\n  return new Array(e.length);\n}\nfunction vE() {\n  return new _e(this._enter || this._groups.map(Qf), this._parents);\n}\nfunction ua(e, t) {\n  this.ownerDocument = e.ownerDocument, this.namespaceURI = e.namespaceURI, this._next = null, this._parent = e, this.__data__ = t;\n}\nua.prototype = {\n  constructor: ua,\n  appendChild: function(e) {\n    return this._parent.insertBefore(e, this._next);\n  },\n  insertBefore: function(e, t) {\n    return this._parent.insertBefore(e, t);\n  },\n  querySelector: function(e) {\n    return this._parent.querySelector(e);\n  },\n  querySelectorAll: function(e) {\n    return this._parent.querySelectorAll(e);\n  }\n};\nfunction yE(e) {\n  return function() {\n    return e;\n  };\n}\nfunction xE(e, t, n, r, i, s) {\n  for (var a = 0, o, l = t.length, c = s.length; a < c; ++a)\n    (o = t[a]) ? (o.__data__ = s[a], r[a] = o) : n[a] = new ua(e, s[a]);\n  for (; a < l; ++a)\n    (o = t[a]) && (i[a] = o);\n}\nfunction bE(e, t, n, r, i, s, a) {\n  var o, l, c = /* @__PURE__ */ new Map(), u = t.length, d = s.length, h = new Array(u), p;\n  for (o = 0; o < u; ++o)\n    (l = t[o]) && (h[o] = p = a.call(l, l.__data__, o, t) + "", c.has(p) ? i[o] = l : c.set(p, l));\n  for (o = 0; o < d; ++o)\n    p = a.call(e, s[o], o, s) + "", (l = c.get(p)) ? (r[o] = l, l.__data__ = s[o], c.delete(p)) : n[o] = new ua(e, s[o]);\n  for (o = 0; o < u; ++o)\n    (l = t[o]) && c.get(h[o]) === l && (i[o] = l);\n}\nfunction _E(e) {\n  return e.__data__;\n}\nfunction EE(e, t) {\n  if (!arguments.length) return Array.from(this, _E);\n  var n = t ? bE : xE, r = this._parents, i = this._groups;\n  typeof e != "function" && (e = yE(e));\n  for (var s = i.length, a = new Array(s), o = new Array(s), l = new Array(s), c = 0; c < s; ++c) {\n    var u = r[c], d = i[c], h = d.length, p = OE(e.call(u, u && u.__data__, c, r)), f = p.length, g = o[c] = new Array(f), m = a[c] = new Array(f), v = l[c] = new Array(h);\n    n(u, d, g, m, v, p, t);\n    for (var x = 0, _ = 0, E, b; x < f; ++x)\n      if (E = g[x]) {\n        for (x >= _ && (_ = x + 1); !(b = m[_]) && ++_ < f; ) ;\n        E._next = b || null;\n      }\n  }\n  return a = new _e(a, r), a._enter = o, a._exit = l, a;\n}\nfunction OE(e) {\n  return typeof e == "object" && "length" in e ? e : Array.from(e);\n}\nfunction SE() {\n  return new _e(this._exit || this._groups.map(Qf), this._parents);\n}\nfunction TE(e, t, n) {\n  var r = this.enter(), i = this, s = this.exit();\n  return typeof e == "function" ? (r = e(r), r && (r = r.selection())) : r = r.append(e + ""), t != null && (i = t(i), i && (i = i.selection())), n == null ? s.remove() : n(s), r && i ? r.merge(i).order() : i;\n}\nfunction wE(e) {\n  for (var t = e.selection ? e.selection() : e, n = this._groups, r = t._groups, i = n.length, s = r.length, a = Math.min(i, s), o = new Array(i), l = 0; l < a; ++l)\n    for (var c = n[l], u = r[l], d = c.length, h = o[l] = new Array(d), p, f = 0; f < d; ++f)\n      (p = c[f] || u[f]) && (h[f] = p);\n  for (; l < i; ++l)\n    o[l] = n[l];\n  return new _e(o, this._parents);\n}\nfunction $E() {\n  for (var e = this._groups, t = -1, n = e.length; ++t < n; )\n    for (var r = e[t], i = r.length - 1, s = r[i], a; --i >= 0; )\n      (a = r[i]) && (s && a.compareDocumentPosition(s) ^ 4 && s.parentNode.insertBefore(a, s), s = a);\n  return this;\n}\nfunction ME(e) {\n  e || (e = CE);\n  function t(d, h) {\n    return d && h ? e(d.__data__, h.__data__) : !d - !h;\n  }\n  for (var n = this._groups, r = n.length, i = new Array(r), s = 0; s < r; ++s) {\n    for (var a = n[s], o = a.length, l = i[s] = new Array(o), c, u = 0; u < o; ++u)\n      (c = a[u]) && (l[u] = c);\n    l.sort(t);\n  }\n  return new _e(i, this._parents).order();\n}\nfunction CE(e, t) {\n  return e < t ? -1 : e > t ? 1 : e >= t ? 0 : NaN;\n}\nfunction AE() {\n  var e = arguments[0];\n  return arguments[0] = this, e.apply(null, arguments), this;\n}\nfunction LE() {\n  return Array.from(this);\n}\nfunction kE() {\n  for (var e = this._groups, t = 0, n = e.length; t < n; ++t)\n    for (var r = e[t], i = 0, s = r.length; i < s; ++i) {\n      var a = r[i];\n      if (a) return a;\n    }\n  return null;\n}\nfunction DE() {\n  let e = 0;\n  for (const t of this) ++e;\n  return e;\n}\nfunction RE() {\n  return !this.node();\n}\nfunction IE(e) {\n  for (var t = this._groups, n = 0, r = t.length; n < r; ++n)\n    for (var i = t[n], s = 0, a = i.length, o; s < a; ++s)\n      (o = i[s]) && e.call(o, o.__data__, s, i);\n  return this;\n}\nfunction NE(e) {\n  return function() {\n    this.removeAttribute(e);\n  };\n}\nfunction PE(e) {\n  return function() {\n    this.removeAttributeNS(e.space, e.local);\n  };\n}\nfunction UE(e, t) {\n  return function() {\n    this.setAttribute(e, t);\n  };\n}\nfunction BE(e, t) {\n  return function() {\n    this.setAttributeNS(e.space, e.local, t);\n  };\n}\nfunction HE(e, t) {\n  return function() {\n    var n = t.apply(this, arguments);\n    n == null ? this.removeAttribute(e) : this.setAttribute(e, n);\n  };\n}\nfunction VE(e, t) {\n  return function() {\n    var n = t.apply(this, arguments);\n    n == null ? this.removeAttributeNS(e.space, e.local) : this.setAttributeNS(e.space, e.local, n);\n  };\n}\nfunction GE(e, t) {\n  var n = to(e);\n  if (arguments.length < 2) {\n    var r = this.node();\n    return n.local ? r.getAttributeNS(n.space, n.local) : r.getAttribute(n);\n  }\n  return this.each((t == null ? n.local ? PE : NE : typeof t == "function" ? n.local ? VE : HE : n.local ? BE : UE)(n, t));\n}\nfunction Jf(e) {\n  return e.ownerDocument && e.ownerDocument.defaultView || e.document && e || e.defaultView;\n}\nfunction zE(e) {\n  return function() {\n    this.style.removeProperty(e);\n  };\n}\nfunction FE(e, t, n) {\n  return function() {\n    this.style.setProperty(e, t, n);\n  };\n}\nfunction jE(e, t, n) {\n  return function() {\n    var r = t.apply(this, arguments);\n    r == null ? this.style.removeProperty(e) : this.style.setProperty(e, r, n);\n  };\n}\nfunction WE(e, t, n) {\n  return arguments.length > 1 ? this.each((t == null ? zE : typeof t == "function" ? jE : FE)(e, t, n ?? "")) : Xr(this.node(), e);\n}\nfunction Xr(e, t) {\n  return e.style.getPropertyValue(t) || Jf(e).getComputedStyle(e, null).getPropertyValue(t);\n}\nfunction qE(e) {\n  return function() {\n    delete this[e];\n  };\n}\nfunction YE(e, t) {\n  return function() {\n    this[e] = t;\n  };\n}\nfunction XE(e, t) {\n  return function() {\n    var n = t.apply(this, arguments);\n    n == null ? delete this[e] : this[e] = n;\n  };\n}\nfunction ZE(e, t) {\n  return arguments.length > 1 ? this.each((t == null ? qE : typeof t == "function" ? XE : YE)(e, t)) : this.node()[e];\n}\nfunction tm(e) {\n  return e.trim().split(/^|\\s+/);\n}\nfunction Dc(e) {\n  return e.classList || new em(e);\n}\nfunction em(e) {\n  this._node = e, this._names = tm(e.getAttribute("class") || "");\n}\nem.prototype = {\n  add: function(e) {\n    var t = this._names.indexOf(e);\n    t < 0 && (this._names.push(e), this._node.setAttribute("class", this._names.join(" ")));\n  },\n  remove: function(e) {\n    var t = this._names.indexOf(e);\n    t >= 0 && (this._names.splice(t, 1), this._node.setAttribute("class", this._names.join(" ")));\n  },\n  contains: function(e) {\n    return this._names.indexOf(e) >= 0;\n  }\n};\nfunction nm(e, t) {\n  for (var n = Dc(e), r = -1, i = t.length; ++r < i; ) n.add(t[r]);\n}\nfunction rm(e, t) {\n  for (var n = Dc(e), r = -1, i = t.length; ++r < i; ) n.remove(t[r]);\n}\nfunction KE(e) {\n  return function() {\n    nm(this, e);\n  };\n}\nfunction QE(e) {\n  return function() {\n    rm(this, e);\n  };\n}\nfunction JE(e, t) {\n  return function() {\n    (t.apply(this, arguments) ? nm : rm)(this, e);\n  };\n}\nfunction tO(e, t) {\n  var n = tm(e + "");\n  if (arguments.length < 2) {\n    for (var r = Dc(this.node()), i = -1, s = n.length; ++i < s; ) if (!r.contains(n[i])) return !1;\n    return !0;\n  }\n  return this.each((typeof t == "function" ? JE : t ? KE : QE)(n, t));\n}\nfunction eO() {\n  this.textContent = "";\n}\nfunction nO(e) {\n  return function() {\n    this.textContent = e;\n  };\n}\nfunction rO(e) {\n  return function() {\n    var t = e.apply(this, arguments);\n    this.textContent = t ?? "";\n  };\n}\nfunction iO(e) {\n  return arguments.length ? this.each(e == null ? eO : (typeof e == "function" ? rO : nO)(e)) : this.node().textContent;\n}\nfunction sO() {\n  this.innerHTML = "";\n}\nfunction aO(e) {\n  return function() {\n    this.innerHTML = e;\n  };\n}\nfunction oO(e) {\n  return function() {\n    var t = e.apply(this, arguments);\n    this.innerHTML = t ?? "";\n  };\n}\nfunction lO(e) {\n  return arguments.length ? this.each(e == null ? sO : (typeof e == "function" ? oO : aO)(e)) : this.node().innerHTML;\n}\nfunction cO() {\n  this.nextSibling && this.parentNode.appendChild(this);\n}\nfunction uO() {\n  return this.each(cO);\n}\nfunction hO() {\n  this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);\n}\nfunction dO() {\n  return this.each(hO);\n}\nfunction pO(e) {\n  var t = typeof e == "function" ? e : Yf(e);\n  return this.select(function() {\n    return this.appendChild(t.apply(this, arguments));\n  });\n}\nfunction fO() {\n  return null;\n}\nfunction mO(e, t) {\n  var n = typeof e == "function" ? e : Yf(e), r = t == null ? fO : typeof t == "function" ? t : kc(t);\n  return this.select(function() {\n    return this.insertBefore(n.apply(this, arguments), r.apply(this, arguments) || null);\n  });\n}\nfunction gO() {\n  var e = this.parentNode;\n  e && e.removeChild(this);\n}\nfunction vO() {\n  return this.each(gO);\n}\nfunction yO() {\n  var e = this.cloneNode(!1), t = this.parentNode;\n  return t ? t.insertBefore(e, this.nextSibling) : e;\n}\nfunction xO() {\n  var e = this.cloneNode(!0), t = this.parentNode;\n  return t ? t.insertBefore(e, this.nextSibling) : e;\n}\nfunction bO(e) {\n  return this.select(e ? xO : yO);\n}\nfunction _O(e) {\n  return arguments.length ? this.property("__data__", e) : this.node().__data__;\n}\nfunction EO(e) {\n  return function(t) {\n    e.call(this, t, this.__data__);\n  };\n}\nfunction OO(e) {\n  return e.trim().split(/^|\\s+/).map(function(t) {\n    var n = "", r = t.indexOf(".");\n    return r >= 0 && (n = t.slice(r + 1), t = t.slice(0, r)), { type: t, name: n };\n  });\n}\nfunction SO(e) {\n  return function() {\n    var t = this.__on;\n    if (t) {\n      for (var n = 0, r = -1, i = t.length, s; n < i; ++n)\n        s = t[n], (!e.type || s.type === e.type) && s.name === e.name ? this.removeEventListener(s.type, s.listener, s.options) : t[++r] = s;\n      ++r ? t.length = r : delete this.__on;\n    }\n  };\n}\nfunction TO(e, t, n) {\n  return function() {\n    var r = this.__on, i, s = EO(t);\n    if (r) {\n      for (var a = 0, o = r.length; a < o; ++a)\n        if ((i = r[a]).type === e.type && i.name === e.name) {\n          this.removeEventListener(i.type, i.listener, i.options), this.addEventListener(i.type, i.listener = s, i.options = n), i.value = t;\n          return;\n        }\n    }\n    this.addEventListener(e.type, s, n), i = { type: e.type, name: e.name, value: t, listener: s, options: n }, r ? r.push(i) : this.__on = [i];\n  };\n}\nfunction wO(e, t, n) {\n  var r = OO(e + ""), i, s = r.length, a;\n  if (arguments.length < 2) {\n    var o = this.node().__on;\n    if (o) {\n      for (var l = 0, c = o.length, u; l < c; ++l)\n        for (i = 0, u = o[l]; i < s; ++i)\n          if ((a = r[i]).type === u.type && a.name === u.name)\n            return u.value;\n    }\n    return;\n  }\n  for (o = t ? TO : SO, i = 0; i < s; ++i) this.each(o(r[i], t, n));\n  return this;\n}\nfunction im(e, t, n) {\n  var r = Jf(e), i = r.CustomEvent;\n  typeof i == "function" ? i = new i(t, n) : (i = r.document.createEvent("Event"), n ? (i.initEvent(t, n.bubbles, n.cancelable), i.detail = n.detail) : i.initEvent(t, !1, !1)), e.dispatchEvent(i);\n}\nfunction $O(e, t) {\n  return function() {\n    return im(this, e, t);\n  };\n}\nfunction MO(e, t) {\n  return function() {\n    return im(this, e, t.apply(this, arguments));\n  };\n}\nfunction CO(e, t) {\n  return this.each((typeof t == "function" ? MO : $O)(e, t));\n}\nfunction* AO() {\n  for (var e = this._groups, t = 0, n = e.length; t < n; ++t)\n    for (var r = e[t], i = 0, s = r.length, a; i < s; ++i)\n      (a = r[i]) && (yield a);\n}\nvar sm = [null];\nfunction _e(e, t) {\n  this._groups = e, this._parents = t;\n}\nfunction ds() {\n  return new _e([[document.documentElement]], sm);\n}\nfunction LO() {\n  return this;\n}\n_e.prototype = ds.prototype = {\n  constructor: _e,\n  select: rE,\n  selectAll: oE,\n  selectChild: hE,\n  selectChildren: mE,\n  filter: gE,\n  data: EE,\n  enter: vE,\n  exit: SE,\n  join: TE,\n  merge: wE,\n  selection: LO,\n  order: $E,\n  sort: ME,\n  call: AE,\n  nodes: LE,\n  node: kE,\n  size: DE,\n  empty: RE,\n  each: IE,\n  attr: GE,\n  style: WE,\n  property: ZE,\n  classed: tO,\n  text: iO,\n  html: lO,\n  raise: uO,\n  lower: dO,\n  append: pO,\n  insert: mO,\n  remove: vO,\n  clone: bO,\n  datum: _O,\n  on: wO,\n  dispatch: CO,\n  [Symbol.iterator]: AO\n};\nfunction kO(e) {\n  let t;\n  for (; t = e.sourceEvent; ) e = t;\n  return e;\n}\nfunction rr(e, t) {\n  if (e = kO(e), t === void 0 && (t = e.currentTarget), t) {\n    var n = t.ownerSVGElement || t;\n    if (n.createSVGPoint) {\n      var r = n.createSVGPoint();\n      return r.x = e.clientX, r.y = e.clientY, r = r.matrixTransform(t.getScreenCTM().inverse()), [r.x, r.y];\n    }\n    if (t.getBoundingClientRect) {\n      var i = t.getBoundingClientRect();\n      return [e.clientX - i.left - t.clientLeft, e.clientY - i.top - t.clientTop];\n    }\n  }\n  return [e.pageX, e.pageY];\n}\nfunction Rc(e, t, n) {\n  e.prototype = t.prototype = n, n.constructor = e;\n}\nfunction am(e, t) {\n  var n = Object.create(e.prototype);\n  for (var r in t) n[r] = t[r];\n  return n;\n}\nfunction ps() {\n}\nvar Ki = 0.7, ha = 1 / Ki, Gr = "\\\\s*([+-]?\\\\d+)\\\\s*", Qi = "\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)\\\\s*", tn = "\\\\s*([+-]?(?:\\\\d*\\\\.)?\\\\d+(?:[eE][+-]?\\\\d+)?)%\\\\s*", DO = /^#([0-9a-f]{3,8})$/, RO = new RegExp(`^rgb\\\\(${Gr},${Gr},${Gr}\\\\)$`), IO = new RegExp(`^rgb\\\\(${tn},${tn},${tn}\\\\)$`), NO = new RegExp(`^rgba\\\\(${Gr},${Gr},${Gr},${Qi}\\\\)$`), PO = new RegExp(`^rgba\\\\(${tn},${tn},${tn},${Qi}\\\\)$`), UO = new RegExp(`^hsl\\\\(${Qi},${tn},${tn}\\\\)$`), BO = new RegExp(`^hsla\\\\(${Qi},${tn},${tn},${Qi}\\\\)$`), ph = {\n  aliceblue: 15792383,\n  antiquewhite: 16444375,\n  aqua: 65535,\n  aquamarine: 8388564,\n  azure: 15794175,\n  beige: 16119260,\n  bisque: 16770244,\n  black: 0,\n  blanchedalmond: 16772045,\n  blue: 255,\n  blueviolet: 9055202,\n  brown: 10824234,\n  burlywood: 14596231,\n  cadetblue: 6266528,\n  chartreuse: 8388352,\n  chocolate: 13789470,\n  coral: 16744272,\n  cornflowerblue: 6591981,\n  cornsilk: 16775388,\n  crimson: 14423100,\n  cyan: 65535,\n  darkblue: 139,\n  darkcyan: 35723,\n  darkgoldenrod: 12092939,\n  darkgray: 11119017,\n  darkgreen: 25600,\n  darkgrey: 11119017,\n  darkkhaki: 12433259,\n  darkmagenta: 9109643,\n  darkolivegreen: 5597999,\n  darkorange: 16747520,\n  darkorchid: 10040012,\n  darkred: 9109504,\n  darksalmon: 15308410,\n  darkseagreen: 9419919,\n  darkslateblue: 4734347,\n  darkslategray: 3100495,\n  darkslategrey: 3100495,\n  darkturquoise: 52945,\n  darkviolet: 9699539,\n  deeppink: 16716947,\n  deepskyblue: 49151,\n  dimgray: 6908265,\n  dimgrey: 6908265,\n  dodgerblue: 2003199,\n  firebrick: 11674146,\n  floralwhite: 16775920,\n  forestgreen: 2263842,\n  fuchsia: 16711935,\n  gainsboro: 14474460,\n  ghostwhite: 16316671,\n  gold: 16766720,\n  goldenrod: 14329120,\n  gray: 8421504,\n  green: 32768,\n  greenyellow: 11403055,\n  grey: 8421504,\n  honeydew: 15794160,\n  hotpink: 16738740,\n  indianred: 13458524,\n  indigo: 4915330,\n  ivory: 16777200,\n  khaki: 15787660,\n  lavender: 15132410,\n  lavenderblush: 16773365,\n  lawngreen: 8190976,\n  lemonchiffon: 16775885,\n  lightblue: 11393254,\n  lightcoral: 15761536,\n  lightcyan: 14745599,\n  lightgoldenrodyellow: 16448210,\n  lightgray: 13882323,\n  lightgreen: 9498256,\n  lightgrey: 13882323,\n  lightpink: 16758465,\n  lightsalmon: 16752762,\n  lightseagreen: 2142890,\n  lightskyblue: 8900346,\n  lightslategray: 7833753,\n  lightslategrey: 7833753,\n  lightsteelblue: 11584734,\n  lightyellow: 16777184,\n  lime: 65280,\n  limegreen: 3329330,\n  linen: 16445670,\n  magenta: 16711935,\n  maroon: 8388608,\n  mediumaquamarine: 6737322,\n  mediumblue: 205,\n  mediumorchid: 12211667,\n  mediumpurple: 9662683,\n  mediumseagreen: 3978097,\n  mediumslateblue: 8087790,\n  mediumspringgreen: 64154,\n  mediumturquoise: 4772300,\n  mediumvioletred: 13047173,\n  midnightblue: 1644912,\n  mintcream: 16121850,\n  mistyrose: 16770273,\n  moccasin: 16770229,\n  navajowhite: 16768685,\n  navy: 128,\n  oldlace: 16643558,\n  olive: 8421376,\n  olivedrab: 7048739,\n  orange: 16753920,\n  orangered: 16729344,\n  orchid: 14315734,\n  palegoldenrod: 15657130,\n  palegreen: 10025880,\n  paleturquoise: 11529966,\n  palevioletred: 14381203,\n  papayawhip: 16773077,\n  peachpuff: 16767673,\n  peru: 13468991,\n  pink: 16761035,\n  plum: 14524637,\n  powderblue: 11591910,\n  purple: 8388736,\n  rebeccapurple: 6697881,\n  red: 16711680,\n  rosybrown: 12357519,\n  royalblue: 4286945,\n  saddlebrown: 9127187,\n  salmon: 16416882,\n  sandybrown: 16032864,\n  seagreen: 3050327,\n  seashell: 16774638,\n  sienna: 10506797,\n  silver: 12632256,\n  skyblue: 8900331,\n  slateblue: 6970061,\n  slategray: 7372944,\n  slategrey: 7372944,\n  snow: 16775930,\n  springgreen: 65407,\n  steelblue: 4620980,\n  tan: 13808780,\n  teal: 32896,\n  thistle: 14204888,\n  tomato: 16737095,\n  turquoise: 4251856,\n  violet: 15631086,\n  wheat: 16113331,\n  white: 16777215,\n  whitesmoke: 16119285,\n  yellow: 16776960,\n  yellowgreen: 10145074\n};\nRc(ps, Tn, {\n  copy(e) {\n    return Object.assign(new this.constructor(), this, e);\n  },\n  displayable() {\n    return this.rgb().displayable();\n  },\n  hex: fh,\n  // Deprecated! Use color.formatHex.\n  formatHex: fh,\n  formatHex8: HO,\n  formatHsl: VO,\n  formatRgb: mh,\n  toString: mh\n});\nfunction fh() {\n  return this.rgb().formatHex();\n}\nfunction HO() {\n  return this.rgb().formatHex8();\n}\nfunction VO() {\n  return om(this).formatHsl();\n}\nfunction mh() {\n  return this.rgb().formatRgb();\n}\nfunction Tn(e) {\n  var t, n;\n  return e = (e + "").trim().toLowerCase(), (t = DO.exec(e)) ? (n = t[1].length, t = parseInt(t[1], 16), n === 6 ? gh(t) : n === 3 ? new he(t >> 8 & 15 | t >> 4 & 240, t >> 4 & 15 | t & 240, (t & 15) << 4 | t & 15, 1) : n === 8 ? ws(t >> 24 & 255, t >> 16 & 255, t >> 8 & 255, (t & 255) / 255) : n === 4 ? ws(t >> 12 & 15 | t >> 8 & 240, t >> 8 & 15 | t >> 4 & 240, t >> 4 & 15 | t & 240, ((t & 15) << 4 | t & 15) / 255) : null) : (t = RO.exec(e)) ? new he(t[1], t[2], t[3], 1) : (t = IO.exec(e)) ? new he(t[1] * 255 / 100, t[2] * 255 / 100, t[3] * 255 / 100, 1) : (t = NO.exec(e)) ? ws(t[1], t[2], t[3], t[4]) : (t = PO.exec(e)) ? ws(t[1] * 255 / 100, t[2] * 255 / 100, t[3] * 255 / 100, t[4]) : (t = UO.exec(e)) ? xh(t[1], t[2] / 100, t[3] / 100, 1) : (t = BO.exec(e)) ? xh(t[1], t[2] / 100, t[3] / 100, t[4]) : ph.hasOwnProperty(e) ? gh(ph[e]) : e === "transparent" ? new he(NaN, NaN, NaN, 0) : null;\n}\nfunction gh(e) {\n  return new he(e >> 16 & 255, e >> 8 & 255, e & 255, 1);\n}\nfunction ws(e, t, n, r) {\n  return r <= 0 && (e = t = n = NaN), new he(e, t, n, r);\n}\nfunction GO(e) {\n  return e instanceof ps || (e = Tn(e)), e ? (e = e.rgb(), new he(e.r, e.g, e.b, e.opacity)) : new he();\n}\nfunction Sl(e, t, n, r) {\n  return arguments.length === 1 ? GO(e) : new he(e, t, n, r ?? 1);\n}\nfunction he(e, t, n, r) {\n  this.r = +e, this.g = +t, this.b = +n, this.opacity = +r;\n}\nRc(he, Sl, am(ps, {\n  brighter(e) {\n    return e = e == null ? ha : Math.pow(ha, e), new he(this.r * e, this.g * e, this.b * e, this.opacity);\n  },\n  darker(e) {\n    return e = e == null ? Ki : Math.pow(Ki, e), new he(this.r * e, this.g * e, this.b * e, this.opacity);\n  },\n  rgb() {\n    return this;\n  },\n  clamp() {\n    return new he(tr(this.r), tr(this.g), tr(this.b), da(this.opacity));\n  },\n  displayable() {\n    return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;\n  },\n  hex: vh,\n  // Deprecated! Use color.formatHex.\n  formatHex: vh,\n  formatHex8: zO,\n  formatRgb: yh,\n  toString: yh\n}));\nfunction vh() {\n  return `#${Qn(this.r)}${Qn(this.g)}${Qn(this.b)}`;\n}\nfunction zO() {\n  return `#${Qn(this.r)}${Qn(this.g)}${Qn(this.b)}${Qn((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;\n}\nfunction yh() {\n  const e = da(this.opacity);\n  return `${e === 1 ? "rgb(" : "rgba("}${tr(this.r)}, ${tr(this.g)}, ${tr(this.b)}${e === 1 ? ")" : `, ${e})`}`;\n}\nfunction da(e) {\n  return isNaN(e) ? 1 : Math.max(0, Math.min(1, e));\n}\nfunction tr(e) {\n  return Math.max(0, Math.min(255, Math.round(e) || 0));\n}\nfunction Qn(e) {\n  return e = tr(e), (e < 16 ? "0" : "") + e.toString(16);\n}\nfunction xh(e, t, n, r) {\n  return r <= 0 ? e = t = n = NaN : n <= 0 || n >= 1 ? e = t = NaN : t <= 0 && (e = NaN), new He(e, t, n, r);\n}\nfunction om(e) {\n  if (e instanceof He) return new He(e.h, e.s, e.l, e.opacity);\n  if (e instanceof ps || (e = Tn(e)), !e) return new He();\n  if (e instanceof He) return e;\n  e = e.rgb();\n  var t = e.r / 255, n = e.g / 255, r = e.b / 255, i = Math.min(t, n, r), s = Math.max(t, n, r), a = NaN, o = s - i, l = (s + i) / 2;\n  return o ? (t === s ? a = (n - r) / o + (n < r) * 6 : n === s ? a = (r - t) / o + 2 : a = (t - n) / o + 4, o /= l < 0.5 ? s + i : 2 - s - i, a *= 60) : o = l > 0 && l < 1 ? 0 : a, new He(a, o, l, e.opacity);\n}\nfunction lm(e, t, n, r) {\n  return arguments.length === 1 ? om(e) : new He(e, t, n, r ?? 1);\n}\nfunction He(e, t, n, r) {\n  this.h = +e, this.s = +t, this.l = +n, this.opacity = +r;\n}\nRc(He, lm, am(ps, {\n  brighter(e) {\n    return e = e == null ? ha : Math.pow(ha, e), new He(this.h, this.s, this.l * e, this.opacity);\n  },\n  darker(e) {\n    return e = e == null ? Ki : Math.pow(Ki, e), new He(this.h, this.s, this.l * e, this.opacity);\n  },\n  rgb() {\n    var e = this.h % 360 + (this.h < 0) * 360, t = isNaN(e) || isNaN(this.s) ? 0 : this.s, n = this.l, r = n + (n < 0.5 ? n : 1 - n) * t, i = 2 * n - r;\n    return new he(\n      Co(e >= 240 ? e - 240 : e + 120, i, r),\n      Co(e, i, r),\n      Co(e < 120 ? e + 240 : e - 120, i, r),\n      this.opacity\n    );\n  },\n  clamp() {\n    return new He(bh(this.h), $s(this.s), $s(this.l), da(this.opacity));\n  },\n  displayable() {\n    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;\n  },\n  formatHsl() {\n    const e = da(this.opacity);\n    return `${e === 1 ? "hsl(" : "hsla("}${bh(this.h)}, ${$s(this.s) * 100}%, ${$s(this.l) * 100}%${e === 1 ? ")" : `, ${e})`}`;\n  }\n}));\nfunction bh(e) {\n  return e = (e || 0) % 360, e < 0 ? e + 360 : e;\n}\nfunction $s(e) {\n  return Math.max(0, Math.min(1, e || 0));\n}\nfunction Co(e, t, n) {\n  return (e < 60 ? t + (n - t) * e / 60 : e < 180 ? n : e < 240 ? t + (n - t) * (240 - e) / 60 : t) * 255;\n}\nconst Ic = (e) => () => e;\nfunction FO(e, t) {\n  return function(n) {\n    return e + n * t;\n  };\n}\nfunction jO(e, t, n) {\n  return e = Math.pow(e, n), t = Math.pow(t, n) - e, n = 1 / n, function(r) {\n    return Math.pow(e + r * t, n);\n  };\n}\nfunction WO(e) {\n  return (e = +e) == 1 ? cm : function(t, n) {\n    return n - t ? jO(t, n, e) : Ic(isNaN(t) ? n : t);\n  };\n}\nfunction cm(e, t) {\n  var n = t - e;\n  return n ? FO(e, n) : Ic(isNaN(e) ? t : e);\n}\nconst pa = function e(t) {\n  var n = WO(t);\n  function r(i, s) {\n    var a = n((i = Sl(i)).r, (s = Sl(s)).r), o = n(i.g, s.g), l = n(i.b, s.b), c = cm(i.opacity, s.opacity);\n    return function(u) {\n      return i.r = a(u), i.g = o(u), i.b = l(u), i.opacity = c(u), i + "";\n    };\n  }\n  return r.gamma = e, r;\n}(1);\nfunction qO(e, t) {\n  t || (t = []);\n  var n = e ? Math.min(t.length, e.length) : 0, r = t.slice(), i;\n  return function(s) {\n    for (i = 0; i < n; ++i) r[i] = e[i] * (1 - s) + t[i] * s;\n    return r;\n  };\n}\nfunction YO(e) {\n  return ArrayBuffer.isView(e) && !(e instanceof DataView);\n}\nfunction XO(e, t) {\n  var n = t ? t.length : 0, r = e ? Math.min(n, e.length) : 0, i = new Array(r), s = new Array(n), a;\n  for (a = 0; a < r; ++a) i[a] = fs(e[a], t[a]);\n  for (; a < n; ++a) s[a] = t[a];\n  return function(o) {\n    for (a = 0; a < r; ++a) s[a] = i[a](o);\n    return s;\n  };\n}\nfunction ZO(e, t) {\n  var n = /* @__PURE__ */ new Date();\n  return e = +e, t = +t, function(r) {\n    return n.setTime(e * (1 - r) + t * r), n;\n  };\n}\nfunction xe(e, t) {\n  return e = +e, t = +t, function(n) {\n    return e * (1 - n) + t * n;\n  };\n}\nfunction KO(e, t) {\n  var n = {}, r = {}, i;\n  (e === null || typeof e != "object") && (e = {}), (t === null || typeof t != "object") && (t = {});\n  for (i in t)\n    i in e ? n[i] = fs(e[i], t[i]) : r[i] = t[i];\n  return function(s) {\n    for (i in n) r[i] = n[i](s);\n    return r;\n  };\n}\nvar Tl = /[-+]?(?:\\d+\\.?\\d*|\\.?\\d+)(?:[eE][-+]?\\d+)?/g, Ao = new RegExp(Tl.source, "g");\nfunction QO(e) {\n  return function() {\n    return e;\n  };\n}\nfunction JO(e) {\n  return function(t) {\n    return e(t) + "";\n  };\n}\nfunction um(e, t) {\n  var n = Tl.lastIndex = Ao.lastIndex = 0, r, i, s, a = -1, o = [], l = [];\n  for (e = e + "", t = t + ""; (r = Tl.exec(e)) && (i = Ao.exec(t)); )\n    (s = i.index) > n && (s = t.slice(n, s), o[a] ? o[a] += s : o[++a] = s), (r = r[0]) === (i = i[0]) ? o[a] ? o[a] += i : o[++a] = i : (o[++a] = null, l.push({ i: a, x: xe(r, i) })), n = Ao.lastIndex;\n  return n < t.length && (s = t.slice(n), o[a] ? o[a] += s : o[++a] = s), o.length < 2 ? l[0] ? JO(l[0].x) : QO(t) : (t = l.length, function(c) {\n    for (var u = 0, d; u < t; ++u) o[(d = l[u]).i] = d.x(c);\n    return o.join("");\n  });\n}\nfunction fs(e, t) {\n  var n = typeof t, r;\n  return t == null || n === "boolean" ? Ic(t) : (n === "number" ? xe : n === "string" ? (r = Tn(t)) ? (t = r, pa) : um : t instanceof Tn ? pa : t instanceof Date ? ZO : YO(t) ? qO : Array.isArray(t) ? XO : typeof t.valueOf != "function" && typeof t.toString != "function" || isNaN(t) ? KO : xe)(e, t);\n}\nfunction hm(e, t) {\n  return e = +e, t = +t, function(n) {\n    return Math.round(e * (1 - n) + t * n);\n  };\n}\nvar _h = 180 / Math.PI, dm = {\n  translateX: 0,\n  translateY: 0,\n  rotate: 0,\n  skewX: 0,\n  scaleX: 1,\n  scaleY: 1\n};\nfunction pm(e, t, n, r, i, s) {\n  var a, o, l;\n  return (a = Math.sqrt(e * e + t * t)) && (e /= a, t /= a), (l = e * n + t * r) && (n -= e * l, r -= t * l), (o = Math.sqrt(n * n + r * r)) && (n /= o, r /= o, l /= o), e * r < t * n && (e = -e, t = -t, l = -l, a = -a), {\n    translateX: i,\n    translateY: s,\n    rotate: Math.atan2(t, e) * _h,\n    skewX: Math.atan(l) * _h,\n    scaleX: a,\n    scaleY: o\n  };\n}\nvar Ms;\nfunction tS(e) {\n  const t = new (typeof DOMMatrix == "function" ? DOMMatrix : WebKitCSSMatrix)(e + "");\n  return t.isIdentity ? dm : pm(t.a, t.b, t.c, t.d, t.e, t.f);\n}\nfunction eS(e) {\n  return e == null || (Ms || (Ms = document.createElementNS("http://www.w3.org/2000/svg", "g")), Ms.setAttribute("transform", e), !(e = Ms.transform.baseVal.consolidate())) ? dm : (e = e.matrix, pm(e.a, e.b, e.c, e.d, e.e, e.f));\n}\nfunction fm(e, t, n, r) {\n  function i(c) {\n    return c.length ? c.pop() + " " : "";\n  }\n  function s(c, u, d, h, p, f) {\n    if (c !== d || u !== h) {\n      var g = p.push("translate(", null, t, null, n);\n      f.push({ i: g - 4, x: xe(c, d) }, { i: g - 2, x: xe(u, h) });\n    } else (d || h) && p.push("translate(" + d + t + h + n);\n  }\n  function a(c, u, d, h) {\n    c !== u ? (c - u > 180 ? u += 360 : u - c > 180 && (c += 360), h.push({ i: d.push(i(d) + "rotate(", null, r) - 2, x: xe(c, u) })) : u && d.push(i(d) + "rotate(" + u + r);\n  }\n  function o(c, u, d, h) {\n    c !== u ? h.push({ i: d.push(i(d) + "skewX(", null, r) - 2, x: xe(c, u) }) : u && d.push(i(d) + "skewX(" + u + r);\n  }\n  function l(c, u, d, h, p, f) {\n    if (c !== d || u !== h) {\n      var g = p.push(i(p) + "scale(", null, ",", null, ")");\n      f.push({ i: g - 4, x: xe(c, d) }, { i: g - 2, x: xe(u, h) });\n    } else (d !== 1 || h !== 1) && p.push(i(p) + "scale(" + d + "," + h + ")");\n  }\n  return function(c, u) {\n    var d = [], h = [];\n    return c = e(c), u = e(u), s(c.translateX, c.translateY, u.translateX, u.translateY, d, h), a(c.rotate, u.rotate, d, h), o(c.skewX, u.skewX, d, h), l(c.scaleX, c.scaleY, u.scaleX, u.scaleY, d, h), c = u = null, function(p) {\n      for (var f = -1, g = h.length, m; ++f < g; ) d[(m = h[f]).i] = m.x(p);\n      return d.join("");\n    };\n  };\n}\nvar nS = fm(tS, "px, ", "px)", "deg)"), rS = fm(eS, ", ", ")", ")"), Zr = 0, Ti = 0, pi = 0, mm = 1e3, fa, wi, ma = 0, ir = 0, eo = 0, Ji = typeof performance == "object" && performance.now ? performance : Date, gm = typeof window == "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(e) {\n  setTimeout(e, 17);\n};\nfunction Nc() {\n  return ir || (gm(iS), ir = Ji.now() + eo);\n}\nfunction iS() {\n  ir = 0;\n}\nfunction ga() {\n  this._call = this._time = this._next = null;\n}\nga.prototype = vm.prototype = {\n  constructor: ga,\n  restart: function(e, t, n) {\n    if (typeof e != "function") throw new TypeError("callback is not a function");\n    n = (n == null ? Nc() : +n) + (t == null ? 0 : +t), !this._next && wi !== this && (wi ? wi._next = this : fa = this, wi = this), this._call = e, this._time = n, wl();\n  },\n  stop: function() {\n    this._call && (this._call = null, this._time = 1 / 0, wl());\n  }\n};\nfunction vm(e, t, n) {\n  var r = new ga();\n  return r.restart(e, t, n), r;\n}\nfunction sS() {\n  Nc(), ++Zr;\n  for (var e = fa, t; e; )\n    (t = ir - e._time) >= 0 && e._call.call(void 0, t), e = e._next;\n  --Zr;\n}\nfunction Eh() {\n  ir = (ma = Ji.now()) + eo, Zr = Ti = 0;\n  try {\n    sS();\n  } finally {\n    Zr = 0, oS(), ir = 0;\n  }\n}\nfunction aS() {\n  var e = Ji.now(), t = e - ma;\n  t > mm && (eo -= t, ma = e);\n}\nfunction oS() {\n  for (var e, t = fa, n, r = 1 / 0; t; )\n    t._call ? (r > t._time && (r = t._time), e = t, t = t._next) : (n = t._next, t._next = null, t = e ? e._next = n : fa = n);\n  wi = e, wl(r);\n}\nfunction wl(e) {\n  if (!Zr) {\n    Ti && (Ti = clearTimeout(Ti));\n    var t = e - ir;\n    t > 24 ? (e < 1 / 0 && (Ti = setTimeout(Eh, e - Ji.now() - eo)), pi && (pi = clearInterval(pi))) : (pi || (ma = Ji.now(), pi = setInterval(aS, mm)), Zr = 1, gm(Eh));\n  }\n}\nfunction Oh(e, t, n) {\n  var r = new ga();\n  return t = t == null ? 0 : +t, r.restart((i) => {\n    r.stop(), e(i + t);\n  }, t, n), r;\n}\nvar lS = Lc("start", "end", "cancel", "interrupt"), cS = [], ym = 0, Sh = 1, $l = 2, Xs = 3, Th = 4, Ml = 5, Zs = 6;\nfunction no(e, t, n, r, i, s) {\n  var a = e.__transition;\n  if (!a) e.__transition = {};\n  else if (n in a) return;\n  uS(e, n, {\n    name: t,\n    index: r,\n    // For context during callback.\n    group: i,\n    // For context during callback.\n    on: lS,\n    tween: cS,\n    time: s.time,\n    delay: s.delay,\n    duration: s.duration,\n    ease: s.ease,\n    timer: null,\n    state: ym\n  });\n}\nfunction Pc(e, t) {\n  var n = qe(e, t);\n  if (n.state > ym) throw new Error("too late; already scheduled");\n  return n;\n}\nfunction sn(e, t) {\n  var n = qe(e, t);\n  if (n.state > Xs) throw new Error("too late; already running");\n  return n;\n}\nfunction qe(e, t) {\n  var n = e.__transition;\n  if (!n || !(n = n[t])) throw new Error("transition not found");\n  return n;\n}\nfunction uS(e, t, n) {\n  var r = e.__transition, i;\n  r[t] = n, n.timer = vm(s, 0, n.time);\n  function s(c) {\n    n.state = Sh, n.timer.restart(a, n.delay, n.time), n.delay <= c && a(c - n.delay);\n  }\n  function a(c) {\n    var u, d, h, p;\n    if (n.state !== Sh) return l();\n    for (u in r)\n      if (p = r[u], p.name === n.name) {\n        if (p.state === Xs) return Oh(a);\n        p.state === Th ? (p.state = Zs, p.timer.stop(), p.on.call("interrupt", e, e.__data__, p.index, p.group), delete r[u]) : +u < t && (p.state = Zs, p.timer.stop(), p.on.call("cancel", e, e.__data__, p.index, p.group), delete r[u]);\n      }\n    if (Oh(function() {\n      n.state === Xs && (n.state = Th, n.timer.restart(o, n.delay, n.time), o(c));\n    }), n.state = $l, n.on.call("start", e, e.__data__, n.index, n.group), n.state === $l) {\n      for (n.state = Xs, i = new Array(h = n.tween.length), u = 0, d = -1; u < h; ++u)\n        (p = n.tween[u].value.call(e, e.__data__, n.index, n.group)) && (i[++d] = p);\n      i.length = d + 1;\n    }\n  }\n  function o(c) {\n    for (var u = c < n.duration ? n.ease.call(null, c / n.duration) : (n.timer.restart(l), n.state = Ml, 1), d = -1, h = i.length; ++d < h; )\n      i[d].call(e, u);\n    n.state === Ml && (n.on.call("end", e, e.__data__, n.index, n.group), l());\n  }\n  function l() {\n    n.state = Zs, n.timer.stop(), delete r[t];\n    for (var c in r) return;\n    delete e.__transition;\n  }\n}\nfunction Cl(e, t) {\n  var n = e.__transition, r, i, s = !0, a;\n  if (n) {\n    t = t == null ? null : t + "";\n    for (a in n) {\n      if ((r = n[a]).name !== t) {\n        s = !1;\n        continue;\n      }\n      i = r.state > $l && r.state < Ml, r.state = Zs, r.timer.stop(), r.on.call(i ? "interrupt" : "cancel", e, e.__data__, r.index, r.group), delete n[a];\n    }\n    s && delete e.__transition;\n  }\n}\nfunction hS(e) {\n  return this.each(function() {\n    Cl(this, e);\n  });\n}\nfunction dS(e, t) {\n  var n, r;\n  return function() {\n    var i = sn(this, e), s = i.tween;\n    if (s !== n) {\n      r = n = s;\n      for (var a = 0, o = r.length; a < o; ++a)\n        if (r[a].name === t) {\n          r = r.slice(), r.splice(a, 1);\n          break;\n        }\n    }\n    i.tween = r;\n  };\n}\nfunction pS(e, t, n) {\n  var r, i;\n  if (typeof n != "function") throw new Error();\n  return function() {\n    var s = sn(this, e), a = s.tween;\n    if (a !== r) {\n      i = (r = a).slice();\n      for (var o = { name: t, value: n }, l = 0, c = i.length; l < c; ++l)\n        if (i[l].name === t) {\n          i[l] = o;\n          break;\n        }\n      l === c && i.push(o);\n    }\n    s.tween = i;\n  };\n}\nfunction fS(e, t) {\n  var n = this._id;\n  if (e += "", arguments.length < 2) {\n    for (var r = qe(this.node(), n).tween, i = 0, s = r.length, a; i < s; ++i)\n      if ((a = r[i]).name === e)\n        return a.value;\n    return null;\n  }\n  return this.each((t == null ? dS : pS)(n, e, t));\n}\nfunction Uc(e, t, n) {\n  var r = e._id;\n  return e.each(function() {\n    var i = sn(this, r);\n    (i.value || (i.value = {}))[t] = n.apply(this, arguments);\n  }), function(i) {\n    return qe(i, r).value[t];\n  };\n}\nfunction xm(e, t) {\n  var n;\n  return (typeof t == "number" ? xe : t instanceof Tn ? pa : (n = Tn(t)) ? (t = n, pa) : um)(e, t);\n}\nfunction mS(e) {\n  return function() {\n    this.removeAttribute(e);\n  };\n}\nfunction gS(e) {\n  return function() {\n    this.removeAttributeNS(e.space, e.local);\n  };\n}\nfunction vS(e, t, n) {\n  var r, i = n + "", s;\n  return function() {\n    var a = this.getAttribute(e);\n    return a === i ? null : a === r ? s : s = t(r = a, n);\n  };\n}\nfunction yS(e, t, n) {\n  var r, i = n + "", s;\n  return function() {\n    var a = this.getAttributeNS(e.space, e.local);\n    return a === i ? null : a === r ? s : s = t(r = a, n);\n  };\n}\nfunction xS(e, t, n) {\n  var r, i, s;\n  return function() {\n    var a, o = n(this), l;\n    return o == null ? void this.removeAttribute(e) : (a = this.getAttribute(e), l = o + "", a === l ? null : a === r && l === i ? s : (i = l, s = t(r = a, o)));\n  };\n}\nfunction bS(e, t, n) {\n  var r, i, s;\n  return function() {\n    var a, o = n(this), l;\n    return o == null ? void this.removeAttributeNS(e.space, e.local) : (a = this.getAttributeNS(e.space, e.local), l = o + "", a === l ? null : a === r && l === i ? s : (i = l, s = t(r = a, o)));\n  };\n}\nfunction _S(e, t) {\n  var n = to(e), r = n === "transform" ? rS : xm;\n  return this.attrTween(e, typeof t == "function" ? (n.local ? bS : xS)(n, r, Uc(this, "attr." + e, t)) : t == null ? (n.local ? gS : mS)(n) : (n.local ? yS : vS)(n, r, t));\n}\nfunction ES(e, t) {\n  return function(n) {\n    this.setAttribute(e, t.call(this, n));\n  };\n}\nfunction OS(e, t) {\n  return function(n) {\n    this.setAttributeNS(e.space, e.local, t.call(this, n));\n  };\n}\nfunction SS(e, t) {\n  var n, r;\n  function i() {\n    var s = t.apply(this, arguments);\n    return s !== r && (n = (r = s) && OS(e, s)), n;\n  }\n  return i._value = t, i;\n}\nfunction TS(e, t) {\n  var n, r;\n  function i() {\n    var s = t.apply(this, arguments);\n    return s !== r && (n = (r = s) && ES(e, s)), n;\n  }\n  return i._value = t, i;\n}\nfunction wS(e, t) {\n  var n = "attr." + e;\n  if (arguments.length < 2) return (n = this.tween(n)) && n._value;\n  if (t == null) return this.tween(n, null);\n  if (typeof t != "function") throw new Error();\n  var r = to(e);\n  return this.tween(n, (r.local ? SS : TS)(r, t));\n}\nfunction $S(e, t) {\n  return function() {\n    Pc(this, e).delay = +t.apply(this, arguments);\n  };\n}\nfunction MS(e, t) {\n  return t = +t, function() {\n    Pc(this, e).delay = t;\n  };\n}\nfunction CS(e) {\n  var t = this._id;\n  return arguments.length ? this.each((typeof e == "function" ? $S : MS)(t, e)) : qe(this.node(), t).delay;\n}\nfunction AS(e, t) {\n  return function() {\n    sn(this, e).duration = +t.apply(this, arguments);\n  };\n}\nfunction LS(e, t) {\n  return t = +t, function() {\n    sn(this, e).duration = t;\n  };\n}\nfunction kS(e) {\n  var t = this._id;\n  return arguments.length ? this.each((typeof e == "function" ? AS : LS)(t, e)) : qe(this.node(), t).duration;\n}\nfunction DS(e, t) {\n  if (typeof t != "function") throw new Error();\n  return function() {\n    sn(this, e).ease = t;\n  };\n}\nfunction RS(e) {\n  var t = this._id;\n  return arguments.length ? this.each(DS(t, e)) : qe(this.node(), t).ease;\n}\nfunction IS(e, t) {\n  return function() {\n    var n = t.apply(this, arguments);\n    if (typeof n != "function") throw new Error();\n    sn(this, e).ease = n;\n  };\n}\nfunction NS(e) {\n  if (typeof e != "function") throw new Error();\n  return this.each(IS(this._id, e));\n}\nfunction PS(e) {\n  typeof e != "function" && (e = Zf(e));\n  for (var t = this._groups, n = t.length, r = new Array(n), i = 0; i < n; ++i)\n    for (var s = t[i], a = s.length, o = r[i] = [], l, c = 0; c < a; ++c)\n      (l = s[c]) && e.call(l, l.__data__, c, s) && o.push(l);\n  return new wn(r, this._parents, this._name, this._id);\n}\nfunction US(e) {\n  if (e._id !== this._id) throw new Error();\n  for (var t = this._groups, n = e._groups, r = t.length, i = n.length, s = Math.min(r, i), a = new Array(r), o = 0; o < s; ++o)\n    for (var l = t[o], c = n[o], u = l.length, d = a[o] = new Array(u), h, p = 0; p < u; ++p)\n      (h = l[p] || c[p]) && (d[p] = h);\n  for (; o < r; ++o)\n    a[o] = t[o];\n  return new wn(a, this._parents, this._name, this._id);\n}\nfunction BS(e) {\n  return (e + "").trim().split(/^|\\s+/).every(function(t) {\n    var n = t.indexOf(".");\n    return n >= 0 && (t = t.slice(0, n)), !t || t === "start";\n  });\n}\nfunction HS(e, t, n) {\n  var r, i, s = BS(t) ? Pc : sn;\n  return function() {\n    var a = s(this, e), o = a.on;\n    o !== r && (i = (r = o).copy()).on(t, n), a.on = i;\n  };\n}\nfunction VS(e, t) {\n  var n = this._id;\n  return arguments.length < 2 ? qe(this.node(), n).on.on(e) : this.each(HS(n, e, t));\n}\nfunction GS(e) {\n  return function() {\n    var t = this.parentNode;\n    for (var n in this.__transition) if (+n !== e) return;\n    t && t.removeChild(this);\n  };\n}\nfunction zS() {\n  return this.on("end.remove", GS(this._id));\n}\nfunction FS(e) {\n  var t = this._name, n = this._id;\n  typeof e != "function" && (e = kc(e));\n  for (var r = this._groups, i = r.length, s = new Array(i), a = 0; a < i; ++a)\n    for (var o = r[a], l = o.length, c = s[a] = new Array(l), u, d, h = 0; h < l; ++h)\n      (u = o[h]) && (d = e.call(u, u.__data__, h, o)) && ("__data__" in u && (d.__data__ = u.__data__), c[h] = d, no(c[h], t, n, h, c, qe(u, n)));\n  return new wn(s, this._parents, t, n);\n}\nfunction jS(e) {\n  var t = this._name, n = this._id;\n  typeof e != "function" && (e = Xf(e));\n  for (var r = this._groups, i = r.length, s = [], a = [], o = 0; o < i; ++o)\n    for (var l = r[o], c = l.length, u, d = 0; d < c; ++d)\n      if (u = l[d]) {\n        for (var h = e.call(u, u.__data__, d, l), p, f = qe(u, n), g = 0, m = h.length; g < m; ++g)\n          (p = h[g]) && no(p, t, n, g, h, f);\n        s.push(h), a.push(u);\n      }\n  return new wn(s, a, t, n);\n}\nvar WS = ds.prototype.constructor;\nfunction qS() {\n  return new WS(this._groups, this._parents);\n}\nfunction YS(e, t) {\n  var n, r, i;\n  return function() {\n    var s = Xr(this, e), a = (this.style.removeProperty(e), Xr(this, e));\n    return s === a ? null : s === n && a === r ? i : i = t(n = s, r = a);\n  };\n}\nfunction bm(e) {\n  return function() {\n    this.style.removeProperty(e);\n  };\n}\nfunction XS(e, t, n) {\n  var r, i = n + "", s;\n  return function() {\n    var a = Xr(this, e);\n    return a === i ? null : a === r ? s : s = t(r = a, n);\n  };\n}\nfunction ZS(e, t, n) {\n  var r, i, s;\n  return function() {\n    var a = Xr(this, e), o = n(this), l = o + "";\n    return o == null && (l = o = (this.style.removeProperty(e), Xr(this, e))), a === l ? null : a === r && l === i ? s : (i = l, s = t(r = a, o));\n  };\n}\nfunction KS(e, t) {\n  var n, r, i, s = "style." + t, a = "end." + s, o;\n  return function() {\n    var l = sn(this, e), c = l.on, u = l.value[s] == null ? o || (o = bm(t)) : void 0;\n    (c !== n || i !== u) && (r = (n = c).copy()).on(a, i = u), l.on = r;\n  };\n}\nfunction QS(e, t, n) {\n  var r = (e += "") == "transform" ? nS : xm;\n  return t == null ? this.styleTween(e, YS(e, r)).on("end.style." + e, bm(e)) : typeof t == "function" ? this.styleTween(e, ZS(e, r, Uc(this, "style." + e, t))).each(KS(this._id, e)) : this.styleTween(e, XS(e, r, t), n).on("end.style." + e, null);\n}\nfunction JS(e, t, n) {\n  return function(r) {\n    this.style.setProperty(e, t.call(this, r), n);\n  };\n}\nfunction tT(e, t, n) {\n  var r, i;\n  function s() {\n    var a = t.apply(this, arguments);\n    return a !== i && (r = (i = a) && JS(e, a, n)), r;\n  }\n  return s._value = t, s;\n}\nfunction eT(e, t, n) {\n  var r = "style." + (e += "");\n  if (arguments.length < 2) return (r = this.tween(r)) && r._value;\n  if (t == null) return this.tween(r, null);\n  if (typeof t != "function") throw new Error();\n  return this.tween(r, tT(e, t, n ?? ""));\n}\nfunction nT(e) {\n  return function() {\n    this.textContent = e;\n  };\n}\nfunction rT(e) {\n  return function() {\n    var t = e(this);\n    this.textContent = t ?? "";\n  };\n}\nfunction iT(e) {\n  return this.tween("text", typeof e == "function" ? rT(Uc(this, "text", e)) : nT(e == null ? "" : e + ""));\n}\nfunction sT(e) {\n  return function(t) {\n    this.textContent = e.call(this, t);\n  };\n}\nfunction aT(e) {\n  var t, n;\n  function r() {\n    var i = e.apply(this, arguments);\n    return i !== n && (t = (n = i) && sT(i)), t;\n  }\n  return r._value = e, r;\n}\nfunction oT(e) {\n  var t = "text";\n  if (arguments.length < 1) return (t = this.tween(t)) && t._value;\n  if (e == null) return this.tween(t, null);\n  if (typeof e != "function") throw new Error();\n  return this.tween(t, aT(e));\n}\nfunction lT() {\n  for (var e = this._name, t = this._id, n = _m(), r = this._groups, i = r.length, s = 0; s < i; ++s)\n    for (var a = r[s], o = a.length, l, c = 0; c < o; ++c)\n      if (l = a[c]) {\n        var u = qe(l, t);\n        no(l, e, n, c, a, {\n          time: u.time + u.delay + u.duration,\n          delay: 0,\n          duration: u.duration,\n          ease: u.ease\n        });\n      }\n  return new wn(r, this._parents, e, n);\n}\nfunction cT() {\n  var e, t, n = this, r = n._id, i = n.size();\n  return new Promise(function(s, a) {\n    var o = { value: a }, l = { value: function() {\n      --i === 0 && s();\n    } };\n    n.each(function() {\n      var c = sn(this, r), u = c.on;\n      u !== e && (t = (e = u).copy(), t._.cancel.push(o), t._.interrupt.push(o), t._.end.push(l)), c.on = t;\n    }), i === 0 && s();\n  });\n}\nvar uT = 0;\nfunction wn(e, t, n, r) {\n  this._groups = e, this._parents = t, this._name = n, this._id = r;\n}\nfunction _m() {\n  return ++uT;\n}\nvar un = ds.prototype;\nwn.prototype = {\n  constructor: wn,\n  select: FS,\n  selectAll: jS,\n  selectChild: un.selectChild,\n  selectChildren: un.selectChildren,\n  filter: PS,\n  merge: US,\n  selection: qS,\n  transition: lT,\n  call: un.call,\n  nodes: un.nodes,\n  node: un.node,\n  size: un.size,\n  empty: un.empty,\n  each: un.each,\n  on: VS,\n  attr: _S,\n  attrTween: wS,\n  style: QS,\n  styleTween: eT,\n  text: iT,\n  textTween: oT,\n  remove: zS,\n  tween: fS,\n  delay: CS,\n  duration: kS,\n  ease: RS,\n  easeVarying: NS,\n  end: cT,\n  [Symbol.iterator]: un[Symbol.iterator]\n};\nfunction Em(e) {\n  return ((e *= 2) <= 1 ? e * e * e : (e -= 2) * e * e + 2) / 2;\n}\nvar hT = {\n  time: null,\n  // Set on use.\n  delay: 0,\n  duration: 250,\n  ease: Em\n};\nfunction dT(e, t) {\n  for (var n; !(n = e.__transition) || !(n = n[t]); )\n    if (!(e = e.parentNode))\n      throw new Error(`transition ${t} not found`);\n  return n;\n}\nfunction pT(e) {\n  var t, n;\n  e instanceof wn ? (t = e._id, e = e._name) : (t = _m(), (n = hT).time = Nc(), e = e == null ? null : e + "");\n  for (var r = this._groups, i = r.length, s = 0; s < i; ++s)\n    for (var a = r[s], o = a.length, l, c = 0; c < o; ++c)\n      (l = a[c]) && no(l, e, t, c, a, n || dT(l, t));\n  return new wn(r, this._parents, e, t);\n}\nds.prototype.interrupt = hS;\nds.prototype.transition = pT;\nfunction fT(e) {\n  return Math.abs(e = Math.round(e)) >= 1e21 ? e.toLocaleString("en").replace(/,/g, "") : e.toString(10);\n}\nfunction va(e, t) {\n  if ((n = (e = t ? e.toExponential(t - 1) : e.toExponential()).indexOf("e")) < 0) return null;\n  var n, r = e.slice(0, n);\n  return [\n    r.length > 1 ? r[0] + r.slice(2) : r,\n    +e.slice(n + 1)\n  ];\n}\nfunction Kr(e) {\n  return e = va(Math.abs(e)), e ? e[1] : NaN;\n}\nfunction mT(e, t) {\n  return function(n, r) {\n    for (var i = n.length, s = [], a = 0, o = e[0], l = 0; i > 0 && o > 0 && (l + o + 1 > r && (o = Math.max(1, r - l)), s.push(n.substring(i -= o, i + o)), !((l += o + 1) > r)); )\n      o = e[a = (a + 1) % e.length];\n    return s.reverse().join(t);\n  };\n}\nfunction gT(e) {\n  return function(t) {\n    return t.replace(/[0-9]/g, function(n) {\n      return e[+n];\n    });\n  };\n}\nvar vT = /^(?:(.)?([<>=^]))?([+\\-( ])?([$#])?(0)?(\\d+)?(,)?(\\.\\d+)?(~)?([a-z%])?$/i;\nfunction ts(e) {\n  if (!(t = vT.exec(e))) throw new Error("invalid format: " + e);\n  var t;\n  return new Bc({\n    fill: t[1],\n    align: t[2],\n    sign: t[3],\n    symbol: t[4],\n    zero: t[5],\n    width: t[6],\n    comma: t[7],\n    precision: t[8] && t[8].slice(1),\n    trim: t[9],\n    type: t[10]\n  });\n}\nts.prototype = Bc.prototype;\nfunction Bc(e) {\n  this.fill = e.fill === void 0 ? " " : e.fill + "", this.align = e.align === void 0 ? ">" : e.align + "", this.sign = e.sign === void 0 ? "-" : e.sign + "", this.symbol = e.symbol === void 0 ? "" : e.symbol + "", this.zero = !!e.zero, this.width = e.width === void 0 ? void 0 : +e.width, this.comma = !!e.comma, this.precision = e.precision === void 0 ? void 0 : +e.precision, this.trim = !!e.trim, this.type = e.type === void 0 ? "" : e.type + "";\n}\nBc.prototype.toString = function() {\n  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;\n};\nfunction yT(e) {\n  t: for (var t = e.length, n = 1, r = -1, i; n < t; ++n)\n    switch (e[n]) {\n      case ".":\n        r = i = n;\n        break;\n      case "0":\n        r === 0 && (r = n), i = n;\n        break;\n      default:\n        if (!+e[n]) break t;\n        r > 0 && (r = 0);\n        break;\n    }\n  return r > 0 ? e.slice(0, r) + e.slice(i + 1) : e;\n}\nvar Om;\nfunction xT(e, t) {\n  var n = va(e, t);\n  if (!n) return e + "";\n  var r = n[0], i = n[1], s = i - (Om = Math.max(-8, Math.min(8, Math.floor(i / 3))) * 3) + 1, a = r.length;\n  return s === a ? r : s > a ? r + new Array(s - a + 1).join("0") : s > 0 ? r.slice(0, s) + "." + r.slice(s) : "0." + new Array(1 - s).join("0") + va(e, Math.max(0, t + s - 1))[0];\n}\nfunction wh(e, t) {\n  var n = va(e, t);\n  if (!n) return e + "";\n  var r = n[0], i = n[1];\n  return i < 0 ? "0." + new Array(-i).join("0") + r : r.length > i + 1 ? r.slice(0, i + 1) + "." + r.slice(i + 1) : r + new Array(i - r.length + 2).join("0");\n}\nconst $h = {\n  "%": (e, t) => (e * 100).toFixed(t),\n  b: (e) => Math.round(e).toString(2),\n  c: (e) => e + "",\n  d: fT,\n  e: (e, t) => e.toExponential(t),\n  f: (e, t) => e.toFixed(t),\n  g: (e, t) => e.toPrecision(t),\n  o: (e) => Math.round(e).toString(8),\n  p: (e, t) => wh(e * 100, t),\n  r: wh,\n  s: xT,\n  X: (e) => Math.round(e).toString(16).toUpperCase(),\n  x: (e) => Math.round(e).toString(16)\n};\nfunction Mh(e) {\n  return e;\n}\nvar Ch = Array.prototype.map, Ah = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];\nfunction bT(e) {\n  var t = e.grouping === void 0 || e.thousands === void 0 ? Mh : mT(Ch.call(e.grouping, Number), e.thousands + ""), n = e.currency === void 0 ? "" : e.currency[0] + "", r = e.currency === void 0 ? "" : e.currency[1] + "", i = e.decimal === void 0 ? "." : e.decimal + "", s = e.numerals === void 0 ? Mh : gT(Ch.call(e.numerals, String)), a = e.percent === void 0 ? "%" : e.percent + "", o = e.minus === void 0 ? "−" : e.minus + "", l = e.nan === void 0 ? "NaN" : e.nan + "";\n  function c(d) {\n    d = ts(d);\n    var h = d.fill, p = d.align, f = d.sign, g = d.symbol, m = d.zero, v = d.width, x = d.comma, _ = d.precision, E = d.trim, b = d.type;\n    b === "n" ? (x = !0, b = "g") : $h[b] || (_ === void 0 && (_ = 12), E = !0, b = "g"), (m || h === "0" && p === "=") && (m = !0, h = "0", p = "=");\n    var S = g === "$" ? n : g === "#" && /[boxX]/.test(b) ? "0" + b.toLowerCase() : "", M = g === "$" ? r : /[%p]/.test(b) ? a : "", D = $h[b], A = /[defgprs%]/.test(b);\n    _ = _ === void 0 ? 6 : /[gprs]/.test(b) ? Math.max(1, Math.min(21, _)) : Math.max(0, Math.min(20, _));\n    function R($) {\n      var H = S, P = M, B, O, w;\n      if (b === "c")\n        P = D($) + P, $ = "";\n      else {\n        $ = +$;\n        var L = $ < 0 || 1 / $ < 0;\n        if ($ = isNaN($) ? l : D(Math.abs($), _), E && ($ = yT($)), L && +$ == 0 && f !== "+" && (L = !1), H = (L ? f === "(" ? f : o : f === "-" || f === "(" ? "" : f) + H, P = (b === "s" ? Ah[8 + Om / 3] : "") + P + (L && f === "(" ? ")" : ""), A) {\n          for (B = -1, O = $.length; ++B < O; )\n            if (w = $.charCodeAt(B), 48 > w || w > 57) {\n              P = (w === 46 ? i + $.slice(B + 1) : $.slice(B)) + P, $ = $.slice(0, B);\n              break;\n            }\n        }\n      }\n      x && !m && ($ = t($, 1 / 0));\n      var k = H.length + $.length + P.length, U = k < v ? new Array(v - k + 1).join(h) : "";\n      switch (x && m && ($ = t(U + $, U.length ? v - P.length : 1 / 0), U = ""), p) {\n        case "<":\n          $ = H + $ + P + U;\n          break;\n        case "=":\n          $ = H + U + $ + P;\n          break;\n        case "^":\n          $ = U.slice(0, k = U.length >> 1) + H + $ + P + U.slice(k);\n          break;\n        default:\n          $ = U + H + $ + P;\n          break;\n      }\n      return s($);\n    }\n    return R.toString = function() {\n      return d + "";\n    }, R;\n  }\n  function u(d, h) {\n    var p = c((d = ts(d), d.type = "f", d)), f = Math.max(-8, Math.min(8, Math.floor(Kr(h) / 3))) * 3, g = Math.pow(10, -f), m = Ah[8 + f / 3];\n    return function(v) {\n      return p(g * v) + m;\n    };\n  }\n  return {\n    format: c,\n    formatPrefix: u\n  };\n}\nvar Cs, Hc, Sm;\n_T({\n  thousands: ",",\n  grouping: [3],\n  currency: ["$", ""]\n});\nfunction _T(e) {\n  return Cs = bT(e), Hc = Cs.format, Sm = Cs.formatPrefix, Cs;\n}\nfunction ET(e) {\n  return Math.max(0, -Kr(Math.abs(e)));\n}\nfunction OT(e, t) {\n  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(Kr(t) / 3))) * 3 - Kr(Math.abs(e)));\n}\nfunction ST(e, t) {\n  return e = Math.abs(e), t = Math.abs(t) - e, Math.max(0, Kr(t) - Kr(e)) + 1;\n}\nfunction ii(e, t) {\n  switch (arguments.length) {\n    case 0:\n      break;\n    case 1:\n      this.range(e);\n      break;\n    default:\n      this.range(t).domain(e);\n      break;\n  }\n  return this;\n}\nconst Lh = Symbol("implicit");\nfunction ro() {\n  var e = new ch(), t = [], n = [], r = Lh;\n  function i(s) {\n    let a = e.get(s);\n    if (a === void 0) {\n      if (r !== Lh) return r;\n      e.set(s, a = t.push(s) - 1);\n    }\n    return n[a % n.length];\n  }\n  return i.domain = function(s) {\n    if (!arguments.length) return t.slice();\n    t = [], e = new ch();\n    for (const a of s)\n      e.has(a) || e.set(a, t.push(a) - 1);\n    return i;\n  }, i.range = function(s) {\n    return arguments.length ? (n = Array.from(s), i) : n.slice();\n  }, i.unknown = function(s) {\n    return arguments.length ? (r = s, i) : r;\n  }, i.copy = function() {\n    return ro(t, n).unknown(r);\n  }, ii.apply(i, arguments), i;\n}\nfunction TT(e) {\n  return function() {\n    return e;\n  };\n}\nfunction wT(e) {\n  return +e;\n}\nvar kh = [0, 1];\nfunction Ir(e) {\n  return e;\n}\nfunction Al(e, t) {\n  return (t -= e = +e) ? function(n) {\n    return (n - e) / t;\n  } : TT(isNaN(t) ? NaN : 0.5);\n}\nfunction $T(e, t) {\n  var n;\n  return e > t && (n = e, e = t, t = n), function(r) {\n    return Math.max(e, Math.min(t, r));\n  };\n}\nfunction MT(e, t, n) {\n  var r = e[0], i = e[1], s = t[0], a = t[1];\n  return i < r ? (r = Al(i, r), s = n(a, s)) : (r = Al(r, i), s = n(s, a)), function(o) {\n    return s(r(o));\n  };\n}\nfunction CT(e, t, n) {\n  var r = Math.min(e.length, t.length) - 1, i = new Array(r), s = new Array(r), a = -1;\n  for (e[r] < e[0] && (e = e.slice().reverse(), t = t.slice().reverse()); ++a < r; )\n    i[a] = Al(e[a], e[a + 1]), s[a] = n(t[a], t[a + 1]);\n  return function(o) {\n    var l = Ac(e, o, 1, r) - 1;\n    return s[l](i[l](o));\n  };\n}\nfunction Vc(e, t) {\n  return t.domain(e.domain()).range(e.range()).interpolate(e.interpolate()).clamp(e.clamp()).unknown(e.unknown());\n}\nfunction Tm() {\n  var e = kh, t = kh, n = fs, r, i, s, a = Ir, o, l, c;\n  function u() {\n    var h = Math.min(e.length, t.length);\n    return a !== Ir && (a = $T(e[0], e[h - 1])), o = h > 2 ? CT : MT, l = c = null, d;\n  }\n  function d(h) {\n    return h == null || isNaN(h = +h) ? s : (l || (l = o(e.map(r), t, n)))(r(a(h)));\n  }\n  return d.invert = function(h) {\n    return a(i((c || (c = o(t, e.map(r), xe)))(h)));\n  }, d.domain = function(h) {\n    return arguments.length ? (e = Array.from(h, wT), u()) : e.slice();\n  }, d.range = function(h) {\n    return arguments.length ? (t = Array.from(h), u()) : t.slice();\n  }, d.rangeRound = function(h) {\n    return t = Array.from(h), n = hm, u();\n  }, d.clamp = function(h) {\n    return arguments.length ? (a = h ? !0 : Ir, u()) : a !== Ir;\n  }, d.interpolate = function(h) {\n    return arguments.length ? (n = h, u()) : n;\n  }, d.unknown = function(h) {\n    return arguments.length ? (s = h, d) : s;\n  }, function(h, p) {\n    return r = h, i = p, u();\n  };\n}\nfunction wm() {\n  return Tm()(Ir, Ir);\n}\nfunction AT(e, t, n, r) {\n  var i = El(e, t, n), s;\n  switch (r = ts(r ?? ",f"), r.type) {\n    case "s": {\n      var a = Math.max(Math.abs(e), Math.abs(t));\n      return r.precision == null && !isNaN(s = OT(i, a)) && (r.precision = s), Sm(r, a);\n    }\n    case "":\n    case "e":\n    case "g":\n    case "p":\n    case "r": {\n      r.precision == null && !isNaN(s = ST(i, Math.max(Math.abs(e), Math.abs(t)))) && (r.precision = s - (r.type === "e"));\n      break;\n    }\n    case "f":\n    case "%": {\n      r.precision == null && !isNaN(s = ET(i)) && (r.precision = s - (r.type === "%") * 2);\n      break;\n    }\n  }\n  return Hc(r);\n}\nfunction $m(e) {\n  var t = e.domain;\n  return e.ticks = function(n) {\n    var r = t();\n    return ca(r[0], r[r.length - 1], n ?? 10);\n  }, e.tickFormat = function(n, r) {\n    var i = t();\n    return AT(i[0], i[i.length - 1], n ?? 10, r);\n  }, e.nice = function(n) {\n    n == null && (n = 10);\n    var r = t(), i = 0, s = r.length - 1, a = r[i], o = r[s], l, c, u = 10;\n    for (o < a && (c = a, a = o, o = c, c = i, i = s, s = c); u-- > 0; ) {\n      if (c = Yr(a, o, n), c === l)\n        return r[i] = a, r[s] = o, t(r);\n      if (c > 0)\n        a = Math.floor(a / c) * c, o = Math.ceil(o / c) * c;\n      else if (c < 0)\n        a = Math.ceil(a * c) / c, o = Math.floor(o * c) / c;\n      else\n        break;\n      l = c;\n    }\n    return e;\n  }, e;\n}\nfunction Fe() {\n  var e = wm();\n  return e.copy = function() {\n    return Vc(e, Fe());\n  }, ii.apply(e, arguments), $m(e);\n}\nfunction Gc() {\n  var e = 0, t = 1, n = 1, r = [0.5], i = [0, 1], s;\n  function a(l) {\n    return l != null && l <= l ? i[Ac(r, l, 0, n)] : s;\n  }\n  function o() {\n    var l = -1;\n    for (r = new Array(n); ++l < n; ) r[l] = ((l + 1) * t - (l - n) * e) / (n + 1);\n    return a;\n  }\n  return a.domain = function(l) {\n    return arguments.length ? ([e, t] = l, e = +e, t = +t, o()) : [e, t];\n  }, a.range = function(l) {\n    return arguments.length ? (n = (i = Array.from(l)).length - 1, o()) : i.slice();\n  }, a.invertExtent = function(l) {\n    var c = i.indexOf(l);\n    return c < 0 ? [NaN, NaN] : c < 1 ? [e, r[0]] : c >= n ? [r[n - 1], t] : [r[c - 1], r[c]];\n  }, a.unknown = function(l) {\n    return arguments.length && (s = l), a;\n  }, a.thresholds = function() {\n    return r.slice();\n  }, a.copy = function() {\n    return Gc().domain([e, t]).range(i).unknown(s);\n  }, ii.apply($m(a), arguments);\n}\nfunction $i(e, t, n) {\n  this.k = e, this.x = t, this.y = n;\n}\n$i.prototype = {\n  constructor: $i,\n  scale: function(e) {\n    return e === 1 ? this : new $i(this.k * e, this.x, this.y);\n  },\n  translate: function(e, t) {\n    return e === 0 & t === 0 ? this : new $i(this.k, this.x + this.k * e, this.y + this.k * t);\n  },\n  apply: function(e) {\n    return [e[0] * this.k + this.x, e[1] * this.k + this.y];\n  },\n  applyX: function(e) {\n    return e * this.k + this.x;\n  },\n  applyY: function(e) {\n    return e * this.k + this.y;\n  },\n  invert: function(e) {\n    return [(e[0] - this.x) / this.k, (e[1] - this.y) / this.k];\n  },\n  invertX: function(e) {\n    return (e - this.x) / this.k;\n  },\n  invertY: function(e) {\n    return (e - this.y) / this.k;\n  },\n  rescaleX: function(e) {\n    return e.copy().domain(e.range().map(this.invertX, this).map(e.invert, e));\n  },\n  rescaleY: function(e) {\n    return e.copy().domain(e.range().map(this.invertY, this).map(e.invert, e));\n  },\n  toString: function() {\n    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";\n  }\n};\n$i.prototype;\nconst ue = "cds", yn = {\n  opacity: {\n    unselected: 0.05,\n    selected: 0.4\n  }\n}, Pn = {\n  ticks: {\n    number: 7,\n    verticalSpaceRatio: 2.5,\n    horizontalSpaceRatio: 3.5\n  },\n  ratio: {\n    reference: "value",\n    compareTo: "marker"\n  },\n  paddingRatio: 0.1,\n  hover: {\n    rectanglePadding: 4\n  }\n}, Nr = {\n  duration: 1e3,\n  ease: Em,\n  zoomLevel: 3\n}, Cr = {\n  circles: {\n    fillOpacity: 0.3,\n    hover: {\n      stroke: "#FFF"\n    }\n  },\n  padding: {\n    mainGroup: 4,\n    children: 2\n  },\n  depth: 2\n}, Mm = {\n  pairingOptions: {\n    "1-color": 4,\n    "2-color": 5,\n    "3-color": 5,\n    "4-color": 3,\n    "5-color": 2,\n    "14-color": 1\n  }\n}, Te = {\n  circle: {\n    radius: 4,\n    opacity: {\n      hovered: 1,\n      default: 0.3\n    }\n  },\n  box: {\n    opacity: {\n      hovered: 0.5,\n      default: 0.3\n    }\n  },\n  strokeWidth: {\n    default: 1,\n    thicker: 2\n  }\n}, LT = {\n  defaultBins: 10\n}, It = {\n  items: {\n    status: {\n      ACTIVE: 1,\n      DISABLED: 0\n    },\n    horizontalSpace: 12,\n    verticalSpace: 24,\n    textYOffset: 8,\n    spaceAfter: 4\n  },\n  checkbox: {\n    radius: 6.5\n  },\n  radius: {\n    iconData: [\n      { cx: 7, cy: 7, r: 6.5 },\n      { cx: 7, cy: 10, r: 3.5 }\n    ],\n    fill: null,\n    stroke: "#8c8c8c"\n  },\n  line: {\n    yPosition: 6,\n    width: 24,\n    strokeWidth: 1.4,\n    fill: null,\n    stroke: "#999999"\n  },\n  area: {\n    width: 24,\n    height: 14,\n    fill: "#6f6f6f",\n    stroke: null\n  },\n  size: {\n    iconData: [\n      { width: 23, height: 12 },\n      { width: 13, height: 6 }\n    ],\n    fill: null,\n    stroke: "#8D8D8D"\n  },\n  quartile: {\n    iconData: [\n      { x: 0, y: 0, width: 24, height: 13 },\n      { x: 11, y: 4, width: 1, height: 4 }\n    ]\n  },\n  zoom: {\n    iconData: [{ x: 0, y: 0, width: 12, height: 12 }],\n    color: "#8D8D8D"\n  },\n  color: {\n    barWidth: 300,\n    barHeight: 8,\n    axisYTranslation: 10\n  }\n}, vn = {\n  opacity: {\n    unselected: 0.3,\n    selected: 1\n  },\n  weight: {\n    selected: 2,\n    unselected: 1\n  }\n}, Zt = {\n  statusBar: {\n    paddingRight: 5\n  },\n  status: {\n    indicatorSize: 16,\n    paddingLeft: 15\n  },\n  total: {\n    paddingLeft: 36,\n    paddingRight: 24\n  },\n  height: {\n    default: 8,\n    proportional: 16\n  },\n  dividerWidth: 2\n}, Mt = {\n  radiusOffset: -15,\n  innerRadius: 2,\n  padAngle: 7e-3,\n  hoverArc: {\n    outerRadiusOffset: 3\n  },\n  xOffset: 30,\n  yOffset: 20,\n  yOffsetCallout: 10,\n  callout: {\n    minSliceDegree: 5,\n    offsetX: 15,\n    offsetY: 12,\n    horizontalLineLength: 8,\n    textMargin: 2\n  }\n}, Wn = {\n  opacity: {\n    unselected: 0.1,\n    selected: 0.3\n  },\n  xLabelPadding: 10,\n  yLabelPadding: 8,\n  yTicksNumber: 4,\n  minRange: 10,\n  xAxisRectHeight: 50,\n  dotsRadius: 5\n}, Pe = {\n  nodeWidth: 4,\n  minNodePadding: 24,\n  opacity: {\n    unfocus: 0.3,\n    default: 0.8,\n    selected: 1\n  }\n}, Dh = {\n  minCellDividerDimension: 16\n}, Rh = {\n  default: {\n    size: 24\n  }\n}, Ih = {\n  defaultOffset: 4,\n  horizontalOffset: 10\n}, Nh = {\n  default: {\n    duration: 300\n  },\n  pie_slice_mouseover: {\n    duration: 100\n  },\n  pie_slice_mouseout: {\n    duration: 100\n  },\n  pie_chart_titles: {\n    duration: 375\n  },\n  graph_element_mouseover_fill_update: {\n    duration: 100\n  },\n  graph_element_mouseout_fill_update: {\n    duration: 100\n  }\n}, ye = {\n  height: {\n    [Ke.GRAPH_VIEW]: 32,\n    [Ke.SLIDER_VIEW]: 10\n  },\n  spacerHeight: 8,\n  handleWidth: 5,\n  handleBarWidth: 1,\n  handleBarHeight: 12\n}, kT = [\n  {\n    type: Gt.RADIUS,\n    name: "Radius"\n  },\n  {\n    type: Gt.AREA,\n    name: "Poor area"\n  },\n  {\n    type: Gt.AREA,\n    name: "Satisfactory area"\n  },\n  {\n    type: Gt.AREA,\n    name: "Great area"\n  },\n  {\n    type: Gt.QUARTILE,\n    name: "Quartiles"\n  }\n], Pr = {\n  type: Ve.END_LINE,\n  threshold: 16,\n  numCharacter: 14\n}, DT = {\n  code: typeof navigator < "u" && (navigator == null ? void 0 : navigator.language) || "en-US",\n  // read from browser\'s navigator.language\n  number: (e, t = (navigator == null ? void 0 : navigator.language) || "en-US") => {\n    var n;\n    return (n = e == null ? void 0 : e.toLocaleString) == null ? void 0 : n.call(e, t);\n  },\n  // based on code property if specified\n  date: (e, t = (navigator == null ? void 0 : navigator.language) || "en-US", n = {}, r = null) => r || e.toLocaleDateString(t, n),\n  // based on code property if specified\n  time: (e, t = (navigator == null ? void 0 : navigator.language) || "en-US", n = {}, r = null) => r || e.toLocaleTimeString(t, n),\n  // based on code property if specified\n  optionsObject: {\n    "15seconds": {\n      primary: {\n        "MMM d, pp": {\n          month: "short",\n          day: "numeric",\n          hour: "numeric",\n          minute: "2-digit",\n          second: "2-digit",\n          hourCycle: "h12"\n        },\n        "MMM d, h:mm:ss.SSS a": {\n          month: "short",\n          day: "numeric",\n          hour: "numeric",\n          minute: "2-digit",\n          fractionalSecondDigits: 3,\n          hourCycle: "h12"\n        }\n      },\n      secondary: {\n        pp: {\n          hour: "numeric",\n          minute: "2-digit",\n          second: "2-digit",\n          hourCycle: "h12"\n        },\n        "h:mm:ss.SSS a": {\n          hour: "numeric",\n          minute: "2-digit",\n          fractionalSecondDigits: 3,\n          hourCycle: "h12"\n        }\n      },\n      type: "time"\n    },\n    minute: {\n      primary: {\n        "MMM d, p": {\n          month: "short",\n          day: "numeric",\n          hour: "numeric",\n          minute: "2-digit",\n          hourCycle: "h12"\n        }\n      },\n      secondary: {\n        p: {\n          hour: "numeric",\n          minute: "2-digit",\n          hourCycle: "h12"\n        }\n      },\n      type: "time"\n    },\n    "30minutes": {\n      primary: {\n        "MMM d, p": {\n          month: "short",\n          day: "numeric",\n          hour: "numeric",\n          minute: "2-digit",\n          hourCycle: "h12"\n        }\n      },\n      secondary: {\n        p: {\n          hour: "numeric",\n          minute: "2-digit",\n          hourCycle: "h12"\n        }\n      },\n      type: "time"\n    },\n    hourly: {\n      primary: {\n        "MMM d, hh a": {\n          month: "short",\n          day: "numeric",\n          hour: "2-digit",\n          hourCycle: "h12"\n        }\n      },\n      secondary: {\n        "hh a": {\n          hour: "2-digit",\n          hourCycle: "h12"\n        }\n      },\n      type: "time"\n    },\n    daily: {\n      primary: {\n        "MMM d": {\n          month: "short",\n          day: "numeric"\n        }\n      },\n      secondary: {\n        d: {\n          day: "numeric"\n        }\n      },\n      type: "date"\n    },\n    weekly: {\n      primary: {\n        "eee, MMM d": {\n          weekday: "short",\n          month: "short",\n          day: "numeric"\n        }\n      },\n      secondary: {\n        eee: {\n          weekday: "short"\n        }\n      },\n      type: "date"\n    },\n    monthly: {\n      primary: {\n        "MMM yyyy": {\n          month: "short",\n          year: "numeric"\n        }\n      },\n      secondary: {\n        MMM: {\n          month: "short"\n        }\n      },\n      type: "date"\n    },\n    quarterly: {\n      primary: {},\n      secondary: {},\n      type: "date"\n    },\n    yearly: {\n      primary: {\n        yyyy: {\n          year: "numeric"\n        }\n      },\n      secondary: {\n        yyyy: {\n          year: "numeric"\n        }\n      },\n      type: "date"\n    }\n  },\n  translations: {\n    group: "Group",\n    total: "Total",\n    meter: {\n      title: ""\n      //default is emply string as meter title is dataset label\n    },\n    tabularRep: {\n      title: "Tabular representation",\n      downloadAsCSV: "Download as CSV"\n    },\n    toolbar: {\n      exportAsCSV: "Export to CSV",\n      exportAsJPG: "Export to JPG",\n      exportAsPNG: "Export to PNG",\n      zoomIn: "Zoom in",\n      zoomOut: "Zoom out",\n      resetZoom: "Reset zoom",\n      moreOptions: "More options",\n      makeFullScreen: "Make fullscreen",\n      exitFullScreen: "Exit fullscreen",\n      showAsTable: "Show as table"\n    }\n  }\n}, RT = {\n  enabled: !0,\n  position: Ni.BOTTOM,\n  clickable: !0,\n  truncation: Pr,\n  alignment: jt.LEFT,\n  order: null,\n  additionalItems: []\n}, IT = {\n  x: {\n    // set enable to false will not draw grid and stroke of grid backdrop\n    enabled: !0,\n    numberOfTicks: 15,\n    alignWithAxisTicks: !1\n  },\n  y: {\n    // set enable to false will not draw grid and stroke of grid backdrop\n    enabled: !0,\n    numberOfTicks: 5,\n    alignWithAxisTicks: !1\n  }\n}, NT = {\n  // enable or disable ruler\n  enabled: !0\n}, Cm = {\n  enabled: !0,\n  showTotal: !0,\n  truncation: Pr,\n  groupLabel: "Group"\n}, Am = {\n  top: {\n    visible: !0,\n    includeZero: !0,\n    truncation: Pr\n  },\n  bottom: {\n    visible: !0,\n    includeZero: !0,\n    truncation: Pr\n  },\n  left: {\n    visible: !0,\n    includeZero: !0,\n    truncation: Pr\n  },\n  right: {\n    visible: !0,\n    includeZero: !0,\n    truncation: Pr\n  }\n}, io = {\n  addSpaceOnEdges: 1,\n  showDayName: !1,\n  localeObject: df,\n  timeIntervalFormats: {\n    "15seconds": { primary: "MMM d, pp", secondary: "pp" },\n    minute: { primary: "MMM d, p", secondary: "p" },\n    "30minutes": { primary: "MMM d, p", secondary: "p" },\n    hourly: { primary: "MMM d, hh a", secondary: "hh a" },\n    daily: { primary: "MMM d", secondary: "d" },\n    weekly: { primary: "eee, MMM d", secondary: "eee" },\n    monthly: { primary: "MMM yyyy", secondary: "MMM" },\n    quarterly: { primary: "QQQ \'\'yy", secondary: "QQQ" },\n    yearly: { primary: "yyyy", secondary: "yyyy" }\n  }\n};\nlet Lm = !1;\ntry {\n  Lm = typeof document < "u" && (document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled);\n} catch (e) {\n  console.warn("Fullscreen capabilities check failed: ", e.message);\n}\nconst re = {\n  width: null,\n  height: null,\n  resizable: !0,\n  theme: of.WHITE,\n  tooltip: Cm,\n  legend: RT,\n  locale: DT,\n  style: {\n    prefix: "cc"\n  },\n  data: {\n    groupMapsTo: "group",\n    loading: !1,\n    selectedGroups: []\n  },\n  color: {\n    scale: null,\n    pairing: {\n      numberOfVariants: null,\n      option: 1\n    },\n    gradient: {\n      enabled: !1\n    }\n  },\n  toolbar: {\n    enabled: !0,\n    numberOfIcons: 3,\n    controls: [\n      {\n        type: _t.SHOW_AS_DATATABLE\n      },\n      ...Lm ? [\n        {\n          type: _t.MAKE_FULLSCREEN\n        }\n      ] : [],\n      {\n        type: _t.EXPORT_CSV\n      },\n      {\n        type: _t.EXPORT_PNG\n      },\n      {\n        type: _t.EXPORT_JPG\n      }\n    ]\n  }\n}, km = at({}, re, {\n  thematic: {\n    projection: gn.geoNaturalEarth1\n  }\n}), ms = at({}, re, {\n  axes: Am,\n  timeScale: io,\n  grid: IT,\n  ruler: NT,\n  zoomBar: {\n    zoomRatio: 0.4,\n    minZoomRatio: 0.01,\n    top: {\n      enabled: !1,\n      type: Ke.GRAPH_VIEW\n    }\n  }\n}), sr = at({}, ms, {\n  bars: {\n    maxWidth: 16,\n    spacingFactor: 0.25\n  },\n  timeScale: at(io, {\n    addSpaceOnEdges: 1\n  })\n}), PT = at({}, sr, {}), UT = at({}, sr, {}), BT = at({}, sr, {\n  bars: at({}, sr.bars, {\n    dividerSize: 1.5\n  })\n}), HT = at({}, sr, {}), zc = at({}, ms, {\n  points: {\n    // default point radius to 4\n    radius: 4,\n    fillOpacity: 0.3,\n    filled: !0,\n    enabled: !0\n  }\n}), VT = zc, Dm = at({}, zc, {\n  points: {\n    // default point radius to 3\n    radius: 3,\n    filled: !1,\n    enabled: !0\n  }\n}), Rm = at({}, Dm, {\n  timeScale: at(io, {\n    addSpaceOnEdges: 0\n  })\n}), GT = Rm, zT = at({}, ms, {\n  bubble: {\n    radiusMapsTo: "radius",\n    radiusLabel: "Radius",\n    radiusRange: (e) => {\n      const t = Math.min(e.width, e.height);\n      return [t * 3 / 400, t * 25 / 400];\n    },\n    fillOpacity: 0.2,\n    enabled: !0\n  },\n  points: {\n    filled: !0\n  },\n  legend: {\n    additionalItems: [\n      {\n        type: Gt.RADIUS,\n        name: "Radius"\n      }\n    ]\n  }\n}), FT = at({}, ms, {\n  bullet: {\n    performanceAreaTitles: ["Poor", "Satisfactory", "Great"]\n  },\n  grid: {\n    x: {\n      enabled: !1\n    },\n    y: {\n      enabled: !1\n    }\n  },\n  legend: {\n    additionalItems: [\n      {\n        type: Gt.AREA,\n        name: "Poor area"\n      },\n      {\n        type: Gt.AREA,\n        name: "Satisfactory area"\n      },\n      {\n        type: Gt.AREA,\n        name: "Great area"\n      },\n      {\n        type: Gt.QUARTILE,\n        name: "Quartiles"\n      }\n    ]\n  }\n}), jT = at({}, sr, {\n  bars: {\n    dividerSize: 1.5\n  },\n  timeScale: at(io, {\n    addSpaceOnEdges: 0\n  })\n}), WT = at({}, re, {\n  tooltip: at({}, Cm, {\n    wordLabel: "Word",\n    valueLabel: "Value"\n  }),\n  wordCloud: {\n    fontSizeMapsTo: "value",\n    fontSizeRange: (e) => {\n      const t = Math.min(e.width, e.height);\n      return [t * 20 / 400, t * 75 / 400];\n    },\n    wordMapsTo: "word"\n  }\n}), Im = at({}, re, {\n  pie: {\n    labels: {\n      formatter: null,\n      enabled: !0\n    },\n    alignment: jt.LEFT,\n    sortFunction: null,\n    valueMapsTo: "value"\n  }\n}), qT = at({}, re, {\n  legend: {\n    enabled: !1\n  },\n  gauge: {\n    type: Rr.SEMI,\n    arcWidth: 16,\n    deltaArrow: {\n      size: (e) => e / 8,\n      enabled: !0\n    },\n    showPercentageSymbol: !0,\n    status: null,\n    numberSpacing: 10,\n    deltaFontSize: (e) => e / 8,\n    valueFontSize: (e) => e / 2.5,\n    alignment: jt.LEFT\n  }\n}), YT = at({}, Im, {\n  donut: {\n    center: {\n      numberFontSize: (e) => `${Math.min(e / 100 * 24, 24)}px`,\n      titleFontSize: (e) => `${Math.min(e / 100 * 15, 15)}px`,\n      titleYPosition: (e) => Math.min(e / 80 * 20, 20)\n    },\n    alignment: jt.LEFT\n  }\n}), Nm = at({}, re, {\n  legend: {\n    enabled: !1,\n    clickable: !1\n  },\n  meter: {\n    showLabels: !0,\n    proportional: null,\n    statusBar: {\n      percentageIndicator: {\n        enabled: !0\n      }\n    }\n  }\n}), XT = at({}, Nm, {\n  legend: {\n    enabled: !0\n  }\n}), ZT = at({}, re, {\n  radar: {\n    axes: {\n      angle: "key",\n      value: "value"\n    },\n    alignment: jt.LEFT\n  },\n  tooltip: {\n    gridline: {\n      enabled: !0\n    }\n  }\n}), KT = at({}, sr, {\n  comboChartTypes: []\n}), QT = at(\n  {\n    tree: {\n      type: pc.TREE\n    }\n  },\n  re,\n  {}\n), JT = at({}, re, {\n  data: at(re.data, {\n    groupMapsTo: "name"\n  })\n}), tw = at({}, re, Cr, {\n  data: at(re.data, {\n    groupMapsTo: "name"\n  })\n}), ew = at({}, re, {\n  alluvial: {\n    data: at(re.data, {\n      groupMapsTo: "source"\n    }),\n    nodeAlignment: jt.CENTER,\n    nodePadding: 24,\n    monochrome: !1,\n    nodes: []\n  }\n}), nw = at({}, re, {\n  axes: Am,\n  heatmap: {\n    divider: {\n      state: Pi.AUTO\n    },\n    colorLegend: {\n      type: "linear"\n    }\n  }\n}), rw = at({}, km, {\n  choropleth: {\n    colorLegend: {\n      type: "linear"\n    }\n  }\n}), wt = {\n  alluvialChart: ew,\n  areaChart: Rm,\n  axisChart: ms,\n  boxplotChart: HT,\n  bubbleChart: zT,\n  bulletChart: FT,\n  chart: re,\n  circlePackChart: tw,\n  choroplethChart: rw,\n  comboChart: KT,\n  donutChart: YT,\n  gaugeChart: qT,\n  groupedBarChart: UT,\n  heatmapChart: nw,\n  histogramChart: jT,\n  lineChart: Dm,\n  lollipopChart: VT,\n  meterChart: Nm,\n  pieChart: Im,\n  proportionalMeterChart: XT,\n  radarChart: ZT,\n  scatterChart: zc,\n  simpleBarChart: PT,\n  stackedAreaChart: GT,\n  stackedBarChart: BT,\n  thematicChart: km,\n  treeChart: QT,\n  treemapChart: JT,\n  wordCloudChart: WT\n};\nfunction iw(e, t, n) {\n  let r = null;\n  return function(...i) {\n    const s = this;\n    s.mousePosition = rr(i[0], n), clearTimeout(r), r = setTimeout(function() {\n      e.apply(s, i);\n    }, t);\n  };\n}\nfunction Rt(e, t) {\n  var n;\n  const r = Sn(e), i = Object.keys(t.axes || {});\n  (n = t == null ? void 0 : t.toolbar) != null && n.controls && delete r.toolbar.controls, i.length === 0 && delete r.axes;\n  for (const s in r.axes)\n    if (i.includes(s)) {\n      const a = t.axes[s];\n      if ((a.primary || a.secondary) && console.warn(\n        "`primary` & `secondary` are no longer needed for axis configurations. Read more here https://charts.carbondesignsystem.com/"\n      ), a.mapsTo == null) {\n        const l = a.scaleType;\n        l == null ? a.mapsTo = "value" : l === et.TIME ? a.mapsTo = "date" : l === et.LABELS && (a.mapsTo = "key");\n      }\n    } else\n      delete r.axes[s];\n  return Fc(r, t), at(r, t);\n}\nfunction fn(e) {\n  if (!e)\n    return;\n  const t = /translate\\([0-9]+\\.?[0-9]*,[0-9]+\\.?[0-9]*\\)/, n = e.getAttribute("transform").match(t);\n  if (!n)\n    return null;\n  if (n[0]) {\n    const r = n[0].replace(/translate\\(/, "").replace(/\\)/, "").split(",");\n    return {\n      tx: r[0],\n      ty: r[1]\n    };\n  }\n  return null;\n}\nfunction Mi(e) {\n  const t = /\\(([^)]+)\\)/.exec(e);\n  if (t && t.length > 1) {\n    const n = t[1].split(",");\n    if (n.length > 1)\n      return {\n        x: parseFloat(n[0]),\n        y: parseFloat(n[1])\n      };\n  }\n  return { x: 0, y: 0 };\n}\nfunction Lo(e, t, n = "value", r = !1) {\n  const i = e / t.reduce((s, a) => s + a[n], 0) * 100;\n  return r ? i : i % 1 !== 0 ? parseFloat(i.toFixed(1)) : i;\n}\nfunction es(e, t, n) {\n  if (n > e.length)\n    return e;\n  if (t === Ve.MID_LINE)\n    return e.substr(0, n / 2) + "..." + e.substr(-n / 2);\n  if (t === Ve.FRONT_LINE)\n    return "..." + e.substr(-n);\n  if (t === Ve.END_LINE)\n    return e.substr(0, n) + "...";\n}\nfunction Fc(e, t) {\n  const n = y(e, "legend", "additionalItems"), r = y(t, "legend", "additionalItems");\n  if (n && r) {\n    const i = r.map((o) => o.type), s = n.map((o) => o.type), a = kT.filter(\n      (o) => s.includes(o.type) && !i.includes(o.type)\n    );\n    e.legend.additionalItems = a, t.legend.additionalItems = B_(\n      a,\n      r,\n      "name"\n    );\n  }\n}\nconst y = (e, ...t) => {\n  let n = e;\n  if (n) {\n    for (const r of t)\n      if (n[r] !== null && n[r] !== void 0)\n        n = n[r];\n      else\n        return null;\n    return n;\n  }\n  return null;\n}, Pm = (e, t) => t === Ft.HORIZONTAL ? {\n  y0: e.x0,\n  y1: e.x1,\n  x0: e.y0,\n  x1: e.y1\n} : e, ae = (e, t) => {\n  const { x0: n, x1: r, y0: i, y1: s } = Pm(e, t);\n  return `M${n},${i}L${n},${s}L${r},${s}L${r},${i}L${n},${i}`;\n};\nfunction En(e, t, n) {\n  return n === Ft.VERTICAL ? [e, t] : [t, e];\n}\nfunction Ph(e) {\n  const t = Ht(e), n = new Date(\n    Date.UTC(\n      t.getFullYear(),\n      t.getMonth(),\n      t.getDate(),\n      t.getHours(),\n      t.getMinutes(),\n      t.getSeconds(),\n      t.getMilliseconds()\n    )\n  );\n  return n.setUTCFullYear(t.getFullYear()), +e - +n;\n}\nfunction Uh(e, t) {\n  const n = Ht(e, void 0);\n  return n.setHours(0, 0, 0, 0), n;\n}\nfunction Um(e, t, n) {\n  const [r, i] = ur(\n    void 0,\n    e,\n    t\n  ), s = Uh(r), a = Uh(i), o = +s - Ph(s), l = +a - Ph(a);\n  return Math.round((o - l) / g0);\n}\nfunction sw(e, t) {\n  const n = Ht(e, void 0);\n  return n.setFullYear(n.getFullYear(), 0, 1), n.setHours(0, 0, 0, 0), n;\n}\nfunction aw(e, t) {\n  const n = Ht(e, void 0);\n  return Um(n, sw(n)) + 1;\n}\nfunction ya(e, t) {\n  return Wi(e, { ...t, weekStartsOn: 1 });\n}\nfunction Bm(e, t) {\n  const n = Ht(e, void 0), r = n.getFullYear(), i = Le(n, 0);\n  i.setFullYear(r + 1, 0, 4), i.setHours(0, 0, 0, 0);\n  const s = ya(i), a = Le(n, 0);\n  a.setFullYear(r, 0, 4), a.setHours(0, 0, 0, 0);\n  const o = ya(a);\n  return n.getTime() >= s.getTime() ? r + 1 : n.getTime() >= o.getTime() ? r : r - 1;\n}\nfunction ow(e, t) {\n  const n = Bm(e), r = Le(e, 0);\n  return r.setFullYear(n, 0, 4), r.setHours(0, 0, 0, 0), ya(r);\n}\nfunction lw(e, t) {\n  const n = Ht(e, void 0), r = +ya(n) - +ow(n);\n  return Math.round(r / cf) + 1;\n}\nfunction Hm(e, t) {\n  var n, r, i, s;\n  const a = Ht(e, t == null ? void 0 : t.in), o = a.getFullYear(), l = za(), c = (t == null ? void 0 : t.firstWeekContainsDate) ?? ((r = (n = t == null ? void 0 : t.locale) == null ? void 0 : n.options) == null ? void 0 : r.firstWeekContainsDate) ?? l.firstWeekContainsDate ?? ((s = (i = l.locale) == null ? void 0 : i.options) == null ? void 0 : s.firstWeekContainsDate) ?? 1, u = Le((t == null ? void 0 : t.in) || e, 0);\n  u.setFullYear(o + 1, 0, c), u.setHours(0, 0, 0, 0);\n  const d = Wi(u, t), h = Le((t == null ? void 0 : t.in) || e, 0);\n  h.setFullYear(o, 0, c), h.setHours(0, 0, 0, 0);\n  const p = Wi(h, t);\n  return +a >= +d ? o + 1 : +a >= +p ? o : o - 1;\n}\nfunction cw(e, t) {\n  var n, r, i, s;\n  const a = za(), o = (t == null ? void 0 : t.firstWeekContainsDate) ?? ((r = (n = t == null ? void 0 : t.locale) == null ? void 0 : n.options) == null ? void 0 : r.firstWeekContainsDate) ?? a.firstWeekContainsDate ?? ((s = (i = a.locale) == null ? void 0 : i.options) == null ? void 0 : s.firstWeekContainsDate) ?? 1, l = Hm(e, t), c = Le((t == null ? void 0 : t.in) || e, 0);\n  return c.setFullYear(l, 0, o), c.setHours(0, 0, 0, 0), Wi(c, t);\n}\nfunction uw(e, t) {\n  const n = Ht(e, t == null ? void 0 : t.in), r = +Wi(n, t) - +cw(n, t);\n  return Math.round(r / cf) + 1;\n}\nfunction Et(e, t) {\n  const n = e < 0 ? "-" : "", r = Math.abs(e).toString().padStart(t, "0");\n  return n + r;\n}\nconst Rn = {\n  // Year\n  y(e, t) {\n    const n = e.getFullYear(), r = n > 0 ? n : 1 - n;\n    return Et(t === "yy" ? r % 100 : r, t.length);\n  },\n  // Month\n  M(e, t) {\n    const n = e.getMonth();\n    return t === "M" ? String(n + 1) : Et(n + 1, 2);\n  },\n  // Day of the month\n  d(e, t) {\n    return Et(e.getDate(), t.length);\n  },\n  // AM or PM\n  a(e, t) {\n    const n = e.getHours() / 12 >= 1 ? "pm" : "am";\n    switch (t) {\n      case "a":\n      case "aa":\n        return n.toUpperCase();\n      case "aaa":\n        return n;\n      case "aaaaa":\n        return n[0];\n      case "aaaa":\n      default:\n        return n === "am" ? "a.m." : "p.m.";\n    }\n  },\n  // Hour [1-12]\n  h(e, t) {\n    return Et(e.getHours() % 12 || 12, t.length);\n  },\n  // Hour [0-23]\n  H(e, t) {\n    return Et(e.getHours(), t.length);\n  },\n  // Minute\n  m(e, t) {\n    return Et(e.getMinutes(), t.length);\n  },\n  // Second\n  s(e, t) {\n    return Et(e.getSeconds(), t.length);\n  },\n  // Fraction of second\n  S(e, t) {\n    const n = t.length, r = e.getMilliseconds(), i = Math.trunc(\n      r * Math.pow(10, n - 3)\n    );\n    return Et(i, t.length);\n  }\n}, Or = {\n  midnight: "midnight",\n  noon: "noon",\n  morning: "morning",\n  afternoon: "afternoon",\n  evening: "evening",\n  night: "night"\n}, Bh = {\n  // Era\n  G: function(e, t, n) {\n    const r = e.getFullYear() > 0 ? 1 : 0;\n    switch (t) {\n      // AD, BC\n      case "G":\n      case "GG":\n      case "GGG":\n        return n.era(r, { width: "abbreviated" });\n      // A, B\n      case "GGGGG":\n        return n.era(r, { width: "narrow" });\n      // Anno Domini, Before Christ\n      case "GGGG":\n      default:\n        return n.era(r, { width: "wide" });\n    }\n  },\n  // Year\n  y: function(e, t, n) {\n    if (t === "yo") {\n      const r = e.getFullYear(), i = r > 0 ? r : 1 - r;\n      return n.ordinalNumber(i, { unit: "year" });\n    }\n    return Rn.y(e, t);\n  },\n  // Local week-numbering year\n  Y: function(e, t, n, r) {\n    const i = Hm(e, r), s = i > 0 ? i : 1 - i;\n    if (t === "YY") {\n      const a = s % 100;\n      return Et(a, 2);\n    }\n    return t === "Yo" ? n.ordinalNumber(s, { unit: "year" }) : Et(s, t.length);\n  },\n  // ISO week-numbering year\n  R: function(e, t) {\n    const n = Bm(e);\n    return Et(n, t.length);\n  },\n  // Extended year. This is a single number designating the year of this calendar system.\n  // The main difference between `y` and `u` localizers are B.C. years:\n  // | Year | `y` | `u` |\n  // |------|-----|-----|\n  // | AC 1 |   1 |   1 |\n  // | BC 1 |   1 |   0 |\n  // | BC 2 |   2 |  -1 |\n  // Also `yy` always returns the last two digits of a year,\n  // while `uu` pads single digit years to 2 characters and returns other years unchanged.\n  u: function(e, t) {\n    const n = e.getFullYear();\n    return Et(n, t.length);\n  },\n  // Quarter\n  Q: function(e, t, n) {\n    const r = Math.ceil((e.getMonth() + 1) / 3);\n    switch (t) {\n      // 1, 2, 3, 4\n      case "Q":\n        return String(r);\n      // 01, 02, 03, 04\n      case "QQ":\n        return Et(r, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "Qo":\n        return n.ordinalNumber(r, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "QQQ":\n        return n.quarter(r, {\n          width: "abbreviated",\n          context: "formatting"\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "QQQQQ":\n        return n.quarter(r, {\n          width: "narrow",\n          context: "formatting"\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "QQQQ":\n      default:\n        return n.quarter(r, {\n          width: "wide",\n          context: "formatting"\n        });\n    }\n  },\n  // Stand-alone quarter\n  q: function(e, t, n) {\n    const r = Math.ceil((e.getMonth() + 1) / 3);\n    switch (t) {\n      // 1, 2, 3, 4\n      case "q":\n        return String(r);\n      // 01, 02, 03, 04\n      case "qq":\n        return Et(r, 2);\n      // 1st, 2nd, 3rd, 4th\n      case "qo":\n        return n.ordinalNumber(r, { unit: "quarter" });\n      // Q1, Q2, Q3, Q4\n      case "qqq":\n        return n.quarter(r, {\n          width: "abbreviated",\n          context: "standalone"\n        });\n      // 1, 2, 3, 4 (narrow quarter; could be not numerical)\n      case "qqqqq":\n        return n.quarter(r, {\n          width: "narrow",\n          context: "standalone"\n        });\n      // 1st quarter, 2nd quarter, ...\n      case "qqqq":\n      default:\n        return n.quarter(r, {\n          width: "wide",\n          context: "standalone"\n        });\n    }\n  },\n  // Month\n  M: function(e, t, n) {\n    const r = e.getMonth();\n    switch (t) {\n      case "M":\n      case "MM":\n        return Rn.M(e, t);\n      // 1st, 2nd, ..., 12th\n      case "Mo":\n        return n.ordinalNumber(r + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "MMM":\n        return n.month(r, {\n          width: "abbreviated",\n          context: "formatting"\n        });\n      // J, F, ..., D\n      case "MMMMM":\n        return n.month(r, {\n          width: "narrow",\n          context: "formatting"\n        });\n      // January, February, ..., December\n      case "MMMM":\n      default:\n        return n.month(r, { width: "wide", context: "formatting" });\n    }\n  },\n  // Stand-alone month\n  L: function(e, t, n) {\n    const r = e.getMonth();\n    switch (t) {\n      // 1, 2, ..., 12\n      case "L":\n        return String(r + 1);\n      // 01, 02, ..., 12\n      case "LL":\n        return Et(r + 1, 2);\n      // 1st, 2nd, ..., 12th\n      case "Lo":\n        return n.ordinalNumber(r + 1, { unit: "month" });\n      // Jan, Feb, ..., Dec\n      case "LLL":\n        return n.month(r, {\n          width: "abbreviated",\n          context: "standalone"\n        });\n      // J, F, ..., D\n      case "LLLLL":\n        return n.month(r, {\n          width: "narrow",\n          context: "standalone"\n        });\n      // January, February, ..., December\n      case "LLLL":\n      default:\n        return n.month(r, { width: "wide", context: "standalone" });\n    }\n  },\n  // Local week of year\n  w: function(e, t, n, r) {\n    const i = uw(e, r);\n    return t === "wo" ? n.ordinalNumber(i, { unit: "week" }) : Et(i, t.length);\n  },\n  // ISO week of year\n  I: function(e, t, n) {\n    const r = lw(e);\n    return t === "Io" ? n.ordinalNumber(r, { unit: "week" }) : Et(r, t.length);\n  },\n  // Day of the month\n  d: function(e, t, n) {\n    return t === "do" ? n.ordinalNumber(e.getDate(), { unit: "date" }) : Rn.d(e, t);\n  },\n  // Day of year\n  D: function(e, t, n) {\n    const r = aw(e);\n    return t === "Do" ? n.ordinalNumber(r, { unit: "dayOfYear" }) : Et(r, t.length);\n  },\n  // Day of week\n  E: function(e, t, n) {\n    const r = e.getDay();\n    switch (t) {\n      // Tue\n      case "E":\n      case "EE":\n      case "EEE":\n        return n.day(r, {\n          width: "abbreviated",\n          context: "formatting"\n        });\n      // T\n      case "EEEEE":\n        return n.day(r, {\n          width: "narrow",\n          context: "formatting"\n        });\n      // Tu\n      case "EEEEEE":\n        return n.day(r, {\n          width: "short",\n          context: "formatting"\n        });\n      // Tuesday\n      case "EEEE":\n      default:\n        return n.day(r, {\n          width: "wide",\n          context: "formatting"\n        });\n    }\n  },\n  // Local day of week\n  e: function(e, t, n, r) {\n    const i = e.getDay(), s = (i - r.weekStartsOn + 8) % 7 || 7;\n    switch (t) {\n      // Numerical value (Nth day of week with current locale or weekStartsOn)\n      case "e":\n        return String(s);\n      // Padded numerical value\n      case "ee":\n        return Et(s, 2);\n      // 1st, 2nd, ..., 7th\n      case "eo":\n        return n.ordinalNumber(s, { unit: "day" });\n      case "eee":\n        return n.day(i, {\n          width: "abbreviated",\n          context: "formatting"\n        });\n      // T\n      case "eeeee":\n        return n.day(i, {\n          width: "narrow",\n          context: "formatting"\n        });\n      // Tu\n      case "eeeeee":\n        return n.day(i, {\n          width: "short",\n          context: "formatting"\n        });\n      // Tuesday\n      case "eeee":\n      default:\n        return n.day(i, {\n          width: "wide",\n          context: "formatting"\n        });\n    }\n  },\n  // Stand-alone local day of week\n  c: function(e, t, n, r) {\n    const i = e.getDay(), s = (i - r.weekStartsOn + 8) % 7 || 7;\n    switch (t) {\n      // Numerical value (same as in `e`)\n      case "c":\n        return String(s);\n      // Padded numerical value\n      case "cc":\n        return Et(s, t.length);\n      // 1st, 2nd, ..., 7th\n      case "co":\n        return n.ordinalNumber(s, { unit: "day" });\n      case "ccc":\n        return n.day(i, {\n          width: "abbreviated",\n          context: "standalone"\n        });\n      // T\n      case "ccccc":\n        return n.day(i, {\n          width: "narrow",\n          context: "standalone"\n        });\n      // Tu\n      case "cccccc":\n        return n.day(i, {\n          width: "short",\n          context: "standalone"\n        });\n      // Tuesday\n      case "cccc":\n      default:\n        return n.day(i, {\n          width: "wide",\n          context: "standalone"\n        });\n    }\n  },\n  // ISO day of week\n  i: function(e, t, n) {\n    const r = e.getDay(), i = r === 0 ? 7 : r;\n    switch (t) {\n      // 2\n      case "i":\n        return String(i);\n      // 02\n      case "ii":\n        return Et(i, t.length);\n      // 2nd\n      case "io":\n        return n.ordinalNumber(i, { unit: "day" });\n      // Tue\n      case "iii":\n        return n.day(r, {\n          width: "abbreviated",\n          context: "formatting"\n        });\n      // T\n      case "iiiii":\n        return n.day(r, {\n          width: "narrow",\n          context: "formatting"\n        });\n      // Tu\n      case "iiiiii":\n        return n.day(r, {\n          width: "short",\n          context: "formatting"\n        });\n      // Tuesday\n      case "iiii":\n      default:\n        return n.day(r, {\n          width: "wide",\n          context: "formatting"\n        });\n    }\n  },\n  // AM or PM\n  a: function(e, t, n) {\n    const r = e.getHours() / 12 >= 1 ? "pm" : "am";\n    switch (t) {\n      case "a":\n      case "aa":\n        return n.dayPeriod(r, {\n          width: "abbreviated",\n          context: "formatting"\n        });\n      case "aaa":\n        return n.dayPeriod(r, {\n          width: "abbreviated",\n          context: "formatting"\n        }).toLowerCase();\n      case "aaaaa":\n        return n.dayPeriod(r, {\n          width: "narrow",\n          context: "formatting"\n        });\n      case "aaaa":\n      default:\n        return n.dayPeriod(r, {\n          width: "wide",\n          context: "formatting"\n        });\n    }\n  },\n  // AM, PM, midnight, noon\n  b: function(e, t, n) {\n    const r = e.getHours();\n    let i;\n    switch (r === 12 ? i = Or.noon : r === 0 ? i = Or.midnight : i = r / 12 >= 1 ? "pm" : "am", t) {\n      case "b":\n      case "bb":\n        return n.dayPeriod(i, {\n          width: "abbreviated",\n          context: "formatting"\n        });\n      case "bbb":\n        return n.dayPeriod(i, {\n          width: "abbreviated",\n          context: "formatting"\n        }).toLowerCase();\n      case "bbbbb":\n        return n.dayPeriod(i, {\n          width: "narrow",\n          context: "formatting"\n        });\n      case "bbbb":\n      default:\n        return n.dayPeriod(i, {\n          width: "wide",\n          context: "formatting"\n        });\n    }\n  },\n  // in the morning, in the afternoon, in the evening, at night\n  B: function(e, t, n) {\n    const r = e.getHours();\n    let i;\n    switch (r >= 17 ? i = Or.evening : r >= 12 ? i = Or.afternoon : r >= 4 ? i = Or.morning : i = Or.night, t) {\n      case "B":\n      case "BB":\n      case "BBB":\n        return n.dayPeriod(i, {\n          width: "abbreviated",\n          context: "formatting"\n        });\n      case "BBBBB":\n        return n.dayPeriod(i, {\n          width: "narrow",\n          context: "formatting"\n        });\n      case "BBBB":\n      default:\n        return n.dayPeriod(i, {\n          width: "wide",\n          context: "formatting"\n        });\n    }\n  },\n  // Hour [1-12]\n  h: function(e, t, n) {\n    if (t === "ho") {\n      let r = e.getHours() % 12;\n      return r === 0 && (r = 12), n.ordinalNumber(r, { unit: "hour" });\n    }\n    return Rn.h(e, t);\n  },\n  // Hour [0-23]\n  H: function(e, t, n) {\n    return t === "Ho" ? n.ordinalNumber(e.getHours(), { unit: "hour" }) : Rn.H(e, t);\n  },\n  // Hour [0-11]\n  K: function(e, t, n) {\n    const r = e.getHours() % 12;\n    return t === "Ko" ? n.ordinalNumber(r, { unit: "hour" }) : Et(r, t.length);\n  },\n  // Hour [1-24]\n  k: function(e, t, n) {\n    let r = e.getHours();\n    return r === 0 && (r = 24), t === "ko" ? n.ordinalNumber(r, { unit: "hour" }) : Et(r, t.length);\n  },\n  // Minute\n  m: function(e, t, n) {\n    return t === "mo" ? n.ordinalNumber(e.getMinutes(), { unit: "minute" }) : Rn.m(e, t);\n  },\n  // Second\n  s: function(e, t, n) {\n    return t === "so" ? n.ordinalNumber(e.getSeconds(), { unit: "second" }) : Rn.s(e, t);\n  },\n  // Fraction of second\n  S: function(e, t) {\n    return Rn.S(e, t);\n  },\n  // Timezone (ISO-8601. If offset is 0, output is always `\'Z\'`)\n  X: function(e, t, n) {\n    const r = e.getTimezoneOffset();\n    if (r === 0)\n      return "Z";\n    switch (t) {\n      // Hours and optional minutes\n      case "X":\n        return Vh(r);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XX`\n      case "XXXX":\n      case "XX":\n        return Yn(r);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `XXX`\n      case "XXXXX":\n      case "XXX":\n      // Hours and minutes with `:` delimiter\n      default:\n        return Yn(r, ":");\n    }\n  },\n  // Timezone (ISO-8601. If offset is 0, output is `\'+00:00\'` or equivalent)\n  x: function(e, t, n) {\n    const r = e.getTimezoneOffset();\n    switch (t) {\n      // Hours and optional minutes\n      case "x":\n        return Vh(r);\n      // Hours, minutes and optional seconds without `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xx`\n      case "xxxx":\n      case "xx":\n        return Yn(r);\n      // Hours, minutes and optional seconds with `:` delimiter\n      // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets\n      // so this token always has the same output as `xxx`\n      case "xxxxx":\n      case "xxx":\n      // Hours and minutes with `:` delimiter\n      default:\n        return Yn(r, ":");\n    }\n  },\n  // Timezone (GMT)\n  O: function(e, t, n) {\n    const r = e.getTimezoneOffset();\n    switch (t) {\n      // Short\n      case "O":\n      case "OO":\n      case "OOO":\n        return "GMT" + Hh(r, ":");\n      // Long\n      case "OOOO":\n      default:\n        return "GMT" + Yn(r, ":");\n    }\n  },\n  // Timezone (specific non-location)\n  z: function(e, t, n) {\n    const r = e.getTimezoneOffset();\n    switch (t) {\n      // Short\n      case "z":\n      case "zz":\n      case "zzz":\n        return "GMT" + Hh(r, ":");\n      // Long\n      case "zzzz":\n      default:\n        return "GMT" + Yn(r, ":");\n    }\n  },\n  // Seconds timestamp\n  t: function(e, t, n) {\n    const r = Math.trunc(+e / 1e3);\n    return Et(r, t.length);\n  },\n  // Milliseconds timestamp\n  T: function(e, t, n) {\n    return Et(+e, t.length);\n  }\n};\nfunction Hh(e, t = "") {\n  const n = e > 0 ? "-" : "+", r = Math.abs(e), i = Math.trunc(r / 60), s = r % 60;\n  return s === 0 ? n + String(i) : n + String(i) + t + Et(s, 2);\n}\nfunction Vh(e, t) {\n  return e % 60 === 0 ? (e > 0 ? "-" : "+") + Et(Math.abs(e) / 60, 2) : Yn(e, t);\n}\nfunction Yn(e, t = "") {\n  const n = e > 0 ? "-" : "+", r = Math.abs(e), i = Et(Math.trunc(r / 60), 2), s = Et(r % 60, 2);\n  return n + i + t + s;\n}\nconst Gh = (e, t) => {\n  switch (e) {\n    case "P":\n      return t.date({ width: "short" });\n    case "PP":\n      return t.date({ width: "medium" });\n    case "PPP":\n      return t.date({ width: "long" });\n    case "PPPP":\n    default:\n      return t.date({ width: "full" });\n  }\n}, Vm = (e, t) => {\n  switch (e) {\n    case "p":\n      return t.time({ width: "short" });\n    case "pp":\n      return t.time({ width: "medium" });\n    case "ppp":\n      return t.time({ width: "long" });\n    case "pppp":\n    default:\n      return t.time({ width: "full" });\n  }\n}, hw = (e, t) => {\n  const n = e.match(/(P+)(p+)?/) || [], r = n[1], i = n[2];\n  if (!i)\n    return Gh(e, t);\n  let s;\n  switch (r) {\n    case "P":\n      s = t.dateTime({ width: "short" });\n      break;\n    case "PP":\n      s = t.dateTime({ width: "medium" });\n      break;\n    case "PPP":\n      s = t.dateTime({ width: "long" });\n      break;\n    case "PPPP":\n    default:\n      s = t.dateTime({ width: "full" });\n      break;\n  }\n  return s.replace("{{date}}", Gh(r, t)).replace("{{time}}", Vm(i, t));\n}, dw = {\n  p: Vm,\n  P: hw\n}, pw = /^D+$/, fw = /^Y+$/, mw = ["D", "DD", "YY", "YYYY"];\nfunction gw(e) {\n  return pw.test(e);\n}\nfunction vw(e) {\n  return fw.test(e);\n}\nfunction yw(e, t, n) {\n  const r = xw(e, t, n);\n  if (console.warn(r), mw.includes(e)) throw new RangeError(r);\n}\nfunction xw(e, t, n) {\n  const r = e[0] === "Y" ? "years" : "days of the month";\n  return `Use \\`${e.toLowerCase()}\\` instead of \\`${e}\\` (in \\`${t}\\`) for formatting ${r} to the input \\`${n}\\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;\n}\nfunction bw(e) {\n  return e instanceof Date || typeof e == "object" && Object.prototype.toString.call(e) === "[object Date]";\n}\nfunction _w(e) {\n  return !(!bw(e) && typeof e != "number" || isNaN(+Ht(e)));\n}\nconst Ew = /[yYQqMLwIdDecihHKkms]o|(\\w)\\1*|\'\'|\'(\'\'|[^\'])+(\'|$)|./g, Ow = /P+p+|P+|p+|\'\'|\'(\'\'|[^\'])+(\'|$)|./g, Sw = /^\'([^]*?)\'?$/, Tw = /\'\'/g, ww = /[a-zA-Z]/;\nfunction Ll(e, t, n) {\n  var r, i, s, a, o, l, c, u;\n  const d = za(), h = (n == null ? void 0 : n.locale) ?? d.locale ?? df, p = (n == null ? void 0 : n.firstWeekContainsDate) ?? ((i = (r = n == null ? void 0 : n.locale) == null ? void 0 : r.options) == null ? void 0 : i.firstWeekContainsDate) ?? d.firstWeekContainsDate ?? ((a = (s = d.locale) == null ? void 0 : s.options) == null ? void 0 : a.firstWeekContainsDate) ?? 1, f = (n == null ? void 0 : n.weekStartsOn) ?? ((l = (o = n == null ? void 0 : n.locale) == null ? void 0 : o.options) == null ? void 0 : l.weekStartsOn) ?? d.weekStartsOn ?? ((u = (c = d.locale) == null ? void 0 : c.options) == null ? void 0 : u.weekStartsOn) ?? 0, g = Ht(e, n == null ? void 0 : n.in);\n  if (!_w(g))\n    throw new RangeError("Invalid time value");\n  let m = t.match(Ow).map((x) => {\n    const _ = x[0];\n    if (_ === "p" || _ === "P") {\n      const E = dw[_];\n      return E(x, h.formatLong);\n    }\n    return x;\n  }).join("").match(Ew).map((x) => {\n    if (x === "\'\'")\n      return { isToken: !1, value: "\'" };\n    const _ = x[0];\n    if (_ === "\'")\n      return { isToken: !1, value: $w(x) };\n    if (Bh[_])\n      return { isToken: !0, value: x };\n    if (_.match(ww))\n      throw new RangeError(\n        "Format string contains an unescaped latin alphabet character `" + _ + "`"\n      );\n    return { isToken: !1, value: x };\n  });\n  h.localize.preprocessor && (m = h.localize.preprocessor(g, m));\n  const v = {\n    firstWeekContainsDate: p,\n    weekStartsOn: f,\n    locale: h\n  };\n  return m.map((x) => {\n    if (!x.isToken) return x.value;\n    const _ = x.value;\n    (!(n != null && n.useAdditionalWeekYearTokens) && vw(_) || !(n != null && n.useAdditionalDayOfYearTokens) && gw(_)) && yw(_, t, String(e));\n    const E = Bh[_[0]];\n    return E(g, _, h.localize, v);\n  }).join("");\n}\nfunction $w(e) {\n  const t = e.match(Sw);\n  return t ? t[1].replace(Tw, "\'") : e;\n}\nconst ko = [\n  ["15seconds", 15 * 1e3],\n  ["minute", 60 * 1e3],\n  ["30minutes", 30 * 60 * 1e3],\n  ["hourly", 60 * 60 * 1e3],\n  ["daily", 24 * 60 * 60 * 1e3],\n  ["monthly", 30 * 24 * 60 * 60 * 1e3],\n  ["quarterly", 3 * 30 * 24 * 60 * 60 * 1e3],\n  ["yearly", 12 * 30 * 24 * 60 * 60 * 1e3]\n];\nfunction Gm(e, t, n, r, i) {\n  const s = t === 0, a = Number(Ll(new Date(e), "c")) === 2, o = Number(Ll(new Date(e), "q")) === 1, l = t !== 0 ? n[t - 1] : null;\n  switch (r) {\n    case "15seconds":\n      return s || As(e) || fi(e, l) || In(e);\n    case "minute":\n      return s || As(e) || fi(e, l) || In(e);\n    case "30minutes":\n      return s || As(e) || fi(e, l) || In(e);\n    case "hourly":\n      return s || As(e) || fi(e, l) || In(e);\n    case "daily":\n      return i ? s || a || In(e) : s || fi(e, l) || In(e);\n    case "weekly":\n      return s || a || In(e);\n    case "monthly":\n      return s || In(e);\n    case "quarterly":\n      return s || o;\n    case "yearly":\n      return !1;\n    default:\n      throw new Error(`${r} is not a valid time interval.`);\n  }\n}\nfunction kl(e, t, n, r, i, s) {\n  const a = i.showDayName, o = r === "daily" && a ? "weekly" : r, l = new Date(e), c = y(i, "timeIntervalFormats")[o], u = y(c, "primary"), d = y(c, "secondary"), h = Gm(e, t, n, r, a);\n  let p = h ? u : d;\n  r === "15seconds" && l.getMilliseconds() !== 0 && (p = p.replace("pp", "h:mm:ss.SSS a"));\n  const f = i.localeObject, { code: g, optionsObject: m } = s, v = m[r].type, x = m[r][h ? "primary" : "secondary"][p];\n  if (r === "quarterly" || !x) {\n    const _ = Ll(l, p, { locale: f }).split("").map((E) => {\n      var b;\n      const S = Number(E);\n      return E !== " " && !Number.isNaN(S) ? (b = S == null ? void 0 : S.toLocaleString) == null ? void 0 : b.call(S, g) : E;\n    });\n    return s[v](l, g, {}, _.join(""));\n  } else\n    return s[v](l, g, x);\n}\nfunction xa(e) {\n  const t = new Date(e);\n  return {\n    M: t.getMonth() + 1,\n    // month: 1-12\n    d: t.getDate(),\n    // day of the month: 1-31\n    H: t.getHours(),\n    // 24-hour clock: 0-23\n    m: t.getMinutes(),\n    // minute: 0-59\n    s: t.getSeconds()\n    // seconds: 0-59\n  };\n}\nfunction Mw(e) {\n  if (e)\n    return e.slice(1).map((t, n) => t - e[n]);\n}\nfunction Cw(e) {\n  const t = ko.reduce((n, [, r], i) => {\n    const s = ko[n][1], a = Math.abs(s - e), o = Math.abs(r - e);\n    return a < o ? n : i;\n  }, 0);\n  return ko[t][0];\n}\nfunction Dl(e, t) {\n  if (lf[t])\n    return t;\n  if (e.length === 1)\n    return "15seconds";\n  const n = Mw(e), r = Bn(n);\n  return Cw(r);\n}\nfunction As(e) {\n  const { s: t, m: n, H: r } = xa(e);\n  return r === 0 && n === 0 && t === 0;\n}\nfunction fi(e, t) {\n  const n = xa(e).M, r = xa(t).M;\n  return n !== r;\n}\nfunction In(e) {\n  const { M: t, d: n, s: r, m: i, H: s } = xa(e);\n  return t === 1 && n === 1 && s === 0 && i === 0 && r === 0;\n}\nfunction zh(e) {\n  return e === void 0 ? "" : e.toISOString();\n}\nfunction zm(e) {\n  const t = ze(e, (r) => r.value), n = Fe().domain(t).nice().domain();\n  if (n[0] > 0)\n    n[0] = 0;\n  else if (n[0] === 0 && n[1] === 0)\n    return [0, 1];\n  return n[0] < 0 && n[1] > 0 && (Math.abs(n[0]) > n[1] ? n[1] = Math.abs(n[0]) : n[0] = -n[1]), n;\n}\nfunction Fm(e, t) {\n  const n = y(t, "gradient", "colors"), r = !Be(n);\n  let i = y(t, "pairing", "option");\n  const s = zm(e), a = s[0] < 0 && s[1] > 0 ? "diverge" : "mono";\n  (i < 1 && i > 4 && a === "mono" || i < 1 && i > 2 && a === "diverge") && (i = 1);\n  const o = r ? n : [];\n  if (!r) {\n    const l = a === "diverge" ? 17 : 11;\n    for (let c = 1; c < l + 1; c++)\n      o.push(`fill-${a}-${i}-${c}`);\n  }\n  return Gc().domain(s).range(o);\n}\nvar ht = /* @__PURE__ */ ((e) => (e.GRAPHICS_DOCUMENT = "graphics-document", e.GRAPHICS_OBJECT = "graphics-object", e.GRAPHICS_SYMBOL = "graphics-symbol", e.GROUP = "group", e.DOCUMENT = "document", e.CHECKBOX = "checkbox", e.BUTTON = "button", e.MENU = "menu", e.MENU_ITEM = "menuitem", e.IMG = "img", e))(ht || {});\nfunction Aw(e, t) {\n  return e && Ff(e, t, ls);\n}\nfunction Lw(e, t) {\n  return function(n, r) {\n    if (n == null)\n      return n;\n    if (!fr(n))\n      return e(n, r);\n    for (var i = n.length, s = -1, a = Object(n); ++s < i && r(a[s], s, a) !== !1; )\n      ;\n    return n;\n  };\n}\nvar jc = Lw(Aw);\nfunction dt(e) {\n  return function() {\n    return e;\n  };\n}\nvar kw = Array.prototype.slice;\nfunction so(e) {\n  return typeof e == "object" && "length" in e ? e : Array.from(e);\n}\nfunction Dw(e, t, n, r) {\n  for (var i = -1, s = e == null ? 0 : e.length; ++i < s; ) {\n    var a = e[i];\n    t(r, a, n(a), e);\n  }\n  return r;\n}\nfunction Rw(e, t, n, r) {\n  return jc(e, function(i, s, a) {\n    t(r, i, n(i), a);\n  }), r;\n}\nfunction Iw(e, t) {\n  return function(n, r) {\n    var i = Kt(n) ? Dw : Rw, s = {};\n    return i(n, e, Ja(r), s);\n  };\n}\nfunction Nw(e) {\n  for (var t = -1, n = e == null ? 0 : e.length, r = {}; ++t < n; ) {\n    var i = e[t];\n    r[i[0]] = i[1];\n  }\n  return r;\n}\nvar Pw = Object.prototype, Uw = Pw.hasOwnProperty, Bw = Iw(function(e, t, n) {\n  Uw.call(e, n) ? e[n].push(t) : ja(e, n, [t]);\n});\nfunction Hw(e, t) {\n  let n = 0;\n  for (let r of e)\n    r != null && (r = +r) >= r && ++n;\n  return n;\n}\nfunction Vw(e) {\n  return e;\n}\nfunction Gw(e = Jn) {\n  if (e === Jn) return jm;\n  if (typeof e != "function") throw new TypeError("compare is not a function");\n  return (t, n) => {\n    const r = e(t, n);\n    return r || r === 0 ? r : (e(n, n) === 0) - (e(t, t) === 0);\n  };\n}\nfunction jm(e, t) {\n  return (e == null || !(e >= e)) - (t == null || !(t >= t)) || (e < t ? -1 : e > t ? 1 : 0);\n}\nvar zw = Array.prototype, Fw = zw.slice;\nfunction Do(e) {\n  return () => e;\n}\nfunction jw(e, t, n) {\n  let r;\n  for (; ; ) {\n    const i = Yr(e, t, n);\n    if (i === r || i === 0 || !isFinite(i))\n      return [e, t];\n    i > 0 ? (e = Math.floor(e / i) * i, t = Math.ceil(t / i) * i) : i < 0 && (e = Math.ceil(e * i) / i, t = Math.floor(t * i) / i), r = i;\n  }\n}\nfunction Ww(e) {\n  return Math.max(1, Math.ceil(Math.log(Hw(e)) / Math.LN2) + 1);\n}\nfunction qw() {\n  var e = Vw, t = ze, n = Ww;\n  function r(i) {\n    Array.isArray(i) || (i = Array.from(i));\n    var s, a = i.length, o, l, c = new Array(a);\n    for (s = 0; s < a; ++s)\n      c[s] = e(i[s], s, i);\n    var u = t(c), d = u[0], h = u[1], p = n(c, d, h);\n    if (!Array.isArray(p)) {\n      const _ = h, E = +p;\n      if (t === ze && ([d, h] = jw(d, h, E)), p = ca(d, h, E), p[0] <= d && (l = Yr(d, h, E)), p[p.length - 1] >= h)\n        if (_ >= h && t === ze) {\n          const b = Yr(d, h, E);\n          isFinite(b) && (b > 0 ? h = (Math.floor(h / b) + 1) * b : b < 0 && (h = (Math.ceil(h * -b) + 1) / -b));\n        } else\n          p.pop();\n    }\n    for (var f = p.length, g = 0, m = f; p[g] <= d; ) ++g;\n    for (; p[m - 1] > h; ) --m;\n    (g || m < f) && (p = p.slice(g, m), f = m - g);\n    var v = new Array(f + 1), x;\n    for (s = 0; s <= f; ++s)\n      x = v[s] = [], x.x0 = s > 0 ? p[s - 1] : d, x.x1 = s < f ? p[s] : h;\n    if (isFinite(l)) {\n      if (l > 0)\n        for (s = 0; s < a; ++s)\n          (o = c[s]) != null && d <= o && o <= h && v[Math.min(f, Math.floor((o - d) / l))].push(i[s]);\n      else if (l < 0) {\n        for (s = 0; s < a; ++s)\n          if ((o = c[s]) != null && d <= o && o <= h) {\n            const _ = Math.floor((d - o) * l);\n            v[Math.min(f, _ + (p[_] <= o))].push(i[s]);\n          }\n      }\n    } else\n      for (s = 0; s < a; ++s)\n        (o = c[s]) != null && d <= o && o <= h && v[Ac(p, o, 0, f)].push(i[s]);\n    return v;\n  }\n  return r.value = function(i) {\n    return arguments.length ? (e = typeof i == "function" ? i : Do(i), r) : e;\n  }, r.domain = function(i) {\n    return arguments.length ? (t = typeof i == "function" ? i : Do([i[0], i[1]]), r) : t;\n  }, r.thresholds = function(i) {\n    return arguments.length ? (n = typeof i == "function" ? i : Do(Array.isArray(i) ? Fw.call(i) : i), r) : n;\n  }, r;\n}\nfunction Wm(e, t, n = 0, r = 1 / 0, i) {\n  if (t = Math.floor(t), n = Math.floor(Math.max(0, n)), r = Math.floor(Math.min(e.length - 1, r)), !(n <= t && t <= r)) return e;\n  for (i = i === void 0 ? jm : Gw(i); r > n; ) {\n    if (r - n > 600) {\n      const l = r - n + 1, c = t - n + 1, u = Math.log(l), d = 0.5 * Math.exp(2 * u / 3), h = 0.5 * Math.sqrt(u * d * (l - d) / l) * (c - l / 2 < 0 ? -1 : 1), p = Math.max(n, Math.floor(t - c * d / l + h)), f = Math.min(r, Math.floor(t + (l - c) * d / l + h));\n      Wm(e, t, p, f, i);\n    }\n    const s = e[t];\n    let a = n, o = r;\n    for (mi(e, n, t), i(e[r], s) > 0 && mi(e, n, r); a < o; ) {\n      for (mi(e, a, o), ++a, --o; i(e[a], s) < 0; ) ++a;\n      for (; i(e[o], s) > 0; ) --o;\n    }\n    i(e[n], s) === 0 ? mi(e, n, o) : (++o, mi(e, o, r)), o <= t && (n = o + 1), t <= o && (r = o - 1);\n  }\n  return e;\n}\nfunction mi(e, t, n) {\n  const r = e[t];\n  e[t] = e[n], e[n] = r;\n}\nfunction Ro(e, t, n) {\n  if (e = Float64Array.from(z_(e)), !(!(r = e.length) || isNaN(t = +t))) {\n    if (t <= 0 || r < 2) return Bn(e);\n    if (t >= 1) return nr(e);\n    var r, i = (r - 1) * t, s = Math.floor(i), a = nr(Wm(e, s).subarray(0, s + 1)), o = Bn(e.subarray(s + 1));\n    return a + (o - a) * (i - s);\n  }\n}\nfunction Fh(e, t) {\n  if ((a = e.length) > 1)\n    for (var n = 1, r, i, s = e[t[0]], a, o = s.length; n < a; ++n)\n      for (i = s, s = e[t[n]], r = 0; r < o; ++r)\n        s[r][1] += s[r][0] = isNaN(i[r][1]) ? i[r][0] : i[r][1];\n}\nfunction jh(e) {\n  for (var t = e.length, n = new Array(t); --t >= 0; ) n[t] = t;\n  return n;\n}\nfunction Yw(e, t) {\n  return e[t];\n}\nfunction Xw(e) {\n  const t = [];\n  return t.key = e, t;\n}\nfunction Io() {\n  var e = dt([]), t = jh, n = Fh, r = Yw;\n  function i(s) {\n    var a = Array.from(e.apply(this, arguments), Xw), o, l = a.length, c = -1, u;\n    for (const d of s)\n      for (o = 0, ++c; o < l; ++o)\n        (a[o][c] = [0, +r(d, a[o].key, c, s)]).data = d;\n    for (o = 0, u = so(t(a)); o < l; ++o)\n      a[u[o]].index = o;\n    return n(a, u), a;\n  }\n  return i.keys = function(s) {\n    return arguments.length ? (e = typeof s == "function" ? s : dt(Array.from(s)), i) : e;\n  }, i.value = function(s) {\n    return arguments.length ? (r = typeof s == "function" ? s : dt(+s), i) : r;\n  }, i.order = function(s) {\n    return arguments.length ? (t = s == null ? jh : typeof s == "function" ? s : dt(Array.from(s)), i) : t;\n  }, i.offset = function(s) {\n    return arguments.length ? (n = s ?? Fh, i) : n;\n  }, i;\n}\nfunction Zw(e, t) {\n  if ((l = e.length) > 0)\n    for (var n, r = 0, i, s, a, o, l, c = e[t[0]].length; r < c; ++r)\n      for (a = o = 0, n = 0; n < l; ++n)\n        (s = (i = e[t[n]][r])[1] - i[0]) > 0 ? (i[0] = a, i[1] = a += s) : s < 0 ? (i[1] = o, i[0] = o += s) : (i[0] = 0, i[1] = s);\n}\nfunction Kw(e) {\n  const t = e.trim();\n  return ["=", "+", "-", "@", "\t", "\\r"].includes(t.charAt(0)) ? ` ${t}` : /[,\\"\\n]/.test(t) ? `"${t}"` : t;\n}\nclass an {\n  constructor(t) {\n    this.state = {\n      options: {}\n    }, this.colorScale = {}, this.colorClassNames = {}, this.services = t;\n  }\n  formatTable({ headers: t, cells: n }) {\n    const r = this.getOptions(), {\n      code: i,\n      date: s,\n      number: a\n    } = y(r, "locale"), o = y(r, "tabularRepModal", "tableHeadingFormatter"), l = y(r, "tabularRepModal", "tableCellFormatter"), { cartesianScales: c } = this.services, u = c == null ? void 0 : c.getDomainAxisScaleType();\n    let d;\n    return u === et.TIME && (d = (h) => s(h, i, { month: "short", day: "numeric", year: "numeric" })), [\n      typeof o == "function" ? o(t) : t,\n      ...typeof l == "function" ? l(n) : n.map((h) => {\n        d && (h[1] = d(h[1]));\n        for (const p in h) {\n          const f = h[p];\n          typeof f == "number" && (h[p] = a(f, i));\n        }\n        return h;\n      })\n    ];\n  }\n  getAllDataFromDomain(t) {\n    if (!this.getData())\n      return null;\n    const n = this.getOptions();\n    let r = this.getData();\n    const i = this.getDataGroups(), { groupMapsTo: s } = y(n, "data"), a = y(n, "axes");\n    return t && (r = r.filter((o) => t.includes(o[s]))), a && Object.keys(a).forEach((o) => {\n      const l = a[o].mapsTo, c = a[o].scaleType;\n      if ((c === et.LINEAR || c === et.LOG) && (r = r.map((u) => ({\n        ...u,\n        [l]: u[l] === null ? u[l] : Number(u[l])\n      }))), l && a[o].domain)\n        if (c === et.LABELS)\n          r = r.filter(\n            (u) => a[o].domain.includes(u[l])\n          );\n        else {\n          const [u, d] = a[o].domain;\n          r = r.filter(\n            (h) => !(l in h) || h[l] >= u && h[l] <= d\n          );\n        }\n    }), r.filter((o) => i.find((l) => l.name === o[s]));\n  }\n  /**\n   * Charts that have group configs passed into them, only want to retrieve the display data relevant to that chart\n   * @param groups the included datasets for the particular chart\n   */\n  getDisplayData(t) {\n    if (!this.get("data"))\n      return null;\n    const { ACTIVE: n } = It.items.status, r = this.getDataGroups(t), { groupMapsTo: i } = this.getOptions().data;\n    return this.getAllDataFromDomain(t).filter((s) => r.find(\n      (a) => a.name === s[i] && a.status === n\n    ));\n  }\n  getData() {\n    return this.get("data");\n  }\n  isDataEmpty() {\n    return !this.getData().length;\n  }\n  /**\n   * Sets the data for the current instance.\n   *\n   * This method sanitizes the provided data, generates data groups,\n   * and updates the instance\'s state with the sanitized data and data groups.\n   *\n   * @param {any} newData - The new data to be set. This data will be cloned and sanitized.\n   * @returns {any} - The sanitized version of the provided data.\n   */\n  setData(t) {\n    const n = this.sanitize(Sn(t)), r = this.generateDataGroups(n);\n    return this.set({\n      data: n,\n      dataGroups: r\n    }), n;\n  }\n  getDataGroups(t) {\n    return y(this.getOptions(), "data", "loading") ? [] : t ? this.get("dataGroups").filter((n) => t.includes(n.name)) : this.get("dataGroups");\n  }\n  getActiveDataGroups(t) {\n    const { ACTIVE: n } = It.items.status;\n    return this.getDataGroups(t).filter((r) => r.status === n);\n  }\n  getDataGroupNames(t) {\n    return this.getDataGroups(t).map((n) => n.name);\n  }\n  getActiveDataGroupNames(t) {\n    return this.getActiveDataGroups(t).map((n) => n.name);\n  }\n  aggregateBinDataByGroup(t) {\n    return Bw(t, "group");\n  }\n  getBinConfigurations() {\n    const t = this.getDisplayData(), n = this.getOptions(), r = this.services.cartesianScales.getMainXAxisPosition(), i = this.services.cartesianScales.getDomainIdentifier(), s = n.axes[r], { groupMapsTo: a } = n.data, { bins: o = LT.defaultBins } = s, l = Array.isArray(o), c = qw().value((p) => p[i]).thresholds(o)(t);\n    if (l)\n      c[c.length - 1].x1 = o[o.length - 1];\n    else {\n      const p = c[0].x1 - c[0].x0;\n      c[c.length - 1].x1 = +c[c.length - 1].x0 + p;\n    }\n    const u = l ? [o[0], o[o.length - 1]] : [c[0].x0, c[c.length - 1].x1], d = Array.from(new Set(t.map((p) => p[a]))), h = [];\n    return c.forEach((p) => {\n      const f = `${p.x0}-${p.x1}`, g = this.aggregateBinDataByGroup(p);\n      d.forEach((m) => {\n        h.push({\n          group: m,\n          key: f,\n          value: g[m] || 0,\n          bin: p.x0\n        });\n      });\n    }), {\n      bins: c,\n      binsDomain: u\n    };\n  }\n  getBinnedStackedData() {\n    const t = this.getOptions(), { groupMapsTo: n } = t.data, r = this.getActiveDataGroupNames(), { bins: i } = this.getBinConfigurations(), s = this.getDataValuesGroupedByKeys({\n      bins: i\n    });\n    return Io().keys(r)(s).map((a, o) => Object.keys(a).filter((l) => !isNaN(l)).map((l) => {\n      const c = a[l];\n      return c[n] = r[o], c;\n    }));\n  }\n  getGroupedData(t) {\n    const n = this.getDisplayData(t), r = {}, { groupMapsTo: i } = this.getOptions().data;\n    return n.map((s) => {\n      const a = s[i];\n      r[a] !== null && r[a] !== void 0 ? r[a].push(s) : r[a] = [s];\n    }), Object.keys(r).map((s) => ({\n      name: s,\n      data: r[s]\n    }));\n  }\n  getStackKeys({ bins: t = null, groups: n = null } = { bins: null, groups: null }) {\n    const r = this.getOptions(), i = this.getDisplayData(n);\n    let s;\n    t ? s = t.map((l) => `${l.x0}:${l.x1}`) : s = Zi(\n      i.map((l) => {\n        const c = this.services.cartesianScales.getDomainIdentifier(l);\n        return l[c] instanceof Date ? zh(l[c]) : l[c] && typeof l[c].toString == "function" ? l[c].toString() : l[c];\n      })\n    );\n    const a = this.services.cartesianScales.domainAxisPosition, o = r.axes[a].scaleType;\n    return o === et.TIME ? s.sort((l, c) => {\n      const u = new Date(l), d = new Date(c);\n      return u - d;\n    }) : (o === et.LOG || o === et.LINEAR) && s.sort((l, c) => l - c), s;\n  }\n  getDataValuesGroupedByKeys({ bins: t = null, groups: n = null }) {\n    const r = this.getOptions(), { groupMapsTo: i } = r.data, s = this.getDisplayData(n), a = this.getDataGroupNames(), o = this.getStackKeys({ bins: t, groups: n });\n    return t ? o.map((l) => {\n      const [c, u] = l.split(":"), d = { x0: c, x1: u }, h = t.find((p) => p.x0.toString() === c.toString());\n      return a.forEach((p) => {\n        d[p] = h.filter(\n          (f) => f[i] === p\n        ).length;\n      }), d;\n    }) : o.map((l) => {\n      const c = { sharedStackKey: l };\n      return a.forEach((u) => {\n        const d = s.find((p) => {\n          const f = this.services.cartesianScales.getDomainIdentifier(p);\n          return p[i] === u && Object.prototype.hasOwnProperty.call(p, f) && (p[f] instanceof Date ? zh(p[f]) === l : p[f].toString() === l);\n        }), h = this.services.cartesianScales.getRangeIdentifier(c);\n        c[u] = d ? d[h] : null;\n      }), c;\n    });\n  }\n  getStackedData({ percentage: t = !1, groups: n = null, divergent: r = !1 }) {\n    const i = this.getOptions(), { groupMapsTo: s } = i.data, a = this.getActiveDataGroupNames(n), o = this.getDataValuesGroupedByKeys({\n      groups: n\n    });\n    if (t) {\n      const l = Nw(o.map((c) => [c.sharedStackKey, 0]));\n      o.forEach((c) => {\n        a.forEach((u) => {\n          l[c.sharedStackKey] += c[u];\n        });\n      }), o.forEach((c) => {\n        a.forEach((u) => {\n          const d = l[c.sharedStackKey];\n          l[c.sharedStackKey] ? c[u] = c[u] / d * 100 : c[u] = 0;\n        });\n      });\n    }\n    return (r ? Io().offset(Zw) : Io()).keys(a)(o).map((l, c) => Object.keys(l).filter((u) => !isNaN(u)).map((u) => {\n      const d = l[u];\n      return d[s] = a[c], d;\n    }));\n  }\n  /**\n   * Retrieves the current options from the instance\'s state.\n   *\n   * @returns {any} - The current options stored in the instance\'s state.\n   */\n  getOptions() {\n    return this.state.options;\n  }\n  set(t, n) {\n    this.state = Object.assign({}, this.state, t);\n    const r = Object.assign(\n      { skipUpdate: !1, animate: !0 },\n      // default configs\n      n\n    );\n    r.skipUpdate || this.update(r.animate);\n  }\n  get(t) {\n    return t ? this.state[t] : this.state;\n  }\n  /**\n   * Updates the current options for the instance.\n   *\n   * This method retrieves the existing options, updates the legend additional items,\n   * and merges the new options with the existing ones. The instance\'s state is then updated\n   * with the merged options.\n   *\n   * @param {any} newOptions - The new options to be set. These options will be merged with the existing options.\n   */\n  setOptions(t) {\n    const n = this.getOptions();\n    Fc(n, t), this.set({\n      options: at(n, t)\n    });\n  }\n  /**\n   *\n   * Updates miscellanous information within the model\n   * such as the color scales, or the legend data labels\n   */\n  update(t = !0) {\n    this.getDisplayData() && (this.updateAllDataGroups(), this.setCustomColorScale(), this.setColorClassNames(), this.services.events.dispatchEvent(T.Model.UPDATE, { animate: t }));\n  }\n  /*\n   * Data labels\n   */\n  toggleDataLabel(t) {\n    const { ACTIVE: n, DISABLED: r } = It.items.status, i = this.getDataGroups(), s = i.some((c) => c.status === r), a = i.filter((c) => c.status === n);\n    if (s)\n      if (a.length === 1 && a[0].name === t)\n        i.forEach((c, u) => {\n          i[u].status = n;\n        });\n      else {\n        const c = i.findIndex((u) => u.name === t);\n        i[c].status = i[c].status === r ? n : r;\n      }\n    else\n      i.forEach((c, u) => {\n        i[u].status = c.name === t ? n : r;\n      });\n    const o = i.filter((c) => c.status === n), l = this.getOptions();\n    i.some((c) => c.status === r) ? l.data.selectedGroups = o.map((c) => c.name) : l.data.selectedGroups = [], this.services.events.dispatchEvent(T.Legend.ITEMS_UPDATE, {\n      dataGroups: i\n    }), this.set({\n      dataGroups: i\n    });\n  }\n  /**\n   * Should the data point be filled?\n   * @param group\n   * @param key\n   * @param data\n   * @param defaultFilled the default for this chart\n   */\n  getIsFilled(t, n, r, i) {\n    const s = this.getOptions();\n    return s.getIsFilled ? s.getIsFilled(t, n, r, i) : i;\n  }\n  getFillColor(t, n, r) {\n    const i = this.getOptions(), s = y(this.colorScale, t);\n    return i.getFillColor ? i.getFillColor(t, n, r, s) : s;\n  }\n  getStrokeColor(t, n, r) {\n    const i = this.getOptions(), s = y(this.colorScale, t);\n    return i.getStrokeColor ? i.getStrokeColor(t, n, r, s) : s;\n  }\n  isUserProvidedColorScaleValid() {\n    const t = y(this.getOptions(), "color", "scale"), n = this.getDataGroups();\n    return t == null || Object.keys(t).length == 0 ? !1 : n.some(\n      (r) => Object.keys(t).includes(r.name)\n    );\n  }\n  getColorClassName(t) {\n    const n = this.colorClassNames(t.dataGroupName);\n    let r = t.originalClassName;\n    return t.classNameTypes.forEach(\n      (i) => r = t.originalClassName ? `${r} ${i}-${n}` : `${i}-${n}`\n    ), r || "";\n  }\n  /**\n   * For charts that might hold an associated status for their dataset\n   */\n  getStatus() {\n    return null;\n  }\n  getAllDataGroupsNames() {\n    return this.allDataGroups;\n  }\n  /**\n   * Converts data provided in the older format to tabular\n   *\n   */\n  transformToTabularData(t) {\n    console.warn(\n      "We\'ve updated the charting data format to be tabular by default. The current format you\'re using is deprecated and will be removed in v1.0, read more here https://charts.carbondesignsystem.com/"\n    );\n    const n = [], { datasets: r, labels: i } = t;\n    return r.forEach((s) => {\n      s.data.forEach((a, o) => {\n        let l;\n        const c = y(s, "label");\n        if (c === null) {\n          const d = y(i, o);\n          d ? l = d : l = "Ungrouped";\n        } else\n          l = c;\n        const u = {\n          group: l,\n          key: i[o]\n        };\n        isNaN(a) ? (u.value = a.value, u.date = a.date) : u.value = a, n.push(u);\n      });\n    }), n;\n  }\n  getTabularDataArray() {\n    return [];\n  }\n  exportToCSV() {\n    const t = this.getTabularDataArray().map(\n      (s) => s.map((a) => `"${(a === "&ndash;" ? "–" : a).split(/[,;\'"`]/).map((o) => Kw(o)).join("")}"`)\n    ).map((s) => s.join(",")).join(`\n`), n = this.getOptions();\n    let r = "myChart";\n    const i = y(n, "fileDownload", "fileName");\n    typeof i == "function" ? r = i("csv") : typeof i == "string" && (r = i), this.services.files.downloadCSV(t, `${r}.csv`);\n  }\n  getTabularData(t) {\n    return Array.isArray(t) ? t : this.transformToTabularData(t);\n  }\n  sanitize(t) {\n    return t = this.getTabularData(t), t;\n  }\n  /*\n   * Data groups\n   */\n  updateAllDataGroups() {\n    this.allDataGroups ? this.getDataGroupNames().forEach((t) => {\n      this.allDataGroups.indexOf(t) === -1 && this.allDataGroups.push(t);\n    }) : this.allDataGroups = this.getDataGroupNames();\n  }\n  generateDataGroups(t) {\n    const { groupMapsTo: n } = this.getOptions().data, { ACTIVE: r, DISABLED: i } = It.items.status, s = this.getOptions(), a = Zi(t.map((l) => l[n]));\n    s.data.selectedGroups.length && (s.data.selectedGroups.every(\n      (l) => a.includes(l)\n    ) || (s.data.selectedGroups = []));\n    const o = (l) => !s.data.selectedGroups.length || s.data.selectedGroups.includes(l) ? r : i;\n    return a.map((l) => ({\n      name: l,\n      status: o(l)\n    }));\n  }\n  /*\n   * Fill scales\n   */\n  setCustomColorScale() {\n    if (!this.isUserProvidedColorScaleValid())\n      return;\n    const t = this.getOptions(), n = y(t, "color", "scale");\n    Object.keys(n).forEach((r) => {\n      this.allDataGroups.includes(r) || console.warn(`"${r}" does not exist in data groups.`);\n    }), this.allDataGroups.filter((r) => n[r]).forEach(\n      (r) => this.colorScale[r] = n[r]\n    );\n  }\n  /*\n   * Color palette\n   */\n  setColorClassNames() {\n    const t = y(this.getOptions(), "color", "pairing");\n    let n = y(t, "numberOfVariants");\n    (!n || n < this.allDataGroups.length) && (n = this.allDataGroups.length);\n    let r = y(t, "option");\n    const i = Mm.pairingOptions, s = n > 5 ? 14 : n, a = `${s}-color`;\n    r = r <= i[a] ? r : 1;\n    const o = this.allDataGroups.map(\n      (l, c) => `${s}-${r}-${c % 14 + 1}`\n    );\n    this.colorClassNames = ro().range(o).domain(this.allDataGroups);\n  }\n}\nclass mr extends an {\n  // can\'t be protected as it\'s used by two-dimensional-axes.ts\n  constructor(t) {\n    super(t), this.axisFlavor = Ga.DEFAULT;\n  }\n  // get the scales information\n  // needed for getTabularArray()\n  assignRangeAndDomains() {\n    const { cartesianScales: t } = this.services, n = this.getOptions(), r = t.isDualAxes(), i = {\n      primaryDomain: t.domainAxisPosition,\n      primaryRange: t.rangeAxisPosition,\n      secondaryDomain: null,\n      secondaryRange: null\n    };\n    return r && (i.secondaryDomain = t.secondaryDomainAxisPosition, i.secondaryRange = t.secondaryRangeAxisPosition), Object.keys(i).forEach(\n      (s) => {\n        const a = i[s];\n        t.scales[a] ? i[s] = {\n          position: a,\n          label: t.getScaleLabel(a),\n          identifier: y(n, "axes", a, "mapsTo")\n        } : i[s] = null;\n      }\n    ), i;\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), n = this.getOptions(), { groupMapsTo: r } = n.data, { primaryDomain: i, primaryRange: s, secondaryDomain: a, secondaryRange: o } = this.assignRangeAndDomains(), { number: l, code: c } = y(this.getOptions(), "locale"), u = [\n      "Group",\n      i.label,\n      s.label,\n      ...a ? [a.label] : [],\n      ...o ? [o.label] : []\n    ], d = t.map((h) => [\n      h[r],\n      h[i.identifier] === null ? "&ndash;" : h[i.identifier],\n      h[s.identifier] === null || isNaN(h[s.identifier]) ? "&ndash;" : l(h[s.identifier], c),\n      ...a ? [\n        h[a.identifier] === null ? "&ndash;" : h[a.identifier]\n      ] : [],\n      ...o ? [\n        h[o.identifier] === null || isNaN(h[o.identifier]) ? "&ndash;" : h[o.identifier]\n      ] : []\n    ]);\n    return super.formatTable({ headers: u, cells: d });\n  }\n  setData(t) {\n    let n;\n    if (t && (n = super.setData(t), y(this.getOptions(), "zoomBar", G.TOP, "enabled"))) {\n      const r = y(\n        this.getOptions(),\n        "zoomBar",\n        G.TOP,\n        "data"\n      );\n      this.setZoomBarData(r);\n    }\n    return n;\n  }\n  /**\n   * Sets the zoom bar data for the current instance.\n   *\n   * This method sanitizes the provided zoom bar data or uses the display data if no explicit\n   * zoom data is provided. It normalizes the zoom bar data by aggregating values based on unique\n   * dates and updates the instance\'s state with the normalized data.\n   *\n   * @param {any} [newZoomBarData] - The new zoom bar data to be set. If not provided, the display data will be used.\n   */\n  setZoomBarData(t) {\n    const n = t ? this.sanitize(Sn(t)) : this.getDisplayData();\n    let r = n;\n    const { cartesianScales: i } = this.services;\n    if (n && i.domainAxisPosition && i.rangeAxisPosition) {\n      const s = i.getDomainIdentifier(), a = i.getRangeIdentifier();\n      let o = n.map((l) => l[s].getTime());\n      o = Zi(o).sort(), r = o.map((l) => {\n        let c = 0;\n        const u = {};\n        return n.forEach((d) => {\n          d[s].getTime() === l && (c += d[a]);\n        }), u[s] = new Date(l), u[a] = c, u;\n      });\n    }\n    this.set({ zoomBarData: r });\n  }\n  getZoomBarData() {\n    return this.get("zoomBarData");\n  }\n  sanitizeDateValues(t) {\n    const n = this.getOptions();\n    if (!n.axes)\n      return t;\n    const r = [];\n    return Object.keys(G).forEach((i) => {\n      const s = G[i], a = n.axes[s];\n      if (a && a.scaleType === et.TIME) {\n        const o = a.mapsTo;\n        (o !== null || o !== void 0) && r.push(o);\n      }\n    }), r.length > 0 && t.forEach((i) => {\n      r.forEach((s) => {\n        y(i, s, "getTime") === null && (i[s] = new Date(i[s]));\n      });\n    }), t;\n  }\n  sanitize(t) {\n    return t = super.sanitize(t), t = this.sanitizeDateValues(t), t;\n  }\n}\nlet Qw = class extends mr {\n  constructor(t) {\n    super(t);\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), { number: n, code: r } = y(this.getOptions(), "locale");\n    t.sort((a, o) => a.source.localeCompare(o.source));\n    const i = ["Source", "Target", "Value"], s = [\n      ...t.map((a) => [\n        a.source,\n        a.target,\n        a.value === null ? "&ndash;" : n(a.value, r)\n      ])\n    ];\n    return super.formatTable({ headers: i, cells: s });\n  }\n}, Jw = class extends mr {\n  constructor(t) {\n    super(t);\n  }\n  getBoxQuartiles(t) {\n    return {\n      q_25: Ro(t, 0.25),\n      q_50: Ro(t, 0.5),\n      q_75: Ro(t, 0.75)\n    };\n  }\n  getBoxplotData() {\n    const t = this.getOptions(), { groupMapsTo: n } = t.data, r = this.getGroupedData(), i = [];\n    for (const { name: s, data: a } of r) {\n      const o = this.services.cartesianScales.getRangeIdentifier(), l = a.map((_) => _[o]).sort(Jn), c = {\n        [n]: s,\n        counts: l,\n        quartiles: this.getBoxQuartiles(l),\n        outliers: null,\n        whiskers: null\n      }, u = c.quartiles.q_25, d = c.quartiles.q_75, h = (d - u) * 1.5, p = u - h, f = d + h, g = [], m = [];\n      for (const _ of l)\n        _ < p || _ > f ? g.push(_) : m.push(_);\n      c.outliers = g;\n      const v = Bn(m), x = nr(m);\n      c.whiskers = {\n        min: v || Bn([c.quartiles.q_25, c.quartiles.q_50, c.quartiles.q_75]),\n        max: x || nr([c.quartiles.q_25, c.quartiles.q_50, c.quartiles.q_75])\n      }, i.push(c);\n    }\n    return i;\n  }\n  getTabularDataArray() {\n    const t = this.getOptions(), { groupMapsTo: n } = t.data, r = this.getBoxplotData(), { number: i, code: s } = y(t, "locale"), a = ["Group", "Minimum", "Q1", "Median", "Q3", "Maximum", "IQR", "Outlier(s)"], o = [\n      ...r.map((l) => {\n        let c = y(l, "outliers");\n        return (c === null || c.length === 0) && (c = ["&ndash;"]), [\n          l[n],\n          y(l, "whiskers", "min") !== null ? i(y(l, "whiskers", "min"), s) : "&ndash;",\n          y(l, "quartiles", "q_25") !== null ? i(y(l, "quartiles", "q_25"), s) : "&ndash;",\n          y(l, "quartiles", "q_50") !== null ? i(y(l, "quartiles", "q_50"), s) : "&ndash;",\n          y(l, "quartiles", "q_75") !== null ? i(y(l, "quartiles", "q_75"), s) : "&ndash;",\n          y(l, "whiskers", "max") !== null ? i(y(l, "whiskers", "max"), s) : "&ndash;",\n          y(l, "quartiles", "q_75") !== null && y(l, "quartiles", "q_25") !== null ? (i(\n            y(l, "quartiles", "q_75") - y(l, "quartiles", "q_25")\n          ), s) : "&ndash;",\n          c.map((u) => i(u, s)).join(",")\n        ];\n      })\n    ];\n    return super.formatTable({ headers: a, cells: o });\n  }\n  setColorClassNames() {\n    const t = y(this.getOptions(), "color", "pairing");\n    let n = y(t, "option");\n    const r = Mm.pairingOptions;\n    n = n <= r["1-color"] ? n : 1;\n    const i = this.allDataGroups.map(() => `1-${n}-1`);\n    this.colorClassNames = ro().range(i).domain(this.allDataGroups);\n  }\n}, t$ = class extends mr {\n  constructor(t) {\n    super(t);\n  }\n  /**\n   * Determines the index of the performance area titles to use\n   * @param datum\n   * @returns number\n   */\n  getMatchingRangeIndexForDatapoint(t) {\n    let n;\n    for (let r = t.ranges.length - 1; r > 0; r--) {\n      const i = t.ranges[r];\n      if (t.value >= i)\n        return n = r, n;\n    }\n    return 0;\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), n = this.getOptions(), { groupMapsTo: r } = n.data, i = this.services.cartesianScales.getRangeIdentifier(), { number: s, code: a } = y(n, "locale"), o = y(n, "bullet", "performanceAreaTitles"), l = ["Title", "Group", "Value", "Target", "Percentage", "Performance"], c = [\n      ...t.map((u) => [\n        u.title,\n        u[r],\n        u.value === null ? "&ndash;" : s(u.value, a),\n        y(u, "marker") === null ? "&ndash;" : s(u.marker, a),\n        y(u, "marker") === null ? "&ndash;" : `${s(Math.floor(u[i] / u.marker * 100), a)}%`,\n        o[this.getMatchingRangeIndexForDatapoint(u)]\n      ])\n    ];\n    return super.formatTable({ headers: l, cells: c });\n  }\n}, e$ = class extends an {\n  constructor(t) {\n    super(t), this._colorScale = void 0, this._matrix = {};\n  }\n  /**\n   * @override\n   * @param value\n   * @returns string\n   */\n  getFillColor(t) {\n    return this._colorScale(t);\n  }\n  /**\n   * Helper function that will generate a dictionary\n   */\n  getCombinedData() {\n    if (Be(this._matrix)) {\n      const t = this.getOptions(), n = this.getDisplayData();\n      !Be(n) && !Be(t.geoData.objects.countries) && (t.geoData.objects.countries.geometries.forEach((r) => {\n        this._matrix[r.properties.NAME] = r;\n      }), n.forEach((r) => {\n        this._matrix[r.name] ? this._matrix[r.name].value = r.value || null : console.warn(`Data point ${r} is missing geographical data.`);\n      }));\n    }\n    return this._matrix;\n  }\n  /**\n   * Generate tabular data from display data\n   * @returns Array<Object>\n   */\n  getTabularDataArray() {\n    const t = this.getDisplayData(), { number: n, code: r } = y(this.getOptions(), "locale"), i = ["Country ID", "Country Name", "Value"], s = [\n      ...t.map((a) => [\n        a.id === null ? "&ndash;" : a.id,\n        a.name,\n        a.value === null ? "&ndash;" : n(a.value, r)\n      ])\n    ];\n    return super.formatTable({ headers: i, cells: s });\n  }\n  // Uses quantize scale to return class names\n  getColorClassName(t) {\n    return `${t.originalClassName || ""} ${this._colorScale(t.value)}`;\n  }\n  setColorClassNames() {\n    const t = y(this.getOptions(), "color");\n    this._colorScale = Fm(this.getDisplayData(), t);\n  }\n}, n$ = class extends an {\n  constructor(t) {\n    super(t), this.parentNode = !1, this.set({ depth: 2 }, { skipUpdate: !0 });\n  }\n  setData(t) {\n    super.setData(t), this.setDataGroups(), t.length === 1 && (this.parentNode = !0), this.setZoom();\n  }\n  setOptions(t) {\n    const n = this.getOptions(), r = at({}, t, this.getZoomOptions(t));\n    Fc(n, r);\n    const i = this.getHierarchyLevel(), s = y(n, "circlePack", "depth");\n    this.set({\n      options: at(n, r),\n      depth: s && s < 4 ? s : i\n    });\n  }\n  getZoomOptions(t) {\n    if (!this.getDisplayData())\n      return {};\n    const n = this.getDisplayData(), r = t || this.getOptions(), i = n.length === 1 && y(n, 0, "children") ? y(n, 0, "children") : n;\n    let s = this.getHierarchyLevel();\n    return i.some((a) => {\n      if (a.children && a.children.some((o) => o.children))\n        return s = 3, !1;\n    }), y(r, "canvasZoom", "enabled") === !0 && s > 2 ? {\n      legend: {\n        additionalItems: [\n          {\n            type: Gt.ZOOM,\n            name: "Click to zoom"\n          }\n        ]\n      }\n    } : null;\n  }\n  setZoom(t) {\n    this.setOptions(this.getZoomOptions(t));\n  }\n  // update the hierarchy level\n  updateHierarchyLevel(t) {\n    this.set({ depth: t });\n  }\n  getHierarchyLevel() {\n    return this.get("depth");\n  }\n  hasParentNode() {\n    return this.parentNode;\n  }\n  // set the datagroup name on the items that are it\'s children\n  setDataGroups() {\n    const t = this.getData(), n = this.getOptions(), { groupMapsTo: r } = n.data, i = t.map((s) => {\n      const a = s[r];\n      return this.setChildrenDataGroup(s, a);\n    });\n    this.set(\n      {\n        data: i\n      },\n      { skipUpdate: !0 }\n    );\n  }\n  // sets name recursively down the node tree\n  setChildrenDataGroup(t, n) {\n    return t.children ? {\n      ...t,\n      dataGroupName: n,\n      children: t.children.map((r) => this.setChildrenDataGroup(r, n))\n    } : { ...t, dataGroupName: n };\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), { number: n, code: r } = y(this.getOptions(), "locale"), i = ["Child", "Parent", "Value"], s = [];\n    return t.forEach((a) => {\n      let o = a.value ? a.value : 0;\n      a.children && (o += this.getChildrenDatums(a.children, a.name, s, 0)), s.push(["&ndash;", a.name, n(o, r)]);\n    }), super.formatTable({ headers: i, cells: s });\n  }\n  /**\n   * Recursively determine the relationship between all the nested elements in the child\n   * @private\n   * @param {any} children - The children nodes to process.\n   * @param {any} parent - The parent node associated with the children.\n   * @param {string[][]} [result=[]] - An array to accumulate the resulting data.\n   * @param {number} [totalSum=0] - The running total sum of values processed.\n   * @returns {number} Sum.\n   */\n  getChildrenDatums(t, n, r = [], i = 0) {\n    const s = n, { number: a, code: o } = y(this.getOptions(), "locale");\n    return t.forEach((l) => {\n      const c = l.name;\n      let u = 0;\n      if (l.children)\n        l.children.length > 0 && (typeof l.value == "number" && (i += l.value), u += this.getChildrenDatums(l.children, c, r, u), r.push([c, s, a(u, o)]), i += u);\n      else {\n        let d = 0;\n        typeof l.value == "number" && (d = l.value, i += l.value), r.push([l.name, s, a(d, o)]);\n      }\n    }), i;\n  }\n}, r$ = class extends an {\n  constructor(t) {\n    super(t);\n  }\n  getTabularData(t) {\n    const n = super.getTabularData(t);\n    return t !== n && n.forEach((r) => {\n      r.key && r.key !== r.group && (r.group = r.key);\n    }), n;\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), n = this.getOptions(), { groupMapsTo: r } = n.data, { valueMapsTo: i } = n.pie, { number: s, code: a } = y(n, "locale"), o = ["Group", "Value"], l = [\n      ...t.map((c) => [\n        c[r],\n        c[i] === null ? "&ndash;" : s(c[i], a)\n      ])\n    ];\n    return super.formatTable({ headers: o, cells: l });\n  }\n  sanitize(t) {\n    return this.getTabularData(t).sort((n, r) => r.value - n.value);\n  }\n}, i$ = class extends an {\n  constructor(t) {\n    super(t);\n  }\n  getDataGroups() {\n    return super.getDataGroups().filter((t) => t.name !== "delta");\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), n = this.getOptions(), { groupMapsTo: r } = n.data, { number: i, code: s } = y(this.getOptions(), "locale"), a = ["Group", "Value"], o = [\n      ...t.map((l) => [\n        l[r],\n        l.value === null ? "&ndash;" : i(l.value, s)\n      ])\n    ];\n    return super.formatTable({ headers: a, cells: o });\n  }\n}, s$ = class extends mr {\n  constructor(t) {\n    super(t), this.axisFlavor = Ga.HOVERABLE, this._colorScale = void 0, this._domains = [], this._ranges = [], this._matrix = {};\n    const n = y(this.getOptions(), "axes");\n    if (y(n, "left", "scaleType") && y(n, "left", "scaleType") !== et.LABELS || y(n, "right", "scaleType") && y(n, "right", "scaleType") !== et.LABELS || y(n, "top", "scaleType") && y(n, "top", "scaleType") !== et.LABELS || y(n, "bottom", "scaleType") && y(n, "bottom", "scaleType") !== et.LABELS)\n      throw Error("Heatmap only supports label scaletypes.");\n  }\n  /**\n   * Get min and maximum value of the display data\n   * @returns Array consisting of smallest and largest values in  data\n   */\n  getValueDomain() {\n    const t = ze(this.getDisplayData(), (r) => r.value), n = Fe().domain(t).nice().domain();\n    if (n[0] > 0)\n      n[0] = 0;\n    else if (n[0] === 0 && n[1] === 0)\n      return [0, 1];\n    return n[0] < 0 && n[1] > 0 && (Math.abs(n[0]) > n[1] ? n[1] = Math.abs(n[0]) : n[0] = -n[1]), n;\n  }\n  /**\n   * @override\n   * @param value\n   * @returns string\n   */\n  getFillColor(t) {\n    return this._colorScale(t);\n  }\n  /**\n   * Generate a list of all unique domains\n   * @returns String[]\n   */\n  getUniqueDomain() {\n    if (Be(this._domains)) {\n      const t = this.getDisplayData(), { cartesianScales: n } = this.services, r = n.getDomainIdentifier(), i = n.getMainXAxisPosition(), s = n.getCustomDomainValuesByposition(i);\n      if (s)\n        return s;\n      this._domains = Array.from(\n        new Set(\n          t.map((a) => a[r])\n        )\n      );\n    }\n    return this._domains;\n  }\n  /**\n   * Generates a list of all unique ranges\n   * @returns String[]\n   */\n  getUniqueRanges() {\n    if (Be(this._ranges)) {\n      const t = this.getDisplayData(), { cartesianScales: n } = this.services, r = n.getRangeIdentifier(), i = n.getMainYAxisPosition(), s = n.getCustomDomainValuesByposition(i);\n      if (s)\n        return s;\n      this._ranges = Array.from(\n        new Set(\n          t.map((a) => a[r])\n        )\n      );\n    }\n    return this._ranges;\n  }\n  /**\n   * Generates a matrix (If doesn\'t exist) and returns it\n   * @returns Object\n   */\n  getMatrix() {\n    if (Be(this._matrix)) {\n      const t = this.getUniqueDomain(), n = this.getUniqueRanges(), r = this.services.cartesianScales.getDomainIdentifier(), i = this.services.cartesianScales.getRangeIdentifier(), s = {};\n      n.forEach((a) => {\n        s[a] = {\n          value: null,\n          index: -1\n        };\n      }), t.forEach((a) => {\n        this._matrix[a] = Sn(s);\n      }), this.getDisplayData().forEach((a, o) => {\n        this._matrix[a[r]][a[i]] = {\n          value: a.value,\n          index: o\n        };\n      });\n    }\n    return this._matrix;\n  }\n  /**\n   * Sets the data for the current instance.\n   *\n   * This method sanitizes the provided data, generates data groups,\n   * and updates the instance\'s state with the sanitized data and data groups.\n   * It also resets the `_domains`, `_ranges`, and `_matrix` attributes to their empty states.\n   *\n   * @param {any} newData - The new data to be set. This data will be cloned and sanitized.\n   * @returns {any} - The sanitized version of the provided data.\n   */\n  setData(t) {\n    const n = this.sanitize(Sn(t)), r = this.generateDataGroups(n);\n    return this.set({\n      data: n,\n      dataGroups: r\n    }), this._domains = [], this._ranges = [], this._matrix = {}, n;\n  }\n  /**\n   * Converts Object matrix into a single array\n   * @returns object[]\n   */\n  getMatrixAsArray() {\n    Be(this._matrix) && this.getMatrix();\n    const t = this.getUniqueDomain(), n = this.getUniqueRanges(), r = this.services.cartesianScales.getDomainIdentifier(), i = this.services.cartesianScales.getRangeIdentifier(), s = [];\n    return t.forEach((a) => {\n      n.forEach((o) => {\n        const l = {\n          value: this._matrix[a][o].value,\n          index: this._matrix[a][o].index\n        };\n        l[r] = a, l[i] = o, s.push(l);\n      });\n    }), s;\n  }\n  /**\n   * Generate tabular data from display data\n   * @returns Array<Object>\n   */\n  getTabularDataArray() {\n    const t = this.getDisplayData(), { primaryDomain: n, primaryRange: r } = this.assignRangeAndDomains(), { number: i, code: s } = y(this.getOptions(), "locale"), a = [n.label, r.label, "Value"], o = [\n      ...t.map((l) => [\n        l[n.identifier] === null ? "&ndash;" : l[n.identifier],\n        l[r.identifier] === null ? "&ndash;" : l[r.identifier],\n        l.value === null ? "&ndash;" : i(l.value, s)\n      ])\n    ];\n    return super.formatTable({ headers: a, cells: o });\n  }\n  // Uses quantize scale to return class names\n  getColorClassName(t) {\n    return `${t.originalClassName} ${this._colorScale(t.value)}`;\n  }\n  setColorClassNames() {\n    const t = this.getOptions(), n = y(t, "color", "gradient", "colors"), r = !Be(n);\n    let i = y(t, "color", "pairing", "option");\n    const s = this.getValueDomain(), a = s[0] < 0 && s[1] > 0 ? "diverge" : "mono";\n    (i < 1 && i > 4 && a === "mono" || i < 1 && i > 2 && a === "diverge") && (i = 1);\n    const o = r ? n : [];\n    if (!r) {\n      const c = a === "diverge" ? 17 : 11;\n      for (let u = 1; u < c + 1; u++)\n        o.push(`fill-${a}-${i}-${u}`);\n    }\n    this._colorScale = Gc().domain(s).range(o);\n    const l = y(this.getOptions(), "color");\n    this._colorScale = Fm(this.getDisplayData(), l);\n  }\n}, a$ = class extends mr {\n  getTabularDataArray() {\n    const t = this.getOptions(), { groupMapsTo: n } = t.data, { number: r, code: i } = y(this.getOptions(), "locale"), s = this.getBinnedStackedData(), a = [\n      gt(t, "bins.rangeLabel") || "Range",\n      ...s.map((l) => gt(l, `0.${n}`))\n    ], o = [\n      ...gt(s, 0).map((l, c) => [\n        `${r(Number(gt(l, "data.x0")), i)} – ${r(\n          Number(gt(l, "data.x1")),\n          i\n        )}`,\n        ...s.map(\n          (u) => r(gt(u[c], `data.${gt(u[c], n)}`), i)\n        )\n      ])\n    ];\n    return super.formatTable({ headers: a, cells: o });\n  }\n};\nclass o$ extends an {\n  constructor(t) {\n    super(t);\n  }\n  getMaximumDomain(t) {\n    return t.reduce((n, r) => n + r.value, 0);\n  }\n  /**\n   * Use a provided color for the bar or default to carbon color if no status provided.\n   * Defaults to carbon color otherwise.\n   * @param group dataset group label\n   */\n  getFillColor(t) {\n    const n = this.getOptions(), r = y(n, "color", "scale"), i = this.getStatus();\n    return r || !i ? super.getFillColor(t) : null;\n  }\n  /**\n   * Get the associated status for the data by checking the ranges\n   */\n  getStatus() {\n    const t = this.getOptions(), n = y(this.getDisplayData()), r = (n == null ? void 0 : n.reduce((a, o) => a + o.value, 0)) ?? 0, i = y(t, "meter", "proportional") ? r : r > 100 ? 100 : r, s = y(t, "meter", "status", "ranges");\n    if (s) {\n      const a = s.filter(\n        (o) => o.range[0] <= i && i <= o.range[1]\n      );\n      if (a.length > 0)\n        return a[0].status;\n    }\n    return null;\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), n = this.getOptions(), { groupMapsTo: r } = n.data, i = this.getStatus(), s = y(n, "meter", "proportional"), { number: a, code: o } = y(this.getOptions(), "locale");\n    let l = [], c = [], u;\n    if (s === null) {\n      u = 100;\n      const d = t[0];\n      l = ["Group", "Value", ...i ? ["Status"] : []], c = [\n        [\n          d[r],\n          d.value === null ? "&ndash;" : a(d.value, o),\n          ...i ? [i] : []\n        ]\n      ];\n    } else\n      u = y(s, "total") || this.getMaximumDomain(t), l = ["Group", "Value", "Percentage of total"], c = [\n        ...t.map((h) => {\n          let p;\n          h.value !== null && h.value !== void 0 ? p = Number(h.value) : p = 0;\n          const f = Number((h.value / u * 100).toFixed(2));\n          return [\n            h[r],\n            h.value === null ? "&ndash;" : a(p, o),\n            a(f, o) + " %"\n          ];\n        })\n      ];\n    return super.formatTable({ headers: l, cells: c });\n  }\n}\nclass l$ extends mr {\n  constructor(t) {\n    super(t);\n  }\n  getTabularDataArray() {\n    const t = this.getOptions(), n = this.getGroupedData(), { angle: r, value: i } = y(t, "radar", "axes"), { number: s, code: a } = y(t, "locale"), o = y(n, "0", "data").map((u) => u[r]), l = ["Group", ...o], c = [\n      ...n.map((u) => [\n        u.name,\n        ...o.map(\n          (d, h) => y(u, "data", h, i) !== null ? s(y(u, "data", h, i), a) : "&ndash;"\n        )\n      ])\n    ];\n    return super.formatTable({ headers: l, cells: c });\n  }\n}\nlet c$ = class extends an {\n  constructor(t) {\n    super(t);\n  }\n  /**\n   * Retrieves and formats tabular data from the display data.\n   *\n   * @returns {any[]} An object containing the headers and cells of the tabular data.\n   */\n  getTabularDataArray() {\n    const t = this.getDisplayData(), n = ["Child", "Parent"], r = [];\n    return t.forEach((i) => {\n      this.getChildrenDatums(i, r), r.push([i.name, "&ndash;"]);\n    }), super.formatTable({ headers: n, cells: r });\n  }\n  /**\n   * Determine the child parent relationship in nested data\n   * @private\n   * @param {any} datum - The datum node to process.\n   * @param {any[]} [result=[]] - An array to accumulate the resulting data.\n   * @returns {any[]} The accumulated result array.\n   */\n  getChildrenDatums(t, n = []) {\n    t.children && t.children.length > 0 && t.children.forEach((r) => {\n      this.getChildrenDatums(r, n), n.push([r.name, t.name]);\n    });\n  }\n};\nclass u$ extends an {\n  constructor(t) {\n    super(t);\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), { number: n, code: r } = y(this.getOptions(), "locale"), i = ["Child", "Group", "Value"], s = [];\n    return t.forEach((a) => {\n      Array.isArray(a.children) ? a.children.forEach((o) => {\n        s.push([\n          o.name,\n          a.name,\n          o.value === null ? "&ndash;" : n(o.value, r)\n        ]);\n      }) : y(a.name) !== null && y(a.value) && s.push(["–", a.name, n(a.value, r)]);\n    }), super.formatTable({ headers: i, cells: s });\n  }\n}\nlet h$ = class extends an {\n  constructor(t) {\n    super(t);\n  }\n  getTabularDataArray() {\n    const t = this.getDisplayData(), n = this.getOptions(), { fontSizeMapsTo: r, wordMapsTo: i } = n.wordCloud, { groupMapsTo: s } = n.data, { code: a, number: o } = y(n, "locale"), l = [n.tooltip.wordLabel, "Group", n.tooltip.valueLabel], c = [\n      ...t.map((u) => [\n        u[i],\n        u[s],\n        o(u[r], a)\n      ])\n    ];\n    return super.formatTable({ headers: l, cells: c });\n  }\n};\nvar d$ = /\\s/;\nfunction p$(e) {\n  for (var t = e.length; t-- && d$.test(e.charAt(t)); )\n    ;\n  return t;\n}\nvar f$ = /^\\s+/;\nfunction m$(e) {\n  return e && e.slice(0, p$(e) + 1).replace(f$, "");\n}\nvar Wh = NaN, g$ = /^[-+]0x[0-9a-f]+$/i, v$ = /^0b[01]+$/i, y$ = /^0o[0-7]+$/i, x$ = parseInt;\nfunction zr(e) {\n  if (typeof e == "number")\n    return e;\n  if (Fa(e))\n    return Wh;\n  if (De(e)) {\n    var t = typeof e.valueOf == "function" ? e.valueOf() : e;\n    e = De(t) ? t + "" : t;\n  }\n  if (typeof e != "string")\n    return e === 0 ? e : +e;\n  e = m$(e);\n  var n = v$.test(e);\n  return n || y$.test(e) ? x$(e.slice(2), n ? 2 : 8) : g$.test(e) ? Wh : +e;\n}\nvar No = function() {\n  return We.Date.now();\n}, b$ = "Expected a function", _$ = Math.max, E$ = Math.min;\nfunction ba(e, t, n) {\n  var r, i, s, a, o, l, c = 0, u = !1, d = !1, h = !0;\n  if (typeof e != "function")\n    throw new TypeError(b$);\n  t = zr(t) || 0, De(n) && (u = !!n.leading, d = "maxWait" in n, s = d ? _$(zr(n.maxWait) || 0, t) : s, h = "trailing" in n ? !!n.trailing : h);\n  function p(S) {\n    var M = r, D = i;\n    return r = i = void 0, c = S, a = e.apply(D, M), a;\n  }\n  function f(S) {\n    return c = S, o = setTimeout(v, t), u ? p(S) : a;\n  }\n  function g(S) {\n    var M = S - l, D = S - c, A = t - M;\n    return d ? E$(A, s - D) : A;\n  }\n  function m(S) {\n    var M = S - l, D = S - c;\n    return l === void 0 || M >= t || M < 0 || d && D >= s;\n  }\n  function v() {\n    var S = No();\n    if (m(S))\n      return x(S);\n    o = setTimeout(v, g(S));\n  }\n  function x(S) {\n    return o = void 0, h && r ? p(S) : (r = i = void 0, a);\n  }\n  function _() {\n    o !== void 0 && clearTimeout(o), c = 0, r = l = i = o = void 0;\n  }\n  function E() {\n    return o === void 0 ? a : x(No());\n  }\n  function b() {\n    var S = No(), M = m(S);\n    if (r = arguments, i = this, l = S, M) {\n      if (o === void 0)\n        return f(l);\n      if (d)\n        return clearTimeout(o), o = setTimeout(v, t), p(l);\n    }\n    return o === void 0 && (o = setTimeout(v, t)), a;\n  }\n  return b.cancel = _, b.flush = E, b;\n}\nfunction O$(e, t, n) {\n  e = +e, t = +t, n = (i = arguments.length) < 2 ? (t = e, e = 0, 1) : i < 3 ? 1 : +n;\n  for (var r = -1, i = Math.max(0, Math.ceil((t - e) / n)) | 0, s = new Array(i); ++r < i; )\n    s[r] = e + r * n;\n  return s;\n}\nfunction I(e) {\n  return typeof e == "string" ? new _e([[document.querySelector(e)]], [document.documentElement]) : new _e([[e]], sm);\n}\nfunction gs() {\n  var e = ro().unknown(void 0), t = e.domain, n = e.range, r = 0, i = 1, s, a, o = !1, l = 0, c = 0, u = 0.5;\n  delete e.unknown;\n  function d() {\n    var h = t().length, p = i < r, f = p ? i : r, g = p ? r : i;\n    s = (g - f) / Math.max(1, h - l + c * 2), o && (s = Math.floor(s)), f += (g - f - s * (h - l)) * u, a = s * (1 - l), o && (f = Math.round(f), a = Math.round(a));\n    var m = O$(h).map(function(v) {\n      return f + s * v;\n    });\n    return n(p ? m.reverse() : m);\n  }\n  return e.domain = function(h) {\n    return arguments.length ? (t(h), d()) : t();\n  }, e.range = function(h) {\n    return arguments.length ? ([r, i] = h, r = +r, i = +i, d()) : [r, i];\n  }, e.rangeRound = function(h) {\n    return [r, i] = h, r = +r, i = +i, o = !0, d();\n  }, e.bandwidth = function() {\n    return a;\n  }, e.step = function() {\n    return s;\n  }, e.round = function(h) {\n    return arguments.length ? (o = !!h, d()) : o;\n  }, e.padding = function(h) {\n    return arguments.length ? (l = Math.min(1, c = +h), d()) : l;\n  }, e.paddingInner = function(h) {\n    return arguments.length ? (l = Math.min(1, h), d()) : l;\n  }, e.paddingOuter = function(h) {\n    return arguments.length ? (c = +h, d()) : c;\n  }, e.align = function(h) {\n    return arguments.length ? (u = Math.max(0, Math.min(1, h)), d()) : u;\n  }, e.copy = function() {\n    return gs(t(), [r, i]).round(o).paddingInner(l).paddingOuter(c).align(u);\n  }, ii.apply(d(), arguments);\n}\nfunction qm(e, t) {\n  e = e.slice();\n  var n = 0, r = e.length - 1, i = e[n], s = e[r], a;\n  return s < i && (a = n, n = r, r = a, a = i, i = s, s = a), e[n] = t.floor(i), e[r] = t.ceil(s), e;\n}\nconst Po = /* @__PURE__ */ new Date(), Uo = /* @__PURE__ */ new Date();\nfunction Wt(e, t, n, r) {\n  function i(s) {\n    return e(s = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+s)), s;\n  }\n  return i.floor = (s) => (e(s = /* @__PURE__ */ new Date(+s)), s), i.ceil = (s) => (e(s = new Date(s - 1)), t(s, 1), e(s), s), i.round = (s) => {\n    const a = i(s), o = i.ceil(s);\n    return s - a < o - s ? a : o;\n  }, i.offset = (s, a) => (t(s = /* @__PURE__ */ new Date(+s), a == null ? 1 : Math.floor(a)), s), i.range = (s, a, o) => {\n    const l = [];\n    if (s = i.ceil(s), o = o == null ? 1 : Math.floor(o), !(s < a) || !(o > 0)) return l;\n    let c;\n    do\n      l.push(c = /* @__PURE__ */ new Date(+s)), t(s, o), e(s);\n    while (c < s && s < a);\n    return l;\n  }, i.filter = (s) => Wt((a) => {\n    if (a >= a) for (; e(a), !s(a); ) a.setTime(a - 1);\n  }, (a, o) => {\n    if (a >= a)\n      if (o < 0) for (; ++o <= 0; )\n        for (; t(a, -1), !s(a); )\n          ;\n      else for (; --o >= 0; )\n        for (; t(a, 1), !s(a); )\n          ;\n  }), n && (i.count = (s, a) => (Po.setTime(+s), Uo.setTime(+a), e(Po), e(Uo), Math.floor(n(Po, Uo))), i.every = (s) => (s = Math.floor(s), !isFinite(s) || !(s > 0) ? null : s > 1 ? i.filter(r ? (a) => r(a) % s === 0 : (a) => i.count(0, a) % s === 0) : i)), i;\n}\nconst _a = Wt(() => {\n}, (e, t) => {\n  e.setTime(+e + t);\n}, (e, t) => t - e);\n_a.every = (e) => (e = Math.floor(e), !isFinite(e) || !(e > 0) ? null : e > 1 ? Wt((t) => {\n  t.setTime(Math.floor(t / e) * e);\n}, (t, n) => {\n  t.setTime(+t + n * e);\n}, (t, n) => (n - t) / e) : _a);\n_a.range;\nconst bn = 1e3, Ce = bn * 60, _n = Ce * 60, $n = _n * 24, Wc = $n * 7, qh = $n * 30, Bo = $n * 365, Ur = Wt((e) => {\n  e.setTime(e - e.getMilliseconds());\n}, (e, t) => {\n  e.setTime(+e + t * bn);\n}, (e, t) => (t - e) / bn, (e) => e.getUTCSeconds());\nUr.range;\nconst qc = Wt((e) => {\n  e.setTime(e - e.getMilliseconds() - e.getSeconds() * bn);\n}, (e, t) => {\n  e.setTime(+e + t * Ce);\n}, (e, t) => (t - e) / Ce, (e) => e.getMinutes());\nqc.range;\nconst S$ = Wt((e) => {\n  e.setUTCSeconds(0, 0);\n}, (e, t) => {\n  e.setTime(+e + t * Ce);\n}, (e, t) => (t - e) / Ce, (e) => e.getUTCMinutes());\nS$.range;\nconst Yc = Wt((e) => {\n  e.setTime(e - e.getMilliseconds() - e.getSeconds() * bn - e.getMinutes() * Ce);\n}, (e, t) => {\n  e.setTime(+e + t * _n);\n}, (e, t) => (t - e) / _n, (e) => e.getHours());\nYc.range;\nconst T$ = Wt((e) => {\n  e.setUTCMinutes(0, 0, 0);\n}, (e, t) => {\n  e.setTime(+e + t * _n);\n}, (e, t) => (t - e) / _n, (e) => e.getUTCHours());\nT$.range;\nconst vs = Wt(\n  (e) => e.setHours(0, 0, 0, 0),\n  (e, t) => e.setDate(e.getDate() + t),\n  (e, t) => (t - e - (t.getTimezoneOffset() - e.getTimezoneOffset()) * Ce) / $n,\n  (e) => e.getDate() - 1\n);\nvs.range;\nconst Xc = Wt((e) => {\n  e.setUTCHours(0, 0, 0, 0);\n}, (e, t) => {\n  e.setUTCDate(e.getUTCDate() + t);\n}, (e, t) => (t - e) / $n, (e) => e.getUTCDate() - 1);\nXc.range;\nconst w$ = Wt((e) => {\n  e.setUTCHours(0, 0, 0, 0);\n}, (e, t) => {\n  e.setUTCDate(e.getUTCDate() + t);\n}, (e, t) => (t - e) / $n, (e) => Math.floor(e / $n));\nw$.range;\nfunction gr(e) {\n  return Wt((t) => {\n    t.setDate(t.getDate() - (t.getDay() + 7 - e) % 7), t.setHours(0, 0, 0, 0);\n  }, (t, n) => {\n    t.setDate(t.getDate() + n * 7);\n  }, (t, n) => (n - t - (n.getTimezoneOffset() - t.getTimezoneOffset()) * Ce) / Wc);\n}\nconst ao = gr(0), Ea = gr(1), $$ = gr(2), M$ = gr(3), Qr = gr(4), C$ = gr(5), A$ = gr(6);\nao.range;\nEa.range;\n$$.range;\nM$.range;\nQr.range;\nC$.range;\nA$.range;\nfunction vr(e) {\n  return Wt((t) => {\n    t.setUTCDate(t.getUTCDate() - (t.getUTCDay() + 7 - e) % 7), t.setUTCHours(0, 0, 0, 0);\n  }, (t, n) => {\n    t.setUTCDate(t.getUTCDate() + n * 7);\n  }, (t, n) => (n - t) / Wc);\n}\nconst Ym = vr(0), Oa = vr(1), L$ = vr(2), k$ = vr(3), Jr = vr(4), D$ = vr(5), R$ = vr(6);\nYm.range;\nOa.range;\nL$.range;\nk$.range;\nJr.range;\nD$.range;\nR$.range;\nconst Zc = Wt((e) => {\n  e.setDate(1), e.setHours(0, 0, 0, 0);\n}, (e, t) => {\n  e.setMonth(e.getMonth() + t);\n}, (e, t) => t.getMonth() - e.getMonth() + (t.getFullYear() - e.getFullYear()) * 12, (e) => e.getMonth());\nZc.range;\nconst I$ = Wt((e) => {\n  e.setUTCDate(1), e.setUTCHours(0, 0, 0, 0);\n}, (e, t) => {\n  e.setUTCMonth(e.getUTCMonth() + t);\n}, (e, t) => t.getUTCMonth() - e.getUTCMonth() + (t.getUTCFullYear() - e.getUTCFullYear()) * 12, (e) => e.getUTCMonth());\nI$.range;\nconst Mn = Wt((e) => {\n  e.setMonth(0, 1), e.setHours(0, 0, 0, 0);\n}, (e, t) => {\n  e.setFullYear(e.getFullYear() + t);\n}, (e, t) => t.getFullYear() - e.getFullYear(), (e) => e.getFullYear());\nMn.every = (e) => !isFinite(e = Math.floor(e)) || !(e > 0) ? null : Wt((t) => {\n  t.setFullYear(Math.floor(t.getFullYear() / e) * e), t.setMonth(0, 1), t.setHours(0, 0, 0, 0);\n}, (t, n) => {\n  t.setFullYear(t.getFullYear() + n * e);\n});\nMn.range;\nconst ar = Wt((e) => {\n  e.setUTCMonth(0, 1), e.setUTCHours(0, 0, 0, 0);\n}, (e, t) => {\n  e.setUTCFullYear(e.getUTCFullYear() + t);\n}, (e, t) => t.getUTCFullYear() - e.getUTCFullYear(), (e) => e.getUTCFullYear());\nar.every = (e) => !isFinite(e = Math.floor(e)) || !(e > 0) ? null : Wt((t) => {\n  t.setUTCFullYear(Math.floor(t.getUTCFullYear() / e) * e), t.setUTCMonth(0, 1), t.setUTCHours(0, 0, 0, 0);\n}, (t, n) => {\n  t.setUTCFullYear(t.getUTCFullYear() + n * e);\n});\nar.range;\nfunction N$(e, t, n, r, i, s) {\n  const a = [\n    [Ur, 1, bn],\n    [Ur, 5, 5 * bn],\n    [Ur, 15, 15 * bn],\n    [Ur, 30, 30 * bn],\n    [s, 1, Ce],\n    [s, 5, 5 * Ce],\n    [s, 15, 15 * Ce],\n    [s, 30, 30 * Ce],\n    [i, 1, _n],\n    [i, 3, 3 * _n],\n    [i, 6, 6 * _n],\n    [i, 12, 12 * _n],\n    [r, 1, $n],\n    [r, 2, 2 * $n],\n    [n, 1, Wc],\n    [t, 1, qh],\n    [t, 3, 3 * qh],\n    [e, 1, Bo]\n  ];\n  function o(c, u, d) {\n    const h = u < c;\n    h && ([c, u] = [u, c]);\n    const p = d && typeof d.range == "function" ? d : l(c, u, d), f = p ? p.range(c, +u + 1) : [];\n    return h ? f.reverse() : f;\n  }\n  function l(c, u, d) {\n    const h = Math.abs(u - c) / d, p = Cc(([, , m]) => m).right(a, h);\n    if (p === a.length) return e.every(El(c / Bo, u / Bo, d));\n    if (p === 0) return _a.every(Math.max(El(c, u, d), 1));\n    const [f, g] = a[h / a[p - 1][2] < a[p][2] / h ? p - 1 : p];\n    return f.every(g);\n  }\n  return [o, l];\n}\nconst [P$, U$] = N$(Mn, Zc, ao, vs, Yc, qc);\nfunction Ho(e) {\n  if (0 <= e.y && e.y < 100) {\n    var t = new Date(-1, e.m, e.d, e.H, e.M, e.S, e.L);\n    return t.setFullYear(e.y), t;\n  }\n  return new Date(e.y, e.m, e.d, e.H, e.M, e.S, e.L);\n}\nfunction Vo(e) {\n  if (0 <= e.y && e.y < 100) {\n    var t = new Date(Date.UTC(-1, e.m, e.d, e.H, e.M, e.S, e.L));\n    return t.setUTCFullYear(e.y), t;\n  }\n  return new Date(Date.UTC(e.y, e.m, e.d, e.H, e.M, e.S, e.L));\n}\nfunction gi(e, t, n) {\n  return { y: e, m: t, d: n, H: 0, M: 0, S: 0, L: 0 };\n}\nfunction B$(e) {\n  var t = e.dateTime, n = e.date, r = e.time, i = e.periods, s = e.days, a = e.shortDays, o = e.months, l = e.shortMonths, c = vi(i), u = yi(i), d = vi(s), h = yi(s), p = vi(a), f = yi(a), g = vi(o), m = yi(o), v = vi(l), x = yi(l), _ = {\n    a: L,\n    A: k,\n    b: U,\n    B: Z,\n    c: null,\n    d: Jh,\n    e: Jh,\n    f: lM,\n    g: yM,\n    G: bM,\n    H: sM,\n    I: aM,\n    j: oM,\n    L: Xm,\n    m: cM,\n    M: uM,\n    p: j,\n    q: F,\n    Q: nd,\n    s: rd,\n    S: hM,\n    u: dM,\n    U: pM,\n    V: fM,\n    w: mM,\n    W: gM,\n    x: null,\n    X: null,\n    y: vM,\n    Y: xM,\n    Z: _M,\n    "%": ed\n  }, E = {\n    a: Y,\n    A: ot,\n    b: Q,\n    B: q,\n    c: null,\n    d: td,\n    e: td,\n    f: TM,\n    g: IM,\n    G: PM,\n    H: EM,\n    I: OM,\n    j: SM,\n    L: Km,\n    m: wM,\n    M: $M,\n    p: tt,\n    q: lt,\n    Q: nd,\n    s: rd,\n    S: MM,\n    u: CM,\n    U: AM,\n    V: LM,\n    w: kM,\n    W: DM,\n    x: null,\n    X: null,\n    y: RM,\n    Y: NM,\n    Z: UM,\n    "%": ed\n  }, b = {\n    a: R,\n    A: $,\n    b: H,\n    B: P,\n    c: B,\n    d: Kh,\n    e: Kh,\n    f: eM,\n    g: Zh,\n    G: Xh,\n    H: Qh,\n    I: Qh,\n    j: K$,\n    L: tM,\n    m: Z$,\n    M: Q$,\n    p: A,\n    q: X$,\n    Q: rM,\n    s: iM,\n    S: J$,\n    u: F$,\n    U: j$,\n    V: W$,\n    w: z$,\n    W: q$,\n    x: O,\n    X: w,\n    y: Zh,\n    Y: Xh,\n    Z: Y$,\n    "%": nM\n  };\n  _.x = S(n, _), _.X = S(r, _), _.c = S(t, _), E.x = S(n, E), E.X = S(r, E), E.c = S(t, E);\n  function S(z, W) {\n    return function(X) {\n      var V = [], ut = -1, st = 0, Dt = z.length, Nt, nt, yt;\n      for (X instanceof Date || (X = /* @__PURE__ */ new Date(+X)); ++ut < Dt; )\n        z.charCodeAt(ut) === 37 && (V.push(z.slice(st, ut)), (nt = Yh[Nt = z.charAt(++ut)]) != null ? Nt = z.charAt(++ut) : nt = Nt === "e" ? " " : "0", (yt = W[Nt]) && (Nt = yt(X, nt)), V.push(Nt), st = ut + 1);\n      return V.push(z.slice(st, ut)), V.join("");\n    };\n  }\n  function M(z, W) {\n    return function(X) {\n      var V = gi(1900, void 0, 1), ut = D(V, z, X += "", 0), st, Dt;\n      if (ut != X.length) return null;\n      if ("Q" in V) return new Date(V.Q);\n      if ("s" in V) return new Date(V.s * 1e3 + ("L" in V ? V.L : 0));\n      if (W && !("Z" in V) && (V.Z = 0), "p" in V && (V.H = V.H % 12 + V.p * 12), V.m === void 0 && (V.m = "q" in V ? V.q : 0), "V" in V) {\n        if (V.V < 1 || V.V > 53) return null;\n        "w" in V || (V.w = 1), "Z" in V ? (st = Vo(gi(V.y, 0, 1)), Dt = st.getUTCDay(), st = Dt > 4 || Dt === 0 ? Oa.ceil(st) : Oa(st), st = Xc.offset(st, (V.V - 1) * 7), V.y = st.getUTCFullYear(), V.m = st.getUTCMonth(), V.d = st.getUTCDate() + (V.w + 6) % 7) : (st = Ho(gi(V.y, 0, 1)), Dt = st.getDay(), st = Dt > 4 || Dt === 0 ? Ea.ceil(st) : Ea(st), st = vs.offset(st, (V.V - 1) * 7), V.y = st.getFullYear(), V.m = st.getMonth(), V.d = st.getDate() + (V.w + 6) % 7);\n      } else ("W" in V || "U" in V) && ("w" in V || (V.w = "u" in V ? V.u % 7 : "W" in V ? 1 : 0), Dt = "Z" in V ? Vo(gi(V.y, 0, 1)).getUTCDay() : Ho(gi(V.y, 0, 1)).getDay(), V.m = 0, V.d = "W" in V ? (V.w + 6) % 7 + V.W * 7 - (Dt + 5) % 7 : V.w + V.U * 7 - (Dt + 6) % 7);\n      return "Z" in V ? (V.H += V.Z / 100 | 0, V.M += V.Z % 100, Vo(V)) : Ho(V);\n    };\n  }\n  function D(z, W, X, V) {\n    for (var ut = 0, st = W.length, Dt = X.length, Nt, nt; ut < st; ) {\n      if (V >= Dt) return -1;\n      if (Nt = W.charCodeAt(ut++), Nt === 37) {\n        if (Nt = W.charAt(ut++), nt = b[Nt in Yh ? W.charAt(ut++) : Nt], !nt || (V = nt(z, X, V)) < 0) return -1;\n      } else if (Nt != X.charCodeAt(V++))\n        return -1;\n    }\n    return V;\n  }\n  function A(z, W, X) {\n    var V = c.exec(W.slice(X));\n    return V ? (z.p = u.get(V[0].toLowerCase()), X + V[0].length) : -1;\n  }\n  function R(z, W, X) {\n    var V = p.exec(W.slice(X));\n    return V ? (z.w = f.get(V[0].toLowerCase()), X + V[0].length) : -1;\n  }\n  function $(z, W, X) {\n    var V = d.exec(W.slice(X));\n    return V ? (z.w = h.get(V[0].toLowerCase()), X + V[0].length) : -1;\n  }\n  function H(z, W, X) {\n    var V = v.exec(W.slice(X));\n    return V ? (z.m = x.get(V[0].toLowerCase()), X + V[0].length) : -1;\n  }\n  function P(z, W, X) {\n    var V = g.exec(W.slice(X));\n    return V ? (z.m = m.get(V[0].toLowerCase()), X + V[0].length) : -1;\n  }\n  function B(z, W, X) {\n    return D(z, t, W, X);\n  }\n  function O(z, W, X) {\n    return D(z, n, W, X);\n  }\n  function w(z, W, X) {\n    return D(z, r, W, X);\n  }\n  function L(z) {\n    return a[z.getDay()];\n  }\n  function k(z) {\n    return s[z.getDay()];\n  }\n  function U(z) {\n    return l[z.getMonth()];\n  }\n  function Z(z) {\n    return o[z.getMonth()];\n  }\n  function j(z) {\n    return i[+(z.getHours() >= 12)];\n  }\n  function F(z) {\n    return 1 + ~~(z.getMonth() / 3);\n  }\n  function Y(z) {\n    return a[z.getUTCDay()];\n  }\n  function ot(z) {\n    return s[z.getUTCDay()];\n  }\n  function Q(z) {\n    return l[z.getUTCMonth()];\n  }\n  function q(z) {\n    return o[z.getUTCMonth()];\n  }\n  function tt(z) {\n    return i[+(z.getUTCHours() >= 12)];\n  }\n  function lt(z) {\n    return 1 + ~~(z.getUTCMonth() / 3);\n  }\n  return {\n    format: function(z) {\n      var W = S(z += "", _);\n      return W.toString = function() {\n        return z;\n      }, W;\n    },\n    parse: function(z) {\n      var W = M(z += "", !1);\n      return W.toString = function() {\n        return z;\n      }, W;\n    },\n    utcFormat: function(z) {\n      var W = S(z += "", E);\n      return W.toString = function() {\n        return z;\n      }, W;\n    },\n    utcParse: function(z) {\n      var W = M(z += "", !0);\n      return W.toString = function() {\n        return z;\n      }, W;\n    }\n  };\n}\nvar Yh = { "-": "", _: " ", 0: "0" }, Yt = /^\\s*\\d+/, H$ = /^%/, V$ = /[\\\\^$*+?|[\\]().{}]/g;\nfunction vt(e, t, n) {\n  var r = e < 0 ? "-" : "", i = (r ? -e : e) + "", s = i.length;\n  return r + (s < n ? new Array(n - s + 1).join(t) + i : i);\n}\nfunction G$(e) {\n  return e.replace(V$, "\\\\$&");\n}\nfunction vi(e) {\n  return new RegExp("^(?:" + e.map(G$).join("|") + ")", "i");\n}\nfunction yi(e) {\n  return new Map(e.map((t, n) => [t.toLowerCase(), n]));\n}\nfunction z$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 1));\n  return r ? (e.w = +r[0], n + r[0].length) : -1;\n}\nfunction F$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 1));\n  return r ? (e.u = +r[0], n + r[0].length) : -1;\n}\nfunction j$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.U = +r[0], n + r[0].length) : -1;\n}\nfunction W$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.V = +r[0], n + r[0].length) : -1;\n}\nfunction q$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.W = +r[0], n + r[0].length) : -1;\n}\nfunction Xh(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 4));\n  return r ? (e.y = +r[0], n + r[0].length) : -1;\n}\nfunction Zh(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.y = +r[0] + (+r[0] > 68 ? 1900 : 2e3), n + r[0].length) : -1;\n}\nfunction Y$(e, t, n) {\n  var r = /^(Z)|([+-]\\d\\d)(?::?(\\d\\d))?/.exec(t.slice(n, n + 6));\n  return r ? (e.Z = r[1] ? 0 : -(r[2] + (r[3] || "00")), n + r[0].length) : -1;\n}\nfunction X$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 1));\n  return r ? (e.q = r[0] * 3 - 3, n + r[0].length) : -1;\n}\nfunction Z$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.m = r[0] - 1, n + r[0].length) : -1;\n}\nfunction Kh(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.d = +r[0], n + r[0].length) : -1;\n}\nfunction K$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 3));\n  return r ? (e.m = 0, e.d = +r[0], n + r[0].length) : -1;\n}\nfunction Qh(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.H = +r[0], n + r[0].length) : -1;\n}\nfunction Q$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.M = +r[0], n + r[0].length) : -1;\n}\nfunction J$(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 2));\n  return r ? (e.S = +r[0], n + r[0].length) : -1;\n}\nfunction tM(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 3));\n  return r ? (e.L = +r[0], n + r[0].length) : -1;\n}\nfunction eM(e, t, n) {\n  var r = Yt.exec(t.slice(n, n + 6));\n  return r ? (e.L = Math.floor(r[0] / 1e3), n + r[0].length) : -1;\n}\nfunction nM(e, t, n) {\n  var r = H$.exec(t.slice(n, n + 1));\n  return r ? n + r[0].length : -1;\n}\nfunction rM(e, t, n) {\n  var r = Yt.exec(t.slice(n));\n  return r ? (e.Q = +r[0], n + r[0].length) : -1;\n}\nfunction iM(e, t, n) {\n  var r = Yt.exec(t.slice(n));\n  return r ? (e.s = +r[0], n + r[0].length) : -1;\n}\nfunction Jh(e, t) {\n  return vt(e.getDate(), t, 2);\n}\nfunction sM(e, t) {\n  return vt(e.getHours(), t, 2);\n}\nfunction aM(e, t) {\n  return vt(e.getHours() % 12 || 12, t, 2);\n}\nfunction oM(e, t) {\n  return vt(1 + vs.count(Mn(e), e), t, 3);\n}\nfunction Xm(e, t) {\n  return vt(e.getMilliseconds(), t, 3);\n}\nfunction lM(e, t) {\n  return Xm(e, t) + "000";\n}\nfunction cM(e, t) {\n  return vt(e.getMonth() + 1, t, 2);\n}\nfunction uM(e, t) {\n  return vt(e.getMinutes(), t, 2);\n}\nfunction hM(e, t) {\n  return vt(e.getSeconds(), t, 2);\n}\nfunction dM(e) {\n  var t = e.getDay();\n  return t === 0 ? 7 : t;\n}\nfunction pM(e, t) {\n  return vt(ao.count(Mn(e) - 1, e), t, 2);\n}\nfunction Zm(e) {\n  var t = e.getDay();\n  return t >= 4 || t === 0 ? Qr(e) : Qr.ceil(e);\n}\nfunction fM(e, t) {\n  return e = Zm(e), vt(Qr.count(Mn(e), e) + (Mn(e).getDay() === 4), t, 2);\n}\nfunction mM(e) {\n  return e.getDay();\n}\nfunction gM(e, t) {\n  return vt(Ea.count(Mn(e) - 1, e), t, 2);\n}\nfunction vM(e, t) {\n  return vt(e.getFullYear() % 100, t, 2);\n}\nfunction yM(e, t) {\n  return e = Zm(e), vt(e.getFullYear() % 100, t, 2);\n}\nfunction xM(e, t) {\n  return vt(e.getFullYear() % 1e4, t, 4);\n}\nfunction bM(e, t) {\n  var n = e.getDay();\n  return e = n >= 4 || n === 0 ? Qr(e) : Qr.ceil(e), vt(e.getFullYear() % 1e4, t, 4);\n}\nfunction _M(e) {\n  var t = e.getTimezoneOffset();\n  return (t > 0 ? "-" : (t *= -1, "+")) + vt(t / 60 | 0, "0", 2) + vt(t % 60, "0", 2);\n}\nfunction td(e, t) {\n  return vt(e.getUTCDate(), t, 2);\n}\nfunction EM(e, t) {\n  return vt(e.getUTCHours(), t, 2);\n}\nfunction OM(e, t) {\n  return vt(e.getUTCHours() % 12 || 12, t, 2);\n}\nfunction SM(e, t) {\n  return vt(1 + Xc.count(ar(e), e), t, 3);\n}\nfunction Km(e, t) {\n  return vt(e.getUTCMilliseconds(), t, 3);\n}\nfunction TM(e, t) {\n  return Km(e, t) + "000";\n}\nfunction wM(e, t) {\n  return vt(e.getUTCMonth() + 1, t, 2);\n}\nfunction $M(e, t) {\n  return vt(e.getUTCMinutes(), t, 2);\n}\nfunction MM(e, t) {\n  return vt(e.getUTCSeconds(), t, 2);\n}\nfunction CM(e) {\n  var t = e.getUTCDay();\n  return t === 0 ? 7 : t;\n}\nfunction AM(e, t) {\n  return vt(Ym.count(ar(e) - 1, e), t, 2);\n}\nfunction Qm(e) {\n  var t = e.getUTCDay();\n  return t >= 4 || t === 0 ? Jr(e) : Jr.ceil(e);\n}\nfunction LM(e, t) {\n  return e = Qm(e), vt(Jr.count(ar(e), e) + (ar(e).getUTCDay() === 4), t, 2);\n}\nfunction kM(e) {\n  return e.getUTCDay();\n}\nfunction DM(e, t) {\n  return vt(Oa.count(ar(e) - 1, e), t, 2);\n}\nfunction RM(e, t) {\n  return vt(e.getUTCFullYear() % 100, t, 2);\n}\nfunction IM(e, t) {\n  return e = Qm(e), vt(e.getUTCFullYear() % 100, t, 2);\n}\nfunction NM(e, t) {\n  return vt(e.getUTCFullYear() % 1e4, t, 4);\n}\nfunction PM(e, t) {\n  var n = e.getUTCDay();\n  return e = n >= 4 || n === 0 ? Jr(e) : Jr.ceil(e), vt(e.getUTCFullYear() % 1e4, t, 4);\n}\nfunction UM() {\n  return "+0000";\n}\nfunction ed() {\n  return "%";\n}\nfunction nd(e) {\n  return +e;\n}\nfunction rd(e) {\n  return Math.floor(+e / 1e3);\n}\nvar Sr, Jm;\nBM({\n  dateTime: "%x, %X",\n  date: "%-m/%-d/%Y",\n  time: "%-I:%M:%S %p",\n  periods: ["AM", "PM"],\n  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],\n  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],\n  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],\n  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]\n});\nfunction BM(e) {\n  return Sr = B$(e), Jm = Sr.format, Sr.parse, Sr.utcFormat, Sr.utcParse, Sr;\n}\nfunction HM(e) {\n  return new Date(e);\n}\nfunction VM(e) {\n  return e instanceof Date ? +e : +/* @__PURE__ */ new Date(+e);\n}\nfunction tg(e, t, n, r, i, s, a, o, l, c) {\n  var u = wm(), d = u.invert, h = u.domain, p = c(".%L"), f = c(":%S"), g = c("%I:%M"), m = c("%I %p"), v = c("%a %d"), x = c("%b %d"), _ = c("%B"), E = c("%Y");\n  function b(S) {\n    return (l(S) < S ? p : o(S) < S ? f : a(S) < S ? g : s(S) < S ? m : r(S) < S ? i(S) < S ? v : x : n(S) < S ? _ : E)(S);\n  }\n  return u.invert = function(S) {\n    return new Date(d(S));\n  }, u.domain = function(S) {\n    return arguments.length ? h(Array.from(S, VM)) : h().map(HM);\n  }, u.ticks = function(S) {\n    var M = h();\n    return e(M[0], M[M.length - 1], S ?? 10);\n  }, u.tickFormat = function(S, M) {\n    return M == null ? b : c(M);\n  }, u.nice = function(S) {\n    var M = h();\n    return (!S || typeof S.range != "function") && (S = t(M[0], M[M.length - 1], S ?? 10)), S ? h(qm(M, S)) : u;\n  }, u.copy = function() {\n    return Vc(u, tg(e, t, n, r, i, s, a, o, l, c));\n  }, u;\n}\nfunction eg() {\n  return ii.apply(tg(P$, U$, Mn, Zc, ao, vs, Yc, qc, Ur, Jm).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);\n}\nconst id = Math.abs, Jt = Math.atan2, qn = Math.cos, GM = Math.max, Go = Math.min, Ze = Math.sin, Br = Math.sqrt, ne = 1e-12, ns = Math.PI, Sa = ns / 2, Ks = 2 * ns;\nfunction zM(e) {\n  return e > 1 ? 0 : e < -1 ? ns : Math.acos(e);\n}\nfunction sd(e) {\n  return e >= 1 ? Sa : e <= -1 ? -Sa : Math.asin(e);\n}\nfunction ng(e) {\n  this._context = e;\n}\nng.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;\n  },\n  point: function(e, t) {\n    switch (e = +e, t = +t, this._point) {\n      case 0:\n        this._point = 1, this._line ? this._context.lineTo(e, t) : this._context.moveTo(e, t);\n        break;\n      case 1:\n        this._point = 2;\n      // falls through\n      default:\n        this._context.lineTo(e, t);\n        break;\n    }\n  }\n};\nfunction oo(e) {\n  return new ng(e);\n}\nfunction Hn() {\n}\nfunction rg(e) {\n  this._context = e;\n}\nrg.prototype = {\n  areaStart: Hn,\n  areaEnd: Hn,\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    this._point && this._context.closePath();\n  },\n  point: function(e, t) {\n    e = +e, t = +t, this._point ? this._context.lineTo(e, t) : (this._point = 1, this._context.moveTo(e, t));\n  }\n};\nfunction ig(e) {\n  return new rg(e);\n}\nfunction FM(e, t) {\n  if (e.match(/^[a-z]+:\\/\\//i))\n    return e;\n  if (e.match(/^\\/\\//))\n    return window.location.protocol + e;\n  if (e.match(/^[a-z]+:/i))\n    return e;\n  const n = document.implementation.createHTMLDocument(), r = n.createElement("base"), i = n.createElement("a");\n  return n.head.appendChild(r), n.body.appendChild(i), t && (r.href = t), i.href = e, i.href;\n}\nconst jM = /* @__PURE__ */ (() => {\n  let e = 0;\n  const t = () => (\n    // eslint-disable-next-line no-bitwise\n    `0000${(Math.random() * 36 ** 4 << 0).toString(36)}`.slice(-4)\n  );\n  return () => (e += 1, `u${t()}${e}`);\n})();\nfunction On(e) {\n  const t = [];\n  for (let n = 0, r = e.length; n < r; n++)\n    t.push(e[n]);\n  return t;\n}\nfunction Ta(e, t) {\n  const n = (e.ownerDocument.defaultView || window).getComputedStyle(e).getPropertyValue(t);\n  return n ? parseFloat(n.replace("px", "")) : 0;\n}\nfunction WM(e) {\n  const t = Ta(e, "border-left-width"), n = Ta(e, "border-right-width");\n  return e.clientWidth + t + n;\n}\nfunction qM(e) {\n  const t = Ta(e, "border-top-width"), n = Ta(e, "border-bottom-width");\n  return e.clientHeight + t + n;\n}\nfunction sg(e, t = {}) {\n  const n = t.width || WM(e), r = t.height || qM(e);\n  return { width: n, height: r };\n}\nfunction YM() {\n  let e, t;\n  try {\n    t = process;\n  } catch {\n  }\n  const n = t && t.env ? t.env.devicePixelRatio : null;\n  return n && (e = parseInt(n, 10), Number.isNaN(e) && (e = 1)), e || window.devicePixelRatio || 1;\n}\nconst ve = 16384;\nfunction XM(e) {\n  (e.width > ve || e.height > ve) && (e.width > ve && e.height > ve ? e.width > e.height ? (e.height *= ve / e.width, e.width = ve) : (e.width *= ve / e.height, e.height = ve) : e.width > ve ? (e.height *= ve / e.width, e.width = ve) : (e.width *= ve / e.height, e.height = ve));\n}\nfunction wa(e) {\n  return new Promise((t, n) => {\n    const r = new Image();\n    r.decode = () => t(r), r.onload = () => t(r), r.onerror = n, r.crossOrigin = "anonymous", r.decoding = "async", r.src = e;\n  });\n}\nasync function ZM(e) {\n  return Promise.resolve().then(() => new XMLSerializer().serializeToString(e)).then(encodeURIComponent).then((t) => `data:image/svg+xml;charset=utf-8,${t}`);\n}\nasync function KM(e, t, n) {\n  const r = "http://www.w3.org/2000/svg", i = document.createElementNS(r, "svg"), s = document.createElementNS(r, "foreignObject");\n  return i.setAttribute("width", `${t}`), i.setAttribute("height", `${n}`), i.setAttribute("viewBox", `0 0 ${t} ${n}`), s.setAttribute("width", "100%"), s.setAttribute("height", "100%"), s.setAttribute("x", "0"), s.setAttribute("y", "0"), s.setAttribute("externalResourcesRequired", "true"), i.appendChild(s), s.appendChild(e), ZM(i);\n}\nconst pe = (e, t) => {\n  if (e instanceof t)\n    return !0;\n  const n = Object.getPrototypeOf(e);\n  return n === null ? !1 : n.constructor.name === t.name || pe(n, t);\n};\nfunction QM(e) {\n  const t = e.getPropertyValue("content");\n  return `${e.cssText} content: \'${t.replace(/\'|"/g, "")}\';`;\n}\nfunction JM(e) {\n  return On(e).map((t) => {\n    const n = e.getPropertyValue(t), r = e.getPropertyPriority(t);\n    return `${t}: ${n}${r ? " !important" : ""};`;\n  }).join(" ");\n}\nfunction t2(e, t, n) {\n  const r = `.${e}:${t}`, i = n.cssText ? QM(n) : JM(n);\n  return document.createTextNode(`${r}{${i}}`);\n}\nfunction ad(e, t, n) {\n  const r = window.getComputedStyle(e, n), i = r.getPropertyValue("content");\n  if (i === "" || i === "none")\n    return;\n  const s = jM();\n  try {\n    t.className = `${t.className} ${s}`;\n  } catch {\n    return;\n  }\n  const a = document.createElement("style");\n  a.appendChild(t2(s, n, r)), t.appendChild(a);\n}\nfunction e2(e, t) {\n  ad(e, t, ":before"), ad(e, t, ":after");\n}\nconst od = "application/font-woff", ld = "image/jpeg", n2 = {\n  woff: od,\n  woff2: od,\n  ttf: "application/font-truetype",\n  eot: "application/vnd.ms-fontobject",\n  png: "image/png",\n  jpg: ld,\n  jpeg: ld,\n  gif: "image/gif",\n  tiff: "image/tiff",\n  svg: "image/svg+xml",\n  webp: "image/webp"\n};\nfunction r2(e) {\n  const t = /\\.([^./]*?)$/g.exec(e);\n  return t ? t[1] : "";\n}\nfunction Kc(e) {\n  const t = r2(e).toLowerCase();\n  return n2[t] || "";\n}\nfunction i2(e) {\n  return e.split(/,/)[1];\n}\nfunction Rl(e) {\n  return e.search(/^(data:)/) !== -1;\n}\nfunction s2(e, t) {\n  return `data:${t};base64,${e}`;\n}\nasync function ag(e, t, n) {\n  const r = await fetch(e, t);\n  if (r.status === 404)\n    throw new Error(`Resource "${r.url}" not found`);\n  const i = await r.blob();\n  return new Promise((s, a) => {\n    const o = new FileReader();\n    o.onerror = a, o.onloadend = () => {\n      try {\n        s(n({ res: r, result: o.result }));\n      } catch (l) {\n        a(l);\n      }\n    }, o.readAsDataURL(i);\n  });\n}\nconst zo = {};\nfunction a2(e, t, n) {\n  let r = e.replace(/\\?.*/, "");\n  return n && (r = e), /ttf|otf|eot|woff2?/i.test(r) && (r = r.replace(/.*\\//, "")), t ? `[${t}]${r}` : r;\n}\nasync function Qc(e, t, n) {\n  const r = a2(e, t, n.includeQueryParams);\n  if (zo[r] != null)\n    return zo[r];\n  n.cacheBust && (e += (/\\?/.test(e) ? "&" : "?") + (/* @__PURE__ */ new Date()).getTime());\n  let i;\n  try {\n    const s = await ag(e, n.fetchRequestInit, ({ res: a, result: o }) => (t || (t = a.headers.get("Content-Type") || ""), i2(o)));\n    i = s2(s, t);\n  } catch (s) {\n    i = n.imagePlaceholder || "";\n    let a = `Failed to fetch resource: ${e}`;\n    s && (a = typeof s == "string" ? s : s.message), a && console.warn(a);\n  }\n  return zo[r] = i, i;\n}\nasync function o2(e) {\n  const t = e.toDataURL();\n  return t === "data:," ? e.cloneNode(!1) : wa(t);\n}\nasync function l2(e, t) {\n  if (e.currentSrc) {\n    const s = document.createElement("canvas"), a = s.getContext("2d");\n    s.width = e.clientWidth, s.height = e.clientHeight, a == null || a.drawImage(e, 0, 0, s.width, s.height);\n    const o = s.toDataURL();\n    return wa(o);\n  }\n  const n = e.poster, r = Kc(n), i = await Qc(n, r, t);\n  return wa(i);\n}\nasync function c2(e) {\n  var t;\n  try {\n    if (!((t = e == null ? void 0 : e.contentDocument) === null || t === void 0) && t.body)\n      return await lo(e.contentDocument.body, {}, !0);\n  } catch {\n  }\n  return e.cloneNode(!1);\n}\nasync function u2(e, t) {\n  return pe(e, HTMLCanvasElement) ? o2(e) : pe(e, HTMLVideoElement) ? l2(e, t) : pe(e, HTMLIFrameElement) ? c2(e) : e.cloneNode(!1);\n}\nconst h2 = (e) => e.tagName != null && e.tagName.toUpperCase() === "SLOT";\nasync function d2(e, t, n) {\n  var r, i;\n  let s = [];\n  return h2(e) && e.assignedNodes ? s = On(e.assignedNodes()) : pe(e, HTMLIFrameElement) && !((r = e.contentDocument) === null || r === void 0) && r.body ? s = On(e.contentDocument.body.childNodes) : s = On(((i = e.shadowRoot) !== null && i !== void 0 ? i : e).childNodes), s.length === 0 || pe(e, HTMLVideoElement) || await s.reduce((a, o) => a.then(() => lo(o, n)).then((l) => {\n    l && t.appendChild(l);\n  }), Promise.resolve()), t;\n}\nfunction p2(e, t) {\n  const n = t.style;\n  if (!n)\n    return;\n  const r = window.getComputedStyle(e);\n  r.cssText ? (n.cssText = r.cssText, n.transformOrigin = r.transformOrigin) : On(r).forEach((i) => {\n    let s = r.getPropertyValue(i);\n    i === "font-size" && s.endsWith("px") && (s = `${Math.floor(parseFloat(s.substring(0, s.length - 2))) - 0.1}px`), pe(e, HTMLIFrameElement) && i === "display" && s === "inline" && (s = "block"), i === "d" && t.getAttribute("d") && (s = `path(${t.getAttribute("d")})`), n.setProperty(i, s, r.getPropertyPriority(i));\n  });\n}\nfunction f2(e, t) {\n  pe(e, HTMLTextAreaElement) && (t.innerHTML = e.value), pe(e, HTMLInputElement) && t.setAttribute("value", e.value);\n}\nfunction m2(e, t) {\n  if (pe(e, HTMLSelectElement)) {\n    const n = t, r = Array.from(n.children).find((i) => e.value === i.getAttribute("value"));\n    r && r.setAttribute("selected", "");\n  }\n}\nfunction g2(e, t) {\n  return pe(t, Element) && (p2(e, t), e2(e, t), f2(e, t), m2(e, t)), t;\n}\nasync function v2(e, t) {\n  const n = e.querySelectorAll ? e.querySelectorAll("use") : [];\n  if (n.length === 0)\n    return e;\n  const r = {};\n  for (let s = 0; s < n.length; s++) {\n    const a = n[s].getAttribute("xlink:href");\n    if (a) {\n      const o = e.querySelector(a), l = document.querySelector(a);\n      !o && l && !r[a] && (r[a] = await lo(l, t, !0));\n    }\n  }\n  const i = Object.values(r);\n  if (i.length) {\n    const s = "http://www.w3.org/1999/xhtml", a = document.createElementNS(s, "svg");\n    a.setAttribute("xmlns", s), a.style.position = "absolute", a.style.width = "0", a.style.height = "0", a.style.overflow = "hidden", a.style.display = "none";\n    const o = document.createElementNS(s, "defs");\n    a.appendChild(o);\n    for (let l = 0; l < i.length; l++)\n      o.appendChild(i[l]);\n    e.appendChild(a);\n  }\n  return e;\n}\nasync function lo(e, t, n) {\n  return !n && t.filter && !t.filter(e) ? null : Promise.resolve(e).then((r) => u2(r, t)).then((r) => d2(e, r, t)).then((r) => g2(e, r)).then((r) => v2(r, t));\n}\nconst og = /url\\(([\'"]?)([^\'"]+?)\\1\\)/g, y2 = /url\\([^)]+\\)\\s*format\\((["\']?)([^"\']+)\\1\\)/g, x2 = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nfunction b2(e) {\n  const t = e.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, "\\\\$1");\n  return new RegExp(`(url\\\\([\'"]?)(${t})([\'"]?\\\\))`, "g");\n}\nfunction _2(e) {\n  const t = [];\n  return e.replace(og, (n, r, i) => (t.push(i), n)), t.filter((n) => !Rl(n));\n}\nasync function E2(e, t, n, r, i) {\n  try {\n    const s = n ? FM(t, n) : t, a = Kc(t);\n    let o;\n    return i || (o = await Qc(s, a, r)), e.replace(b2(t), `$1${o}$3`);\n  } catch {\n  }\n  return e;\n}\nfunction O2(e, { preferredFontFormat: t }) {\n  return t ? e.replace(x2, (n) => {\n    for (; ; ) {\n      const [r, , i] = y2.exec(n) || [];\n      if (!i)\n        return "";\n      if (i === t)\n        return `src: ${r};`;\n    }\n  }) : e;\n}\nfunction lg(e) {\n  return e.search(og) !== -1;\n}\nasync function cg(e, t, n) {\n  if (!lg(e))\n    return e;\n  const r = O2(e, n);\n  return _2(r).reduce((i, s) => i.then((a) => E2(a, s, t, n)), Promise.resolve(r));\n}\nasync function Ls(e, t, n) {\n  var r;\n  const i = (r = t.style) === null || r === void 0 ? void 0 : r.getPropertyValue(e);\n  if (i) {\n    const s = await cg(i, null, n);\n    return t.style.setProperty(e, s, t.style.getPropertyPriority(e)), !0;\n  }\n  return !1;\n}\nasync function S2(e, t) {\n  await Ls("background", e, t) || await Ls("background-image", e, t), await Ls("mask", e, t) || await Ls("mask-image", e, t);\n}\nasync function T2(e, t) {\n  const n = pe(e, HTMLImageElement);\n  if (!(n && !Rl(e.src)) && !(pe(e, SVGImageElement) && !Rl(e.href.baseVal)))\n    return;\n  const r = n ? e.src : e.href.baseVal, i = await Qc(r, Kc(r), t);\n  await new Promise((s, a) => {\n    e.onload = s, e.onerror = a;\n    const o = e;\n    o.decode && (o.decode = s), o.loading === "lazy" && (o.loading = "eager"), n ? (e.srcset = "", e.src = i) : e.href.baseVal = i;\n  });\n}\nasync function w2(e, t) {\n  const n = On(e.childNodes).map((r) => ug(r, t));\n  await Promise.all(n).then(() => e);\n}\nasync function ug(e, t) {\n  pe(e, Element) && (await S2(e, t), await T2(e, t), await w2(e, t));\n}\nfunction $2(e, t) {\n  const { style: n } = e;\n  t.backgroundColor && (n.backgroundColor = t.backgroundColor), t.width && (n.width = `${t.width}px`), t.height && (n.height = `${t.height}px`);\n  const r = t.style;\n  return r != null && Object.keys(r).forEach((i) => {\n    n[i] = r[i];\n  }), e;\n}\nconst cd = {};\nasync function ud(e) {\n  let t = cd[e];\n  if (t != null)\n    return t;\n  const n = await (await fetch(e)).text();\n  return t = { url: e, cssText: n }, cd[e] = t, t;\n}\nasync function hd(e, t) {\n  let n = e.cssText;\n  const r = /url\\(["\']?([^"\')]+)["\']?\\)/g, i = (n.match(/url\\([^)]+\\)/g) || []).map(async (s) => {\n    let a = s.replace(r, "$1");\n    return a.startsWith("https://") || (a = new URL(a, e.url).href), ag(a, t.fetchRequestInit, ({ result: o }) => (n = n.replace(s, `url(${o})`), [s, o]));\n  });\n  return Promise.all(i).then(() => n);\n}\nfunction dd(e) {\n  if (e == null)\n    return [];\n  const t = [], n = /(\\/\\*[\\s\\S]*?\\*\\/)/gi;\n  let r = e.replace(n, "");\n  const i = new RegExp("((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})", "gi");\n  for (; ; ) {\n    const l = i.exec(r);\n    if (l === null)\n      break;\n    t.push(l[0]);\n  }\n  r = r.replace(i, "");\n  const s = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi, a = "((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})", o = new RegExp(a, "gi");\n  for (; ; ) {\n    let l = s.exec(r);\n    if (l === null) {\n      if (l = o.exec(r), l === null)\n        break;\n      s.lastIndex = o.lastIndex;\n    } else\n      o.lastIndex = s.lastIndex;\n    t.push(l[0]);\n  }\n  return t;\n}\nasync function M2(e, t) {\n  const n = [], r = [];\n  return e.forEach((i) => {\n    if ("cssRules" in i)\n      try {\n        On(i.cssRules || []).forEach((s, a) => {\n          if (s.type === CSSRule.IMPORT_RULE) {\n            let o = a + 1;\n            const l = s.href, c = ud(l).then((u) => hd(u, t)).then((u) => dd(u).forEach((d) => {\n              try {\n                i.insertRule(d, d.startsWith("@import") ? o += 1 : i.cssRules.length);\n              } catch (h) {\n                console.error("Error inserting rule from remote css", {\n                  rule: d,\n                  error: h\n                });\n              }\n            })).catch((u) => {\n              console.error("Error loading remote css", u.toString());\n            });\n            r.push(c);\n          }\n        });\n      } catch (s) {\n        const a = e.find((o) => o.href == null) || document.styleSheets[0];\n        i.href != null && r.push(ud(i.href).then((o) => hd(o, t)).then((o) => dd(o).forEach((l) => {\n          a.insertRule(l, i.cssRules.length);\n        })).catch((o) => {\n          console.error("Error loading remote stylesheet", o);\n        })), console.error("Error inlining remote css file", s);\n      }\n  }), Promise.all(r).then(() => (e.forEach((i) => {\n    if ("cssRules" in i)\n      try {\n        On(i.cssRules || []).forEach((s) => {\n          n.push(s);\n        });\n      } catch (s) {\n        console.error(`Error while reading CSS rules from ${i.href}`, s);\n      }\n  }), n));\n}\nfunction C2(e) {\n  return e.filter((t) => t.type === CSSRule.FONT_FACE_RULE).filter((t) => lg(t.style.getPropertyValue("src")));\n}\nasync function A2(e, t) {\n  if (e.ownerDocument == null)\n    throw new Error("Provided element is not within a Document");\n  const n = On(e.ownerDocument.styleSheets), r = await M2(n, t);\n  return C2(r);\n}\nasync function L2(e, t) {\n  const n = await A2(e, t);\n  return (await Promise.all(n.map((r) => {\n    const i = r.parentStyleSheet ? r.parentStyleSheet.href : null;\n    return cg(r.cssText, i, t);\n  }))).join(`\n`);\n}\nasync function k2(e, t) {\n  const n = t.fontEmbedCSS != null ? t.fontEmbedCSS : t.skipFonts ? null : await L2(e, t);\n  if (n) {\n    const r = document.createElement("style"), i = document.createTextNode(n);\n    r.appendChild(i), e.firstChild ? e.insertBefore(r, e.firstChild) : e.appendChild(r);\n  }\n}\nasync function D2(e, t = {}) {\n  const { width: n, height: r } = sg(e, t), i = await lo(e, t, !0);\n  return await k2(i, t), await ug(i, t), $2(i, t), await KM(i, n, r);\n}\nasync function hg(e, t = {}) {\n  const { width: n, height: r } = sg(e, t), i = await D2(e, t), s = await wa(i), a = document.createElement("canvas"), o = a.getContext("2d"), l = t.pixelRatio || YM(), c = t.canvasWidth || n, u = t.canvasHeight || r;\n  return a.width = c * l, a.height = u * l, t.skipAutoScale || XM(a), a.style.width = `${c}`, a.style.height = `${u}`, t.backgroundColor && (o.fillStyle = t.backgroundColor, o.fillRect(0, 0, a.width, a.height)), o.drawImage(s, 0, 0, a.width, a.height), a;\n}\nasync function R2(e, t = {}) {\n  return (await hg(e, t)).toDataURL();\n}\nasync function I2(e, t = {}) {\n  return (await hg(e, t)).toDataURL("image/jpeg", t.quality || 1);\n}\nlet Dn = class {\n  constructor(t, n) {\n    this.model = t, this.services = n, this.init();\n  }\n  init() {\n  }\n  update() {\n  }\n  // Used to pass down information to the components\n  setModel(t) {\n    this.model = t;\n  }\n  // Used to pass down services to the components\n  setServices(t) {\n    this.services = t;\n  }\n};\nconst N2 = "DONT_STYLE_ME_css_styles_verifier";\nlet N = class Il extends Dn {\n  // initialized in initializeID() called by init()\n  constructor(t, n) {\n    super(t, n);\n  }\n  static getHTMLElementSize(t) {\n    return {\n      width: t.clientWidth,\n      height: t.clientHeight\n    };\n  }\n  static getSVGElementSize(t, n = {\n    useAttrs: !1,\n    useClientDimensions: !1,\n    useBBox: !1,\n    useBoundingRect: !1\n  }) {\n    t.attr || (t = I(t));\n    const r = {\n      width: 0,\n      height: 0\n    }, i = (h) => {\n      h && Object.keys(r).forEach((p) => {\n        if (h[p]) {\n          const f = h[p], g = parseFloat(f);\n          f && g > r[p] && ("" + f).indexOf("%") === -1 && (r[p] = g);\n        }\n      });\n    }, s = {\n      width: t.attr("width"),\n      height: t.attr("height")\n    }, a = t.node();\n    let o, l, c, u;\n    try {\n      typeof a.getBBox == "function" && (o = a.getBBox(), l = {\n        width: o.width,\n        height: o.height\n      });\n    } catch (h) {\n      console.error(h);\n    }\n    try {\n      typeof (a == null ? void 0 : a.getBoundingClientRect) == "function" && (c = a.getBoundingClientRect(), u = {\n        width: c.width,\n        height: c.height\n      });\n    } catch (h) {\n      console.error(h);\n    }\n    let d;\n    if (a instanceof SVGSVGElement && (d = {\n      width: a.clientWidth,\n      height: a.clientHeight\n    }), n) {\n      if (n.useAttrs && (i(s), r.width > 0 && r.height > 0))\n        return r;\n      if (n.useClientDimensions && (i(d), r.width > 0 && r.height > 0))\n        return d;\n      if (n.useBBox && (i(l), r.width > 0 && r.height > 0))\n        return l;\n      if (n.useBoundingRect && (i(u), r.width > 0 && r.height > 0))\n        return u;\n    }\n    try {\n      const h = {\n        width: y(t.node(), "width", "baseVal", "value"),\n        height: y(t.node(), "height", "baseVal", "value")\n      };\n      i(h);\n    } catch {\n      i(d), i(l), i(s);\n    }\n    return r;\n  }\n  static appendOrSelect(t, n) {\n    const r = t.select(`${n}`);\n    if (r.empty()) {\n      let i = n.split("#"), s, a;\n      return i.length === 2 ? (s = i[0], i = i[1].split("."), a = i[0]) : (i = n.split("."), s = i[0]), t.append(s).attr("id", a).attr("class", i.slice(1).join(" "));\n    }\n    return r;\n  }\n  init() {\n    this.initializeID(), this.styleHolderElement(), this.addMainContainer(), this.model.getOptions().resizable && this.addResizeListener(), this.addHolderListeners(), this.handleFullscreenChange();\n  }\n  getChartID() {\n    return this.chartID;\n  }\n  getElementOffset(t, n = !1) {\n    const r = { left: 0, top: 0 }, i = t.getBoundingClientRect(), s = n ? { left: 0, top: 0 } : this.getHolder().getBoundingClientRect();\n    try {\n      r.left = i.left - s.left, r.top = i.top - s.top;\n    } catch (a) {\n      console.error(a);\n    }\n    return r;\n  }\n  generateElementIDString(t) {\n    return `chart-${this.chartID}-${t}`;\n  }\n  initializeID() {\n    this.chartID = Math.floor((1 + Math.random()) * 281474976710656).toString(16);\n  }\n  addMainContainer() {\n    const t = this.model.getOptions(), n = y(t, "style", "prefix"), r = I(this.getHolder()).append("div").classed(`${ue}--${n}--chart-wrapper`, !0).attr("id", `chart-${this.getChartID()}`).style("height", "100%").style("width", "100%");\n    r.append("g").attr("class", N2), this.mainContainer = r.node();\n  }\n  update() {\n    this.styleHolderElement();\n  }\n  styleHolderElement() {\n    const t = this.getHolder(), { width: n, height: r, theme: i } = this.model.getOptions();\n    n !== this.width && (t.style.width = n, this.width = n), r !== this.height && (t.style.height = r, this.height = r), I(this.getHolder()).classed(`${ue}--chart-holder`, !0).attr("data-carbon-theme", i);\n  }\n  getHolder() {\n    return this.model.get("holder");\n  }\n  exportToJPG() {\n    const t = this, n = this.model.getOptions(), r = this.getHolder(), i = I(r);\n    i.classed("filled", !0), I2(this.getMainContainer(), {\n      quality: 1,\n      // Remove toolbar\n      filter: (s) => !(s.classList && s.classList.contains("cds--cc--toolbar"))\n    }).then(function(s) {\n      var a;\n      let o = "myChart";\n      const l = y(n, "fileDownload", "fileName");\n      typeof l == "function" ? o = l("jpg") : typeof l == "string" && (o = l), (a = t.services.files) == null || a.downloadImage(s, `${o}.jpg`), i.classed("filled", !1);\n    });\n  }\n  exportToPNG() {\n    const t = this, n = this.model.getOptions(), r = this.getHolder(), i = I(r);\n    i.classed("filled", !0), R2(this.getMainContainer(), {\n      quality: 1,\n      // Remove toolbar\n      filter: (s) => !(s.classList && s.classList.contains("cds--cc--toolbar"))\n    }).then(function(s) {\n      var a;\n      let o = "myChart";\n      const l = y(n, "fileDownload", "fileName");\n      typeof l == "function" ? o = l("png") : typeof l == "string" && (o = l), (a = t.services.files) == null || a.downloadImage(s, `${o}.png`), i.classed("filled", !1);\n    }).catch(function(s) {\n      console.error("oops, something went wrong!", s);\n    });\n  }\n  isFullScreenMode() {\n    return I(this.getHolder()).classed("fullscreen");\n  }\n  toggleFullscreen() {\n    const t = this.getHolder();\n    I(t).classed("fullscreen") && (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement) ? document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen && document.msExitFullscreen() : t.requestFullscreen ? t.requestFullscreen() : t.webkitRequestFullscreen ? t.webkitRequestFullscreen() : t.mozRequestFullScreen ? t.mozRequestFullScreen() : t.msRequestFullscreen && t.msRequestFullscreen();\n  }\n  handleFullscreenChange() {\n    document.addEventListener("fullscreenchange", () => {\n      const t = I(this.getHolder()), n = t.classed("fullscreen");\n      t.classed("fullscreen", !n);\n    });\n  }\n  setSVGMaxHeight() {\n    if (!this.model.getOptions().height) {\n      const { height: t } = Il.getSVGElementSize(\n        I(this.mainContainer),\n        {\n          useBBox: !0\n        }\n      ), n = I(this.mainContainer).attr("class"), r = I(this.mainContainer).selectAll(`.${n} > svg`);\n      let i = 0;\n      r.nodes().forEach(function(s) {\n        i += Number(\n          Il.getSVGElementSize(I(s), {\n            useBBox: !0\n          }).height\n        );\n      }), i <= t ? I(this.mainContainer).attr("height", i) : I(this.mainContainer).attr("height", "100%");\n    }\n  }\n  getMainContainer() {\n    return this.mainContainer;\n  }\n  addHolderListeners() {\n    const t = this.getHolder();\n    t && I(t).on("mouseover", () => {\n      var n;\n      (n = this.services.events) == null || n.dispatchEvent(T.Chart.MOUSEOVER);\n    }).on("mouseout", () => {\n      var n;\n      (n = this.services.events) == null || n.dispatchEvent(T.Chart.MOUSEOUT);\n    });\n  }\n  addResizeListener() {\n    const t = this.getHolder();\n    if (!t)\n      return;\n    let n = t.clientWidth, r = t.clientHeight;\n    const i = ba(() => {\n      var s;\n      t && (Math.abs(n - t.clientWidth) > 1 || Math.abs(r - t.clientHeight) > 1) && (n = t.clientWidth, r = t.clientHeight, (s = this.services.events) == null || s.dispatchEvent(T.Chart.RESIZE));\n    }, 12.5);\n    new ResizeObserver(i).observe(t);\n  }\n}, Nl = class dg extends Dn {\n  static appendOrUpdateLinearGradient(t) {\n    let n = t.svg.select(`defs linearGradient#${t.id}`);\n    n.empty() && (n = t.svg.append("defs").append("linearGradient").attr("id", t.id).attr("x1", t.x1).attr("x2", t.x2).attr("y1", t.y1).attr("y2", t.y2)), n.selectAll("stop").remove(), n.selectAll("stop").data(t.stops).enter().append("stop").attr("offset", (r) => r.offset).style("stop-color", (r) => r.color).style("stop-opacity", (r) => r.opacity);\n  }\n  static getOffsetRatio(t) {\n    return (Math.abs(t[1]) * 100 / Math.abs(t[0] - t[1])).toFixed(2) + "%";\n  }\n  static getStops(t, n) {\n    const r = t[0] < 0 && t[1] > 0;\n    let i = [\n      {\n        offset: "0%",\n        color: n,\n        opacity: "0.6"\n      },\n      {\n        offset: "80%",\n        color: n,\n        opacity: "0"\n      }\n    ];\n    return r && (i = [\n      {\n        offset: "0%",\n        color: n,\n        opacity: "0.6"\n      },\n      {\n        offset: dg.getOffsetRatio(t),\n        color: n,\n        opacity: "0"\n      },\n      {\n        offset: "100%",\n        color: n,\n        opacity: "0.6"\n      }\n    ]), i;\n  }\n};\nfunction pd(e) {\n  const t = P2(pg(e), 360);\n  return Nn(t, [0, 10]) || Nn(t, [350, 0]) ? {\n    textAnchor: dn.START,\n    dominantBaseline: pn.MIDDLE\n  } : Nn(t, [10, 80]) ? {\n    textAnchor: dn.START,\n    dominantBaseline: pn.HANGING\n  } : Nn(t, [80, 100]) ? {\n    textAnchor: dn.MIDDLE,\n    dominantBaseline: pn.HANGING\n  } : Nn(t, [100, 170]) ? {\n    textAnchor: dn.END,\n    dominantBaseline: pn.HANGING\n  } : Nn(t, [170, 190]) ? {\n    textAnchor: dn.END,\n    dominantBaseline: pn.MIDDLE\n  } : Nn(t, [190, 260]) ? {\n    textAnchor: dn.END,\n    dominantBaseline: pn.BASELINE\n  } : Nn(t, [260, 280]) ? {\n    textAnchor: dn.MIDDLE,\n    dominantBaseline: pn.BASELINE\n  } : {\n    textAnchor: dn.START,\n    dominantBaseline: pn.BASELINE\n  };\n}\nfunction P2(e, t) {\n  return (e % t + t) % t;\n}\nfunction Nn(e, [t, n]) {\n  return e >= t && e <= n;\n}\nfunction pg(e) {\n  return e * (180 / Math.PI);\n}\nfunction Ut(e, t, n = { x: 0, y: 0 }) {\n  const r = t * Math.cos(e) + n.x, i = t * Math.sin(e) + n.y;\n  return { x: isNaN(r) ? 0 : r, y: isNaN(i) ? 0 : i };\n}\nfunction U2(e, t) {\n  return t * Math.sin(e - Math.PI / 2);\n}\nfunction B2(e, t, n, r) {\n  for (var i = -1, s = e == null ? 0 : e.length; ++i < s; )\n    n = t(n, e[i], i, e);\n  return n;\n}\nfunction H2(e) {\n  return function(t) {\n    return e == null ? void 0 : e[t];\n  };\n}\nvar V2 = {\n  // Latin-1 Supplement block.\n  À: "A",\n  Á: "A",\n  Â: "A",\n  Ã: "A",\n  Ä: "A",\n  Å: "A",\n  à: "a",\n  á: "a",\n  â: "a",\n  ã: "a",\n  ä: "a",\n  å: "a",\n  Ç: "C",\n  ç: "c",\n  Ð: "D",\n  ð: "d",\n  È: "E",\n  É: "E",\n  Ê: "E",\n  Ë: "E",\n  è: "e",\n  é: "e",\n  ê: "e",\n  ë: "e",\n  Ì: "I",\n  Í: "I",\n  Î: "I",\n  Ï: "I",\n  ì: "i",\n  í: "i",\n  î: "i",\n  ï: "i",\n  Ñ: "N",\n  ñ: "n",\n  Ò: "O",\n  Ó: "O",\n  Ô: "O",\n  Õ: "O",\n  Ö: "O",\n  Ø: "O",\n  ò: "o",\n  ó: "o",\n  ô: "o",\n  õ: "o",\n  ö: "o",\n  ø: "o",\n  Ù: "U",\n  Ú: "U",\n  Û: "U",\n  Ü: "U",\n  ù: "u",\n  ú: "u",\n  û: "u",\n  ü: "u",\n  Ý: "Y",\n  ý: "y",\n  ÿ: "y",\n  Æ: "Ae",\n  æ: "ae",\n  Þ: "Th",\n  þ: "th",\n  ß: "ss",\n  // Latin Extended-A block.\n  Ā: "A",\n  Ă: "A",\n  Ą: "A",\n  ā: "a",\n  ă: "a",\n  ą: "a",\n  Ć: "C",\n  Ĉ: "C",\n  Ċ: "C",\n  Č: "C",\n  ć: "c",\n  ĉ: "c",\n  ċ: "c",\n  č: "c",\n  Ď: "D",\n  Đ: "D",\n  ď: "d",\n  đ: "d",\n  Ē: "E",\n  Ĕ: "E",\n  Ė: "E",\n  Ę: "E",\n  Ě: "E",\n  ē: "e",\n  ĕ: "e",\n  ė: "e",\n  ę: "e",\n  ě: "e",\n  Ĝ: "G",\n  Ğ: "G",\n  Ġ: "G",\n  Ģ: "G",\n  ĝ: "g",\n  ğ: "g",\n  ġ: "g",\n  ģ: "g",\n  Ĥ: "H",\n  Ħ: "H",\n  ĥ: "h",\n  ħ: "h",\n  Ĩ: "I",\n  Ī: "I",\n  Ĭ: "I",\n  Į: "I",\n  İ: "I",\n  ĩ: "i",\n  ī: "i",\n  ĭ: "i",\n  į: "i",\n  ı: "i",\n  Ĵ: "J",\n  ĵ: "j",\n  Ķ: "K",\n  ķ: "k",\n  ĸ: "k",\n  Ĺ: "L",\n  Ļ: "L",\n  Ľ: "L",\n  Ŀ: "L",\n  Ł: "L",\n  ĺ: "l",\n  ļ: "l",\n  ľ: "l",\n  ŀ: "l",\n  ł: "l",\n  Ń: "N",\n  Ņ: "N",\n  Ň: "N",\n  Ŋ: "N",\n  ń: "n",\n  ņ: "n",\n  ň: "n",\n  ŋ: "n",\n  Ō: "O",\n  Ŏ: "O",\n  Ő: "O",\n  ō: "o",\n  ŏ: "o",\n  ő: "o",\n  Ŕ: "R",\n  Ŗ: "R",\n  Ř: "R",\n  ŕ: "r",\n  ŗ: "r",\n  ř: "r",\n  Ś: "S",\n  Ŝ: "S",\n  Ş: "S",\n  Š: "S",\n  ś: "s",\n  ŝ: "s",\n  ş: "s",\n  š: "s",\n  Ţ: "T",\n  Ť: "T",\n  Ŧ: "T",\n  ţ: "t",\n  ť: "t",\n  ŧ: "t",\n  Ũ: "U",\n  Ū: "U",\n  Ŭ: "U",\n  Ů: "U",\n  Ű: "U",\n  Ų: "U",\n  ũ: "u",\n  ū: "u",\n  ŭ: "u",\n  ů: "u",\n  ű: "u",\n  ų: "u",\n  Ŵ: "W",\n  ŵ: "w",\n  Ŷ: "Y",\n  ŷ: "y",\n  Ÿ: "Y",\n  Ź: "Z",\n  Ż: "Z",\n  Ž: "Z",\n  ź: "z",\n  ż: "z",\n  ž: "z",\n  Ĳ: "IJ",\n  ĳ: "ij",\n  Œ: "Oe",\n  œ: "oe",\n  ŉ: "\'n",\n  ſ: "s"\n}, G2 = H2(V2), z2 = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g, F2 = "\\\\u0300-\\\\u036f", j2 = "\\\\ufe20-\\\\ufe2f", W2 = "\\\\u20d0-\\\\u20ff", q2 = F2 + j2 + W2, Y2 = "[" + q2 + "]", X2 = RegExp(Y2, "g");\nfunction Z2(e) {\n  return e = us(e), e && e.replace(z2, G2).replace(X2, "");\n}\nvar K2 = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\nfunction Q2(e) {\n  return e.match(K2) || [];\n}\nvar J2 = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\nfunction tC(e) {\n  return J2.test(e);\n}\nvar fg = "\\\\ud800-\\\\udfff", eC = "\\\\u0300-\\\\u036f", nC = "\\\\ufe20-\\\\ufe2f", rC = "\\\\u20d0-\\\\u20ff", iC = eC + nC + rC, mg = "\\\\u2700-\\\\u27bf", gg = "a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff", sC = "\\\\xac\\\\xb1\\\\xd7\\\\xf7", aC = "\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf", oC = "\\\\u2000-\\\\u206f", lC = " \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000", vg = "A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde", cC = "\\\\ufe0e\\\\ufe0f", yg = sC + aC + oC + lC, xg = "[\'’]", fd = "[" + yg + "]", uC = "[" + iC + "]", bg = "\\\\d+", hC = "[" + mg + "]", _g = "[" + gg + "]", Eg = "[^" + fg + yg + bg + mg + gg + vg + "]", dC = "\\\\ud83c[\\\\udffb-\\\\udfff]", pC = "(?:" + uC + "|" + dC + ")", fC = "[^" + fg + "]", Og = "(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}", Sg = "[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]", Ar = "[" + vg + "]", mC = "\\\\u200d", md = "(?:" + _g + "|" + Eg + ")", gC = "(?:" + Ar + "|" + Eg + ")", gd = "(?:" + xg + "(?:d|ll|m|re|s|t|ve))?", vd = "(?:" + xg + "(?:D|LL|M|RE|S|T|VE))?", Tg = pC + "?", wg = "[" + cC + "]?", vC = "(?:" + mC + "(?:" + [fC, Og, Sg].join("|") + ")" + wg + Tg + ")*", yC = "\\\\d*(?:1st|2nd|3rd|(?![123])\\\\dth)(?=\\\\b|[A-Z_])", xC = "\\\\d*(?:1ST|2ND|3RD|(?![123])\\\\dTH)(?=\\\\b|[a-z_])", bC = wg + Tg + vC, _C = "(?:" + [hC, Og, Sg].join("|") + ")" + bC, EC = RegExp([\n  Ar + "?" + _g + "+" + gd + "(?=" + [fd, Ar, "$"].join("|") + ")",\n  gC + "+" + vd + "(?=" + [fd, Ar + md, "$"].join("|") + ")",\n  Ar + "?" + md + "+" + gd,\n  Ar + "+" + vd,\n  xC,\n  yC,\n  bg,\n  _C\n].join("|"), "g");\nfunction OC(e) {\n  return e.match(EC) || [];\n}\nfunction SC(e, t, n) {\n  return e = us(e), t = t, t === void 0 ? tC(e) ? OC(e) : Q2(e) : e.match(t) || [];\n}\nvar TC = "[\'’]", wC = RegExp(TC, "g");\nfunction $g(e) {\n  return function(t) {\n    return B2(SC(Z2(t).replace(wC, "")), e, "");\n  };\n}\nfunction $C(e, t, n) {\n  return e === e && (n !== void 0 && (e = e <= n ? e : n), t !== void 0 && (e = e >= t ? e : t)), e;\n}\nfunction Mg(e, t, n) {\n  return n === void 0 && (n = t, t = void 0), n !== void 0 && (n = zr(n), n = n === n ? n : 0), t !== void 0 && (t = zr(t), t = t === t ? t : 0), $C(zr(e), t, n);\n}\nvar MC = "Expected a function";\nfunction CC(e, t, n) {\n  if (typeof e != "function")\n    throw new TypeError(MC);\n  return setTimeout(function() {\n    e.apply(void 0, n);\n  }, t);\n}\nvar AC = yc(function(e, t, n) {\n  return CC(e, zr(t) || 0, n);\n});\nfunction LC(e, t) {\n  var n = -1, r = fr(e) ? Array(e.length) : [];\n  return jc(e, function(i, s, a) {\n    r[++n] = t(i, s, a);\n  }), r;\n}\nfunction kC(e, t) {\n  var n = Kt(e) ? fc : LC;\n  return n(e, Ja(t));\n}\nvar DC = 1 / 0;\nfunction RC(e, t) {\n  return Ka(kC(e, t), DC);\n}\nfunction Cg(e, t) {\n  return Qa(e, t);\n}\nvar Tr = $g(function(e, t, n) {\n  return e + (n ? "-" : "") + t.toLowerCase();\n});\nfunction IC(e, t) {\n  var n;\n  return jc(e, function(r, i, s) {\n    return n = t(r, i, s), !n;\n  }), !!n;\n}\nfunction NC(e, t, n) {\n  var r = Kt(e) ? Bf : IC;\n  return r(e, Ja(t));\n}\nclass or {\n  constructor() {\n    this._partials = new Float64Array(32), this._n = 0;\n  }\n  add(t) {\n    const n = this._partials;\n    let r = 0;\n    for (let i = 0; i < this._n && i < 32; i++) {\n      const s = n[i], a = t + s, o = Math.abs(t) < Math.abs(s) ? t - (a - s) : s - (a - t);\n      o && (n[r++] = o), t = a;\n    }\n    return n[r] = t, this._n = r + 1, this;\n  }\n  valueOf() {\n    const t = this._partials;\n    let n = this._n, r, i, s, a = 0;\n    if (n > 0) {\n      for (a = t[--n]; n > 0 && (r = a, i = t[--n], a = r + i, s = i - (a - r), !s); )\n        ;\n      n > 0 && (s < 0 && t[n - 1] < 0 || s > 0 && t[n - 1] > 0) && (i = s * 2, r = a + i, i == r - a && (a = r));\n    }\n    return a;\n  }\n}\nfunction* PC(e) {\n  for (const t of e)\n    yield* t;\n}\nfunction Ag(e) {\n  return Array.from(PC(e));\n}\nfunction UC(e) {\n  return e;\n}\nvar Qs = 1, Js = 2, Pl = 3, Ci = 4, yd = 1e-6;\nfunction BC(e) {\n  return "translate(" + e + ",0)";\n}\nfunction HC(e) {\n  return "translate(0," + e + ")";\n}\nfunction VC(e) {\n  return (t) => +e(t);\n}\nfunction GC(e, t) {\n  return t = Math.max(0, e.bandwidth() - t * 2) / 2, e.round() && (t = Math.round(t)), (n) => +e(n) + t;\n}\nfunction zC() {\n  return !this.__axis;\n}\nfunction co(e, t) {\n  var n = [], r = null, i = null, s = 6, a = 6, o = 3, l = typeof window < "u" && window.devicePixelRatio > 1 ? 0 : 0.5, c = e === Qs || e === Ci ? -1 : 1, u = e === Ci || e === Js ? "x" : "y", d = e === Qs || e === Pl ? BC : HC;\n  function h(p) {\n    var f = r ?? (t.ticks ? t.ticks.apply(t, n) : t.domain()), g = i ?? (t.tickFormat ? t.tickFormat.apply(t, n) : UC), m = Math.max(s, 0) + o, v = t.range(), x = +v[0] + l, _ = +v[v.length - 1] + l, E = (t.bandwidth ? GC : VC)(t.copy(), l), b = p.selection ? p.selection() : p, S = b.selectAll(".domain").data([null]), M = b.selectAll(".tick").data(f, t).order(), D = M.exit(), A = M.enter().append("g").attr("class", "tick"), R = M.select("line"), $ = M.select("text");\n    S = S.merge(S.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor")), M = M.merge(A), R = R.merge(A.append("line").attr("stroke", "currentColor").attr(u + "2", c * s)), $ = $.merge(A.append("text").attr("fill", "currentColor").attr(u, c * m).attr("dy", e === Qs ? "0em" : e === Pl ? "0.71em" : "0.32em")), p !== b && (S = S.transition(p), M = M.transition(p), R = R.transition(p), $ = $.transition(p), D = D.transition(p).attr("opacity", yd).attr("transform", function(H) {\n      return isFinite(H = E(H)) ? d(H + l) : this.getAttribute("transform");\n    }), A.attr("opacity", yd).attr("transform", function(H) {\n      var P = this.parentNode.__axis;\n      return d((P && isFinite(P = P(H)) ? P : E(H)) + l);\n    })), D.remove(), S.attr("d", e === Ci || e === Js ? a ? "M" + c * a + "," + x + "H" + l + "V" + _ + "H" + c * a : "M" + l + "," + x + "V" + _ : a ? "M" + x + "," + c * a + "V" + l + "H" + _ + "V" + c * a : "M" + x + "," + l + "H" + _), M.attr("opacity", 1).attr("transform", function(H) {\n      return d(E(H) + l);\n    }), R.attr(u + "2", c * s), $.attr(u, c * m).text(g), b.filter(zC).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", e === Js ? "start" : e === Ci ? "end" : "middle"), b.each(function() {\n      this.__axis = E;\n    });\n  }\n  return h.scale = function(p) {\n    return arguments.length ? (t = p, h) : t;\n  }, h.ticks = function() {\n    return n = Array.from(arguments), h;\n  }, h.tickArguments = function(p) {\n    return arguments.length ? (n = p == null ? [] : Array.from(p), h) : n.slice();\n  }, h.tickValues = function(p) {\n    return arguments.length ? (r = p == null ? null : Array.from(p), h) : r && r.slice();\n  }, h.tickFormat = function(p) {\n    return arguments.length ? (i = p, h) : i;\n  }, h.tickSize = function(p) {\n    return arguments.length ? (s = a = +p, h) : s;\n  }, h.tickSizeInner = function(p) {\n    return arguments.length ? (s = +p, h) : s;\n  }, h.tickSizeOuter = function(p) {\n    return arguments.length ? (a = +p, h) : a;\n  }, h.tickPadding = function(p) {\n    return arguments.length ? (o = +p, h) : o;\n  }, h.offset = function(p) {\n    return arguments.length ? (l = +p, h) : l;\n  }, h;\n}\nfunction FC(e) {\n  return co(Qs, e);\n}\nfunction jC(e) {\n  return co(Js, e);\n}\nfunction Jc(e) {\n  return co(Pl, e);\n}\nfunction Lg(e) {\n  return co(Ci, e);\n}\nconst Ul = { capture: !0, passive: !1 };\nfunction Bl(e) {\n  e.preventDefault(), e.stopImmediatePropagation();\n}\nfunction WC(e) {\n  var t = e.document.documentElement, n = I(e).on("dragstart.drag", Bl, Ul);\n  "onselectstart" in t ? n.on("selectstart.drag", Bl, Ul) : (t.__noselect = t.style.MozUserSelect, t.style.MozUserSelect = "none");\n}\nfunction qC(e, t) {\n  var n = e.document.documentElement, r = I(e).on("dragstart.drag", null);\n  t && (r.on("click.drag", Bl, Ul), setTimeout(function() {\n    r.on("click.drag", null);\n  }, 0)), "onselectstart" in n ? r.on("selectstart.drag", null) : (n.style.MozUserSelect = n.__noselect, delete n.__noselect);\n}\nfunction YC(e, t) {\n  for (var n = new Array(t), r = 0; r < t; ++r) n[r] = e(r / (t - 1));\n  return n;\n}\nconst XC = (e) => +e, Fo = (e) => () => e;\nfunction ZC(e, {\n  sourceEvent: t,\n  target: n,\n  selection: r,\n  mode: i,\n  dispatch: s\n}) {\n  Object.defineProperties(this, {\n    type: { value: e, enumerable: !0, configurable: !0 },\n    sourceEvent: { value: t, enumerable: !0, configurable: !0 },\n    target: { value: n, enumerable: !0, configurable: !0 },\n    selection: { value: r, enumerable: !0, configurable: !0 },\n    mode: { value: i, enumerable: !0, configurable: !0 },\n    _: { value: s }\n  });\n}\nfunction KC(e) {\n  e.stopImmediatePropagation();\n}\nfunction jo(e) {\n  e.preventDefault(), e.stopImmediatePropagation();\n}\nvar xd = { name: "drag" }, Wo = { name: "space" }, wr = { name: "handle" }, $r = { name: "center" };\nconst { abs: bd, max: te, min: ee } = Math;\nfunction _d(e) {\n  return [+e[0], +e[1]];\n}\nfunction Ed(e) {\n  return [_d(e[0]), _d(e[1])];\n}\nvar ta = {\n  name: "x",\n  handles: ["w", "e"].map(Hl),\n  input: function(e, t) {\n    return e == null ? null : [[+e[0], t[0][1]], [+e[1], t[1][1]]];\n  },\n  output: function(e) {\n    return e && [e[0][0], e[1][0]];\n  }\n}, qo = {}, hn = {\n  overlay: "crosshair",\n  selection: "move",\n  n: "ns-resize",\n  e: "ew-resize",\n  s: "ns-resize",\n  w: "ew-resize",\n  nw: "nwse-resize",\n  ne: "nesw-resize",\n  se: "nwse-resize",\n  sw: "nesw-resize"\n}, Od = {\n  e: "w",\n  w: "e",\n  nw: "ne",\n  ne: "nw",\n  se: "sw",\n  sw: "se"\n}, Sd = {\n  n: "s",\n  s: "n",\n  nw: "sw",\n  ne: "se",\n  se: "ne",\n  sw: "nw"\n}, QC = {\n  overlay: 1,\n  selection: 1,\n  n: null,\n  e: 1,\n  s: null,\n  w: -1,\n  nw: -1,\n  ne: 1,\n  se: 1,\n  sw: -1\n}, JC = {\n  overlay: 1,\n  selection: 1,\n  n: -1,\n  e: null,\n  s: 1,\n  w: null,\n  nw: -1,\n  ne: -1,\n  se: 1,\n  sw: 1\n};\nfunction Hl(e) {\n  return { type: e };\n}\nfunction tA(e) {\n  return !e.ctrlKey && !e.button;\n}\nfunction eA() {\n  var e = this.ownerSVGElement || this;\n  return e.hasAttribute("viewBox") ? (e = e.viewBox.baseVal, [[e.x, e.y], [e.x + e.width, e.y + e.height]]) : [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];\n}\nfunction nA() {\n  return navigator.maxTouchPoints || "ontouchstart" in this;\n}\nfunction Yo(e) {\n  for (; !e.__brush; ) if (!(e = e.parentNode)) return;\n  return e.__brush;\n}\nfunction rA(e) {\n  return e[0][0] === e[1][0] || e[0][1] === e[1][1];\n}\nfunction kg() {\n  return iA(ta);\n}\nfunction iA(e) {\n  var t = eA, n = tA, r = nA, i = !0, s = Lc("start", "brush", "end"), a = 6, o;\n  function l(m) {\n    var v = m.property("__brush", g).selectAll(".overlay").data([Hl("overlay")]);\n    v.enter().append("rect").attr("class", "overlay").attr("pointer-events", "all").attr("cursor", hn.overlay).merge(v).each(function() {\n      var _ = Yo(this).extent;\n      I(this).attr("x", _[0][0]).attr("y", _[0][1]).attr("width", _[1][0] - _[0][0]).attr("height", _[1][1] - _[0][1]);\n    }), m.selectAll(".selection").data([Hl("selection")]).enter().append("rect").attr("class", "selection").attr("cursor", hn.selection).attr("fill", "#777").attr("fill-opacity", 0.3).attr("stroke", "#fff").attr("shape-rendering", "crispEdges");\n    var x = m.selectAll(".handle").data(e.handles, function(_) {\n      return _.type;\n    });\n    x.exit().remove(), x.enter().append("rect").attr("class", function(_) {\n      return "handle handle--" + _.type;\n    }).attr("cursor", function(_) {\n      return hn[_.type];\n    }), m.each(c).attr("fill", "none").attr("pointer-events", "all").on("mousedown.brush", h).filter(r).on("touchstart.brush", h).on("touchmove.brush", p).on("touchend.brush touchcancel.brush", f).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");\n  }\n  l.move = function(m, v, x) {\n    m.tween ? m.on("start.brush", function(_) {\n      u(this, arguments).beforestart().start(_);\n    }).on("interrupt.brush end.brush", function(_) {\n      u(this, arguments).end(_);\n    }).tween("brush", function() {\n      var _ = this, E = _.__brush, b = u(_, arguments), S = E.selection, M = e.input(typeof v == "function" ? v.apply(this, arguments) : v, E.extent), D = fs(S, M);\n      function A(R) {\n        E.selection = R === 1 && M === null ? null : D(R), c.call(_), b.brush();\n      }\n      return S !== null && M !== null ? A : A(1);\n    }) : m.each(function() {\n      var _ = this, E = arguments, b = _.__brush, S = e.input(typeof v == "function" ? v.apply(_, E) : v, b.extent), M = u(_, E).beforestart();\n      Cl(_), b.selection = S === null ? null : S, c.call(_), M.start(x).brush(x).end(x);\n    });\n  }, l.clear = function(m, v) {\n    l.move(m, null, v);\n  };\n  function c() {\n    var m = I(this), v = Yo(this).selection;\n    v ? (m.selectAll(".selection").style("display", null).attr("x", v[0][0]).attr("y", v[0][1]).attr("width", v[1][0] - v[0][0]).attr("height", v[1][1] - v[0][1]), m.selectAll(".handle").style("display", null).attr("x", function(x) {\n      return x.type[x.type.length - 1] === "e" ? v[1][0] - a / 2 : v[0][0] - a / 2;\n    }).attr("y", function(x) {\n      return x.type[0] === "s" ? v[1][1] - a / 2 : v[0][1] - a / 2;\n    }).attr("width", function(x) {\n      return x.type === "n" || x.type === "s" ? v[1][0] - v[0][0] + a : a;\n    }).attr("height", function(x) {\n      return x.type === "e" || x.type === "w" ? v[1][1] - v[0][1] + a : a;\n    })) : m.selectAll(".selection,.handle").style("display", "none").attr("x", null).attr("y", null).attr("width", null).attr("height", null);\n  }\n  function u(m, v, x) {\n    var _ = m.__brush.emitter;\n    return _ && (!x || !_.clean) ? _ : new d(m, v, x);\n  }\n  function d(m, v, x) {\n    this.that = m, this.args = v, this.state = m.__brush, this.active = 0, this.clean = x;\n  }\n  d.prototype = {\n    beforestart: function() {\n      return ++this.active === 1 && (this.state.emitter = this, this.starting = !0), this;\n    },\n    start: function(m, v) {\n      return this.starting ? (this.starting = !1, this.emit("start", m, v)) : this.emit("brush", m), this;\n    },\n    brush: function(m, v) {\n      return this.emit("brush", m, v), this;\n    },\n    end: function(m, v) {\n      return --this.active === 0 && (delete this.state.emitter, this.emit("end", m, v)), this;\n    },\n    emit: function(m, v, x) {\n      var _ = I(this.that).datum();\n      s.call(\n        m,\n        this.that,\n        new ZC(m, {\n          sourceEvent: v,\n          target: l,\n          selection: e.output(this.state.selection),\n          mode: x,\n          dispatch: s\n        }),\n        _\n      );\n    }\n  };\n  function h(m) {\n    if (o && !m.touches || !n.apply(this, arguments)) return;\n    var v = this, x = m.target.__data__.type, _ = (i && m.metaKey ? x = "overlay" : x) === "selection" ? xd : i && m.altKey ? $r : wr, E = e === qo ? null : QC[x], b = e === ta ? null : JC[x], S = Yo(v), M = S.extent, D = S.selection, A = M[0][0], R, $, H = M[0][1], P, B, O = M[1][0], w, L, k = M[1][1], U, Z, j = 0, F = 0, Y, ot = E && b && i && m.shiftKey, Q, q, tt = Array.from(m.touches || [m], (nt) => {\n      const yt = nt.identifier;\n      return nt = rr(nt, v), nt.point0 = nt.slice(), nt.identifier = yt, nt;\n    });\n    Cl(v);\n    var lt = u(v, arguments, !0).beforestart();\n    if (x === "overlay") {\n      D && (Y = !0);\n      const nt = [tt[0], tt[1] || tt[0]];\n      S.selection = D = [[\n        R = e === qo ? A : ee(nt[0][0], nt[1][0]),\n        P = e === ta ? H : ee(nt[0][1], nt[1][1])\n      ], [\n        w = e === qo ? O : te(nt[0][0], nt[1][0]),\n        U = e === ta ? k : te(nt[0][1], nt[1][1])\n      ]], tt.length > 1 && ut(m);\n    } else\n      R = D[0][0], P = D[0][1], w = D[1][0], U = D[1][1];\n    $ = R, B = P, L = w, Z = U;\n    var z = I(v).attr("pointer-events", "none"), W = z.selectAll(".overlay").attr("cursor", hn[x]);\n    if (m.touches)\n      lt.moved = V, lt.ended = st;\n    else {\n      var X = I(m.view).on("mousemove.brush", V, !0).on("mouseup.brush", st, !0);\n      i && X.on("keydown.brush", Dt, !0).on("keyup.brush", Nt, !0), WC(m.view);\n    }\n    c.call(v), lt.start(m, _.name);\n    function V(nt) {\n      for (const yt of nt.changedTouches || [nt])\n        for (const Se of tt)\n          Se.identifier === yt.identifier && (Se.cur = rr(yt, v));\n      if (ot && !Q && !q && tt.length === 1) {\n        const yt = tt[0];\n        bd(yt.cur[0] - yt[0]) > bd(yt.cur[1] - yt[1]) ? q = !0 : Q = !0;\n      }\n      for (const yt of tt)\n        yt.cur && (yt[0] = yt.cur[0], yt[1] = yt.cur[1]);\n      Y = !0, jo(nt), ut(nt);\n    }\n    function ut(nt) {\n      const yt = tt[0], Se = yt.point0;\n      var ge;\n      switch (j = yt[0] - Se[0], F = yt[1] - Se[1], _) {\n        case Wo:\n        case xd: {\n          E && (j = te(A - R, ee(O - w, j)), $ = R + j, L = w + j), b && (F = te(H - P, ee(k - U, F)), B = P + F, Z = U + F);\n          break;\n        }\n        case wr: {\n          tt[1] ? (E && ($ = te(A, ee(O, tt[0][0])), L = te(A, ee(O, tt[1][0])), E = 1), b && (B = te(H, ee(k, tt[0][1])), Z = te(H, ee(k, tt[1][1])), b = 1)) : (E < 0 ? (j = te(A - R, ee(O - R, j)), $ = R + j, L = w) : E > 0 && (j = te(A - w, ee(O - w, j)), $ = R, L = w + j), b < 0 ? (F = te(H - P, ee(k - P, F)), B = P + F, Z = U) : b > 0 && (F = te(H - U, ee(k - U, F)), B = P, Z = U + F));\n          break;\n        }\n        case $r: {\n          E && ($ = te(A, ee(O, R - j * E)), L = te(A, ee(O, w + j * E))), b && (B = te(H, ee(k, P - F * b)), Z = te(H, ee(k, U + F * b)));\n          break;\n        }\n      }\n      L < $ && (E *= -1, ge = R, R = w, w = ge, ge = $, $ = L, L = ge, x in Od && W.attr("cursor", hn[x = Od[x]])), Z < B && (b *= -1, ge = P, P = U, U = ge, ge = B, B = Z, Z = ge, x in Sd && W.attr("cursor", hn[x = Sd[x]])), S.selection && (D = S.selection), Q && ($ = D[0][0], L = D[1][0]), q && (B = D[0][1], Z = D[1][1]), (D[0][0] !== $ || D[0][1] !== B || D[1][0] !== L || D[1][1] !== Z) && (S.selection = [[$, B], [L, Z]], c.call(v), lt.brush(nt, _.name));\n    }\n    function st(nt) {\n      if (KC(nt), nt.touches) {\n        if (nt.touches.length) return;\n        o && clearTimeout(o), o = setTimeout(function() {\n          o = null;\n        }, 500);\n      } else\n        qC(nt.view, Y), X.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);\n      z.attr("pointer-events", "all"), W.attr("cursor", hn.overlay), S.selection && (D = S.selection), rA(D) && (S.selection = null, c.call(v)), lt.end(nt, _.name);\n    }\n    function Dt(nt) {\n      switch (nt.keyCode) {\n        case 16: {\n          ot = E && b;\n          break;\n        }\n        case 18: {\n          _ === wr && (E && (w = L - j * E, R = $ + j * E), b && (U = Z - F * b, P = B + F * b), _ = $r, ut(nt));\n          break;\n        }\n        case 32: {\n          (_ === wr || _ === $r) && (E < 0 ? w = L - j : E > 0 && (R = $ - j), b < 0 ? U = Z - F : b > 0 && (P = B - F), _ = Wo, W.attr("cursor", hn.selection), ut(nt));\n          break;\n        }\n        default:\n          return;\n      }\n      jo(nt);\n    }\n    function Nt(nt) {\n      switch (nt.keyCode) {\n        case 16: {\n          ot && (Q = q = ot = !1, ut(nt));\n          break;\n        }\n        case 18: {\n          _ === $r && (E < 0 ? w = L : E > 0 && (R = $), b < 0 ? U = Z : b > 0 && (P = B), _ = wr, ut(nt));\n          break;\n        }\n        case 32: {\n          _ === Wo && (nt.altKey ? (E && (w = L - j * E, R = $ + j * E), b && (U = Z - F * b, P = B + F * b), _ = $r) : (E < 0 ? w = L : E > 0 && (R = $), b < 0 ? U = Z : b > 0 && (P = B), _ = wr), W.attr("cursor", hn[x]), ut(nt));\n          break;\n        }\n        default:\n          return;\n      }\n      jo(nt);\n    }\n  }\n  function p(m) {\n    u(this, arguments).moved(m);\n  }\n  function f(m) {\n    u(this, arguments).ended(m);\n  }\n  function g() {\n    var m = this.__brush || { selection: null };\n    return m.extent = Ed(t.apply(this, arguments)), m.dim = e, m;\n  }\n  return l.extent = function(m) {\n    return arguments.length ? (t = typeof m == "function" ? m : Fo(Ed(m)), l) : t;\n  }, l.filter = function(m) {\n    return arguments.length ? (n = typeof m == "function" ? m : Fo(!!m), l) : n;\n  }, l.touchable = function(m) {\n    return arguments.length ? (r = typeof m == "function" ? m : Fo(!!m), l) : r;\n  }, l.handleSize = function(m) {\n    return arguments.length ? (a = +m, l) : a;\n  }, l.keyModifiers = function(m) {\n    return arguments.length ? (i = !!m, l) : i;\n  }, l.on = function() {\n    var m = s.on.apply(s, arguments);\n    return m === s ? l : m;\n  }, l;\n}\nconst Vl = Math.PI, Gl = 2 * Vl, Xn = 1e-6, sA = Gl - Xn;\nfunction Dg(e) {\n  this._ += e[0];\n  for (let t = 1, n = e.length; t < n; ++t)\n    this._ += arguments[t] + e[t];\n}\nfunction aA(e) {\n  let t = Math.floor(e);\n  if (!(t >= 0)) throw new Error(`invalid digits: ${e}`);\n  if (t > 15) return Dg;\n  const n = 10 ** t;\n  return function(r) {\n    this._ += r[0];\n    for (let i = 1, s = r.length; i < s; ++i)\n      this._ += Math.round(arguments[i] * n) / n + r[i];\n  };\n}\nlet tu = class {\n  constructor(t) {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null, this._ = "", this._append = t == null ? Dg : aA(t);\n  }\n  moveTo(t, n) {\n    this._append`M${this._x0 = this._x1 = +t},${this._y0 = this._y1 = +n}`;\n  }\n  closePath() {\n    this._x1 !== null && (this._x1 = this._x0, this._y1 = this._y0, this._append`Z`);\n  }\n  lineTo(t, n) {\n    this._append`L${this._x1 = +t},${this._y1 = +n}`;\n  }\n  quadraticCurveTo(t, n, r, i) {\n    this._append`Q${+t},${+n},${this._x1 = +r},${this._y1 = +i}`;\n  }\n  bezierCurveTo(t, n, r, i, s, a) {\n    this._append`C${+t},${+n},${+r},${+i},${this._x1 = +s},${this._y1 = +a}`;\n  }\n  arcTo(t, n, r, i, s) {\n    if (t = +t, n = +n, r = +r, i = +i, s = +s, s < 0) throw new Error(`negative radius: ${s}`);\n    let a = this._x1, o = this._y1, l = r - t, c = i - n, u = a - t, d = o - n, h = u * u + d * d;\n    if (this._x1 === null)\n      this._append`M${this._x1 = t},${this._y1 = n}`;\n    else if (h > Xn) if (!(Math.abs(d * l - c * u) > Xn) || !s)\n      this._append`L${this._x1 = t},${this._y1 = n}`;\n    else {\n      let p = r - a, f = i - o, g = l * l + c * c, m = p * p + f * f, v = Math.sqrt(g), x = Math.sqrt(h), _ = s * Math.tan((Vl - Math.acos((g + h - m) / (2 * v * x))) / 2), E = _ / x, b = _ / v;\n      Math.abs(E - 1) > Xn && this._append`L${t + E * u},${n + E * d}`, this._append`A${s},${s},0,0,${+(d * p > u * f)},${this._x1 = t + b * l},${this._y1 = n + b * c}`;\n    }\n  }\n  arc(t, n, r, i, s, a) {\n    if (t = +t, n = +n, r = +r, a = !!a, r < 0) throw new Error(`negative radius: ${r}`);\n    let o = r * Math.cos(i), l = r * Math.sin(i), c = t + o, u = n + l, d = 1 ^ a, h = a ? i - s : s - i;\n    this._x1 === null ? this._append`M${c},${u}` : (Math.abs(this._x1 - c) > Xn || Math.abs(this._y1 - u) > Xn) && this._append`L${c},${u}`, r && (h < 0 && (h = h % Gl + Gl), h > sA ? this._append`A${r},${r},0,1,${d},${t - o},${n - l}A${r},${r},0,1,${d},${this._x1 = c},${this._y1 = u}` : h > Xn && this._append`A${r},${r},0,${+(h >= Vl)},${d},${this._x1 = t + r * Math.cos(s)},${this._y1 = n + r * Math.sin(s)}`);\n  }\n  rect(t, n, r, i) {\n    this._append`M${this._x0 = this._x1 = +t},${this._y0 = this._y1 = +n}h${r = +r}v${+i}h${-r}Z`;\n  }\n  toString() {\n    return this._;\n  }\n};\nfunction Rg() {\n  return new tu();\n}\nRg.prototype = tu.prototype;\nvar Tt = 1e-6, oA = 1e-12, ft = Math.PI, de = ft / 2, Td = ft / 4, Ee = ft * 2, se = 180 / ft, Bt = ft / 180, Ot = Math.abs, Ig = Math.atan, lr = Math.atan2, St = Math.cos, lA = Math.exp, cA = Math.log, xt = Math.sin, Un = Math.sign || function(e) {\n  return e > 0 ? 1 : e < 0 ? -1 : 0;\n}, je = Math.sqrt, uA = Math.tan;\nfunction hA(e) {\n  return e > 1 ? 0 : e < -1 ? ft : Math.acos(e);\n}\nfunction Cn(e) {\n  return e > 1 ? de : e < -1 ? -de : Math.asin(e);\n}\nfunction Ae() {\n}\nfunction $a(e, t) {\n  e && $d.hasOwnProperty(e.type) && $d[e.type](e, t);\n}\nvar wd = {\n  Feature: function(e, t) {\n    $a(e.geometry, t);\n  },\n  FeatureCollection: function(e, t) {\n    for (var n = e.features, r = -1, i = n.length; ++r < i; ) $a(n[r].geometry, t);\n  }\n}, $d = {\n  Sphere: function(e, t) {\n    t.sphere();\n  },\n  Point: function(e, t) {\n    e = e.coordinates, t.point(e[0], e[1], e[2]);\n  },\n  MultiPoint: function(e, t) {\n    for (var n = e.coordinates, r = -1, i = n.length; ++r < i; ) e = n[r], t.point(e[0], e[1], e[2]);\n  },\n  LineString: function(e, t) {\n    zl(e.coordinates, t, 0);\n  },\n  MultiLineString: function(e, t) {\n    for (var n = e.coordinates, r = -1, i = n.length; ++r < i; ) zl(n[r], t, 0);\n  },\n  Polygon: function(e, t) {\n    Md(e.coordinates, t);\n  },\n  MultiPolygon: function(e, t) {\n    for (var n = e.coordinates, r = -1, i = n.length; ++r < i; ) Md(n[r], t);\n  },\n  GeometryCollection: function(e, t) {\n    for (var n = e.geometries, r = -1, i = n.length; ++r < i; ) $a(n[r], t);\n  }\n};\nfunction zl(e, t, n) {\n  var r = -1, i = e.length - n, s;\n  for (t.lineStart(); ++r < i; ) s = e[r], t.point(s[0], s[1], s[2]);\n  t.lineEnd();\n}\nfunction Md(e, t) {\n  var n = -1, r = e.length;\n  for (t.polygonStart(); ++n < r; ) zl(e[n], t, 1);\n  t.polygonEnd();\n}\nfunction Lr(e, t) {\n  e && wd.hasOwnProperty(e.type) ? wd[e.type](e, t) : $a(e, t);\n}\nfunction Fl(e) {\n  return [lr(e[1], e[0]), Cn(e[2])];\n}\nfunction ti(e) {\n  var t = e[0], n = e[1], r = St(n);\n  return [r * St(t), r * xt(t), xt(n)];\n}\nfunction ks(e, t) {\n  return e[0] * t[0] + e[1] * t[1] + e[2] * t[2];\n}\nfunction Ma(e, t) {\n  return [e[1] * t[2] - e[2] * t[1], e[2] * t[0] - e[0] * t[2], e[0] * t[1] - e[1] * t[0]];\n}\nfunction Xo(e, t) {\n  e[0] += t[0], e[1] += t[1], e[2] += t[2];\n}\nfunction Ds(e, t) {\n  return [e[0] * t, e[1] * t, e[2] * t];\n}\nfunction jl(e) {\n  var t = je(e[0] * e[0] + e[1] * e[1] + e[2] * e[2]);\n  e[0] /= t, e[1] /= t, e[2] /= t;\n}\nfunction Wl(e, t) {\n  function n(r, i) {\n    return r = e(r, i), t(r[0], r[1]);\n  }\n  return e.invert && t.invert && (n.invert = function(r, i) {\n    return r = t.invert(r, i), r && e.invert(r[0], r[1]);\n  }), n;\n}\nfunction ql(e, t) {\n  return Ot(e) > ft && (e -= Math.round(e / Ee) * Ee), [e, t];\n}\nql.invert = ql;\nfunction Ng(e, t, n) {\n  return (e %= Ee) ? t || n ? Wl(Ad(e), Ld(t, n)) : Ad(e) : t || n ? Ld(t, n) : ql;\n}\nfunction Cd(e) {\n  return function(t, n) {\n    return t += e, Ot(t) > ft && (t -= Math.round(t / Ee) * Ee), [t, n];\n  };\n}\nfunction Ad(e) {\n  var t = Cd(e);\n  return t.invert = Cd(-e), t;\n}\nfunction Ld(e, t) {\n  var n = St(e), r = xt(e), i = St(t), s = xt(t);\n  function a(o, l) {\n    var c = St(l), u = St(o) * c, d = xt(o) * c, h = xt(l), p = h * n + u * r;\n    return [\n      lr(d * i - p * s, u * n - h * r),\n      Cn(p * i + d * s)\n    ];\n  }\n  return a.invert = function(o, l) {\n    var c = St(l), u = St(o) * c, d = xt(o) * c, h = xt(l), p = h * i - d * s;\n    return [\n      lr(d * i + h * s, u * n + p * r),\n      Cn(p * n - u * r)\n    ];\n  }, a;\n}\nfunction dA(e) {\n  e = Ng(e[0] * Bt, e[1] * Bt, e.length > 2 ? e[2] * Bt : 0);\n  function t(n) {\n    return n = e(n[0] * Bt, n[1] * Bt), n[0] *= se, n[1] *= se, n;\n  }\n  return t.invert = function(n) {\n    return n = e.invert(n[0] * Bt, n[1] * Bt), n[0] *= se, n[1] *= se, n;\n  }, t;\n}\nfunction pA(e, t, n, r, i, s) {\n  if (n) {\n    var a = St(t), o = xt(t), l = r * n;\n    i == null ? (i = t + r * Ee, s = t - l / 2) : (i = kd(a, i), s = kd(a, s), (r > 0 ? i < s : i > s) && (i += r * Ee));\n    for (var c, u = i; r > 0 ? u > s : u < s; u -= l)\n      c = Fl([a, -o * St(u), -o * xt(u)]), e.point(c[0], c[1]);\n  }\n}\nfunction kd(e, t) {\n  t = ti(t), t[0] -= e, jl(t);\n  var n = hA(-t[1]);\n  return ((-t[2] < 0 ? -n : n) + Ee - Tt) % Ee;\n}\nfunction Pg() {\n  var e = [], t;\n  return {\n    point: function(n, r, i) {\n      t.push([n, r, i]);\n    },\n    lineStart: function() {\n      e.push(t = []);\n    },\n    lineEnd: Ae,\n    rejoin: function() {\n      e.length > 1 && e.push(e.pop().concat(e.shift()));\n    },\n    result: function() {\n      var n = e;\n      return e = [], t = null, n;\n    }\n  };\n}\nfunction ea(e, t) {\n  return Ot(e[0] - t[0]) < Tt && Ot(e[1] - t[1]) < Tt;\n}\nfunction Rs(e, t, n, r) {\n  this.x = e, this.z = t, this.o = n, this.e = r, this.v = !1, this.n = this.p = null;\n}\nfunction Ug(e, t, n, r, i) {\n  var s = [], a = [], o, l;\n  if (e.forEach(function(f) {\n    if (!((g = f.length - 1) <= 0)) {\n      var g, m = f[0], v = f[g], x;\n      if (ea(m, v)) {\n        if (!m[2] && !v[2]) {\n          for (i.lineStart(), o = 0; o < g; ++o) i.point((m = f[o])[0], m[1]);\n          i.lineEnd();\n          return;\n        }\n        v[0] += 2 * Tt;\n      }\n      s.push(x = new Rs(m, f, null, !0)), a.push(x.o = new Rs(m, null, x, !1)), s.push(x = new Rs(v, f, null, !1)), a.push(x.o = new Rs(v, null, x, !0));\n    }\n  }), !!s.length) {\n    for (a.sort(t), Dd(s), Dd(a), o = 0, l = a.length; o < l; ++o)\n      a[o].e = n = !n;\n    for (var c = s[0], u, d; ; ) {\n      for (var h = c, p = !0; h.v; ) if ((h = h.n) === c) return;\n      u = h.z, i.lineStart();\n      do {\n        if (h.v = h.o.v = !0, h.e) {\n          if (p)\n            for (o = 0, l = u.length; o < l; ++o) i.point((d = u[o])[0], d[1]);\n          else\n            r(h.x, h.n.x, 1, i);\n          h = h.n;\n        } else {\n          if (p)\n            for (u = h.p.z, o = u.length - 1; o >= 0; --o) i.point((d = u[o])[0], d[1]);\n          else\n            r(h.x, h.p.x, -1, i);\n          h = h.p;\n        }\n        h = h.o, u = h.z, p = !p;\n      } while (!h.v);\n      i.lineEnd();\n    }\n  }\n}\nfunction Dd(e) {\n  if (t = e.length) {\n    for (var t, n = 0, r = e[0], i; ++n < t; )\n      r.n = i = e[n], i.p = r, r = i;\n    r.n = i = e[0], i.p = r;\n  }\n}\nfunction Zo(e) {\n  return Ot(e[0]) <= ft ? e[0] : Un(e[0]) * ((Ot(e[0]) + ft) % Ee - ft);\n}\nfunction fA(e, t) {\n  var n = Zo(t), r = t[1], i = xt(r), s = [xt(n), -St(n), 0], a = 0, o = 0, l = new or();\n  i === 1 ? r = de + Tt : i === -1 && (r = -de - Tt);\n  for (var c = 0, u = e.length; c < u; ++c)\n    if (h = (d = e[c]).length)\n      for (var d, h, p = d[h - 1], f = Zo(p), g = p[1] / 2 + Td, m = xt(g), v = St(g), x = 0; x < h; ++x, f = E, m = S, v = M, p = _) {\n        var _ = d[x], E = Zo(_), b = _[1] / 2 + Td, S = xt(b), M = St(b), D = E - f, A = D >= 0 ? 1 : -1, R = A * D, $ = R > ft, H = m * S;\n        if (l.add(lr(H * A * xt(R), v * M + H * St(R))), a += $ ? D + A * Ee : D, $ ^ f >= n ^ E >= n) {\n          var P = Ma(ti(p), ti(_));\n          jl(P);\n          var B = Ma(s, P);\n          jl(B);\n          var O = ($ ^ D >= 0 ? -1 : 1) * Cn(B[2]);\n          (r > O || r === O && (P[0] || P[1])) && (o += $ ^ D >= 0 ? 1 : -1);\n        }\n      }\n  return (a < -1e-6 || a < Tt && l < -1e-12) ^ o & 1;\n}\nfunction Bg(e, t, n, r) {\n  return function(i) {\n    var s = t(i), a = Pg(), o = t(a), l = !1, c, u, d, h = {\n      point: p,\n      lineStart: g,\n      lineEnd: m,\n      polygonStart: function() {\n        h.point = v, h.lineStart = x, h.lineEnd = _, u = [], c = [];\n      },\n      polygonEnd: function() {\n        h.point = p, h.lineStart = g, h.lineEnd = m, u = Ag(u);\n        var E = fA(c, r);\n        u.length ? (l || (i.polygonStart(), l = !0), Ug(u, gA, E, n, i)) : E && (l || (i.polygonStart(), l = !0), i.lineStart(), n(null, null, 1, i), i.lineEnd()), l && (i.polygonEnd(), l = !1), u = c = null;\n      },\n      sphere: function() {\n        i.polygonStart(), i.lineStart(), n(null, null, 1, i), i.lineEnd(), i.polygonEnd();\n      }\n    };\n    function p(E, b) {\n      e(E, b) && i.point(E, b);\n    }\n    function f(E, b) {\n      s.point(E, b);\n    }\n    function g() {\n      h.point = f, s.lineStart();\n    }\n    function m() {\n      h.point = p, s.lineEnd();\n    }\n    function v(E, b) {\n      d.push([E, b]), o.point(E, b);\n    }\n    function x() {\n      o.lineStart(), d = [];\n    }\n    function _() {\n      v(d[0][0], d[0][1]), o.lineEnd();\n      var E = o.clean(), b = a.result(), S, M = b.length, D, A, R;\n      if (d.pop(), c.push(d), d = null, !!M) {\n        if (E & 1) {\n          if (A = b[0], (D = A.length - 1) > 0) {\n            for (l || (i.polygonStart(), l = !0), i.lineStart(), S = 0; S < D; ++S) i.point((R = A[S])[0], R[1]);\n            i.lineEnd();\n          }\n          return;\n        }\n        M > 1 && E & 2 && b.push(b.pop().concat(b.shift())), u.push(b.filter(mA));\n      }\n    }\n    return h;\n  };\n}\nfunction mA(e) {\n  return e.length > 1;\n}\nfunction gA(e, t) {\n  return ((e = e.x)[0] < 0 ? e[1] - de - Tt : de - e[1]) - ((t = t.x)[0] < 0 ? t[1] - de - Tt : de - t[1]);\n}\nconst Rd = Bg(\n  function() {\n    return !0;\n  },\n  vA,\n  xA,\n  [-ft, -de]\n);\nfunction vA(e) {\n  var t = NaN, n = NaN, r = NaN, i;\n  return {\n    lineStart: function() {\n      e.lineStart(), i = 1;\n    },\n    point: function(s, a) {\n      var o = s > 0 ? ft : -ft, l = Ot(s - t);\n      Ot(l - ft) < Tt ? (e.point(t, n = (n + a) / 2 > 0 ? de : -de), e.point(r, n), e.lineEnd(), e.lineStart(), e.point(o, n), e.point(s, n), i = 0) : r !== o && l >= ft && (Ot(t - r) < Tt && (t -= r * Tt), Ot(s - o) < Tt && (s -= o * Tt), n = yA(t, n, s, a), e.point(r, n), e.lineEnd(), e.lineStart(), e.point(o, n), i = 0), e.point(t = s, n = a), r = o;\n    },\n    lineEnd: function() {\n      e.lineEnd(), t = n = NaN;\n    },\n    clean: function() {\n      return 2 - i;\n    }\n  };\n}\nfunction yA(e, t, n, r) {\n  var i, s, a = xt(e - n);\n  return Ot(a) > Tt ? Ig((xt(t) * (s = St(r)) * xt(n) - xt(r) * (i = St(t)) * xt(e)) / (i * s * a)) : (t + r) / 2;\n}\nfunction xA(e, t, n, r) {\n  var i;\n  if (e == null)\n    i = n * de, r.point(-ft, i), r.point(0, i), r.point(ft, i), r.point(ft, 0), r.point(ft, -i), r.point(0, -i), r.point(-ft, -i), r.point(-ft, 0), r.point(-ft, i);\n  else if (Ot(e[0] - t[0]) > Tt) {\n    var s = e[0] < t[0] ? ft : -ft;\n    i = n * s / 2, r.point(-s, i), r.point(0, i), r.point(s, i);\n  } else\n    r.point(t[0], t[1]);\n}\nfunction bA(e) {\n  var t = St(e), n = 2 * Bt, r = t > 0, i = Ot(t) > Tt;\n  function s(u, d, h, p) {\n    pA(p, e, n, h, u, d);\n  }\n  function a(u, d) {\n    return St(u) * St(d) > t;\n  }\n  function o(u) {\n    var d, h, p, f, g;\n    return {\n      lineStart: function() {\n        f = p = !1, g = 1;\n      },\n      point: function(m, v) {\n        var x = [m, v], _, E = a(m, v), b = r ? E ? 0 : c(m, v) : E ? c(m + (m < 0 ? ft : -ft), v) : 0;\n        if (!d && (f = p = E) && u.lineStart(), E !== p && (_ = l(d, x), (!_ || ea(d, _) || ea(x, _)) && (x[2] = 1)), E !== p)\n          g = 0, E ? (u.lineStart(), _ = l(x, d), u.point(_[0], _[1])) : (_ = l(d, x), u.point(_[0], _[1], 2), u.lineEnd()), d = _;\n        else if (i && d && r ^ E) {\n          var S;\n          !(b & h) && (S = l(x, d, !0)) && (g = 0, r ? (u.lineStart(), u.point(S[0][0], S[0][1]), u.point(S[1][0], S[1][1]), u.lineEnd()) : (u.point(S[1][0], S[1][1]), u.lineEnd(), u.lineStart(), u.point(S[0][0], S[0][1], 3)));\n        }\n        E && (!d || !ea(d, x)) && u.point(x[0], x[1]), d = x, p = E, h = b;\n      },\n      lineEnd: function() {\n        p && u.lineEnd(), d = null;\n      },\n      // Rejoin first and last segments if there were intersections and the first\n      // and last points were visible.\n      clean: function() {\n        return g | (f && p) << 1;\n      }\n    };\n  }\n  function l(u, d, h) {\n    var p = ti(u), f = ti(d), g = [1, 0, 0], m = Ma(p, f), v = ks(m, m), x = m[0], _ = v - x * x;\n    if (!_) return !h && u;\n    var E = t * v / _, b = -t * x / _, S = Ma(g, m), M = Ds(g, E), D = Ds(m, b);\n    Xo(M, D);\n    var A = S, R = ks(M, A), $ = ks(A, A), H = R * R - $ * (ks(M, M) - 1);\n    if (!(H < 0)) {\n      var P = je(H), B = Ds(A, (-R - P) / $);\n      if (Xo(B, M), B = Fl(B), !h) return B;\n      var O = u[0], w = d[0], L = u[1], k = d[1], U;\n      w < O && (U = O, O = w, w = U);\n      var Z = w - O, j = Ot(Z - ft) < Tt, F = j || Z < Tt;\n      if (!j && k < L && (U = L, L = k, k = U), F ? j ? L + k > 0 ^ B[1] < (Ot(B[0] - O) < Tt ? L : k) : L <= B[1] && B[1] <= k : Z > ft ^ (O <= B[0] && B[0] <= w)) {\n        var Y = Ds(A, (-R + P) / $);\n        return Xo(Y, M), [B, Fl(Y)];\n      }\n    }\n  }\n  function c(u, d) {\n    var h = r ? e : ft - e, p = 0;\n    return u < -h ? p |= 1 : u > h && (p |= 2), d < -h ? p |= 4 : d > h && (p |= 8), p;\n  }\n  return Bg(a, o, s, r ? [0, -e] : [-ft, e - ft]);\n}\nfunction _A(e, t, n, r, i, s) {\n  var a = e[0], o = e[1], l = t[0], c = t[1], u = 0, d = 1, h = l - a, p = c - o, f;\n  if (f = n - a, !(!h && f > 0)) {\n    if (f /= h, h < 0) {\n      if (f < u) return;\n      f < d && (d = f);\n    } else if (h > 0) {\n      if (f > d) return;\n      f > u && (u = f);\n    }\n    if (f = i - a, !(!h && f < 0)) {\n      if (f /= h, h < 0) {\n        if (f > d) return;\n        f > u && (u = f);\n      } else if (h > 0) {\n        if (f < u) return;\n        f < d && (d = f);\n      }\n      if (f = r - o, !(!p && f > 0)) {\n        if (f /= p, p < 0) {\n          if (f < u) return;\n          f < d && (d = f);\n        } else if (p > 0) {\n          if (f > d) return;\n          f > u && (u = f);\n        }\n        if (f = s - o, !(!p && f < 0)) {\n          if (f /= p, p < 0) {\n            if (f > d) return;\n            f > u && (u = f);\n          } else if (p > 0) {\n            if (f < u) return;\n            f < d && (d = f);\n          }\n          return u > 0 && (e[0] = a + u * h, e[1] = o + u * p), d < 1 && (t[0] = a + d * h, t[1] = o + d * p), !0;\n        }\n      }\n    }\n  }\n}\nvar Is = 1e9, Ns = -1e9;\nfunction EA(e, t, n, r) {\n  function i(c, u) {\n    return e <= c && c <= n && t <= u && u <= r;\n  }\n  function s(c, u, d, h) {\n    var p = 0, f = 0;\n    if (c == null || (p = a(c, d)) !== (f = a(u, d)) || l(c, u) < 0 ^ d > 0)\n      do\n        h.point(p === 0 || p === 3 ? e : n, p > 1 ? r : t);\n      while ((p = (p + d + 4) % 4) !== f);\n    else\n      h.point(u[0], u[1]);\n  }\n  function a(c, u) {\n    return Ot(c[0] - e) < Tt ? u > 0 ? 0 : 3 : Ot(c[0] - n) < Tt ? u > 0 ? 2 : 1 : Ot(c[1] - t) < Tt ? u > 0 ? 1 : 0 : u > 0 ? 3 : 2;\n  }\n  function o(c, u) {\n    return l(c.x, u.x);\n  }\n  function l(c, u) {\n    var d = a(c, 1), h = a(u, 1);\n    return d !== h ? d - h : d === 0 ? u[1] - c[1] : d === 1 ? c[0] - u[0] : d === 2 ? c[1] - u[1] : u[0] - c[0];\n  }\n  return function(c) {\n    var u = c, d = Pg(), h, p, f, g, m, v, x, _, E, b, S, M = {\n      point: D,\n      lineStart: H,\n      lineEnd: P,\n      polygonStart: R,\n      polygonEnd: $\n    };\n    function D(O, w) {\n      i(O, w) && u.point(O, w);\n    }\n    function A() {\n      for (var O = 0, w = 0, L = p.length; w < L; ++w)\n        for (var k = p[w], U = 1, Z = k.length, j = k[0], F, Y, ot = j[0], Q = j[1]; U < Z; ++U)\n          F = ot, Y = Q, j = k[U], ot = j[0], Q = j[1], Y <= r ? Q > r && (ot - F) * (r - Y) > (Q - Y) * (e - F) && ++O : Q <= r && (ot - F) * (r - Y) < (Q - Y) * (e - F) && --O;\n      return O;\n    }\n    function R() {\n      u = d, h = [], p = [], S = !0;\n    }\n    function $() {\n      var O = A(), w = S && O, L = (h = Ag(h)).length;\n      (w || L) && (c.polygonStart(), w && (c.lineStart(), s(null, null, 1, c), c.lineEnd()), L && Ug(h, o, O, s, c), c.polygonEnd()), u = c, h = p = f = null;\n    }\n    function H() {\n      M.point = B, p && p.push(f = []), b = !0, E = !1, x = _ = NaN;\n    }\n    function P() {\n      h && (B(g, m), v && E && d.rejoin(), h.push(d.result())), M.point = D, E && u.lineEnd();\n    }\n    function B(O, w) {\n      var L = i(O, w);\n      if (p && f.push([O, w]), b)\n        g = O, m = w, v = L, b = !1, L && (u.lineStart(), u.point(O, w));\n      else if (L && E) u.point(O, w);\n      else {\n        var k = [x = Math.max(Ns, Math.min(Is, x)), _ = Math.max(Ns, Math.min(Is, _))], U = [O = Math.max(Ns, Math.min(Is, O)), w = Math.max(Ns, Math.min(Is, w))];\n        _A(k, U, e, t, n, r) ? (E || (u.lineStart(), u.point(k[0], k[1])), u.point(U[0], U[1]), L || u.lineEnd(), S = !1) : L && (u.lineStart(), u.point(O, w), S = !1);\n      }\n      x = O, _ = w, E = L;\n    }\n    return M;\n  };\n}\nconst Yl = (e) => e;\nvar Ko = new or(), Xl = new or(), Hg, Vg, Zl, Kl, xn = {\n  point: Ae,\n  lineStart: Ae,\n  lineEnd: Ae,\n  polygonStart: function() {\n    xn.lineStart = OA, xn.lineEnd = TA;\n  },\n  polygonEnd: function() {\n    xn.lineStart = xn.lineEnd = xn.point = Ae, Ko.add(Ot(Xl)), Xl = new or();\n  },\n  result: function() {\n    var e = Ko / 2;\n    return Ko = new or(), e;\n  }\n};\nfunction OA() {\n  xn.point = SA;\n}\nfunction SA(e, t) {\n  xn.point = Gg, Hg = Zl = e, Vg = Kl = t;\n}\nfunction Gg(e, t) {\n  Xl.add(Kl * e - Zl * t), Zl = e, Kl = t;\n}\nfunction TA() {\n  Gg(Hg, Vg);\n}\nvar ei = 1 / 0, Ca = ei, rs = -ei, Aa = rs, La = {\n  point: wA,\n  lineStart: Ae,\n  lineEnd: Ae,\n  polygonStart: Ae,\n  polygonEnd: Ae,\n  result: function() {\n    var e = [[ei, Ca], [rs, Aa]];\n    return rs = Aa = -(Ca = ei = 1 / 0), e;\n  }\n};\nfunction wA(e, t) {\n  e < ei && (ei = e), e > rs && (rs = e), t < Ca && (Ca = t), t > Aa && (Aa = t);\n}\nvar Ql = 0, Jl = 0, Ai = 0, ka = 0, Da = 0, Hr = 0, tc = 0, ec = 0, Li = 0, zg, Fg, Qe, Je, Me = {\n  point: cr,\n  lineStart: Id,\n  lineEnd: Nd,\n  polygonStart: function() {\n    Me.lineStart = CA, Me.lineEnd = AA;\n  },\n  polygonEnd: function() {\n    Me.point = cr, Me.lineStart = Id, Me.lineEnd = Nd;\n  },\n  result: function() {\n    var e = Li ? [tc / Li, ec / Li] : Hr ? [ka / Hr, Da / Hr] : Ai ? [Ql / Ai, Jl / Ai] : [NaN, NaN];\n    return Ql = Jl = Ai = ka = Da = Hr = tc = ec = Li = 0, e;\n  }\n};\nfunction cr(e, t) {\n  Ql += e, Jl += t, ++Ai;\n}\nfunction Id() {\n  Me.point = $A;\n}\nfunction $A(e, t) {\n  Me.point = MA, cr(Qe = e, Je = t);\n}\nfunction MA(e, t) {\n  var n = e - Qe, r = t - Je, i = je(n * n + r * r);\n  ka += i * (Qe + e) / 2, Da += i * (Je + t) / 2, Hr += i, cr(Qe = e, Je = t);\n}\nfunction Nd() {\n  Me.point = cr;\n}\nfunction CA() {\n  Me.point = LA;\n}\nfunction AA() {\n  jg(zg, Fg);\n}\nfunction LA(e, t) {\n  Me.point = jg, cr(zg = Qe = e, Fg = Je = t);\n}\nfunction jg(e, t) {\n  var n = e - Qe, r = t - Je, i = je(n * n + r * r);\n  ka += i * (Qe + e) / 2, Da += i * (Je + t) / 2, Hr += i, i = Je * e - Qe * t, tc += i * (Qe + e), ec += i * (Je + t), Li += i * 3, cr(Qe = e, Je = t);\n}\nfunction Wg(e) {\n  this._context = e;\n}\nWg.prototype = {\n  _radius: 4.5,\n  pointRadius: function(e) {\n    return this._radius = e, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    this._line === 0 && this._context.closePath(), this._point = NaN;\n  },\n  point: function(e, t) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(e, t), this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(e, t);\n        break;\n      }\n      default: {\n        this._context.moveTo(e + this._radius, t), this._context.arc(e, t, this._radius, 0, Ee);\n        break;\n      }\n    }\n  },\n  result: Ae\n};\nvar nc = new or(), Qo, qg, Yg, ki, Di, is = {\n  point: Ae,\n  lineStart: function() {\n    is.point = kA;\n  },\n  lineEnd: function() {\n    Qo && Xg(qg, Yg), is.point = Ae;\n  },\n  polygonStart: function() {\n    Qo = !0;\n  },\n  polygonEnd: function() {\n    Qo = null;\n  },\n  result: function() {\n    var e = +nc;\n    return nc = new or(), e;\n  }\n};\nfunction kA(e, t) {\n  is.point = Xg, qg = ki = e, Yg = Di = t;\n}\nfunction Xg(e, t) {\n  ki -= e, Di -= t, nc.add(je(ki * ki + Di * Di)), ki = e, Di = t;\n}\nlet Pd, Ra, Ud, Bd;\nclass Hd {\n  constructor(t) {\n    this._append = t == null ? Zg : DA(t), this._radius = 4.5, this._ = "";\n  }\n  pointRadius(t) {\n    return this._radius = +t, this;\n  }\n  polygonStart() {\n    this._line = 0;\n  }\n  polygonEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    this._line === 0 && (this._ += "Z"), this._point = NaN;\n  }\n  point(t, n) {\n    switch (this._point) {\n      case 0: {\n        this._append`M${t},${n}`, this._point = 1;\n        break;\n      }\n      case 1: {\n        this._append`L${t},${n}`;\n        break;\n      }\n      default: {\n        if (this._append`M${t},${n}`, this._radius !== Ud || this._append !== Ra) {\n          const r = this._radius, i = this._;\n          this._ = "", this._append`m0,${r}a${r},${r} 0 1,1 0,${-2 * r}a${r},${r} 0 1,1 0,${2 * r}z`, Ud = r, Ra = this._append, Bd = this._, this._ = i;\n        }\n        this._ += Bd;\n        break;\n      }\n    }\n  }\n  result() {\n    const t = this._;\n    return this._ = "", t.length ? t : null;\n  }\n}\nfunction Zg(e) {\n  let t = 1;\n  this._ += e[0];\n  for (const n = e.length; t < n; ++t)\n    this._ += arguments[t] + e[t];\n}\nfunction DA(e) {\n  const t = Math.floor(e);\n  if (!(t >= 0)) throw new RangeError(`invalid digits: ${e}`);\n  if (t > 15) return Zg;\n  if (t !== Pd) {\n    const n = 10 ** t;\n    Pd = t, Ra = function(r) {\n      let i = 1;\n      this._ += r[0];\n      for (const s = r.length; i < s; ++i)\n        this._ += Math.round(arguments[i] * n) / n + r[i];\n    };\n  }\n  return Ra;\n}\nfunction RA(e, t) {\n  let n = 3, r = 4.5, i, s;\n  function a(o) {\n    return o && (typeof r == "function" && s.pointRadius(+r.apply(this, arguments)), Lr(o, i(s))), s.result();\n  }\n  return a.area = function(o) {\n    return Lr(o, i(xn)), xn.result();\n  }, a.measure = function(o) {\n    return Lr(o, i(is)), is.result();\n  }, a.bounds = function(o) {\n    return Lr(o, i(La)), La.result();\n  }, a.centroid = function(o) {\n    return Lr(o, i(Me)), Me.result();\n  }, a.projection = function(o) {\n    return arguments.length ? (i = o == null ? (e = null, Yl) : (e = o).stream, a) : e;\n  }, a.context = function(o) {\n    return arguments.length ? (s = o == null ? (t = null, new Hd(n)) : new Wg(t = o), typeof r != "function" && s.pointRadius(r), a) : t;\n  }, a.pointRadius = function(o) {\n    return arguments.length ? (r = typeof o == "function" ? o : (s.pointRadius(+o), +o), a) : r;\n  }, a.digits = function(o) {\n    if (!arguments.length) return n;\n    if (o == null) n = null;\n    else {\n      const l = Math.floor(o);\n      if (!(l >= 0)) throw new RangeError(`invalid digits: ${o}`);\n      n = l;\n    }\n    return t === null && (s = new Hd(n)), a;\n  }, a.projection(e).digits(n).context(t);\n}\nfunction eu(e) {\n  return function(t) {\n    var n = new rc();\n    for (var r in e) n[r] = e[r];\n    return n.stream = t, n;\n  };\n}\nfunction rc() {\n}\nrc.prototype = {\n  constructor: rc,\n  point: function(e, t) {\n    this.stream.point(e, t);\n  },\n  sphere: function() {\n    this.stream.sphere();\n  },\n  lineStart: function() {\n    this.stream.lineStart();\n  },\n  lineEnd: function() {\n    this.stream.lineEnd();\n  },\n  polygonStart: function() {\n    this.stream.polygonStart();\n  },\n  polygonEnd: function() {\n    this.stream.polygonEnd();\n  }\n};\nfunction nu(e, t, n) {\n  var r = e.clipExtent && e.clipExtent();\n  return e.scale(150).translate([0, 0]), r != null && e.clipExtent(null), Lr(n, e.stream(La)), t(La.result()), r != null && e.clipExtent(r), e;\n}\nfunction Kg(e, t, n) {\n  return nu(e, function(r) {\n    var i = t[1][0] - t[0][0], s = t[1][1] - t[0][1], a = Math.min(i / (r[1][0] - r[0][0]), s / (r[1][1] - r[0][1])), o = +t[0][0] + (i - a * (r[1][0] + r[0][0])) / 2, l = +t[0][1] + (s - a * (r[1][1] + r[0][1])) / 2;\n    e.scale(150 * a).translate([o, l]);\n  }, n);\n}\nfunction IA(e, t, n) {\n  return Kg(e, [[0, 0], t], n);\n}\nfunction NA(e, t, n) {\n  return nu(e, function(r) {\n    var i = +t, s = i / (r[1][0] - r[0][0]), a = (i - s * (r[1][0] + r[0][0])) / 2, o = -s * r[0][1];\n    e.scale(150 * s).translate([a, o]);\n  }, n);\n}\nfunction PA(e, t, n) {\n  return nu(e, function(r) {\n    var i = +t, s = i / (r[1][1] - r[0][1]), a = -s * r[0][0], o = (i - s * (r[1][1] + r[0][1])) / 2;\n    e.scale(150 * s).translate([a, o]);\n  }, n);\n}\nvar Vd = 16, UA = St(30 * Bt);\nfunction Gd(e, t) {\n  return +t ? HA(e, t) : BA(e);\n}\nfunction BA(e) {\n  return eu({\n    point: function(t, n) {\n      t = e(t, n), this.stream.point(t[0], t[1]);\n    }\n  });\n}\nfunction HA(e, t) {\n  function n(r, i, s, a, o, l, c, u, d, h, p, f, g, m) {\n    var v = c - r, x = u - i, _ = v * v + x * x;\n    if (_ > 4 * t && g--) {\n      var E = a + h, b = o + p, S = l + f, M = je(E * E + b * b + S * S), D = Cn(S /= M), A = Ot(Ot(S) - 1) < Tt || Ot(s - d) < Tt ? (s + d) / 2 : lr(b, E), R = e(A, D), $ = R[0], H = R[1], P = $ - r, B = H - i, O = x * P - v * B;\n      (O * O / _ > t || Ot((v * P + x * B) / _ - 0.5) > 0.3 || a * h + o * p + l * f < UA) && (n(r, i, s, a, o, l, $, H, A, E /= M, b /= M, S, g, m), m.point($, H), n($, H, A, E, b, S, c, u, d, h, p, f, g, m));\n    }\n  }\n  return function(r) {\n    var i, s, a, o, l, c, u, d, h, p, f, g, m = {\n      point: v,\n      lineStart: x,\n      lineEnd: E,\n      polygonStart: function() {\n        r.polygonStart(), m.lineStart = b;\n      },\n      polygonEnd: function() {\n        r.polygonEnd(), m.lineStart = x;\n      }\n    };\n    function v(D, A) {\n      D = e(D, A), r.point(D[0], D[1]);\n    }\n    function x() {\n      d = NaN, m.point = _, r.lineStart();\n    }\n    function _(D, A) {\n      var R = ti([D, A]), $ = e(D, A);\n      n(d, h, u, p, f, g, d = $[0], h = $[1], u = D, p = R[0], f = R[1], g = R[2], Vd, r), r.point(d, h);\n    }\n    function E() {\n      m.point = v, r.lineEnd();\n    }\n    function b() {\n      x(), m.point = S, m.lineEnd = M;\n    }\n    function S(D, A) {\n      _(i = D, A), s = d, a = h, o = p, l = f, c = g, m.point = _;\n    }\n    function M() {\n      n(d, h, u, p, f, g, s, a, i, o, l, c, Vd, r), m.lineEnd = E, E();\n    }\n    return m;\n  };\n}\nvar VA = eu({\n  point: function(e, t) {\n    this.stream.point(e * Bt, t * Bt);\n  }\n});\nfunction GA(e) {\n  return eu({\n    point: function(t, n) {\n      var r = e(t, n);\n      return this.stream.point(r[0], r[1]);\n    }\n  });\n}\nfunction zA(e, t, n, r, i) {\n  function s(a, o) {\n    return a *= r, o *= i, [t + e * a, n - e * o];\n  }\n  return s.invert = function(a, o) {\n    return [(a - t) / e * r, (n - o) / e * i];\n  }, s;\n}\nfunction zd(e, t, n, r, i, s) {\n  if (!s) return zA(e, t, n, r, i);\n  var a = St(s), o = xt(s), l = a * e, c = o * e, u = a / e, d = o / e, h = (o * n - a * t) / e, p = (o * t + a * n) / e;\n  function f(g, m) {\n    return g *= r, m *= i, [l * g - c * m + t, n - c * g - l * m];\n  }\n  return f.invert = function(g, m) {\n    return [r * (u * g - d * m + h), i * (p - d * g - u * m)];\n  }, f;\n}\nfunction uo(e) {\n  return Qg(function() {\n    return e;\n  })();\n}\nfunction Qg(e) {\n  var t, n = 150, r = 480, i = 250, s = 0, a = 0, o = 0, l = 0, c = 0, u, d = 0, h = 1, p = 1, f = null, g = Rd, m = null, v, x, _, E = Yl, b = 0.5, S, M, D, A, R;\n  function $(O) {\n    return D(O[0] * Bt, O[1] * Bt);\n  }\n  function H(O) {\n    return O = D.invert(O[0], O[1]), O && [O[0] * se, O[1] * se];\n  }\n  $.stream = function(O) {\n    return A && R === O ? A : A = VA(GA(u)(g(S(E(R = O)))));\n  }, $.preclip = function(O) {\n    return arguments.length ? (g = O, f = void 0, B()) : g;\n  }, $.postclip = function(O) {\n    return arguments.length ? (E = O, m = v = x = _ = null, B()) : E;\n  }, $.clipAngle = function(O) {\n    return arguments.length ? (g = +O ? bA(f = O * Bt) : (f = null, Rd), B()) : f * se;\n  }, $.clipExtent = function(O) {\n    return arguments.length ? (E = O == null ? (m = v = x = _ = null, Yl) : EA(m = +O[0][0], v = +O[0][1], x = +O[1][0], _ = +O[1][1]), B()) : m == null ? null : [[m, v], [x, _]];\n  }, $.scale = function(O) {\n    return arguments.length ? (n = +O, P()) : n;\n  }, $.translate = function(O) {\n    return arguments.length ? (r = +O[0], i = +O[1], P()) : [r, i];\n  }, $.center = function(O) {\n    return arguments.length ? (s = O[0] % 360 * Bt, a = O[1] % 360 * Bt, P()) : [s * se, a * se];\n  }, $.rotate = function(O) {\n    return arguments.length ? (o = O[0] % 360 * Bt, l = O[1] % 360 * Bt, c = O.length > 2 ? O[2] % 360 * Bt : 0, P()) : [o * se, l * se, c * se];\n  }, $.angle = function(O) {\n    return arguments.length ? (d = O % 360 * Bt, P()) : d * se;\n  }, $.reflectX = function(O) {\n    return arguments.length ? (h = O ? -1 : 1, P()) : h < 0;\n  }, $.reflectY = function(O) {\n    return arguments.length ? (p = O ? -1 : 1, P()) : p < 0;\n  }, $.precision = function(O) {\n    return arguments.length ? (S = Gd(M, b = O * O), B()) : je(b);\n  }, $.fitExtent = function(O, w) {\n    return Kg($, O, w);\n  }, $.fitSize = function(O, w) {\n    return IA($, O, w);\n  }, $.fitWidth = function(O, w) {\n    return NA($, O, w);\n  }, $.fitHeight = function(O, w) {\n    return PA($, O, w);\n  };\n  function P() {\n    var O = zd(n, 0, 0, h, p, d).apply(null, t(s, a)), w = zd(n, r - O[0], i - O[1], h, p, d);\n    return u = Ng(o, l, c), M = Wl(t, w), D = Wl(u, M), S = Gd(M, b), B();\n  }\n  function B() {\n    return A = R = null, $;\n  }\n  return function() {\n    return t = e.apply(this, arguments), $.invert = t.invert && H, P();\n  };\n}\nfunction Jg(e) {\n  var t = 0, n = ft / 3, r = Qg(e), i = r(t, n);\n  return i.parallels = function(s) {\n    return arguments.length ? r(t = s[0] * Bt, n = s[1] * Bt) : [t * se, n * se];\n  }, i;\n}\nfunction FA(e) {\n  var t = St(e);\n  function n(r, i) {\n    return [r * t, xt(i) / t];\n  }\n  return n.invert = function(r, i) {\n    return [r / t, Cn(i * t)];\n  }, n;\n}\nfunction jA(e, t) {\n  var n = xt(e), r = (n + xt(t)) / 2;\n  if (Ot(r) < Tt) return FA(e);\n  var i = 1 + n * (2 * r - n), s = je(i) / r;\n  function a(o, l) {\n    var c = je(i - 2 * r * xt(l)) / r;\n    return [c * xt(o *= r), s - c * St(o)];\n  }\n  return a.invert = function(o, l) {\n    var c = s - l, u = lr(o, Ot(c)) * Un(c);\n    return c * r < 0 && (u -= ft * Un(o) * Un(c)), [u / r, Cn((i - (o * o + c * c) * r * r) / (2 * r))];\n  }, a;\n}\nfunction tv() {\n  return Jg(jA).scale(155.424).center([0, 33.6442]);\n}\nfunction WA() {\n  return tv().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);\n}\nfunction ru(e, t) {\n  return [e, cA(uA((de + t) / 2))];\n}\nru.invert = function(e, t) {\n  return [e, 2 * Ig(lA(t)) - de];\n};\nfunction qA() {\n  return YA(ru).scale(961 / Ee);\n}\nfunction YA(e) {\n  var t = uo(e), n = t.center, r = t.scale, i = t.translate, s = t.clipExtent, a = null, o, l, c;\n  t.scale = function(d) {\n    return arguments.length ? (r(d), u()) : r();\n  }, t.translate = function(d) {\n    return arguments.length ? (i(d), u()) : i();\n  }, t.center = function(d) {\n    return arguments.length ? (n(d), u()) : n();\n  }, t.clipExtent = function(d) {\n    return arguments.length ? (d == null ? a = o = l = c = null : (a = +d[0][0], o = +d[0][1], l = +d[1][0], c = +d[1][1]), u()) : a == null ? null : [[a, o], [l, c]];\n  };\n  function u() {\n    var d = ft * r(), h = t(dA(t.rotate()).invert([0, 0]));\n    return s(a == null ? [[h[0] - d, h[1] - d], [h[0] + d, h[1] + d]] : e === ru ? [[Math.max(h[0] - d, a), o], [Math.min(h[0] + d, l), c]] : [[a, Math.max(h[1] - d, o)], [l, Math.min(h[1] + d, c)]]);\n  }\n  return u();\n}\nfunction Ia(e, t) {\n  return [e, t];\n}\nIa.invert = Ia;\nfunction XA() {\n  return uo(Ia).scale(152.63);\n}\nfunction ZA(e, t) {\n  var n = St(e), r = e === t ? xt(e) : (n - St(t)) / (t - e), i = n / r + e;\n  if (Ot(r) < Tt) return Ia;\n  function s(a, o) {\n    var l = i - o, c = r * a;\n    return [l * xt(c), i - l * St(c)];\n  }\n  return s.invert = function(a, o) {\n    var l = i - o, c = lr(a, Ot(l)) * Un(l);\n    return l * r < 0 && (c -= ft * Un(a) * Un(l)), [c / r, i - Un(r) * je(a * a + l * l)];\n  }, s;\n}\nfunction KA() {\n  return Jg(ZA).scale(131.154).center([0, 13.9389]);\n}\nvar Hi = 1.340264, Vi = -0.081106, Gi = 893e-6, zi = 3796e-6, Na = je(3) / 2, QA = 12;\nfunction ev(e, t) {\n  var n = Cn(Na * xt(t)), r = n * n, i = r * r * r;\n  return [\n    e * St(n) / (Na * (Hi + 3 * Vi * r + i * (7 * Gi + 9 * zi * r))),\n    n * (Hi + Vi * r + i * (Gi + zi * r))\n  ];\n}\nev.invert = function(e, t) {\n  for (var n = t, r = n * n, i = r * r * r, s = 0, a, o, l; s < QA && (o = n * (Hi + Vi * r + i * (Gi + zi * r)) - t, l = Hi + 3 * Vi * r + i * (7 * Gi + 9 * zi * r), n -= a = o / l, r = n * n, i = r * r * r, !(Ot(a) < oA)); ++s)\n    ;\n  return [\n    Na * e * (Hi + 3 * Vi * r + i * (7 * Gi + 9 * zi * r)) / St(n),\n    Cn(xt(n) / Na)\n  ];\n};\nfunction JA() {\n  return uo(ev).scale(177.158);\n}\nfunction nv(e, t) {\n  var n = t * t, r = n * n;\n  return [\n    e * (0.8707 - 0.131979 * n + r * (-0.013791 + r * (3971e-6 * n - 1529e-6 * r))),\n    t * (1.007226 + n * (0.015085 + r * (-0.044475 + 0.028874 * n - 5916e-6 * r)))\n  ];\n}\nnv.invert = function(e, t) {\n  var n = t, r = 25, i;\n  do {\n    var s = n * n, a = s * s;\n    n -= i = (n * (1.007226 + s * (0.015085 + a * (-0.044475 + 0.028874 * s - 5916e-6 * a))) - t) / (1.007226 + s * (0.015085 * 3 + a * (-0.044475 * 7 + 0.028874 * 9 * s - 5916e-6 * 11 * a)));\n  } while (Ot(i) > Tt && --r > 0);\n  return [\n    e / (0.8707 + (s = n * n) * (-0.131979 + s * (-0.013791 + s * s * s * (3971e-6 - 1529e-6 * s)))),\n    n\n  ];\n};\nfunction tL() {\n  return uo(nv).scale(175.295);\n}\nfunction eL(e, t) {\n  return e.parent === t.parent ? 1 : 2;\n}\nfunction nL(e) {\n  return e.reduce(rL, 0) / e.length;\n}\nfunction rL(e, t) {\n  return e + t.x;\n}\nfunction iL(e) {\n  return 1 + e.reduce(sL, 0);\n}\nfunction sL(e, t) {\n  return Math.max(e, t.y);\n}\nfunction aL(e) {\n  for (var t; t = e.children; ) e = t[0];\n  return e;\n}\nfunction oL(e) {\n  for (var t; t = e.children; ) e = t[t.length - 1];\n  return e;\n}\nfunction lL() {\n  var e = eL, t = 1, n = 1, r = !1;\n  function i(s) {\n    var a, o = 0;\n    s.eachAfter(function(h) {\n      var p = h.children;\n      p ? (h.x = nL(p), h.y = iL(p)) : (h.x = a ? o += e(h, a) : 0, h.y = 0, a = h);\n    });\n    var l = aL(s), c = oL(s), u = l.x - e(l, c) / 2, d = c.x + e(c, l) / 2;\n    return s.eachAfter(r ? function(h) {\n      h.x = (h.x - s.x) * t, h.y = (s.y - h.y) * n;\n    } : function(h) {\n      h.x = (h.x - u) / (d - u) * t, h.y = (1 - (s.y ? h.y / s.y : 1)) * n;\n    });\n  }\n  return i.separation = function(s) {\n    return arguments.length ? (e = s, i) : e;\n  }, i.size = function(s) {\n    return arguments.length ? (r = !1, t = +s[0], n = +s[1], i) : r ? null : [t, n];\n  }, i.nodeSize = function(s) {\n    return arguments.length ? (r = !0, t = +s[0], n = +s[1], i) : r ? [t, n] : null;\n  }, i;\n}\nfunction cL(e) {\n  var t = 0, n = e.children, r = n && n.length;\n  if (!r) t = 1;\n  else for (; --r >= 0; ) t += n[r].value;\n  e.value = t;\n}\nfunction uL() {\n  return this.eachAfter(cL);\n}\nfunction hL(e, t) {\n  let n = -1;\n  for (const r of this)\n    e.call(t, r, ++n, this);\n  return this;\n}\nfunction dL(e, t) {\n  for (var n = this, r = [n], i, s, a = -1; n = r.pop(); )\n    if (e.call(t, n, ++a, this), i = n.children)\n      for (s = i.length - 1; s >= 0; --s)\n        r.push(i[s]);\n  return this;\n}\nfunction pL(e, t) {\n  for (var n = this, r = [n], i = [], s, a, o, l = -1; n = r.pop(); )\n    if (i.push(n), s = n.children)\n      for (a = 0, o = s.length; a < o; ++a)\n        r.push(s[a]);\n  for (; n = i.pop(); )\n    e.call(t, n, ++l, this);\n  return this;\n}\nfunction fL(e, t) {\n  let n = -1;\n  for (const r of this)\n    if (e.call(t, r, ++n, this))\n      return r;\n}\nfunction mL(e) {\n  return this.eachAfter(function(t) {\n    for (var n = +e(t.data) || 0, r = t.children, i = r && r.length; --i >= 0; ) n += r[i].value;\n    t.value = n;\n  });\n}\nfunction gL(e) {\n  return this.eachBefore(function(t) {\n    t.children && t.children.sort(e);\n  });\n}\nfunction vL(e) {\n  for (var t = this, n = yL(t, e), r = [t]; t !== n; )\n    t = t.parent, r.push(t);\n  for (var i = r.length; e !== n; )\n    r.splice(i, 0, e), e = e.parent;\n  return r;\n}\nfunction yL(e, t) {\n  if (e === t) return e;\n  var n = e.ancestors(), r = t.ancestors(), i = null;\n  for (e = n.pop(), t = r.pop(); e === t; )\n    i = e, e = n.pop(), t = r.pop();\n  return i;\n}\nfunction xL() {\n  for (var e = this, t = [e]; e = e.parent; )\n    t.push(e);\n  return t;\n}\nfunction bL() {\n  return Array.from(this);\n}\nfunction _L() {\n  var e = [];\n  return this.eachBefore(function(t) {\n    t.children || e.push(t);\n  }), e;\n}\nfunction EL() {\n  var e = this, t = [];\n  return e.each(function(n) {\n    n !== e && t.push({ source: n.parent, target: n });\n  }), t;\n}\nfunction* OL() {\n  var e = this, t, n = [e], r, i, s;\n  do\n    for (t = n.reverse(), n = []; e = t.pop(); )\n      if (yield e, r = e.children)\n        for (i = 0, s = r.length; i < s; ++i)\n          n.push(r[i]);\n  while (n.length);\n}\nfunction ys(e, t) {\n  e instanceof Map ? (e = [void 0, e], t === void 0 && (t = wL)) : t === void 0 && (t = TL);\n  for (var n = new ss(e), r, i = [n], s, a, o, l; r = i.pop(); )\n    if ((a = t(r.data)) && (l = (a = Array.from(a)).length))\n      for (r.children = a, o = l - 1; o >= 0; --o)\n        i.push(s = a[o] = new ss(a[o])), s.parent = r, s.depth = r.depth + 1;\n  return n.eachBefore(ML);\n}\nfunction SL() {\n  return ys(this).eachBefore($L);\n}\nfunction TL(e) {\n  return e.children;\n}\nfunction wL(e) {\n  return Array.isArray(e) ? e[1] : null;\n}\nfunction $L(e) {\n  e.data.value !== void 0 && (e.value = e.data.value), e.data = e.data.data;\n}\nfunction ML(e) {\n  var t = 0;\n  do\n    e.height = t;\n  while ((e = e.parent) && e.height < ++t);\n}\nfunction ss(e) {\n  this.data = e, this.depth = this.height = 0, this.parent = null;\n}\nss.prototype = ys.prototype = {\n  constructor: ss,\n  count: uL,\n  each: hL,\n  eachAfter: pL,\n  eachBefore: dL,\n  find: fL,\n  sum: mL,\n  sort: gL,\n  path: vL,\n  ancestors: xL,\n  descendants: bL,\n  leaves: _L,\n  links: EL,\n  copy: SL,\n  [Symbol.iterator]: OL\n};\nfunction CL(e) {\n  return e == null ? null : rv(e);\n}\nfunction rv(e) {\n  if (typeof e != "function") throw new Error();\n  return e;\n}\nfunction Kn() {\n  return 0;\n}\nfunction kr(e) {\n  return function() {\n    return e;\n  };\n}\nconst AL = 1664525, LL = 1013904223, Fd = 4294967296;\nfunction kL() {\n  let e = 1;\n  return () => (e = (AL * e + LL) % Fd) / Fd;\n}\nfunction DL(e) {\n  return typeof e == "object" && "length" in e ? e : Array.from(e);\n}\nfunction RL(e, t) {\n  let n = e.length, r, i;\n  for (; n; )\n    i = t() * n-- | 0, r = e[n], e[n] = e[i], e[i] = r;\n  return e;\n}\nfunction IL(e, t) {\n  for (var n = 0, r = (e = RL(Array.from(e), t)).length, i = [], s, a; n < r; )\n    s = e[n], a && iv(a, s) ? ++n : (a = PL(i = NL(i, s)), n = 0);\n  return a;\n}\nfunction NL(e, t) {\n  var n, r;\n  if (Jo(t, e)) return [t];\n  for (n = 0; n < e.length; ++n)\n    if (Ps(t, e[n]) && Jo(Ri(e[n], t), e))\n      return [e[n], t];\n  for (n = 0; n < e.length - 1; ++n)\n    for (r = n + 1; r < e.length; ++r)\n      if (Ps(Ri(e[n], e[r]), t) && Ps(Ri(e[n], t), e[r]) && Ps(Ri(e[r], t), e[n]) && Jo(sv(e[n], e[r], t), e))\n        return [e[n], e[r], t];\n  throw new Error();\n}\nfunction Ps(e, t) {\n  var n = e.r - t.r, r = t.x - e.x, i = t.y - e.y;\n  return n < 0 || n * n < r * r + i * i;\n}\nfunction iv(e, t) {\n  var n = e.r - t.r + Math.max(e.r, t.r, 1) * 1e-9, r = t.x - e.x, i = t.y - e.y;\n  return n > 0 && n * n > r * r + i * i;\n}\nfunction Jo(e, t) {\n  for (var n = 0; n < t.length; ++n)\n    if (!iv(e, t[n]))\n      return !1;\n  return !0;\n}\nfunction PL(e) {\n  switch (e.length) {\n    case 1:\n      return UL(e[0]);\n    case 2:\n      return Ri(e[0], e[1]);\n    case 3:\n      return sv(e[0], e[1], e[2]);\n  }\n}\nfunction UL(e) {\n  return {\n    x: e.x,\n    y: e.y,\n    r: e.r\n  };\n}\nfunction Ri(e, t) {\n  var n = e.x, r = e.y, i = e.r, s = t.x, a = t.y, o = t.r, l = s - n, c = a - r, u = o - i, d = Math.sqrt(l * l + c * c);\n  return {\n    x: (n + s + l / d * u) / 2,\n    y: (r + a + c / d * u) / 2,\n    r: (d + i + o) / 2\n  };\n}\nfunction sv(e, t, n) {\n  var r = e.x, i = e.y, s = e.r, a = t.x, o = t.y, l = t.r, c = n.x, u = n.y, d = n.r, h = r - a, p = r - c, f = i - o, g = i - u, m = l - s, v = d - s, x = r * r + i * i - s * s, _ = x - a * a - o * o + l * l, E = x - c * c - u * u + d * d, b = p * f - h * g, S = (f * E - g * _) / (b * 2) - r, M = (g * m - f * v) / b, D = (p * _ - h * E) / (b * 2) - i, A = (h * v - p * m) / b, R = M * M + A * A - 1, $ = 2 * (s + S * M + D * A), H = S * S + D * D - s * s, P = -(Math.abs(R) > 1e-6 ? ($ + Math.sqrt($ * $ - 4 * R * H)) / (2 * R) : H / $);\n  return {\n    x: r + S + M * P,\n    y: i + D + A * P,\n    r: P\n  };\n}\nfunction jd(e, t, n) {\n  var r = e.x - t.x, i, s, a = e.y - t.y, o, l, c = r * r + a * a;\n  c ? (s = t.r + n.r, s *= s, l = e.r + n.r, l *= l, s > l ? (i = (c + l - s) / (2 * c), o = Math.sqrt(Math.max(0, l / c - i * i)), n.x = e.x - i * r - o * a, n.y = e.y - i * a + o * r) : (i = (c + s - l) / (2 * c), o = Math.sqrt(Math.max(0, s / c - i * i)), n.x = t.x + i * r - o * a, n.y = t.y + i * a + o * r)) : (n.x = t.x + n.r, n.y = t.y);\n}\nfunction Wd(e, t) {\n  var n = e.r + t.r - 1e-6, r = t.x - e.x, i = t.y - e.y;\n  return n > 0 && n * n > r * r + i * i;\n}\nfunction qd(e) {\n  var t = e._, n = e.next._, r = t.r + n.r, i = (t.x * n.r + n.x * t.r) / r, s = (t.y * n.r + n.y * t.r) / r;\n  return i * i + s * s;\n}\nfunction Us(e) {\n  this._ = e, this.next = null, this.previous = null;\n}\nfunction BL(e, t) {\n  if (!(s = (e = DL(e)).length)) return 0;\n  var n, r, i, s, a, o, l, c, u, d, h;\n  if (n = e[0], n.x = 0, n.y = 0, !(s > 1)) return n.r;\n  if (r = e[1], n.x = -r.r, r.x = n.r, r.y = 0, !(s > 2)) return n.r + r.r;\n  jd(r, n, i = e[2]), n = new Us(n), r = new Us(r), i = new Us(i), n.next = i.previous = r, r.next = n.previous = i, i.next = r.previous = n;\n  t: for (l = 3; l < s; ++l) {\n    jd(n._, r._, i = e[l]), i = new Us(i), c = r.next, u = n.previous, d = r._.r, h = n._.r;\n    do\n      if (d <= h) {\n        if (Wd(c._, i._)) {\n          r = c, n.next = r, r.previous = n, --l;\n          continue t;\n        }\n        d += c._.r, c = c.next;\n      } else {\n        if (Wd(u._, i._)) {\n          n = u, n.next = r, r.previous = n, --l;\n          continue t;\n        }\n        h += u._.r, u = u.previous;\n      }\n    while (c !== u.next);\n    for (i.previous = n, i.next = r, n.next = r.previous = r = i, a = qd(n); (i = i.next) !== r; )\n      (o = qd(i)) < a && (n = i, a = o);\n    r = n.next;\n  }\n  for (n = [r._], i = r; (i = i.next) !== r; ) n.push(i._);\n  for (i = IL(n, t), l = 0; l < s; ++l) n = e[l], n.x -= i.x, n.y -= i.y;\n  return i.r;\n}\nfunction HL(e) {\n  return Math.sqrt(e.value);\n}\nfunction VL() {\n  var e = null, t = 1, n = 1, r = Kn;\n  function i(s) {\n    const a = kL();\n    return s.x = t / 2, s.y = n / 2, e ? s.eachBefore(Yd(e)).eachAfter(tl(r, 0.5, a)).eachBefore(Xd(1)) : s.eachBefore(Yd(HL)).eachAfter(tl(Kn, 1, a)).eachAfter(tl(r, s.r / Math.min(t, n), a)).eachBefore(Xd(Math.min(t, n) / (2 * s.r))), s;\n  }\n  return i.radius = function(s) {\n    return arguments.length ? (e = CL(s), i) : e;\n  }, i.size = function(s) {\n    return arguments.length ? (t = +s[0], n = +s[1], i) : [t, n];\n  }, i.padding = function(s) {\n    return arguments.length ? (r = typeof s == "function" ? s : kr(+s), i) : r;\n  }, i;\n}\nfunction Yd(e) {\n  return function(t) {\n    t.children || (t.r = Math.max(0, +e(t) || 0));\n  };\n}\nfunction tl(e, t, n) {\n  return function(r) {\n    if (i = r.children) {\n      var i, s, a = i.length, o = e(r) * t || 0, l;\n      if (o) for (s = 0; s < a; ++s) i[s].r += o;\n      if (l = BL(i, n), o) for (s = 0; s < a; ++s) i[s].r -= o;\n      r.r = l + o;\n    }\n  };\n}\nfunction Xd(e) {\n  return function(t) {\n    var n = t.parent;\n    t.r *= e, n && (t.x = n.x + e * t.x, t.y = n.y + e * t.y);\n  };\n}\nfunction GL(e) {\n  e.x0 = Math.round(e.x0), e.y0 = Math.round(e.y0), e.x1 = Math.round(e.x1), e.y1 = Math.round(e.y1);\n}\nfunction zL(e, t, n, r, i) {\n  for (var s = e.children, a, o = -1, l = s.length, c = e.value && (r - t) / e.value; ++o < l; )\n    a = s[o], a.y0 = n, a.y1 = i, a.x0 = t, a.x1 = t += a.value * c;\n}\nfunction FL(e, t) {\n  return e.parent === t.parent ? 1 : 2;\n}\nfunction el(e) {\n  var t = e.children;\n  return t ? t[0] : e.t;\n}\nfunction nl(e) {\n  var t = e.children;\n  return t ? t[t.length - 1] : e.t;\n}\nfunction jL(e, t, n) {\n  var r = n / (t.i - e.i);\n  t.c -= r, t.s += n, e.c += r, t.z += n, t.m += n;\n}\nfunction WL(e) {\n  for (var t = 0, n = 0, r = e.children, i = r.length, s; --i >= 0; )\n    s = r[i], s.z += t, s.m += t, t += s.s + (n += s.c);\n}\nfunction qL(e, t, n) {\n  return e.a.parent === t.parent ? e.a : n;\n}\nfunction na(e, t) {\n  this._ = e, this.parent = null, this.children = null, this.A = null, this.a = this, this.z = 0, this.m = 0, this.c = 0, this.s = 0, this.t = null, this.i = t;\n}\nna.prototype = Object.create(ss.prototype);\nfunction YL(e) {\n  for (var t = new na(e, 0), n, r = [t], i, s, a, o; n = r.pop(); )\n    if (s = n._.children)\n      for (n.children = new Array(o = s.length), a = o - 1; a >= 0; --a)\n        r.push(i = n.children[a] = new na(s[a], a)), i.parent = n;\n  return (t.parent = new na(null, 0)).children = [t], t;\n}\nfunction XL() {\n  var e = FL, t = 1, n = 1, r = null;\n  function i(c) {\n    var u = YL(c);\n    if (u.eachAfter(s), u.parent.m = -u.z, u.eachBefore(a), r) c.eachBefore(l);\n    else {\n      var d = c, h = c, p = c;\n      c.eachBefore(function(x) {\n        x.x < d.x && (d = x), x.x > h.x && (h = x), x.depth > p.depth && (p = x);\n      });\n      var f = d === h ? 1 : e(d, h) / 2, g = f - d.x, m = t / (h.x + f + g), v = n / (p.depth || 1);\n      c.eachBefore(function(x) {\n        x.x = (x.x + g) * m, x.y = x.depth * v;\n      });\n    }\n    return c;\n  }\n  function s(c) {\n    var u = c.children, d = c.parent.children, h = c.i ? d[c.i - 1] : null;\n    if (u) {\n      WL(c);\n      var p = (u[0].z + u[u.length - 1].z) / 2;\n      h ? (c.z = h.z + e(c._, h._), c.m = c.z - p) : c.z = p;\n    } else h && (c.z = h.z + e(c._, h._));\n    c.parent.A = o(c, h, c.parent.A || d[0]);\n  }\n  function a(c) {\n    c._.x = c.z + c.parent.m, c.m += c.parent.m;\n  }\n  function o(c, u, d) {\n    if (u) {\n      for (var h = c, p = c, f = u, g = h.parent.children[0], m = h.m, v = p.m, x = f.m, _ = g.m, E; f = nl(f), h = el(h), f && h; )\n        g = el(g), p = nl(p), p.a = c, E = f.z + x - h.z - m + e(f._, h._), E > 0 && (jL(qL(f, c, d), c, E), m += E, v += E), x += f.m, m += h.m, _ += g.m, v += p.m;\n      f && !nl(p) && (p.t = f, p.m += x - v), h && !el(g) && (g.t = h, g.m += m - _, d = c);\n    }\n    return d;\n  }\n  function l(c) {\n    c.x *= t, c.y = c.depth * n;\n  }\n  return i.separation = function(c) {\n    return arguments.length ? (e = c, i) : e;\n  }, i.size = function(c) {\n    return arguments.length ? (r = !1, t = +c[0], n = +c[1], i) : r ? null : [t, n];\n  }, i.nodeSize = function(c) {\n    return arguments.length ? (r = !0, t = +c[0], n = +c[1], i) : r ? [t, n] : null;\n  }, i;\n}\nfunction ZL(e, t, n, r, i) {\n  for (var s = e.children, a, o = -1, l = s.length, c = e.value && (i - n) / e.value; ++o < l; )\n    a = s[o], a.x0 = t, a.x1 = r, a.y0 = n, a.y1 = n += a.value * c;\n}\nvar KL = (1 + Math.sqrt(5)) / 2;\nfunction QL(e, t, n, r, i, s) {\n  for (var a = [], o = t.children, l, c, u = 0, d = 0, h = o.length, p, f, g = t.value, m, v, x, _, E, b, S; u < h; ) {\n    p = i - n, f = s - r;\n    do\n      m = o[d++].value;\n    while (!m && d < h);\n    for (v = x = m, b = Math.max(f / p, p / f) / (g * e), S = m * m * b, E = Math.max(x / S, S / v); d < h; ++d) {\n      if (m += c = o[d].value, c < v && (v = c), c > x && (x = c), S = m * m * b, _ = Math.max(x / S, S / v), _ > E) {\n        m -= c;\n        break;\n      }\n      E = _;\n    }\n    a.push(l = { value: m, dice: p < f, children: o.slice(u, d) }), l.dice ? zL(l, n, r, i, g ? r += f * m / g : s) : ZL(l, n, r, g ? n += p * m / g : i, s), g -= m, u = d;\n  }\n  return a;\n}\nconst JL = function e(t) {\n  function n(r, i, s, a, o) {\n    QL(t, r, i, s, a, o);\n  }\n  return n.ratio = function(r) {\n    return e((r = +r) > 1 ? r : 1);\n  }, n;\n}(KL);\nfunction tk() {\n  var e = JL, t = !1, n = 1, r = 1, i = [0], s = Kn, a = Kn, o = Kn, l = Kn, c = Kn;\n  function u(h) {\n    return h.x0 = h.y0 = 0, h.x1 = n, h.y1 = r, h.eachBefore(d), i = [0], t && h.eachBefore(GL), h;\n  }\n  function d(h) {\n    var p = i[h.depth], f = h.x0 + p, g = h.y0 + p, m = h.x1 - p, v = h.y1 - p;\n    m < f && (f = m = (f + m) / 2), v < g && (g = v = (g + v) / 2), h.x0 = f, h.y0 = g, h.x1 = m, h.y1 = v, h.children && (p = i[h.depth + 1] = s(h) / 2, f += c(h) - p, g += a(h) - p, m -= o(h) - p, v -= l(h) - p, m < f && (f = m = (f + m) / 2), v < g && (g = v = (g + v) / 2), e(h, f, g, m, v));\n  }\n  return u.round = function(h) {\n    return arguments.length ? (t = !!h, u) : t;\n  }, u.size = function(h) {\n    return arguments.length ? (n = +h[0], r = +h[1], u) : [n, r];\n  }, u.tile = function(h) {\n    return arguments.length ? (e = rv(h), u) : e;\n  }, u.padding = function(h) {\n    return arguments.length ? u.paddingInner(h).paddingOuter(h) : u.paddingInner();\n  }, u.paddingInner = function(h) {\n    return arguments.length ? (s = typeof h == "function" ? h : kr(+h), u) : s;\n  }, u.paddingOuter = function(h) {\n    return arguments.length ? u.paddingTop(h).paddingRight(h).paddingBottom(h).paddingLeft(h) : u.paddingTop();\n  }, u.paddingTop = function(h) {\n    return arguments.length ? (a = typeof h == "function" ? h : kr(+h), u) : a;\n  }, u.paddingRight = function(h) {\n    return arguments.length ? (o = typeof h == "function" ? h : kr(+h), u) : o;\n  }, u.paddingBottom = function(h) {\n    return arguments.length ? (l = typeof h == "function" ? h : kr(+h), u) : l;\n  }, u.paddingLeft = function(h) {\n    return arguments.length ? (c = typeof h == "function" ? h : kr(+h), u) : c;\n  }, u;\n}\nfunction ho(e) {\n  let t = 3;\n  return e.digits = function(n) {\n    if (!arguments.length) return t;\n    if (n == null)\n      t = null;\n    else {\n      const r = Math.floor(n);\n      if (!(r >= 0)) throw new RangeError(`invalid digits: ${n}`);\n      t = r;\n    }\n    return e;\n  }, () => new tu(t);\n}\nfunction ek(e) {\n  return e.innerRadius;\n}\nfunction nk(e) {\n  return e.outerRadius;\n}\nfunction rk(e) {\n  return e.startAngle;\n}\nfunction ik(e) {\n  return e.endAngle;\n}\nfunction sk(e) {\n  return e && e.padAngle;\n}\nfunction ak(e, t, n, r, i, s, a, o) {\n  var l = n - e, c = r - t, u = a - i, d = o - s, h = d * l - u * c;\n  if (!(h * h < ne))\n    return h = (u * (t - s) - d * (e - i)) / h, [e + h * l, t + h * c];\n}\nfunction Bs(e, t, n, r, i, s, a) {\n  var o = e - n, l = t - r, c = (a ? s : -s) / Br(o * o + l * l), u = c * l, d = -c * o, h = e + u, p = t + d, f = n + u, g = r + d, m = (h + f) / 2, v = (p + g) / 2, x = f - h, _ = g - p, E = x * x + _ * _, b = i - s, S = h * g - f * p, M = (_ < 0 ? -1 : 1) * Br(GM(0, b * b * E - S * S)), D = (S * _ - x * M) / E, A = (-S * x - _ * M) / E, R = (S * _ + x * M) / E, $ = (-S * x + _ * M) / E, H = D - m, P = A - v, B = R - m, O = $ - v;\n  return H * H + P * P > B * B + O * O && (D = R, A = $), {\n    cx: D,\n    cy: A,\n    x01: -u,\n    y01: -d,\n    x11: D * (i / b - 1),\n    y11: A * (i / b - 1)\n  };\n}\nfunction as() {\n  var e = ek, t = nk, n = dt(0), r = null, i = rk, s = ik, a = sk, o = null, l = ho(c);\n  function c() {\n    var u, d, h = +e.apply(this, arguments), p = +t.apply(this, arguments), f = i.apply(this, arguments) - Sa, g = s.apply(this, arguments) - Sa, m = id(g - f), v = g > f;\n    if (o || (o = u = l()), p < h && (d = p, p = h, h = d), !(p > ne)) o.moveTo(0, 0);\n    else if (m > Ks - ne)\n      o.moveTo(p * qn(f), p * Ze(f)), o.arc(0, 0, p, f, g, !v), h > ne && (o.moveTo(h * qn(g), h * Ze(g)), o.arc(0, 0, h, g, f, v));\n    else {\n      var x = f, _ = g, E = f, b = g, S = m, M = m, D = a.apply(this, arguments) / 2, A = D > ne && (r ? +r.apply(this, arguments) : Br(h * h + p * p)), R = Go(id(p - h) / 2, +n.apply(this, arguments)), $ = R, H = R, P, B;\n      if (A > ne) {\n        var O = sd(A / h * Ze(D)), w = sd(A / p * Ze(D));\n        (S -= O * 2) > ne ? (O *= v ? 1 : -1, E += O, b -= O) : (S = 0, E = b = (f + g) / 2), (M -= w * 2) > ne ? (w *= v ? 1 : -1, x += w, _ -= w) : (M = 0, x = _ = (f + g) / 2);\n      }\n      var L = p * qn(x), k = p * Ze(x), U = h * qn(b), Z = h * Ze(b);\n      if (R > ne) {\n        var j = p * qn(_), F = p * Ze(_), Y = h * qn(E), ot = h * Ze(E), Q;\n        if (m < ns)\n          if (Q = ak(L, k, Y, ot, j, F, U, Z)) {\n            var q = L - Q[0], tt = k - Q[1], lt = j - Q[0], z = F - Q[1], W = 1 / Ze(zM((q * lt + tt * z) / (Br(q * q + tt * tt) * Br(lt * lt + z * z))) / 2), X = Br(Q[0] * Q[0] + Q[1] * Q[1]);\n            $ = Go(R, (h - X) / (W - 1)), H = Go(R, (p - X) / (W + 1));\n          } else\n            $ = H = 0;\n      }\n      M > ne ? H > ne ? (P = Bs(Y, ot, L, k, p, H, v), B = Bs(j, F, U, Z, p, H, v), o.moveTo(P.cx + P.x01, P.cy + P.y01), H < R ? o.arc(P.cx, P.cy, H, Jt(P.y01, P.x01), Jt(B.y01, B.x01), !v) : (o.arc(P.cx, P.cy, H, Jt(P.y01, P.x01), Jt(P.y11, P.x11), !v), o.arc(0, 0, p, Jt(P.cy + P.y11, P.cx + P.x11), Jt(B.cy + B.y11, B.cx + B.x11), !v), o.arc(B.cx, B.cy, H, Jt(B.y11, B.x11), Jt(B.y01, B.x01), !v))) : (o.moveTo(L, k), o.arc(0, 0, p, x, _, !v)) : o.moveTo(L, k), !(h > ne) || !(S > ne) ? o.lineTo(U, Z) : $ > ne ? (P = Bs(U, Z, j, F, h, -$, v), B = Bs(L, k, Y, ot, h, -$, v), o.lineTo(P.cx + P.x01, P.cy + P.y01), $ < R ? o.arc(P.cx, P.cy, $, Jt(P.y01, P.x01), Jt(B.y01, B.x01), !v) : (o.arc(P.cx, P.cy, $, Jt(P.y01, P.x01), Jt(P.y11, P.x11), !v), o.arc(0, 0, h, Jt(P.cy + P.y11, P.cx + P.x11), Jt(B.cy + B.y11, B.cx + B.x11), v), o.arc(B.cx, B.cy, $, Jt(B.y11, B.x11), Jt(B.y01, B.x01), !v))) : o.arc(0, 0, h, b, E, v);\n    }\n    if (o.closePath(), u) return o = null, u + "" || null;\n  }\n  return c.centroid = function() {\n    var u = (+e.apply(this, arguments) + +t.apply(this, arguments)) / 2, d = (+i.apply(this, arguments) + +s.apply(this, arguments)) / 2 - ns / 2;\n    return [qn(d) * u, Ze(d) * u];\n  }, c.innerRadius = function(u) {\n    return arguments.length ? (e = typeof u == "function" ? u : dt(+u), c) : e;\n  }, c.outerRadius = function(u) {\n    return arguments.length ? (t = typeof u == "function" ? u : dt(+u), c) : t;\n  }, c.cornerRadius = function(u) {\n    return arguments.length ? (n = typeof u == "function" ? u : dt(+u), c) : n;\n  }, c.padRadius = function(u) {\n    return arguments.length ? (r = u == null ? null : typeof u == "function" ? u : dt(+u), c) : r;\n  }, c.startAngle = function(u) {\n    return arguments.length ? (i = typeof u == "function" ? u : dt(+u), c) : i;\n  }, c.endAngle = function(u) {\n    return arguments.length ? (s = typeof u == "function" ? u : dt(+u), c) : s;\n  }, c.padAngle = function(u) {\n    return arguments.length ? (a = typeof u == "function" ? u : dt(+u), c) : a;\n  }, c.context = function(u) {\n    return arguments.length ? (o = u ?? null, c) : o;\n  }, c;\n}\nfunction iu(e) {\n  return e[0];\n}\nfunction su(e) {\n  return e[1];\n}\nfunction xs(e, t) {\n  var n = dt(!0), r = null, i = oo, s = null, a = ho(o);\n  e = typeof e == "function" ? e : e === void 0 ? iu : dt(e), t = typeof t == "function" ? t : t === void 0 ? su : dt(t);\n  function o(l) {\n    var c, u = (l = so(l)).length, d, h = !1, p;\n    for (r == null && (s = i(p = a())), c = 0; c <= u; ++c)\n      !(c < u && n(d = l[c], c, l)) === h && ((h = !h) ? s.lineStart() : s.lineEnd()), h && s.point(+e(d, c, l), +t(d, c, l));\n    if (p) return s = null, p + "" || null;\n  }\n  return o.x = function(l) {\n    return arguments.length ? (e = typeof l == "function" ? l : dt(+l), o) : e;\n  }, o.y = function(l) {\n    return arguments.length ? (t = typeof l == "function" ? l : dt(+l), o) : t;\n  }, o.defined = function(l) {\n    return arguments.length ? (n = typeof l == "function" ? l : dt(!!l), o) : n;\n  }, o.curve = function(l) {\n    return arguments.length ? (i = l, r != null && (s = i(r)), o) : i;\n  }, o.context = function(l) {\n    return arguments.length ? (l == null ? r = s = null : s = i(r = l), o) : r;\n  }, o;\n}\nfunction au(e, t, n) {\n  var r = null, i = dt(!0), s = null, a = oo, o = null, l = ho(c);\n  e = typeof e == "function" ? e : e === void 0 ? iu : dt(+e), t = typeof t == "function" ? t : dt(t === void 0 ? 0 : +t), n = typeof n == "function" ? n : n === void 0 ? su : dt(+n);\n  function c(d) {\n    var h, p, f, g = (d = so(d)).length, m, v = !1, x, _ = new Array(g), E = new Array(g);\n    for (s == null && (o = a(x = l())), h = 0; h <= g; ++h) {\n      if (!(h < g && i(m = d[h], h, d)) === v)\n        if (v = !v)\n          p = h, o.areaStart(), o.lineStart();\n        else {\n          for (o.lineEnd(), o.lineStart(), f = h - 1; f >= p; --f)\n            o.point(_[f], E[f]);\n          o.lineEnd(), o.areaEnd();\n        }\n      v && (_[h] = +e(m, h, d), E[h] = +t(m, h, d), o.point(r ? +r(m, h, d) : _[h], n ? +n(m, h, d) : E[h]));\n    }\n    if (x) return o = null, x + "" || null;\n  }\n  function u() {\n    return xs().defined(i).curve(a).context(s);\n  }\n  return c.x = function(d) {\n    return arguments.length ? (e = typeof d == "function" ? d : dt(+d), r = null, c) : e;\n  }, c.x0 = function(d) {\n    return arguments.length ? (e = typeof d == "function" ? d : dt(+d), c) : e;\n  }, c.x1 = function(d) {\n    return arguments.length ? (r = d == null ? null : typeof d == "function" ? d : dt(+d), c) : r;\n  }, c.y = function(d) {\n    return arguments.length ? (t = typeof d == "function" ? d : dt(+d), n = null, c) : t;\n  }, c.y0 = function(d) {\n    return arguments.length ? (t = typeof d == "function" ? d : dt(+d), c) : t;\n  }, c.y1 = function(d) {\n    return arguments.length ? (n = d == null ? null : typeof d == "function" ? d : dt(+d), c) : n;\n  }, c.lineX0 = c.lineY0 = function() {\n    return u().x(e).y(t);\n  }, c.lineY1 = function() {\n    return u().x(e).y(n);\n  }, c.lineX1 = function() {\n    return u().x(r).y(t);\n  }, c.defined = function(d) {\n    return arguments.length ? (i = typeof d == "function" ? d : dt(!!d), c) : i;\n  }, c.curve = function(d) {\n    return arguments.length ? (a = d, s != null && (o = a(s)), c) : a;\n  }, c.context = function(d) {\n    return arguments.length ? (d == null ? s = o = null : o = a(s = d), c) : s;\n  }, c;\n}\nfunction ok(e, t) {\n  return t < e ? -1 : t > e ? 1 : t >= e ? 0 : NaN;\n}\nfunction lk(e) {\n  return e;\n}\nfunction ck() {\n  var e = lk, t = ok, n = null, r = dt(0), i = dt(Ks), s = dt(0);\n  function a(o) {\n    var l, c = (o = so(o)).length, u, d, h = 0, p = new Array(c), f = new Array(c), g = +r.apply(this, arguments), m = Math.min(Ks, Math.max(-Ks, i.apply(this, arguments) - g)), v, x = Math.min(Math.abs(m) / c, s.apply(this, arguments)), _ = x * (m < 0 ? -1 : 1), E;\n    for (l = 0; l < c; ++l)\n      (E = f[p[l] = l] = +e(o[l], l, o)) > 0 && (h += E);\n    for (t != null ? p.sort(function(b, S) {\n      return t(f[b], f[S]);\n    }) : n != null && p.sort(function(b, S) {\n      return n(o[b], o[S]);\n    }), l = 0, d = h ? (m - c * _) / h : 0; l < c; ++l, g = v)\n      u = p[l], E = f[u], v = g + (E > 0 ? E * d : 0) + _, f[u] = {\n        data: o[u],\n        index: l,\n        value: E,\n        startAngle: g,\n        endAngle: v,\n        padAngle: x\n      };\n    return f;\n  }\n  return a.value = function(o) {\n    return arguments.length ? (e = typeof o == "function" ? o : dt(+o), a) : e;\n  }, a.sortValues = function(o) {\n    return arguments.length ? (t = o, n = null, a) : t;\n  }, a.sort = function(o) {\n    return arguments.length ? (n = o, t = null, a) : n;\n  }, a.startAngle = function(o) {\n    return arguments.length ? (r = typeof o == "function" ? o : dt(+o), a) : r;\n  }, a.endAngle = function(o) {\n    return arguments.length ? (i = typeof o == "function" ? o : dt(+o), a) : i;\n  }, a.padAngle = function(o) {\n    return arguments.length ? (s = typeof o == "function" ? o : dt(+o), a) : s;\n  }, a;\n}\nvar uk = ov(oo);\nfunction av(e) {\n  this._curve = e;\n}\nav.prototype = {\n  areaStart: function() {\n    this._curve.areaStart();\n  },\n  areaEnd: function() {\n    this._curve.areaEnd();\n  },\n  lineStart: function() {\n    this._curve.lineStart();\n  },\n  lineEnd: function() {\n    this._curve.lineEnd();\n  },\n  point: function(e, t) {\n    this._curve.point(t * Math.sin(e), t * -Math.cos(e));\n  }\n};\nfunction ov(e) {\n  function t(n) {\n    return new av(e(n));\n  }\n  return t._curve = e, t;\n}\nfunction hk(e) {\n  var t = e.curve;\n  return e.angle = e.x, delete e.x, e.radius = e.y, delete e.y, e.curve = function(n) {\n    return arguments.length ? t(ov(n)) : t()._curve;\n  }, e;\n}\nfunction dk() {\n  return hk(xs().curve(uk));\n}\nclass pk {\n  constructor(t, n) {\n    this._context = t, this._x = n;\n  }\n  areaStart() {\n    this._line = 0;\n  }\n  areaEnd() {\n    this._line = NaN;\n  }\n  lineStart() {\n    this._point = 0;\n  }\n  lineEnd() {\n    (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;\n  }\n  point(t, n) {\n    switch (t = +t, n = +n, this._point) {\n      case 0: {\n        this._point = 1, this._line ? this._context.lineTo(t, n) : this._context.moveTo(t, n);\n        break;\n      }\n      case 1:\n        this._point = 2;\n      // falls through\n      default: {\n        this._x ? this._context.bezierCurveTo(this._x0 = (this._x0 + t) / 2, this._y0, this._x0, n, t, n) : this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + n) / 2, t, this._y0, t, n);\n        break;\n      }\n    }\n    this._x0 = t, this._y0 = n;\n  }\n}\nfunction fk(e) {\n  return new pk(e, !0);\n}\nfunction mk(e) {\n  return e.source;\n}\nfunction gk(e) {\n  return e.target;\n}\nfunction vk(e) {\n  let t = mk, n = gk, r = iu, i = su, s = null, a = null, o = ho(l);\n  function l() {\n    let c;\n    const u = kw.call(arguments), d = t.apply(this, u), h = n.apply(this, u);\n    if (s == null && (a = e(c = o())), a.lineStart(), u[0] = d, a.point(+r.apply(this, u), +i.apply(this, u)), u[0] = h, a.point(+r.apply(this, u), +i.apply(this, u)), a.lineEnd(), c) return a = null, c + "" || null;\n  }\n  return l.source = function(c) {\n    return arguments.length ? (t = c, l) : t;\n  }, l.target = function(c) {\n    return arguments.length ? (n = c, l) : n;\n  }, l.x = function(c) {\n    return arguments.length ? (r = typeof c == "function" ? c : dt(+c), l) : r;\n  }, l.y = function(c) {\n    return arguments.length ? (i = typeof c == "function" ? c : dt(+c), l) : i;\n  }, l.context = function(c) {\n    return arguments.length ? (c == null ? s = a = null : a = e(s = c), l) : s;\n  }, l;\n}\nfunction yk() {\n  return vk(fk);\n}\nlet mt = class {\n  constructor(t, n, r) {\n    if (this.type = "", this.renderType = rt.HTML, this.id = "", this.parent = void 0, this.configs = {}, this.model = t, this.services = n, r && (this.configs = r, this.configs.id)) {\n      const i = y(this.model.getOptions(), "style", "prefix");\n      this.id = `${i}--${this.configs.id}`;\n    }\n    this.parent || this.setParent(\n      I(\n        this.services.domUtils.getMainContainer()\n      )\n    );\n  }\n  init() {\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    console.error("Error: Component did not provide the required render function.");\n  }\n  destroy() {\n  }\n  // Used to pass down information to the components\n  setModel(t) {\n    this.model = t;\n  }\n  // Used to pass down information to the components\n  setServices(t) {\n    this.services = t;\n  }\n  setParent(t) {\n    var n;\n    const r = this.parent;\n    if (this.parent = t, !(r && r.node() === t.node()) && this.type) {\n      const i = y(this.model.getOptions(), "style", "prefix");\n      (n = this.parent) == null || n.classed(`${ue}--${i}--${this.type}`, !0), r && r.classed(`${ue}--${i}--${this.type}`, !1);\n    }\n  }\n  getParent() {\n    return this.parent;\n  }\n  getComponentContainer(t = { ariaLabel: null, isPresentational: !1, withinChartClip: !1 }) {\n    if (this.type) {\n      const n = y(this.model.getOptions(), "style", "prefix"), r = this.id ? `#${this.id}` : "", i = N.appendOrSelect(\n        this.parent,\n        `${this.renderType === rt.SVG ? "svg" : "div"}${r}.${ue}--${n}--${this.type}`\n      );\n      if (t.ariaLabel && i.attr("aria-label", t.ariaLabel), t.isPresentational && i.attr("role", "presentation"), t.withinChartClip) {\n        const s = this.model.get("chartClipId");\n        if (s) {\n          const a = I(`#${s}`).select("rect");\n          a.size() !== 0 && parseFloat(a.attr("height")) > 0 && i.attr("clip-path", `url(#${s})`);\n        }\n      }\n      return i.attr("width", "100%").attr("height", "100%");\n    }\n    return this.parent;\n  }\n  /**\n   * graphs used in combo charts share a model with global options but can receive their own local options.\n   * this function retrieves the global options and merges it with any options passed into this\n   * component\'s config.options object.\n   */\n  getOptions() {\n    return this.configs.options ? at({}, this.model.getOptions(), this.configs.options) : this.model.getOptions();\n  }\n};\n/*! @license DOMPurify 3.2.6 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.6/LICENSE */\nconst {\n  entries: lv,\n  setPrototypeOf: Zd,\n  isFrozen: xk,\n  getPrototypeOf: bk,\n  getOwnPropertyDescriptor: _k\n} = Object;\nlet {\n  freeze: oe,\n  seal: Re,\n  create: cv\n} = Object, {\n  apply: ic,\n  construct: sc\n} = typeof Reflect < "u" && Reflect;\noe || (oe = function(e) {\n  return e;\n});\nRe || (Re = function(e) {\n  return e;\n});\nic || (ic = function(e, t, n) {\n  return e.apply(t, n);\n});\nsc || (sc = function(e, t) {\n  return new e(...t);\n});\nconst Hs = le(Array.prototype.forEach), Ek = le(Array.prototype.lastIndexOf), Kd = le(Array.prototype.pop), xi = le(Array.prototype.push), Ok = le(Array.prototype.splice), ra = le(String.prototype.toLowerCase), rl = le(String.prototype.toString), Qd = le(String.prototype.match), bi = le(String.prototype.replace), Sk = le(String.prototype.indexOf), Tk = le(String.prototype.trim), Ue = le(Object.prototype.hasOwnProperty), ie = le(RegExp.prototype.test), _i = wk(TypeError);\nfunction le(e) {\n  return function(t) {\n    t instanceof RegExp && (t.lastIndex = 0);\n    for (var n = arguments.length, r = new Array(n > 1 ? n - 1 : 0), i = 1; i < n; i++)\n      r[i - 1] = arguments[i];\n    return ic(e, t, r);\n  };\n}\nfunction wk(e) {\n  return function() {\n    for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++)\n      n[r] = arguments[r];\n    return sc(e, n);\n  };\n}\nfunction pt(e, t) {\n  let n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ra;\n  Zd && Zd(e, null);\n  let r = t.length;\n  for (; r--; ) {\n    let i = t[r];\n    if (typeof i == "string") {\n      const s = n(i);\n      s !== i && (xk(t) || (t[r] = s), i = s);\n    }\n    e[i] = !0;\n  }\n  return e;\n}\nfunction $k(e) {\n  for (let t = 0; t < e.length; t++)\n    Ue(e, t) || (e[t] = null);\n  return e;\n}\nfunction mn(e) {\n  const t = cv(null);\n  for (const [n, r] of lv(e))\n    Ue(e, n) && (Array.isArray(r) ? t[n] = $k(r) : r && typeof r == "object" && r.constructor === Object ? t[n] = mn(r) : t[n] = r);\n  return t;\n}\nfunction Ei(e, t) {\n  for (; e !== null; ) {\n    const r = _k(e, t);\n    if (r) {\n      if (r.get)\n        return le(r.get);\n      if (typeof r.value == "function")\n        return le(r.value);\n    }\n    e = bk(e);\n  }\n  function n() {\n    return null;\n  }\n  return n;\n}\nconst Jd = oe(["a", "abbr", "acronym", "address", "area", "article", "aside", "audio", "b", "bdi", "bdo", "big", "blink", "blockquote", "body", "br", "button", "canvas", "caption", "center", "cite", "code", "col", "colgroup", "content", "data", "datalist", "dd", "decorator", "del", "details", "dfn", "dialog", "dir", "div", "dl", "dt", "element", "em", "fieldset", "figcaption", "figure", "font", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "img", "input", "ins", "kbd", "label", "legend", "li", "main", "map", "mark", "marquee", "menu", "menuitem", "meter", "nav", "nobr", "ol", "optgroup", "option", "output", "p", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "section", "select", "shadow", "small", "source", "spacer", "span", "strike", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "tt", "u", "ul", "var", "video", "wbr"]), il = oe(["svg", "a", "altglyph", "altglyphdef", "altglyphitem", "animatecolor", "animatemotion", "animatetransform", "circle", "clippath", "defs", "desc", "ellipse", "filter", "font", "g", "glyph", "glyphref", "hkern", "image", "line", "lineargradient", "marker", "mask", "metadata", "mpath", "path", "pattern", "polygon", "polyline", "radialgradient", "rect", "stop", "style", "switch", "symbol", "text", "textpath", "title", "tref", "tspan", "view", "vkern"]), sl = oe(["feBlend", "feColorMatrix", "feComponentTransfer", "feComposite", "feConvolveMatrix", "feDiffuseLighting", "feDisplacementMap", "feDistantLight", "feDropShadow", "feFlood", "feFuncA", "feFuncB", "feFuncG", "feFuncR", "feGaussianBlur", "feImage", "feMerge", "feMergeNode", "feMorphology", "feOffset", "fePointLight", "feSpecularLighting", "feSpotLight", "feTile", "feTurbulence"]), Mk = oe(["animate", "color-profile", "cursor", "discard", "font-face", "font-face-format", "font-face-name", "font-face-src", "font-face-uri", "foreignobject", "hatch", "hatchpath", "mesh", "meshgradient", "meshpatch", "meshrow", "missing-glyph", "script", "set", "solidcolor", "unknown", "use"]), al = oe(["math", "menclose", "merror", "mfenced", "mfrac", "mglyph", "mi", "mlabeledtr", "mmultiscripts", "mn", "mo", "mover", "mpadded", "mphantom", "mroot", "mrow", "ms", "mspace", "msqrt", "mstyle", "msub", "msup", "msubsup", "mtable", "mtd", "mtext", "mtr", "munder", "munderover", "mprescripts"]), Ck = oe(["maction", "maligngroup", "malignmark", "mlongdiv", "mscarries", "mscarry", "msgroup", "mstack", "msline", "msrow", "semantics", "annotation", "annotation-xml", "mprescripts", "none"]), tp = oe(["#text"]), ep = oe(["accept", "action", "align", "alt", "autocapitalize", "autocomplete", "autopictureinpicture", "autoplay", "background", "bgcolor", "border", "capture", "cellpadding", "cellspacing", "checked", "cite", "class", "clear", "color", "cols", "colspan", "controls", "controlslist", "coords", "crossorigin", "datetime", "decoding", "default", "dir", "disabled", "disablepictureinpicture", "disableremoteplayback", "download", "draggable", "enctype", "enterkeyhint", "face", "for", "headers", "height", "hidden", "high", "href", "hreflang", "id", "inputmode", "integrity", "ismap", "kind", "label", "lang", "list", "loading", "loop", "low", "max", "maxlength", "media", "method", "min", "minlength", "multiple", "muted", "name", "nonce", "noshade", "novalidate", "nowrap", "open", "optimum", "pattern", "placeholder", "playsinline", "popover", "popovertarget", "popovertargetaction", "poster", "preload", "pubdate", "radiogroup", "readonly", "rel", "required", "rev", "reversed", "role", "rows", "rowspan", "spellcheck", "scope", "selected", "shape", "size", "sizes", "span", "srclang", "start", "src", "srcset", "step", "style", "summary", "tabindex", "title", "translate", "type", "usemap", "valign", "value", "width", "wrap", "xmlns", "slot"]), ol = oe(["accent-height", "accumulate", "additive", "alignment-baseline", "amplitude", "ascent", "attributename", "attributetype", "azimuth", "basefrequency", "baseline-shift", "begin", "bias", "by", "class", "clip", "clippathunits", "clip-path", "clip-rule", "color", "color-interpolation", "color-interpolation-filters", "color-profile", "color-rendering", "cx", "cy", "d", "dx", "dy", "diffuseconstant", "direction", "display", "divisor", "dur", "edgemode", "elevation", "end", "exponent", "fill", "fill-opacity", "fill-rule", "filter", "filterunits", "flood-color", "flood-opacity", "font-family", "font-size", "font-size-adjust", "font-stretch", "font-style", "font-variant", "font-weight", "fx", "fy", "g1", "g2", "glyph-name", "glyphref", "gradientunits", "gradienttransform", "height", "href", "id", "image-rendering", "in", "in2", "intercept", "k", "k1", "k2", "k3", "k4", "kerning", "keypoints", "keysplines", "keytimes", "lang", "lengthadjust", "letter-spacing", "kernelmatrix", "kernelunitlength", "lighting-color", "local", "marker-end", "marker-mid", "marker-start", "markerheight", "markerunits", "markerwidth", "maskcontentunits", "maskunits", "max", "mask", "media", "method", "mode", "min", "name", "numoctaves", "offset", "operator", "opacity", "order", "orient", "orientation", "origin", "overflow", "paint-order", "path", "pathlength", "patterncontentunits", "patterntransform", "patternunits", "points", "preservealpha", "preserveaspectratio", "primitiveunits", "r", "rx", "ry", "radius", "refx", "refy", "repeatcount", "repeatdur", "restart", "result", "rotate", "scale", "seed", "shape-rendering", "slope", "specularconstant", "specularexponent", "spreadmethod", "startoffset", "stddeviation", "stitchtiles", "stop-color", "stop-opacity", "stroke-dasharray", "stroke-dashoffset", "stroke-linecap", "stroke-linejoin", "stroke-miterlimit", "stroke-opacity", "stroke", "stroke-width", "style", "surfacescale", "systemlanguage", "tabindex", "tablevalues", "targetx", "targety", "transform", "transform-origin", "text-anchor", "text-decoration", "text-rendering", "textlength", "type", "u1", "u2", "unicode", "values", "viewbox", "visibility", "version", "vert-adv-y", "vert-origin-x", "vert-origin-y", "width", "word-spacing", "wrap", "writing-mode", "xchannelselector", "ychannelselector", "x", "x1", "x2", "xmlns", "y", "y1", "y2", "z", "zoomandpan"]), np = oe(["accent", "accentunder", "align", "bevelled", "close", "columnsalign", "columnlines", "columnspan", "denomalign", "depth", "dir", "display", "displaystyle", "encoding", "fence", "frame", "height", "href", "id", "largeop", "length", "linethickness", "lspace", "lquote", "mathbackground", "mathcolor", "mathsize", "mathvariant", "maxsize", "minsize", "movablelimits", "notation", "numalign", "open", "rowalign", "rowlines", "rowspacing", "rowspan", "rspace", "rquote", "scriptlevel", "scriptminsize", "scriptsizemultiplier", "selection", "separator", "separators", "stretchy", "subscriptshift", "supscriptshift", "symmetric", "voffset", "width", "xmlns"]), Vs = oe(["xlink:href", "xml:id", "xlink:title", "xml:space", "xmlns:xlink"]), Ak = Re(/\\{\\{[\\w\\W]*|[\\w\\W]*\\}\\}/gm), Lk = Re(/<%[\\w\\W]*|[\\w\\W]*%>/gm), kk = Re(/\\$\\{[\\w\\W]*/gm), Dk = Re(/^data-[\\-\\w.\\u00B7-\\uFFFF]+$/), Rk = Re(/^aria-[\\-\\w]+$/), uv = Re(\n  /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp|matrix):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i\n  // eslint-disable-line no-useless-escape\n), Ik = Re(/^(?:\\w+script|data):/i), Nk = Re(\n  /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205F\\u3000]/g\n  // eslint-disable-line no-control-regex\n), hv = Re(/^html$/i), Pk = Re(/^[a-z][.\\w]*(-[.\\w]+)+$/i);\nvar rp = /* @__PURE__ */ Object.freeze({\n  __proto__: null,\n  ARIA_ATTR: Rk,\n  ATTR_WHITESPACE: Nk,\n  CUSTOM_ELEMENT: Pk,\n  DATA_ATTR: Dk,\n  DOCTYPE_NAME: hv,\n  ERB_EXPR: Lk,\n  IS_ALLOWED_URI: uv,\n  IS_SCRIPT_OR_DATA: Ik,\n  MUSTACHE_EXPR: Ak,\n  TMPLIT_EXPR: kk\n});\nconst Oi = {\n  element: 1,\n  text: 3,\n  // Deprecated\n  progressingInstruction: 7,\n  comment: 8,\n  document: 9\n}, Uk = function() {\n  return typeof window > "u" ? null : window;\n}, Bk = function(e, t) {\n  if (typeof e != "object" || typeof e.createPolicy != "function")\n    return null;\n  let n = null;\n  const r = "data-tt-policy-suffix";\n  t && t.hasAttribute(r) && (n = t.getAttribute(r));\n  const i = "dompurify" + (n ? "#" + n : "");\n  try {\n    return e.createPolicy(i, {\n      createHTML(s) {\n        return s;\n      },\n      createScriptURL(s) {\n        return s;\n      }\n    });\n  } catch {\n    return console.warn("TrustedTypes policy " + i + " could not be created."), null;\n  }\n}, ip = function() {\n  return {\n    afterSanitizeAttributes: [],\n    afterSanitizeElements: [],\n    afterSanitizeShadowDOM: [],\n    beforeSanitizeAttributes: [],\n    beforeSanitizeElements: [],\n    beforeSanitizeShadowDOM: [],\n    uponSanitizeAttribute: [],\n    uponSanitizeElement: [],\n    uponSanitizeShadowNode: []\n  };\n};\nfunction dv() {\n  let e = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : Uk();\n  const t = (C) => dv(C);\n  if (t.version = "3.2.6", t.removed = [], !e || !e.document || e.document.nodeType !== Oi.document || !e.Element)\n    return t.isSupported = !1, t;\n  let {\n    document: n\n  } = e;\n  const r = n, i = r.currentScript, {\n    DocumentFragment: s,\n    HTMLTemplateElement: a,\n    Node: o,\n    Element: l,\n    NodeFilter: c,\n    NamedNodeMap: u = e.NamedNodeMap || e.MozNamedAttrMap,\n    HTMLFormElement: d,\n    DOMParser: h,\n    trustedTypes: p\n  } = e, f = l.prototype, g = Ei(f, "cloneNode"), m = Ei(f, "remove"), v = Ei(f, "nextSibling"), x = Ei(f, "childNodes"), _ = Ei(f, "parentNode");\n  if (typeof a == "function") {\n    const C = n.createElement("template");\n    C.content && C.content.ownerDocument && (n = C.content.ownerDocument);\n  }\n  let E, b = "";\n  const {\n    implementation: S,\n    createNodeIterator: M,\n    createDocumentFragment: D,\n    getElementsByTagName: A\n  } = n, {\n    importNode: R\n  } = r;\n  let $ = ip();\n  t.isSupported = typeof lv == "function" && typeof _ == "function" && S && S.createHTMLDocument !== void 0;\n  const {\n    MUSTACHE_EXPR: H,\n    ERB_EXPR: P,\n    TMPLIT_EXPR: B,\n    DATA_ATTR: O,\n    ARIA_ATTR: w,\n    IS_SCRIPT_OR_DATA: L,\n    ATTR_WHITESPACE: k,\n    CUSTOM_ELEMENT: U\n  } = rp;\n  let {\n    IS_ALLOWED_URI: Z\n  } = rp, j = null;\n  const F = pt({}, [...Jd, ...il, ...sl, ...al, ...tp]);\n  let Y = null;\n  const ot = pt({}, [...ep, ...ol, ...np, ...Vs]);\n  let Q = Object.seal(cv(null, {\n    tagNameCheck: {\n      writable: !0,\n      configurable: !1,\n      enumerable: !0,\n      value: null\n    },\n    attributeNameCheck: {\n      writable: !0,\n      configurable: !1,\n      enumerable: !0,\n      value: null\n    },\n    allowCustomizedBuiltInElements: {\n      writable: !0,\n      configurable: !1,\n      enumerable: !0,\n      value: !1\n    }\n  })), q = null, tt = null, lt = !0, z = !0, W = !1, X = !0, V = !1, ut = !0, st = !1, Dt = !1, Nt = !1, nt = !1, yt = !1, Se = !1, ge = !0, oi = !1;\n  const li = "user-content-";\n  let Fn = !0, Ie = !1, yr = {}, xr = null;\n  const xu = pt({}, ["annotation-xml", "audio", "colgroup", "desc", "foreignobject", "head", "iframe", "math", "mi", "mn", "mo", "ms", "mtext", "noembed", "noframes", "noscript", "plaintext", "script", "style", "svg", "template", "thead", "title", "video", "xmp"]);\n  let bu = null;\n  const _u = pt({}, ["audio", "video", "img", "source", "image", "track"]);\n  let yo = null;\n  const Eu = pt({}, ["alt", "class", "for", "id", "label", "name", "pattern", "placeholder", "role", "summary", "title", "value", "style", "xmlns"]), _s = "http://www.w3.org/1998/Math/MathML", Es = "http://www.w3.org/2000/svg", on = "http://www.w3.org/1999/xhtml";\n  let br = on, xo = !1, bo = null;\n  const n0 = pt({}, [_s, Es, on], rl);\n  let Os = pt({}, ["mi", "mo", "mn", "ms", "mtext"]), Ss = pt({}, ["annotation-xml"]);\n  const r0 = pt({}, ["title", "style", "font", "a", "script"]);\n  let ci = null;\n  const i0 = ["application/xhtml+xml", "text/html"], s0 = "text/html";\n  let qt = null, _r = null;\n  const a0 = n.createElement("form"), Ou = function(C) {\n    return C instanceof RegExp || C instanceof Function;\n  }, _o = function() {\n    let C = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    if (!(_r && _r === C)) {\n      if ((!C || typeof C != "object") && (C = {}), C = mn(C), ci = // eslint-disable-next-line unicorn/prefer-includes\n      i0.indexOf(C.PARSER_MEDIA_TYPE) === -1 ? s0 : C.PARSER_MEDIA_TYPE, qt = ci === "application/xhtml+xml" ? rl : ra, j = Ue(C, "ALLOWED_TAGS") ? pt({}, C.ALLOWED_TAGS, qt) : F, Y = Ue(C, "ALLOWED_ATTR") ? pt({}, C.ALLOWED_ATTR, qt) : ot, bo = Ue(C, "ALLOWED_NAMESPACES") ? pt({}, C.ALLOWED_NAMESPACES, rl) : n0, yo = Ue(C, "ADD_URI_SAFE_ATTR") ? pt(mn(Eu), C.ADD_URI_SAFE_ATTR, qt) : Eu, bu = Ue(C, "ADD_DATA_URI_TAGS") ? pt(mn(_u), C.ADD_DATA_URI_TAGS, qt) : _u, xr = Ue(C, "FORBID_CONTENTS") ? pt({}, C.FORBID_CONTENTS, qt) : xu, q = Ue(C, "FORBID_TAGS") ? pt({}, C.FORBID_TAGS, qt) : mn({}), tt = Ue(C, "FORBID_ATTR") ? pt({}, C.FORBID_ATTR, qt) : mn({}), yr = Ue(C, "USE_PROFILES") ? C.USE_PROFILES : !1, lt = C.ALLOW_ARIA_ATTR !== !1, z = C.ALLOW_DATA_ATTR !== !1, W = C.ALLOW_UNKNOWN_PROTOCOLS || !1, X = C.ALLOW_SELF_CLOSE_IN_ATTR !== !1, V = C.SAFE_FOR_TEMPLATES || !1, ut = C.SAFE_FOR_XML !== !1, st = C.WHOLE_DOCUMENT || !1, nt = C.RETURN_DOM || !1, yt = C.RETURN_DOM_FRAGMENT || !1, Se = C.RETURN_TRUSTED_TYPE || !1, Nt = C.FORCE_BODY || !1, ge = C.SANITIZE_DOM !== !1, oi = C.SANITIZE_NAMED_PROPS || !1, Fn = C.KEEP_CONTENT !== !1, Ie = C.IN_PLACE || !1, Z = C.ALLOWED_URI_REGEXP || uv, br = C.NAMESPACE || on, Os = C.MATHML_TEXT_INTEGRATION_POINTS || Os, Ss = C.HTML_INTEGRATION_POINTS || Ss, Q = C.CUSTOM_ELEMENT_HANDLING || {}, C.CUSTOM_ELEMENT_HANDLING && Ou(C.CUSTOM_ELEMENT_HANDLING.tagNameCheck) && (Q.tagNameCheck = C.CUSTOM_ELEMENT_HANDLING.tagNameCheck), C.CUSTOM_ELEMENT_HANDLING && Ou(C.CUSTOM_ELEMENT_HANDLING.attributeNameCheck) && (Q.attributeNameCheck = C.CUSTOM_ELEMENT_HANDLING.attributeNameCheck), C.CUSTOM_ELEMENT_HANDLING && typeof C.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements == "boolean" && (Q.allowCustomizedBuiltInElements = C.CUSTOM_ELEMENT_HANDLING.allowCustomizedBuiltInElements), V && (z = !1), yt && (nt = !0), yr && (j = pt({}, tp), Y = [], yr.html === !0 && (pt(j, Jd), pt(Y, ep)), yr.svg === !0 && (pt(j, il), pt(Y, ol), pt(Y, Vs)), yr.svgFilters === !0 && (pt(j, sl), pt(Y, ol), pt(Y, Vs)), yr.mathMl === !0 && (pt(j, al), pt(Y, np), pt(Y, Vs))), C.ADD_TAGS && (j === F && (j = mn(j)), pt(j, C.ADD_TAGS, qt)), C.ADD_ATTR && (Y === ot && (Y = mn(Y)), pt(Y, C.ADD_ATTR, qt)), C.ADD_URI_SAFE_ATTR && pt(yo, C.ADD_URI_SAFE_ATTR, qt), C.FORBID_CONTENTS && (xr === xu && (xr = mn(xr)), pt(xr, C.FORBID_CONTENTS, qt)), Fn && (j["#text"] = !0), st && pt(j, ["html", "head", "body"]), j.table && (pt(j, ["tbody"]), delete q.tbody), C.TRUSTED_TYPES_POLICY) {\n        if (typeof C.TRUSTED_TYPES_POLICY.createHTML != "function")\n          throw _i(\'TRUSTED_TYPES_POLICY configuration option must provide a "createHTML" hook.\');\n        if (typeof C.TRUSTED_TYPES_POLICY.createScriptURL != "function")\n          throw _i(\'TRUSTED_TYPES_POLICY configuration option must provide a "createScriptURL" hook.\');\n        E = C.TRUSTED_TYPES_POLICY, b = E.createHTML("");\n      } else\n        E === void 0 && (E = Bk(p, i)), E !== null && typeof b == "string" && (b = E.createHTML(""));\n      oe && oe(C), _r = C;\n    }\n  }, Su = pt({}, [...il, ...sl, ...Mk]), Tu = pt({}, [...al, ...Ck]), o0 = function(C) {\n    let J = _(C);\n    (!J || !J.tagName) && (J = {\n      namespaceURI: br,\n      tagName: "template"\n    });\n    const K = ra(C.tagName), bt = ra(J.tagName);\n    return bo[C.namespaceURI] ? C.namespaceURI === Es ? J.namespaceURI === on ? K === "svg" : J.namespaceURI === _s ? K === "svg" && (bt === "annotation-xml" || Os[bt]) : !!Su[K] : C.namespaceURI === _s ? J.namespaceURI === on ? K === "math" : J.namespaceURI === Es ? K === "math" && Ss[bt] : !!Tu[K] : C.namespaceURI === on ? J.namespaceURI === Es && !Ss[bt] || J.namespaceURI === _s && !Os[bt] ? !1 : !Tu[K] && (r0[K] || !Su[K]) : !!(ci === "application/xhtml+xml" && bo[C.namespaceURI]) : !1;\n  }, jn = function(C) {\n    xi(t.removed, {\n      element: C\n    });\n    try {\n      _(C).removeChild(C);\n    } catch {\n      m(C);\n    }\n  }, Er = function(C, J) {\n    try {\n      xi(t.removed, {\n        attribute: J.getAttributeNode(C),\n        from: J\n      });\n    } catch {\n      xi(t.removed, {\n        attribute: null,\n        from: J\n      });\n    }\n    if (J.removeAttribute(C), C === "is")\n      if (nt || yt)\n        try {\n          jn(J);\n        } catch {\n        }\n      else\n        try {\n          J.setAttribute(C, "");\n        } catch {\n        }\n  }, wu = function(C) {\n    let J = null, K = null;\n    if (Nt)\n      C = "<remove></remove>" + C;\n    else {\n      const Pt = Qd(C, /^[\\r\\n\\t ]+/);\n      K = Pt && Pt[0];\n    }\n    ci === "application/xhtml+xml" && br === on && (C = \'<html xmlns="http://www.w3.org/1999/xhtml"><head></head><body>\' + C + "</body></html>");\n    const bt = E ? E.createHTML(C) : C;\n    if (br === on)\n      try {\n        J = new h().parseFromString(bt, ci);\n      } catch {\n      }\n    if (!J || !J.documentElement) {\n      J = S.createDocument(br, "template", null);\n      try {\n        J.documentElement.innerHTML = xo ? b : bt;\n      } catch {\n      }\n    }\n    const Xt = J.body || J.documentElement;\n    return C && K && Xt.insertBefore(n.createTextNode(K), Xt.childNodes[0] || null), br === on ? A.call(J, st ? "html" : "body")[0] : st ? J.documentElement : Xt;\n  }, $u = function(C) {\n    return M.call(\n      C.ownerDocument || C,\n      C,\n      // eslint-disable-next-line no-bitwise\n      c.SHOW_ELEMENT | c.SHOW_COMMENT | c.SHOW_TEXT | c.SHOW_PROCESSING_INSTRUCTION | c.SHOW_CDATA_SECTION,\n      null\n    );\n  }, Eo = function(C) {\n    return C instanceof d && (typeof C.nodeName != "string" || typeof C.textContent != "string" || typeof C.removeChild != "function" || !(C.attributes instanceof u) || typeof C.removeAttribute != "function" || typeof C.setAttribute != "function" || typeof C.namespaceURI != "string" || typeof C.insertBefore != "function" || typeof C.hasChildNodes != "function");\n  }, Mu = function(C) {\n    return typeof o == "function" && C instanceof o;\n  };\n  function ln(C, J, K) {\n    Hs(C, (bt) => {\n      bt.call(t, J, K, _r);\n    });\n  }\n  const Cu = function(C) {\n    let J = null;\n    if (ln($.beforeSanitizeElements, C, null), Eo(C))\n      return jn(C), !0;\n    const K = qt(C.nodeName);\n    if (ln($.uponSanitizeElement, C, {\n      tagName: K,\n      allowedTags: j\n    }), ut && C.hasChildNodes() && !Mu(C.firstElementChild) && ie(/<[/\\w!]/g, C.innerHTML) && ie(/<[/\\w!]/g, C.textContent) || C.nodeType === Oi.progressingInstruction || ut && C.nodeType === Oi.comment && ie(/<[/\\w]/g, C.data))\n      return jn(C), !0;\n    if (!j[K] || q[K]) {\n      if (!q[K] && Lu(K) && (Q.tagNameCheck instanceof RegExp && ie(Q.tagNameCheck, K) || Q.tagNameCheck instanceof Function && Q.tagNameCheck(K)))\n        return !1;\n      if (Fn && !xr[K]) {\n        const bt = _(C) || C.parentNode, Xt = x(C) || C.childNodes;\n        if (Xt && bt) {\n          const Pt = Xt.length;\n          for (let cn = Pt - 1; cn >= 0; --cn) {\n            const Ne = g(Xt[cn], !0);\n            Ne.__removalCount = (C.__removalCount || 0) + 1, bt.insertBefore(Ne, v(C));\n          }\n        }\n      }\n      return jn(C), !0;\n    }\n    return C instanceof l && !o0(C) || (K === "noscript" || K === "noembed" || K === "noframes") && ie(/<\\/no(script|embed|frames)/i, C.innerHTML) ? (jn(C), !0) : (V && C.nodeType === Oi.text && (J = C.textContent, Hs([H, P, B], (bt) => {\n      J = bi(J, bt, " ");\n    }), C.textContent !== J && (xi(t.removed, {\n      element: C.cloneNode()\n    }), C.textContent = J)), ln($.afterSanitizeElements, C, null), !1);\n  }, Au = function(C, J, K) {\n    if (ge && (J === "id" || J === "name") && (K in n || K in a0))\n      return !1;\n    if (!(z && !tt[J] && ie(O, J)) && !(lt && ie(w, J))) {\n      if (!Y[J] || tt[J]) {\n        if (\n          // First condition does a very basic check if a) it\'s basically a valid custom element tagname AND\n          // b) if the tagName passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n          // and c) if the attribute name passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.attributeNameCheck\n          !(Lu(C) && (Q.tagNameCheck instanceof RegExp && ie(Q.tagNameCheck, C) || Q.tagNameCheck instanceof Function && Q.tagNameCheck(C)) && (Q.attributeNameCheck instanceof RegExp && ie(Q.attributeNameCheck, J) || Q.attributeNameCheck instanceof Function && Q.attributeNameCheck(J)) || // Alternative, second condition checks if it\'s an `is`-attribute, AND\n          // the value passes whatever the user has configured for CUSTOM_ELEMENT_HANDLING.tagNameCheck\n          J === "is" && Q.allowCustomizedBuiltInElements && (Q.tagNameCheck instanceof RegExp && ie(Q.tagNameCheck, K) || Q.tagNameCheck instanceof Function && Q.tagNameCheck(K)))\n        ) return !1;\n      } else if (!yo[J] && !ie(Z, bi(K, k, "")) && !((J === "src" || J === "xlink:href" || J === "href") && C !== "script" && Sk(K, "data:") === 0 && bu[C]) && !(W && !ie(L, bi(K, k, ""))) && K)\n        return !1;\n    }\n    return !0;\n  }, Lu = function(C) {\n    return C !== "annotation-xml" && Qd(C, U);\n  }, ku = function(C) {\n    ln($.beforeSanitizeAttributes, C, null);\n    const {\n      attributes: J\n    } = C;\n    if (!J || Eo(C))\n      return;\n    const K = {\n      attrName: "",\n      attrValue: "",\n      keepAttr: !0,\n      allowedAttributes: Y,\n      forceKeepAttr: void 0\n    };\n    let bt = J.length;\n    for (; bt--; ) {\n      const Xt = J[bt], {\n        name: Pt,\n        namespaceURI: cn,\n        value: Ne\n      } = Xt, Xe = qt(Pt), Oo = Ne;\n      let Qt = Pt === "value" ? Oo : Tk(Oo);\n      if (K.attrName = Xe, K.attrValue = Qt, K.keepAttr = !0, K.forceKeepAttr = void 0, ln($.uponSanitizeAttribute, C, K), Qt = K.attrValue, oi && (Xe === "id" || Xe === "name") && (Er(Pt, C), Qt = li + Qt), ut && ie(/((--!?|])>)|<\\/(style|title)/i, Qt)) {\n        Er(Pt, C);\n        continue;\n      }\n      if (K.forceKeepAttr)\n        continue;\n      if (!K.keepAttr) {\n        Er(Pt, C);\n        continue;\n      }\n      if (!X && ie(/\\/>/i, Qt)) {\n        Er(Pt, C);\n        continue;\n      }\n      V && Hs([H, P, B], (c0) => {\n        Qt = bi(Qt, c0, " ");\n      });\n      const Du = qt(C.nodeName);\n      if (!Au(Du, Xe, Qt)) {\n        Er(Pt, C);\n        continue;\n      }\n      if (E && typeof p == "object" && typeof p.getAttributeType == "function" && !cn)\n        switch (p.getAttributeType(Du, Xe)) {\n          case "TrustedHTML": {\n            Qt = E.createHTML(Qt);\n            break;\n          }\n          case "TrustedScriptURL": {\n            Qt = E.createScriptURL(Qt);\n            break;\n          }\n        }\n      if (Qt !== Oo)\n        try {\n          cn ? C.setAttributeNS(cn, Pt, Qt) : C.setAttribute(Pt, Qt), Eo(C) ? jn(C) : Kd(t.removed);\n        } catch {\n          Er(Pt, C);\n        }\n    }\n    ln($.afterSanitizeAttributes, C, null);\n  }, l0 = function C(J) {\n    let K = null;\n    const bt = $u(J);\n    for (ln($.beforeSanitizeShadowDOM, J, null); K = bt.nextNode(); )\n      ln($.uponSanitizeShadowNode, K, null), Cu(K), ku(K), K.content instanceof s && C(K.content);\n    ln($.afterSanitizeShadowDOM, J, null);\n  };\n  return t.sanitize = function(C) {\n    let J = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, K = null, bt = null, Xt = null, Pt = null;\n    if (xo = !C, xo && (C = "\x3c!--\x3e"), typeof C != "string" && !Mu(C))\n      if (typeof C.toString == "function") {\n        if (C = C.toString(), typeof C != "string")\n          throw _i("dirty is not a string, aborting");\n      } else\n        throw _i("toString is not a function");\n    if (!t.isSupported)\n      return C;\n    if (Dt || _o(J), t.removed = [], typeof C == "string" && (Ie = !1), Ie) {\n      if (C.nodeName) {\n        const Xe = qt(C.nodeName);\n        if (!j[Xe] || q[Xe])\n          throw _i("root node is forbidden and cannot be sanitized in-place");\n      }\n    } else if (C instanceof o)\n      K = wu("\x3c!----\x3e"), bt = K.ownerDocument.importNode(C, !0), bt.nodeType === Oi.element && bt.nodeName === "BODY" || bt.nodeName === "HTML" ? K = bt : K.appendChild(bt);\n    else {\n      if (!nt && !V && !st && // eslint-disable-next-line unicorn/prefer-includes\n      C.indexOf("<") === -1)\n        return E && Se ? E.createHTML(C) : C;\n      if (K = wu(C), !K)\n        return nt ? null : Se ? b : "";\n    }\n    K && Nt && jn(K.firstChild);\n    const cn = $u(Ie ? C : K);\n    for (; Xt = cn.nextNode(); )\n      Cu(Xt), ku(Xt), Xt.content instanceof s && l0(Xt.content);\n    if (Ie)\n      return C;\n    if (nt) {\n      if (yt)\n        for (Pt = D.call(K.ownerDocument); K.firstChild; )\n          Pt.appendChild(K.firstChild);\n      else\n        Pt = K;\n      return (Y.shadowroot || Y.shadowrootmode) && (Pt = R.call(r, Pt, !0)), Pt;\n    }\n    let Ne = st ? K.outerHTML : K.innerHTML;\n    return st && j["!doctype"] && K.ownerDocument && K.ownerDocument.doctype && K.ownerDocument.doctype.name && ie(hv, K.ownerDocument.doctype.name) && (Ne = "<!DOCTYPE " + K.ownerDocument.doctype.name + `>\n` + Ne), V && Hs([H, P, B], (Xe) => {\n      Ne = bi(Ne, Xe, " ");\n    }), E && Se ? E.createHTML(Ne) : Ne;\n  }, t.setConfig = function() {\n    let C = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _o(C), Dt = !0;\n  }, t.clearConfig = function() {\n    _r = null, Dt = !1;\n  }, t.isValidAttribute = function(C, J, K) {\n    _r || _o({});\n    const bt = qt(C), Xt = qt(J);\n    return Au(bt, Xt, K);\n  }, t.addHook = function(C, J) {\n    typeof J == "function" && xi($[C], J);\n  }, t.removeHook = function(C, J) {\n    if (J !== void 0) {\n      const K = Ek($[C], J);\n      return K === -1 ? void 0 : Ok($[C], K, 1)[0];\n    }\n    return Kd($[C]);\n  }, t.removeHooks = function(C) {\n    $[C] = [];\n  }, t.removeAllHooks = function() {\n    $ = ip();\n  }, t;\n}\nvar ou = dv();\nconst Gs = (e) => ou.sanitize(e, {\n  USE_PROFILES: {\n    html: !0,\n    svg: !0,\n    svgFilters: !0\n  }\n}), Hk = (e) => ou.sanitize(e, {\n  NAMESPACE: "http://www.w3.org/2000/svg",\n  USE_PROFILES: {\n    html: !0,\n    svg: !0,\n    svgFilters: !0\n  }\n}), en = (e) => ou.sanitize(e, { ALLOWED_TAGS: [] }), pv = class fv extends mt {\n  constructor() {\n    super(...arguments), this.type = "toolbar", this.renderType = rt.HTML;\n  }\n  init() {\n    const t = () => this.updateOverflowMenu(!1);\n    this.services.events.addEventListener(T.Toolbar.SHOW_OVERFLOW_MENU, () => {\n      this.renderOverflowMenu(), document.body.addEventListener("click", t);\n    }), this.services.events.addEventListener(T.Toolbar.HIDE_OVERFLOW_MENU, () => {\n      document.body.removeEventListener("click", t);\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = this.getComponentContainer({\n      ariaLabel: "toolbar"\n    }).attr("role", "group");\n    if (y(this.getOptions(), "data", "loading"))\n      n.html(""), this.overflowMenu = null;\n    else {\n      this.overflowMenu || (this.overflowMenu = n.append("div").attr(\n        "class",\n        "cds--overflow-menu-options cds--overflow-menu--flip cds--overflow-menu-options cds--overflow-menu--flip"\n      ).attr("tabindex", -1).html("<ul role=\'menu\'></ul>"));\n      const { buttonList: r, overflowMenuItemList: i } = this.getControlConfigs();\n      i && r.push(this.getOverflowButtonConfig());\n      const s = n.selectAll("div.toolbar-control").data(r, (l) => l.id);\n      s.exit().remove();\n      const a = s.enter().append("div").attr("class", "toolbar-control cds--overflow-menu cds--overflow-menu"), o = this;\n      a.merge(s).classed("disabled", (l) => l.shouldBeDisabled()).attr("role", "button").attr("aria-disabled", (l) => l.shouldBeDisabled()).attr("aria-label", (l) => l.title).html((l) => `\n\t\t\t<button\n\t\t\t\tclass="cds--overflow-menu__trigger cds--overflow-menu__trigger"\n\t\t\t\taria-haspopup="true" aria-expanded="false" id="${this.services.domUtils.generateElementIDString(\n        `control-${en(l.id)}`\n      )}" aria-label="${en(l.title)}">\n\t\t\t\t<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" class="cds--overflow-menu__icon cds--overflow-menu__icon" viewBox="0 0 32 32" aria-hidden="true">\n\t\t\t\t\t${Hk(l.iconSVG.content)}\n\t\t\t\t</svg>\n\t\t\t</button>`).each(function(l, c) {\n        I(this).select("svg").style("pointer-events", "none").style("will-change", "transform").style("width", l.iconSVG.width !== void 0 ? l.iconSVG.width : "20px").style("height", l.iconSVG.height !== void 0 ? l.iconSVG.height : "20px"), I(this).select("button").on("mouseover focus", function(u) {\n          const d = I(this);\n          d.classed("hovered", !0), o.services.events.dispatchEvent(T.Toolbar.SHOW_TOOLTIP, {\n            event: u,\n            hoveredElement: d,\n            content: l.title,\n            noWrap: !0,\n            placements: ["top", "bottom"]\n          });\n        }).on("mouseout blur", function() {\n          o.services.events.dispatchEvent(T.Toolbar.HIDE_TOOLTIP);\n        }).on("click", (u) => {\n          l.shouldBeDisabled() || o.triggerFunctionAndEvent(l, u, this);\n        }).on("keydown", (u) => {\n          u.key && u.key === "Enter" || u.key === " " ? (u.preventDefault(), o.triggerFunctionAndEvent(l, u, this)) : u.key && u.key === "ArrowLeft" ? o.focusOnPreviousEnabledToolbarItem(c) : u.key && u.key === "ArrowRight" && o.focusOnNextEnabledToolbarItem(c);\n        });\n      }), this.overflowButton = this.getComponentContainer().select(\n        `button.cds--overflow-menu__trigger#${this.services.domUtils.generateElementIDString(\n          "control-toolbar-overflow-menu"\n        )}`\n      );\n    }\n  }\n  renderOverflowMenu() {\n    const { overflowMenuItemList: t } = this.getControlConfigs(), n = this.overflowMenu.select("ul").selectAll("li.cds--overflow-menu-options__option").data(t, (i) => y(i, "id"));\n    n.exit().remove();\n    const r = n.enter().append("li").attr("id", (i) => this.services.domUtils.generateElementIDString(`control-${i.id}`)).attr("class", "cds--overflow-menu-options__option cds--overflow-menu-options__option").attr("role", "menuitem").attr("tabindex", 1);\n    r.append("button").attr("class", "cds--overflow-menu-options__btn cds--overflow-menu-options__btn"), r.merge(n).classed("cds--overflow-menu-options__option--disabled", (i) => i.shouldBeDisabled()).classed("cds--overflow-menu-options__option--disabled", (i) => i.shouldBeDisabled()).attr("aria-disabled", (i) => i.shouldBeDisabled()).selectAll("button").text((i) => i.title);\n  }\n  isOverflowMenuOpen() {\n    return this.overflowMenu.classed("is-open");\n  }\n  // show/hide overflow menu\n  updateOverflowMenu(t) {\n    this.overflowMenu && (this.overflowMenu.classed("is-open", t), this.overflowButton && (this.overflowButton.attr("aria-expanded", t), I(this.overflowButton.node().parentNode).classed("cds--overflow-menu--open", t).classed("cds--overflow-menu--open", t)), t ? this.services.events.dispatchEvent(T.Toolbar.SHOW_OVERFLOW_MENU) : this.services.events.dispatchEvent(T.Toolbar.HIDE_OVERFLOW_MENU));\n  }\n  // Toolbar controllers\n  focusOnPreviousEnabledToolbarItem(t) {\n    const n = this.getToolbarButtonItems();\n    let r = n.length;\n    for (let i = t - 1; i >= 0; i--)\n      if (!n[i].shouldBeDisabled()) {\n        r = i;\n        break;\n      }\n    if (r < n.length) {\n      const i = I(\n        `button#${this.services.domUtils.generateElementIDString(\n          `control-${n[r].id}`\n        )}`\n      ).node();\n      "focus" in i && i.focus();\n    }\n  }\n  focusOnNextEnabledToolbarItem(t) {\n    const n = this.getToolbarButtonItems();\n    let r = -1;\n    for (let i = t + 1; i < n.length; i++)\n      if (!n[i].shouldBeDisabled()) {\n        r = i;\n        break;\n      }\n    if (r > -1) {\n      const i = I(\n        `button#${this.services.domUtils.generateElementIDString(\n          `control-${n[r].id}`\n        )}`\n      ).node();\n      "focus" in i && i.focus();\n    }\n  }\n  focusOnPreviousEnabledMenuItem(t) {\n    const n = this.getOverflowMenuItems();\n    let r = n.length;\n    for (let i = t - 1; i >= 0; i--)\n      if (!n[i].shouldBeDisabled()) {\n        r = i;\n        break;\n      }\n    if (r < n.length) {\n      const i = I(\n        `#${this.services.domUtils.generateElementIDString(\n          `control-${n[r].id}`\n        )} button`\n      ).node();\n      "focus" in i && i.focus();\n    }\n  }\n  focusOnNextEnabledMenuItem(t) {\n    const n = this.getOverflowMenuItems();\n    let r = -1;\n    for (let i = t + 1; i < n.length; i++)\n      if (!n[i].shouldBeDisabled()) {\n        r = i;\n        break;\n      }\n    if (r > -1) {\n      const i = I(\n        `#${this.services.domUtils.generateElementIDString(\n          `control-${n[r].id}`\n        )} button`\n      ).node();\n      "focus" in i && i.focus();\n    }\n  }\n  toggleOverflowMenu(t) {\n    if (this.isOverflowMenuOpen())\n      this.updateOverflowMenu(!1);\n    else {\n      this.updateOverflowMenu(!0);\n      const n = this;\n      this.getOverflowMenuItems().forEach((r, i) => {\n        const s = I(\n          `#${this.services.domUtils.generateElementIDString(`control-${r.id}`)}`\n        );\n        s !== null && (s.on("click", () => {\n          n.triggerFunctionAndEvent(r, t, s.node()), n.updateOverflowMenu(!1);\n        }), s.on("keydown", (a) => {\n          a && a.key === "Enter" ? n.triggerFunctionAndEvent(r, t, s.node()) : a && a.key === "ArrowUp" ? n.focusOnPreviousEnabledMenuItem(i) : a && a.key === "ArrowDown" ? n.focusOnNextEnabledMenuItem(i) : a && a.key === "Escape" && n.updateOverflowMenu(!1), a.preventDefault();\n        }));\n      }), n.focusOnNextEnabledMenuItem(-1);\n    }\n    t && t.stopImmediatePropagation();\n  }\n  // Calls passed function && dispatches event\n  triggerFunctionAndEvent(t, n, r) {\n    typeof t.shouldBeDisabled == "function" && t.shouldBeDisabled() || (typeof t.clickFunction == "function" && t.clickFunction(n), this.services.events.dispatchEvent(T.Toolbar.BUTTON_CLICK, {\n      control: t,\n      event: n,\n      element: r\n    }));\n  }\n  getControlConfigs() {\n    const t = y(this.getOptions(), "toolbar", "numberOfIcons") - 1, n = y(this.getOptions(), "toolbar", "controls"), r = [], i = [], s = [];\n    return n.forEach((a) => {\n      let o = null;\n      if (a.type === _t.CUSTOM)\n        y(a, "id") === null && (a.id = `toolbar-button-${fv.buttonID++}`), y(a, "shouldBeDisabled") === null && (a.shouldBeDisabled = () => !1), o = a;\n      else {\n        const l = this.services.domUtils.isFullScreenMode();\n        a.type === _t.MAKE_FULLSCREEN && l ? a.type = _t.EXIT_FULLSCREEN : a.type === _t.EXIT_FULLSCREEN && !l && (a.type = _t.MAKE_FULLSCREEN), o = this.getControlConfigByType(a.type);\n      }\n      o && (o.text = a.text ? a.text : a.type, o.id.indexOf("toolbar-export") !== -1 ? r.push(o) : i.length < t ? y(o, "iconSVG", "content") === null ? s.push(o) : i.push(o) : s.push(o));\n    }), s.push(...r), s.length ? {\n      buttonList: i,\n      overflowMenuItemList: s\n    } : {\n      buttonList: i\n    };\n  }\n  getToolbarButtonItems() {\n    const { buttonList: t, overflowMenuItemList: n } = this.getControlConfigs();\n    return n && t.push(this.getOverflowButtonConfig()), t || [];\n  }\n  getOverflowMenuItems() {\n    const { overflowMenuItemList: t } = this.getControlConfigs();\n    return t || [];\n  }\n  // special button config for overflow button\n  getOverflowButtonConfig() {\n    const { moreOptions: t } = y(\n      this.model.getOptions(),\n      "locale",\n      "translations",\n      "toolbar"\n    );\n    return {\n      id: "toolbar-overflow-menu",\n      title: t,\n      shouldBeDisabled: () => !1,\n      iconSVG: {\n        content: `<circle cx="16" cy="8" r="2"></circle>\n\t\t\t\t<circle cx="16" cy="16" r="2"></circle>\n\t\t\t\t<circle cx="16" cy="24" r="2"></circle>`\n      },\n      clickFunction: (n) => this.toggleOverflowMenu(n)\n    };\n  }\n  getControlConfigByType(t) {\n    const n = this.services.zoom && this.services.zoom.isZoomBarEnabled() && !this.services.zoom.isEmptyState(), r = this.model.getDisplayData(), i = this.model.getOptions(), {\n      exportAsCSV: s,\n      exportAsJPG: a,\n      exportAsPNG: o,\n      zoomIn: l,\n      zoomOut: c,\n      resetZoom: u,\n      makeFullScreen: d,\n      exitFullScreen: h,\n      showAsTable: p\n    } = y(i, "locale", "translations", "toolbar");\n    let f;\n    switch (t) {\n      case _t.ZOOM_IN:\n        n && (f = {\n          id: "toolbar-zoomIn",\n          title: l,\n          shouldBeDisabled: () => this.services.zoom.isMinZoomDomain(),\n          iconSVG: {\n            content: this.getControlIconByType(t)\n          },\n          clickFunction: () => this.services.zoom.zoomIn()\n        });\n        break;\n      case _t.ZOOM_OUT:\n        n && (f = {\n          id: "toolbar-zoomOut",\n          title: c,\n          shouldBeDisabled: () => this.services.zoom.isMaxZoomDomain(),\n          iconSVG: {\n            content: this.getControlIconByType(t)\n          },\n          clickFunction: () => this.services.zoom.zoomOut()\n        });\n        break;\n      case _t.RESET_ZOOM:\n        n && (f = {\n          id: "toolbar-resetZoom",\n          title: u,\n          shouldBeDisabled: () => this.services.zoom.isMaxZoomDomain(),\n          iconSVG: {\n            content: this.getControlIconByType(t)\n          },\n          clickFunction: () => this.services.zoom.resetZoomDomain()\n        });\n        break;\n      case _t.MAKE_FULLSCREEN:\n        f = {\n          id: "toolbar-makefullscreen",\n          iconSVG: {\n            content: this.getControlIconByType(t),\n            width: "15px",\n            height: "15px"\n          },\n          title: d,\n          shouldBeDisabled: () => !1,\n          clickFunction: () => {\n            this.services.domUtils.toggleFullscreen();\n          }\n        };\n        break;\n      case _t.EXIT_FULLSCREEN:\n        f = {\n          id: "toolbar-exitfullscreen",\n          iconSVG: {\n            content: this.getControlIconByType(t),\n            width: "15px",\n            height: "15px"\n          },\n          title: h,\n          shouldBeDisabled: () => !1,\n          clickFunction: () => {\n            this.services.domUtils.toggleFullscreen();\n          }\n        };\n        break;\n      case _t.SHOW_AS_DATATABLE:\n        f = {\n          id: "toolbar-showasdatatable",\n          iconSVG: {\n            content: this.getControlIconByType(t)\n          },\n          title: p,\n          shouldBeDisabled: () => r.length === 0,\n          clickFunction: () => this.services.events.dispatchEvent(T.Modal.SHOW)\n        };\n        break;\n      case _t.EXPORT_CSV:\n        f = {\n          id: "toolbar-export-CSV",\n          title: s,\n          shouldBeDisabled: () => !1,\n          iconSVG: {\n            content: this.getControlIconByType(t)\n          },\n          clickFunction: () => this.model.exportToCSV()\n        };\n        break;\n      case _t.EXPORT_PNG:\n        f = {\n          id: "toolbar-export-PNG",\n          title: o,\n          shouldBeDisabled: () => !1,\n          iconSVG: {\n            content: this.getControlIconByType(t)\n          },\n          clickFunction: () => this.services.domUtils.exportToPNG()\n        };\n        break;\n      case _t.EXPORT_JPG:\n        f = {\n          id: "toolbar-export-JPG",\n          title: a,\n          shouldBeDisabled: () => !1,\n          iconSVG: {\n            content: this.getControlIconByType(t)\n          },\n          clickFunction: () => this.services.domUtils.exportToJPG()\n        };\n        break;\n      // add more toolbar control configuration here\n      default:\n        throw Error("Not supported toolbar control type: " + t);\n    }\n    return f;\n  }\n  getControlIconByType(t) {\n    switch (t) {\n      case _t.ZOOM_IN:\n        return `<polygon points="19 13 15 13 15 9 13 9 13 13 9 13 9 15 13 15 13 19 15 19 15 15 19 15 19 13"/>\n\t\t\t\t\t\t<path d="M22.45,21A10.87,10.87,0,0,0,25,14,11,11,0,1,0,14,25a10.87,10.87,0,0,0,7-2.55L28.59,30,30,28.59ZM14,23a9,9,0,1,1,9-9A9,9,0,0,1,14,23Z"/>`;\n      case _t.ZOOM_OUT:\n        return `<rect x="9" y="13" width="10" height="2"/>\n\t\t\t\t\t\t<path d="M22.45,21A10.87,10.87,0,0,0,25,14,11,11,0,1,0,14,25a10.87,10.87,0,0,0,7-2.55L28.59,30,30,28.59ZM14,23a9,9,0,1,1,9-9A9,9,0,0,1,14,23Z"/>`;\n      case _t.RESET_ZOOM:\n        return \'<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>\';\n      case _t.MAKE_FULLSCREEN:\n        return \'<polygon points="21 2 21 4 26.59 4 17 13.58 18.41 15 28 5.41 28 11 30 11 30 2 21 2"/><polygon points="15 18.42 13.59 17 4 26.59 4 21 2 21 2 30 11 30 11 28 5.41 28 15 18.42"/>\';\n      case _t.EXIT_FULLSCREEN:\n        return \'<polygon points="4 18 4 20 10.586 20 2 28.582 3.414 30 12 21.414 12 28 14 28 14 18 4 18"/><polygon points="30 3.416 28.592 2 20 10.586 20 4 18 4 18 14 28 14 28 12 21.414 12 30 3.416"/>\';\n      case _t.SHOW_AS_DATATABLE:\n        return \'<rect x="4" y="6" width="18" height="2"/><rect x="4" y="12" width="18" height="2"/><rect x="4" y="18" width="18" height="2"/><rect x="4" y="24" width="18" height="2"/><rect x="26" y="6" width="2" height="2"/><rect x="26" y="12" width="2" height="2"/><rect x="26" y="18" width="2" height="2"/><rect x="26" y="24" width="2" height="2"/>\';\n      case _t.EXPORT_CSV:\n        return \'<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>\';\n      case _t.EXPORT_JPG:\n        return \'<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>\';\n      case _t.EXPORT_PNG:\n        return \'<path d="M22.4478,21A10.855,10.855,0,0,0,25,14,10.99,10.99,0,0,0,6,6.4658V2H4v8h8V8H7.332a8.9768,8.9768,0,1,1-2.1,8H3.1912A11.0118,11.0118,0,0,0,14,25a10.855,10.855,0,0,0,7-2.5522L28.5859,30,30,28.5859Z"/>\';\n      // add more icons here\n      // svg icon must be with 32x32 viewBox\n      default:\n        throw Error("Not supported toolbar control type: " + t);\n    }\n  }\n};\npv.buttonID = 0;\nlet po = pv;\nconst mv = class gv extends mt {\n  constructor(t, n, r, i) {\n    super(t, n, i), this.type = "layout", this.configs = i, this.children = r, this._instanceID = gv.instanceID++, this.init();\n  }\n  init() {\n    this.children.forEach((t) => {\n      t.components.forEach((n) => {\n        n.init();\n      });\n    });\n  }\n  getPreferedAndFixedSizeSum() {\n    const t = this.parent;\n    let n = 0;\n    return t.selectAll(`div.layout-child-${this._instanceID}`).filter((r) => {\n      const i = y(r, "growth");\n      return i === ct.PREFERRED || i === ct.FIXED;\n    }).each(function(r) {\n      n += r.size;\n    }), n;\n  }\n  getNumOfStretchChildren() {\n    return this.parent.selectAll(`div.layout-child-${this._instanceID}`).filter((t) => y(t, "growth") === ct.STRETCH).size();\n  }\n  render(t = !0) {\n    const n = this.model.getOptions(), r = this.parent, { width: i, height: s } = N.getHTMLElementSize(r.node()), a = this.configs.direction === At.ROW || this.configs.direction === At.ROW_REVERSE, o = y(this.model.getOptions(), "style", "prefix"), l = r.classed(\n      `${ue}--${o}--layout-row`,\n      this.configs.direction === At.ROW\n    ).classed(\n      `${ue}--${o}--layout-row-reverse`,\n      this.configs.direction === At.ROW_REVERSE\n    ).classed(\n      `${ue}--${o}--layout-column`,\n      this.configs.direction === At.COLUMN\n    ).classed(\n      `${ue}--${o}--layout-column-reverse`,\n      this.configs.direction === At.COLUMN_REVERSE\n    ).classed(\n      `${ue}--${o}--layout-alignitems-center`,\n      this.configs.alignItems === ni.CENTER\n    ).selectAll(`div.layout-child-${this._instanceID}`).data(this.children, (u) => u.id);\n    l.enter().append("div").merge(r.selectAll(`div.layout-child-${this._instanceID}`)).attr("class", (u) => `layout-child layout-child-${this._instanceID} ${u.id}`).each(function(u) {\n      u.components.forEach((d) => {\n        var h;\n        const p = I(this), f = y(u, "renderType") === rt.SVG;\n        d.setParent(\n          f ? N.appendOrSelect(p, "svg.layout-svg-wrapper").attr("width", "100%").attr("height", "100%") : p\n        ), f && !p.select("svg.layout-svg-wrapper").attr("aria-label") && p.select("svg.layout-svg-wrapper").attr("aria-label", ((h = n == null ? void 0 : n.accessibility) == null ? void 0 : h.svgAriaLabel) || (n == null ? void 0 : n.title));\n        const g = y(u, "growth");\n        (g === ct.PREFERRED || g === ct.FIXED) && d.render(t);\n      });\n    }), r.selectAll(`div.layout-child-${this._instanceID}`).style("height", null).style("width", null).each(function(u) {\n      const d = y(u, "growth"), h = y(u, "renderType") === rt.SVG ? N.getSVGElementSize(I(this).select("svg.layout-svg-wrapper"), {\n        useBBox: !0\n      }) : N.getHTMLElementSize(this);\n      if (d === ct.PREFERRED) {\n        const p = a ? h.width : h.height, f = a ? i : s;\n        u.size = p / f * 100;\n      }\n    }), l.exit().remove(), this.children.filter((u) => y(u, "growth") === ct.STRETCH).forEach((u) => {\n      u.size = (100 - +this.getPreferedAndFixedSizeSum()) / +this.getNumOfStretchChildren();\n    });\n    const c = r.selectAll(`div.layout-child-${this._instanceID}`).data(this.children, (u) => u.id);\n    a ? c.style("width", (u) => `${u.size / 100 * i}px`).style("height", "100%") : c.style("height", (u) => `${u.size / 100 * s}px`).style("width", "100%"), c.each(function(u) {\n      u.components.forEach((d) => {\n        y(u, "growth") === ct.STRETCH && d.render(t);\n      });\n    });\n  }\n  // Pass on model to children as well\n  setModel(t) {\n    super.setModel(t), this.children.forEach((n) => {\n      n.components.forEach((r) => r.setModel(t));\n    });\n  }\n  // Pass on essentials to children as well\n  setServices(t) {\n    super.setServices(t), this.children.forEach((n) => {\n      n.components.forEach((r) => r.setServices(t));\n    });\n  }\n  destroy() {\n    this.children.forEach((t) => {\n      t.components.forEach((n) => n.destroy());\n    });\n  }\n};\nmv.instanceID = Math.floor(Math.random() * 99999999999);\nlet be = mv;\nclass An extends mt {\n  constructor() {\n    super(...arguments), this.type = "spacer";\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !1) {\n    this.getComponentContainer({\n      isPresentational: !0\n    }).style("width", `${this.configs.size || Rh.default.size}px`).style("height", `${this.configs.size || Rh.default.size}px`).attr("opacity", 0);\n  }\n}\nclass fo extends mt {\n  constructor(t, n, r) {\n    super(t, n, r), this.type = "modal", this.isEventListenerAdded = !1, this.handleShowModal = () => {\n      const i = this.services.domUtils.getChartID();\n      this.modal.attr("data-modal", !0).attr("class", "cds--modal").attr("role", "dialog").attr("aria-modal", !0).attr("aria-labelledby", `${i}__modal-title`).attr("aria-describedby", `${i}__modal-description`).attr("tabindex", -1).style("opacity", 1).style("visibility", "visible"), this.modal.html(this.getModalHTML()), this.modal.select("div.cds--modal-footer button.cds--btn").on("click", () => this.model.exportToCSV()), this.modal.on("click", this.handleHideModal), this.modal.select(".cds--modal-container").on("click", (s) => {\n        s.stopPropagation();\n      }), this.modal.select(".cds--modal-close").on("click", this.handleHideModal), typeof window < "u" && window.addEventListener("keydown", this.handleEscapeKey);\n    }, this.handleEscapeKey = (i) => {\n      i.key === "Escape" && this.handleHideModal();\n    }, this.handleHideModal = () => {\n      this.modal.attr("role", null).attr("aria-modal", null).attr("aria-labelledby", null).attr("aria-describedby", null).attr("tabindex", null).style("opacity", 0).style("visibility", "hidden"), this.modal.on("click", null), this.modal.select(".cds--modal-container").on("click", null), this.modal.select(".cds--modal-close").on("click", null), typeof window < "u" && window.removeEventListener("keydown", this.handleEscapeKey);\n    }, this.init();\n  }\n  addEventListeners() {\n    this.services.events.addEventListener(T.Modal.SHOW, this.handleShowModal);\n  }\n  removeEventListeners() {\n    this.services.events.removeEventListener(T.Modal.SHOW, this.handleShowModal);\n  }\n  getModalHTML() {\n    const t = this.services.domUtils.getChartID(), n = this.model.getOptions(), { title: r, downloadAsCSV: i } = y(n, "locale", "translations", "tabularRep"), s = y(n, "style", "prefix"), a = this.model.getTabularDataArray();\n    return `\n\t\t<div class="cds--modal-container">\n\t\t\t<div class="cds--modal-header">\n\n\t\t\t\t<p class="cds--modal-header__label cds--type-delta" id="modal-title">${r}</p>\n\n\t\t\t\t<p class="cds--modal-header__heading cds--type-beta" id="${t}__modal-description">${en(\n      n.title\n    )}</p>\n\n\t\t\t\t<button class="cds--modal-close" type="button" data-modal-close aria-label="close modal"  data-modal-primary-focus>\n\t\t\t\t\t<svg focusable="false" preserveAspectRatio="xMidYMid meet" xmlns="http://www.w3.org/2000/svg" fill="currentColor" aria-label="Close" width="20" height="20" viewBox="0 0 32 32" role="img" class="cds--modal-close__icon">\n\t\t\t\t\t\t<path d="M24 9.4L22.6 8 16 14.6 9.4 8 8 9.4 14.6 16 8 22.6 9.4 24 16 17.4 22.6 24 24 22.6 17.4 16 24 9.4z"></path>\n\t\t\t\t\t</svg>\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t<div class="cds--modal-content">\n\t\t\t\t<table class="cds--data-table cds--data-table--no-border">\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t${gt(a, 0).map(\n      (o) => `<th scope="col">\n\t\t\t\t\t\t\t\t<div class="cds--table-header-label">${en(o)}</div>\n\t\t\t\t\t\t\t</th>`\n    ).join("")}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\n\t\t\t\t\t<tbody>${a.slice(1).map(\n      (o) => `\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t${o.map((l) => `<td>${en(l)}</td>`).join("")}\n\t\t\t\t\t\t\t</tr>`\n    ).join("")}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\n\t\t\t<div class="cds--modal-footer">\n\t\t\t  <div class="${ue}--${s}-modal-footer-spacer"></div>\n\t\t\t  <button class="cds--btn cds--btn--primary" type="button" data-modal-primary-focus>${i}</button>\n\t\t\t</div>\n\t\t</div>`;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !1) {\n    const n = this.model.getOptions();\n    if (!this.isEventListenerAdded) {\n      const r = I(this.services.domUtils.getHolder()), i = y(n, "style", "prefix");\n      this.modal = N.appendOrSelect(r, `div.${ue}--${i}--modal`), this.addEventListeners(), this.isEventListenerAdded = !0;\n    }\n  }\n  destroy() {\n    this.removeEventListeners(), this.isEventListenerAdded = !1;\n  }\n}\nclass bs extends mt {\n  constructor() {\n    super(...arguments), this.type = "title", this.renderType = rt.HTML;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !1) {\n    const n = this.getComponentContainer(), r = y(this.getOptions(), "title"), i = n.selectAll("p.title").data([r]);\n    if (i.enter().append("p").classed("title", !0).attr("role", "heading").attr("aria-level", 2).merge(i).html((s) => en(s)), i.node() && i.node().offsetWidth < i.node().scrollWidth) {\n      const s = this;\n      i.on("mouseover", function(a) {\n        s.services.events.dispatchEvent(T.Tooltip.SHOW, {\n          event: a,\n          hoveredElement: i,\n          content: i.text()\n        });\n      }).on("mousemove", function(a) {\n        s.services.events.dispatchEvent(T.Tooltip.MOVE, {\n          event: a\n        });\n      }).on("mouseout", function() {\n        s.services.events.dispatchEvent(T.Tooltip.HIDE);\n      });\n    }\n    i.exit().remove();\n  }\n  /**\n   * Truncates title creating ellipses and attaching tooltip for exposing full title.\n   */\n  truncateTitle(t, n) {\n    if (n <= 0)\n      return;\n    const r = t.text();\n    if (t.node().getComputedTextLength() > n) {\n      t.append("tspan").text("...");\n      const i = N.appendOrSelect(t, "tspan").node().getComputedTextLength(), s = t.text(), a = this.getSubstringIndex(\n        t.node(),\n        0,\n        s.length - 1,\n        n - i\n      );\n      t.html(s.substring(0, a - 1)).append("tspan").text("...");\n      const o = this;\n      t.on("mouseover", function(l) {\n        o.services.events.dispatchEvent(T.Tooltip.SHOW, {\n          event: l,\n          hoveredElement: t,\n          content: r\n        });\n      }).on("mousemove", function(l) {\n        o.services.events.dispatchEvent(T.Tooltip.MOVE, {\n          event: l\n        });\n      }).on("mouseout", function() {\n        o.services.events.dispatchEvent(T.Tooltip.HIDE);\n      });\n    }\n  }\n  // computes the maximum space a title can take\n  getMaxTitleWidth() {\n    return N.getSVGElementSize(this.parent.node(), {\n      useAttrs: !0\n    }).width;\n  }\n  /**\n   * Returns the index for a maximum length substring that is less than the width parameter.\n   * @param title the title node used for getting the text lengths of substrings\n   * @param start the start index for the binary search\n   * @param end the end index for the binary search\n   * @param width the width of the svg container that holds the title\n   */\n  getSubstringIndex(t, n, r, i) {\n    const s = Math.floor((r + n) / 2);\n    return t.getSubStringLength(0, s) > i ? this.getSubstringIndex(t, n, s, i) : t.getSubStringLength(0, s) < i ? t.getSubStringLength(0, s + 1) > i ? s : this.getSubstringIndex(t, s, r, i) : s;\n  }\n}\nclass lu extends mt {\n  constructor() {\n    super(...arguments), this.type = "legend", this.renderType = rt.HTML;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !1) {\n    const n = this.getOptions(), r = y(n, "legend"), i = y(r, "alignment"), s = y(n, "legend", "orientation");\n    let a = this.model.getDataGroups();\n    const { DISABLED: o } = It.items.status, l = a.some((x) => x.status === o), c = y(r, "order"), u = this.getComponentContainer().classed("center-aligned", i === jt.CENTER).classed("right-aligned", i === jt.RIGHT).classed(s, !0).classed("has-deactivated-items", l).attr("role", ht.GROUP).attr("aria-label", "Data groups").attr("data-name", "legend-items");\n    c && (a = this.sortDataGroups(a, c));\n    const d = u.selectAll("div.legend-item").data(a, (x) => x.name), h = d.enter().append("div").attr("class", "legend-item");\n    h.merge(u.selectAll("div.legend-item")).classed("active", function(x) {\n      return x.status === It.items.status.ACTIVE;\n    });\n    const p = y(this.getOptions(), "legend", "clickable");\n    u.classed("clickable", p && a.length > 1);\n    const f = It.checkbox.radius, g = h.append("div").classed("checkbox", !0), m = g.merge(d.select("div.checkbox")).attr("role", ht.CHECKBOX).attr("tabindex", p ? 0 : -1).attr(\n      "aria-labelledby",\n      (x, _) => this.services.domUtils.generateElementIDString(`legend-datagroup-${_}-title`)\n    ).attr("aria-checked", ({ status: x }) => x === It.items.status.ACTIVE).attr("width", f * 2).attr("height", f * 2).attr(\n      "class",\n      (x) => this.model.getColorClassName({\n        classNameTypes: [it.BACKGROUND],\n        dataGroupName: x.name,\n        originalClassName: "checkbox"\n      })\n    ).style(\n      "background",\n      (x) => x.status === It.items.status.ACTIVE ? this.model.getFillColor(x.name) || this.model.getStrokeColor(x.name) : null\n    ).classed("active", function(x) {\n      return x.status === It.items.status.ACTIVE;\n    });\n    g.append("svg").attr("focusable", !1).attr("preserveAspectRatio", "xMidYMid meet").attr("xmlns", "http://www.w3.org/2000/svg").attr("width", "11").attr("height", "11").attr("viewBox", "0 0 31 28").attr("aria-hidden", !0).style("will-change", "transform").append("path").attr("d", "M13 21.2l-7.1-7.1-1.4 1.4 7.1 7.1L13 24 27.1 9.9l-1.4-1.5z"), h.append("p").merge(d.select("p"));\n    const v = y(n, "legend", "additionalItems");\n    if (v && a.length) {\n      const x = this, _ = u.selectAll("div.additional-item").data(v);\n      _.exit().remove();\n      const E = _.enter().append("div").merge(_).classed("legend-item", !0).classed("additional", !0).attr(\n        "aria-labelledby",\n        (M, D) => this.services.domUtils.generateElementIDString(\n          `legend-datagroup-${m.size() + D}-title`\n        )\n      );\n      E.selectAll("*").remove();\n      let b, S = 1;\n      E.append("svg").classed("icon", !0).each(function(M) {\n        const D = I(this);\n        !b || b != M.type ? (b = M.type, S = 1) : S++, x.addAdditionalItem(D, M, S);\n      }), E.append("p").merge(E.select("p")), this.truncateLegendText();\n    }\n    d.exit().on("mouseover", null).on("click", null).on("mouseout", null).remove(), p && h.size() > 1 && this.addEventListeners();\n  }\n  sortDataGroups(t, n) {\n    if (t.sort(\n      (r, i) => n.indexOf(r.name) - n.indexOf(i.name)\n    ), n.length < t.length) {\n      const r = t.length - n.length;\n      return t.slice(r).concat(t.slice(0, r));\n    }\n    return t;\n  }\n  addAdditionalItem(t, n, r) {\n    const { width: i, height: s } = It.area;\n    if (n.type === Gt.RADIUS ? t.style("width", `${s}px`).style("height", `${s}px`) : t.style("width", `${i}px`).style("height", `${s}px`), n.type === Gt.RADIUS) {\n      const { iconData: a, fill: o, stroke: l } = It.radius;\n      t.attr("fill", "none").selectAll("circle").data(a).enter().append("circle").classed("radius", !0).attr("role", ht.IMG).attr("aria-label", "radius").attr("cx", (c) => c.cx).attr("cy", (c) => c.cy).attr("r", (c) => c.r).style("fill", n.fill ? n.fill : o).style("stroke", n.stroke ? n.stroke : l);\n    } else if (n.type === Gt.LINE) {\n      const a = It.line;\n      t.select("line.line").empty() && t.append("line").classed(`line-${r}`, !0).attr("role", ht.IMG).attr("aria-label", "line").attr("x1", 0).attr("y1", a.yPosition).attr("x2", i).attr("y2", a.yPosition).style("stroke", n.stroke ? n.stroke : a.stroke).style("stroke-width", a.strokeWidth);\n    } else if (n.type === Gt.AREA)\n      t.select("rect.area").empty() && t.append("rect").classed(`area-${r}`, !0).attr("role", ht.IMG).attr("aria-label", "area").attr("width", i).attr("height", s).style(\n        "fill",\n        r > 3 && !n.fill ? It.area.fill : n.fill\n      ).style("stroke", n.stroke);\n    else if (n.type === Gt.SIZE) {\n      const { iconData: a, fill: o, stroke: l } = It.size;\n      t.attr("fill", "none").attr("role", ht.IMG).attr("aria-label", "size").selectAll("rect").data(a).enter().append("rect").classed("size", !0).attr("width", (c) => c.width).attr("height", (c) => c.height).attr("y", () => 0).style("fill", n.fill ? n.fill : o).style("stroke", n.stroke ? n.stroke : l).style("stroke-width", 1);\n    } else if (n.type === Gt.QUARTILE) {\n      const { iconData: a } = It.quartile;\n      t.selectAll("rect").attr("role", ht.IMG).attr("aria-label", "quartile").data(a).enter().append("rect").attr("class", (o, l) => `quartile-${l === 0 ? "wrapper" : "line"}`).attr("x", (o) => o.x).attr("y", (o) => o.y).attr("width", (o) => o.width).attr("height", (o) => o.height);\n    } else if (n.type === Gt.ZOOM) {\n      const { iconData: a, color: o } = y(It, "zoom"), l = t.attr("role", ht.IMG).attr("aria-label", "zoom").selectAll("g.icon").data(a).enter();\n      l.append("g").attr("x", (c) => c.x).attr("y", (c) => c.y).attr("width", (c) => c.width).attr("height", (c) => c.height).append("polygon").attr(\n        "points",\n        "7.7 4.82 5.78 4.82 5.78 2.89 4.82 2.89 4.82 4.82 2.89 4.82 2.89 5.78 4.82 5.78 4.82 7.7 5.78 7.7 5.78 5.78 7.7 5.78 7.7 4.82"\n      ).attr("fill", () => n.color ? n.color : o), l.append("path").attr(\n        "d",\n        "M9.36,8.67A5.22,5.22,0,0,0,10.59,5.3,5.3,5.3,0,1,0,5.3,10.59,5.22,5.22,0,0,0,8.67,9.36L12.32,13l.68-.68Zm-4.06,1A4.34,4.34,0,1,1,9.63,5.3,4.33,4.33,0,0,1,5.3,9.63Z"\n      ).attr("fill", () => n.color ? n.color : o);\n    }\n  }\n  truncateLegendText() {\n    const t = this.getComponentContainer(), n = y(this.getOptions(), "legend", "truncation"), r = y(n, "type"), i = y(n, "threshold"), s = y(n, "numCharacter"), a = t.selectAll("div.legend-item p");\n    a.attr("id", function() {\n      return (this.parentNode.querySelector("div.checkbox") || this.parentNode).getAttribute("aria-labelledby");\n    }), r !== Ve.NONE ? a.html(function(o) {\n      const l = en(o.name);\n      return l.length > i && l.length !== s ? es(l, r, s) : l;\n    }) : a.html((o) => en(o.name));\n  }\n  addEventListeners() {\n    const t = this, n = this.getComponentContainer(), r = this.getOptions(), i = y(r, "legend"), s = y(i, "truncation");\n    n.selectAll("div.legend-item").on("mouseover", function(a) {\n      t.services.events.dispatchEvent(T.Legend.ITEM_HOVER, {\n        hoveredElement: I(this)\n      });\n      const o = I(this);\n      o.select("div.checkbox").classed("hovered", !0);\n      const l = o.datum();\n      l.name.length > s.threshold && s.numCharacter < l.name.length && s.type !== Ve.NONE && t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: a,\n        hoveredElement: o,\n        content: l.name\n      });\n    }).on("mousemove", function(a) {\n      I(this).datum().name.length > s.threshold && s.type !== Ve.NONE && t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: a\n      });\n    }).on("click", function() {\n      t.services.events.dispatchEvent(T.Legend.ITEM_CLICK, {\n        clickedElement: I(this)\n      });\n      const a = I(this).datum();\n      t.model.toggleDataLabel(a.name);\n    }).on("mouseout", function() {\n      const a = I(this);\n      a.select("div.checkbox").classed("hovered", !1), a.datum().name.length > s.threshold && s.type !== Ve.NONE && t.services.events.dispatchEvent(T.Tooltip.HIDE), t.services.events.dispatchEvent(T.Legend.ITEM_MOUSEOUT, {\n        hoveredElement: a\n      });\n    }), n.selectAll("div.legend-item div.checkbox").on("keyup", function(a) {\n      a.key && a.key === "Tab" && t.services.events.dispatchEvent(T.Legend.ITEM_HOVER, {\n        hoveredElement: I(this)\n      });\n    }), n.selectAll("div.legend-item div.checkbox").on("keydown", function(a, o) {\n      a.key && a.key === " " ? (a.preventDefault(), t.model.toggleDataLabel(o.name)) : a.key && a.key === "Tab" && t.services.events.dispatchEvent(T.Legend.ITEM_MOUSEOUT, {\n        hoveredElement: I(this)\n      });\n    }), n.selectAll("g.additional-item").on("mouseover", function(a) {\n      const o = I(this), l = o.datum();\n      l.name.length > s.threshold && t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: a,\n        hoveredElement: o,\n        content: l.name\n      });\n    });\n  }\n}\nclass vv extends mt {\n  constructor(t, n, r) {\n    super(t, n, r), this.type = "chart-clip", this.renderType = rt.SVG, this.chartClipId = "chart-clip-id-" + Math.floor(Math.random() * 99999999999), this.init();\n  }\n  init() {\n    this.model.set({ chartClipId: this.chartClipId }, { skipUpdate: !0 });\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    this.createClipPath();\n  }\n  createClipPath() {\n    const t = this.parent, { cartesianScales: n } = this.services;\n    if (!n) throw new Error("Service cartesianScales was undefined");\n    const r = n.getMainXScale(), i = n.getMainYScale(), [s, a] = r.range(), [o, l] = i.range();\n    if (!t)\n      throw new Error("svg is undefined");\n    this.chartClipPath = N.appendOrSelect(\n      t,\n      `clipPath.${this.type}`\n    ).attr("id", this.chartClipId);\n    const c = N.appendOrSelect(this.chartClipPath, `rect.${this.type}`);\n    a - s > 0 && c.attr("x", s).attr("y", l).attr("width", a - s).attr("height", o - l), this.chartClipPath.merge(c).lower();\n  }\n}\nclass Vk extends vv {\n  constructor() {\n    super(...arguments), this.type = "canvas-chart-clip", this.chartClipId = "canvas-chart-clip-id-" + Math.floor(Math.random() * 99999999999);\n  }\n  createClipPath() {\n    const t = this.parent, { width: n, height: r } = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    });\n    this.chartClipPath = N.appendOrSelect(t, `clipPath.${this.type}`).attr(\n      "id",\n      this.chartClipId\n    );\n    const i = N.appendOrSelect(this.chartClipPath, `rect.${this.type}`);\n    i.attr("x", 0).attr("y", 0).attr("width", n).attr("height", r), this.chartClipPath.merge(i).lower();\n  }\n}\nvar Mr, Vt;\n(function(e) {\n  e.LEFT = "left", e.RIGHT = "right", e.TOP = "top", e.BOTTOM = "bottom";\n})(Vt || (Vt = {}));\nvar sp = (Mr = {}, Mr[Vt.LEFT] = function(e, t, n) {\n  return {\n    top: e.top - Math.round(t.offsetHeight / 2) + Math.round(n.height / 2),\n    left: Math.round(e.left - t.offsetWidth)\n  };\n}, Mr[Vt.RIGHT] = function(e, t, n) {\n  return {\n    top: e.top - Math.round(t.offsetHeight / 2) + Math.round(n.height / 2),\n    left: Math.round(e.left + n.width)\n  };\n}, Mr[Vt.TOP] = function(e, t, n) {\n  return {\n    top: Math.round(e.top - t.offsetHeight),\n    left: e.left - Math.round(t.offsetWidth / 2) + Math.round(n.width / 2)\n  };\n}, Mr[Vt.BOTTOM] = function(e, t, n) {\n  return {\n    top: Math.round(e.top + n.height),\n    left: e.left - Math.round(t.offsetWidth / 2) + Math.round(n.width / 2)\n  };\n}, Mr), ap = typeof window < "u" ? window : {\n  innerHeight: 0,\n  innerWidth: 0\n}, mo = (\n  /** @class */\n  function() {\n    function e(t) {\n      t === void 0 && (t = {}), this.positions = sp, this.positions = Object.assign({}, sp, t);\n    }\n    return e.prototype.getRelativeOffset = function(t) {\n      for (var n = {\n        left: t.offsetLeft,\n        top: t.offsetTop\n      }; t.offsetParent && getComputedStyle(t.offsetParent).position === "static"; )\n        n.left += t.offsetLeft, n.top += t.offsetTop, t = t.offsetParent;\n      return n;\n    }, e.prototype.getAbsoluteOffset = function(t) {\n      for (var n = t, r = {\n        top: 0,\n        left: 0\n      }; n.offsetParent; ) {\n        var i = getComputedStyle(n.offsetParent);\n        i.position === "static" && i.marginLeft && i.marginTop && (parseInt(i.marginTop, 10) && (r.top += parseInt(i.marginTop, 10)), parseInt(i.marginLeft, 10) && (r.left += parseInt(i.marginLeft, 10))), n = n.offsetParent;\n      }\n      var s = t.getBoundingClientRect(), a = document.body.getBoundingClientRect();\n      return {\n        top: s.top - a.top + r.top,\n        left: s.left - a.left + r.left\n      };\n    }, e.prototype.findRelative = function(t, n, r) {\n      var i = this.getRelativeOffset(t), s = t.getBoundingClientRect();\n      return this.calculatePosition(i, s, n, r);\n    }, e.prototype.findAbsolute = function(t, n, r) {\n      var i = this.getAbsoluteOffset(t), s = t.getBoundingClientRect();\n      return this.calculatePosition(i, s, n, r);\n    }, e.prototype.findPosition = function(t, n, r, i) {\n      i === void 0 && (i = this.getAbsoluteOffset.bind(this));\n      var s = i(t), a = t.getBoundingClientRect();\n      return this.calculatePosition(s, a, n, r);\n    }, e.prototype.findPositionAt = function(t, n, r) {\n      return this.calculatePosition(t, { top: 0, left: 0, height: 0, width: 0 }, n, r);\n    }, e.prototype.getPlacementBox = function(t, n) {\n      var r = t.offsetHeight + n.top, i = t.offsetWidth + n.left;\n      return {\n        top: n.top,\n        bottom: r,\n        left: n.left,\n        right: i\n      };\n    }, e.prototype.addOffset = function(t, n, r) {\n      return n === void 0 && (n = 0), r === void 0 && (r = 0), Object.assign({}, t, {\n        top: t.top + n,\n        left: t.left + r\n      });\n    }, e.prototype.setElement = function(t, n) {\n      t.style.top = n.top + "px", t.style.left = n.left + "px";\n    }, e.prototype.findBestPlacement = function(t, n, r, i, s) {\n      var a = this;\n      i === void 0 && (i = this.defaultContainerFunction.bind(this)), s === void 0 && (s = this.findPosition.bind(this));\n      var o = r.map(function(l) {\n        var c = s(t, n, l), u = a.getPlacementBox(n, c), d = 0, h = 0, p = i();\n        u.top < p.top ? d = p.top - u.top : u.bottom > p.height && (d = u.bottom - p.height), u.left < p.left ? h = p.left - u.left : u.right > p.width && (h = u.right - p.width), d && !h ? h = 1 : h && !d && (d = 1);\n        var f = n.offsetHeight * n.offsetWidth, g = d * h, m = f - g, v = m / f;\n        return {\n          placement: l,\n          weight: v\n        };\n      });\n      return o.sort(function(l, c) {\n        return c.weight - l.weight;\n      }), o[0].placement;\n    }, e.prototype.findBestPlacementAt = function(t, n, r, i) {\n      var s = this;\n      i === void 0 && (i = this.defaultContainerFunction.bind(this));\n      var a = function(o, l, c) {\n        return s.findPositionAt(t, l, c);\n      };\n      return this.findBestPlacement(null, n, r, i, a);\n    }, e.prototype.defaultContainerFunction = function() {\n      return {\n        // we go with window here, because that\'s going to be the simple/common case\n        top: 0,\n        left: 0,\n        height: ap.innerHeight,\n        width: ap.innerWidth\n      };\n    }, e.prototype.calculatePosition = function(t, n, r, i) {\n      return this.positions[i] ? this.positions[i](t, r, n) : (console.error("No function found for placement, defaulting to 0,0"), { left: 0, top: 0 });\n    }, e;\n  }()\n);\nnew mo();\nclass cu extends mt {\n  constructor(t, n, r) {\n    super(t, n, r), this.type = "tooltip", this.renderType = rt.HTML, this.isEventListenerAdded = !1, this.lastTriggeredEventType = "", this.positionService = new mo(), this.handleShowTooltip = (i) => {\n      const s = i.detail.data || i.detail.items, a = I(i.detail.event.target).datum();\n      let o;\n      const l = this.formatItems(this.getItems(i));\n      i.detail.content ? o = `<div class="title-tooltip"><p>${Gs(i.detail.content)}</p></div>` : o = Gs(this.getTooltipHTML(l));\n      const c = N.appendOrSelect(this.tooltip, "div.content-box");\n      if (y(this.getOptions(), "tooltip", "customHTML"))\n        if (i.detail.content) {\n          const u = `<div class="title-tooltip"><p>${Gs(\n            i.detail.content\n          )}</p></div>`;\n          c.html(u);\n        } else\n          c.html(\n            `<div class="title-tooltip"><p>${Gs(\n              this.model.getOptions().tooltip.customHTML(s, o, a)\n            )}</p></div>`\n          );\n      else\n        c.html(o);\n      c.selectAll(".datapoint-tooltip").each(function(u, d) {\n        const h = l[d];\n        l[d] && l[d].color && I(this).select(".tooltip-color").attr("class", "tooltip-color").style("background-color", h.color);\n      }), this.positionTooltip(i), this.tooltip.classed("hidden", !1).attr("aria-hidden", !1), this.lastTriggeredEventType = i.type;\n    }, this.handleHideTooltip = () => {\n      this.tooltip.classed("hidden", !0).attr("aria-hidden", !0);\n    }, this.init();\n  }\n  addTooltipEventListener() {\n    this.services.events.addEventListener(T.Tooltip.MOVE, (t) => {\n      this.lastTriggeredEventType !== T.Toolbar.SHOW_TOOLTIP && this.tooltip.classed("hidden") === !1 && this.positionTooltip(t);\n    }), this.services.events.addEventListener(T.Tooltip.SHOW, this.handleShowTooltip), this.services.events.addEventListener(T.Tooltip.HIDE, this.handleHideTooltip), this.services.events.addEventListener(T.Chart.MOUSEOUT, this.handleHideTooltip), this.services.events.addEventListener(T.Toolbar.SHOW_TOOLTIP, this.handleShowTooltip), this.services.events.addEventListener(T.Toolbar.HIDE_TOOLTIP, this.handleHideTooltip);\n  }\n  removeTooltipEventListener() {\n    this.services.events.removeEventListener(T.Tooltip.MOVE, null), this.services.events.removeEventListener(T.Tooltip.SHOW, this.handleShowTooltip), this.services.events.removeEventListener(T.Tooltip.HIDE, this.handleHideTooltip), this.services.events.removeEventListener(T.Chart.MOUSEOUT, this.handleHideTooltip), this.services.events.removeEventListener(T.Toolbar.SHOW_TOOLTIP, this.handleShowTooltip), this.services.events.removeEventListener(T.Toolbar.HIDE_TOOLTIP, this.handleHideTooltip);\n  }\n  getItems(t) {\n    return t.detail.items ? t.detail.items : [];\n  }\n  formatItems(t) {\n    const n = this.getOptions(), r = y(n, "tooltip", "truncation", "type"), i = y(n, "tooltip", "truncation", "threshold"), s = y(n, "tooltip", "truncation", "numCharacter");\n    return r !== Ve.NONE ? t.map((a) => {\n      const o = a.labelIcon ? 12 : 0;\n      return a.value = this.valueFormatter(a.value, a.label), a.label && a.label.length + o > i && (a.label = es(a.label, r, s)), a.value && a.value.length > i && (a.value = es(a.value, r, s)), a;\n    }) : t.map((a) => (a.value = this.valueFormatter(a.value, a.label), a));\n  }\n  getTooltipHTML(t) {\n    return \'<ul class="multi-tooltip">\' + t.map(\n      (n) => `<li>\n\t\t\t\t\t<div class="datapoint-tooltip${n.bold ? " bold" : ""}">\n\t\t\t\t\t\t${n.class || n.color ? `<div class="tooltip-color ${n.class}"></div>` : ""}\n\t\t\t\t\t\t<div class="label">\n\t\t\t\t\t\t<p>${n.label || ""}</p>\n\t\t\t\t\t\t${n.labelIcon ? `<span class="label-icon"/>${n.labelIcon}</span>` : ""}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t${n.value === void 0 || n.value === null ? "" : `<p class="value"/>${n.value}</p>`}\n\t\t\t\t\t</div>\n\t\t\t\t</li>`\n    ).join("") + "</ul>";\n  }\n  isDate(t) {\n    return t instanceof Date;\n  }\n  valueFormatter(t, n) {\n    const r = this.getOptions(), i = y(r, "tooltip", "valueFormatter"), {\n      code: s,\n      number: a,\n      date: o\n    } = y(r, "locale");\n    if (i)\n      return i(t, n);\n    if (this.isDate(t))\n      return o(t, s, { month: "short", day: "numeric", year: "numeric" });\n    try {\n      if (typeof t == "string" && /\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(t)) {\n        const l = new Date(t);\n        return o(l, s, {\n          month: "short",\n          day: "numeric",\n          year: "numeric"\n        });\n      }\n    } catch {\n    }\n    return a(t, s);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !1) {\n    const n = this.getOptions(), r = y(n, "tooltip", "enabled");\n    if (r) {\n      const i = I(this.services.domUtils.getHolder()), s = y(n, "style", "prefix");\n      this.tooltip = N.appendOrSelect(i, `div.${ue}--${s}--tooltip`), this.tooltip.style("max-width", null).attr("role", "tooltip"), this.isEventListenerAdded || (this.addTooltipEventListener(), this.isEventListenerAdded = !0), this.tooltip.classed("hidden", !0);\n    } else !r && this.isEventListenerAdded && (this.removeTooltipEventListener(), this.isEventListenerAdded = !1);\n  }\n  addOffsetByPlacement(t, n, r) {\n    const i = Object.assign({}, t);\n    return n == Vt.LEFT ? i.left -= r : n == Vt.RIGHT ? i.left += r : n == Vt.TOP ? i.top -= r : n == Vt.BOTTOM && (i.top += r), i;\n  }\n  positionTooltip(t) {\n    const n = this.services.domUtils.getHolder(), r = n.offsetWidth, i = n.offsetHeight, s = this.tooltip.node(), a = this.getOptions(), o = y(a, "zoomBar", "top", "enabled"), l = !!y(t, "detail", "noWrap"), c = Array.isArray(y(t, "detail", "placements")), u = c ? y(t, "detail", "placements") : [Vt.RIGHT, Vt.LEFT, Vt.TOP, Vt.BOTTOM];\n    let d, { horizontalOffset: h } = Ih;\n    const { defaultOffset: p } = Ih;\n    if (this.tooltip.select("div.title-tooltip").classed("title-tooltip-nowrap", l), c) {\n      const m = y(t, "detail", "event", "target"), v = this.services.domUtils.getElementOffset(m, !0);\n      d = this.positionService.findBestPlacementAt(\n        v,\n        s,\n        u,\n        () => ({\n          top: 0,\n          left: 0,\n          width: r,\n          height: i\n        })\n      );\n      let x = this.positionService.findPosition(\n        m,\n        s,\n        d,\n        () => this.services.domUtils.getElementOffset(m)\n      );\n      x = this.addOffsetByPlacement(x, d, p), this.positionService.setElement(s, x);\n      return;\n    }\n    let f = y(t, "detail", "mousePosition");\n    if (!f)\n      f = rr(y(t, "detail", "event"), n);\n    else {\n      const m = y(a, "zoomBar", "top", "type"), v = ye.height[m];\n      o && (f[1] += v + ye.spacerHeight);\n    }\n    f[0] / r > 0.9 ? d = Vt.LEFT : f[0] / r < 0.1 ? d = Vt.RIGHT : d = this.positionService.findBestPlacementAt(\n      {\n        left: f[0],\n        top: f[1]\n      },\n      s,\n      u,\n      () => ({\n        top: void 0,\n        // properties were never set to optional (probably should)\n        left: void 0,\n        // ditto\n        width: r,\n        height: i\n      })\n    ), d === Vt.LEFT && (h *= -1);\n    const g = this.positionService.findPositionAt(\n      {\n        left: f[0] + h,\n        top: f[1]\n      },\n      s,\n      d\n    );\n    this.positionService.setElement(s, g);\n  }\n}\nconst yv = class ia extends mt {\n  constructor() {\n    super(...arguments), this.type = "grid-brush", this.renderType = rt.SVG, this.selectionSelector = "rect.selection", this.frontSelectionSelector = "rect.frontSelection";\n  }\n  // needs to match the class name in _grid-brush.scss\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = this.parent, r = this.getComponentContainer({\n      isPresentational: !0\n    });\n    if (!n) throw new Error("SVG was not defined");\n    const i = N.appendOrSelect(\n      n,\n      "svg.chart-grid-backdrop"\n    ), s = N.appendOrSelect(i, `g.${this.type}`), a = N.appendOrSelect(s, this.selectionSelector), { width: o, height: l } = N.getSVGElementSize(i, {\n      useAttrs: !0\n    }), { cartesianScales: c } = this.services, u = c.getMainXScaleType(), d = c.getMainXScale(), [h] = d.range();\n    r.attr("transform", `translate(${h},0)`);\n    const p = N.appendOrSelect(r, this.frontSelectionSelector);\n    if (d && u === et.TIME) {\n      let f = this.model.get("zoomDomain");\n      f === void 0 && (f = this.services.zoom.getDefaultZoomBarDomain(), f && this.model.set({ zoomDomain: f }, { animate: !1 }));\n      const g = (b) => {\n        const S = b[1] - b[0];\n        let M = "0," + S.toString();\n        const D = Math.floor(l / ia.DASH_LENGTH), A = D * ia.DASH_LENGTH;\n        for (let R = 0; R < D; R++)\n          M += "," + ia.DASH_LENGTH;\n        M += "," + (l - A), D % 2 === 1 && (M += ",0"), M += "," + S.toString(), M += "," + l.toString(), p.attr("stroke-dasharray", M);\n      }, m = (b) => {\n        const S = b.selection;\n        S === null || S[0] === S[1] || (p.attr("x", parseFloat(a.attr("x")) + parseFloat(i.attr("x"))).attr("y", a.attr("y")).attr("width", a.attr("width")).attr("height", a.attr("height")).style("cursor", "pointer").style("display", null), g(S));\n      }, v = (b, S) => {\n        const M = eg().range([0, o]).domain(f);\n        let D = [M.invert(b), M.invert(S)];\n        D[0].valueOf() === D[1].valueOf() && (D = this.services.zoom.getDefaultZoomBarDomain()), (f[0].valueOf() !== D[0].valueOf() || f[1].valueOf() !== D[1].valueOf()) && this.services.zoom.handleDomainChange(D);\n      };\n      let x;\n      const _ = (b) => {\n        const S = b.selection;\n        S !== null && (v(S[0], S[1]), s.call(x.move, null), p.style("display", "none"));\n      };\n      l != 0 && o != 0 && (x = kg().extent([\n        [0, 0],\n        [o - 1, l]\n      ]).on("start brush end", m).on("end.brushed", _), s.call(x));\n      const E = this.services.zoom.getZoomRatio();\n      i.on("click", function(b) {\n        if (b.shiftKey) {\n          const S = this.services.domUtils.getHolder(), M = rr(s.node(), S)[0];\n          let D = M - o * E / 2;\n          D < 0 && (D = 0);\n          let A = M + o * E / 2;\n          A > o && (A = o), v(D, A);\n        }\n      });\n    }\n  }\n};\nyv.DASH_LENGTH = 4;\nlet Gk = yv;\nclass zk extends mt {\n  constructor() {\n    super(...arguments), this.type = "zoom-bar", this.renderType = rt.SVG, this.MIN_SELECTION_DIFF = 9e-10, this.brushSelector = "g.zoom-bar-brush", this.clipId = "zoomBarClip-" + Math.floor(Math.random() * 99999999999), this.brush = kg(), this.highlightStrokeWidth = 1;\n  }\n  init() {\n    this.services.events.addEventListener(T.ZoomBar.UPDATE, this.render.bind(this));\n    const t = y(this.getOptions(), "zoomBar", G.TOP, "data");\n    this.model.setZoomBarData(t);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = this.getComponentContainer({\n      ariaLabel: "zoom bar"\n    }), r = this.services.zoom.isZoomBarLoading(G.TOP), i = this.services.zoom.isZoomBarLocked(G.TOP), s = y(this.getOptions(), "zoomBar", G.TOP, "type"), a = y(this.getOptions(), "axes", G.BOTTOM, "highlights"), o = ye.height[s], { width: l } = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    });\n    if (l === 0)\n      return;\n    let c = 0;\n    const u = this.model.get("axesMargins");\n    u && u.left && (c = u.left);\n    const d = N.appendOrSelect(n, "svg.zoom-container").attr("width", "100%").attr("height", o).attr("opacity", 1);\n    if (N.appendOrSelect(n, "rect.zoom-spacer").attr("x", 0).attr("y", o).attr("width", "100%").attr("height", ye.spacerHeight).attr("opacity", 1).attr("fill", "none"), s === Ke.GRAPH_VIEW ? N.appendOrSelect(d, "rect.zoom-bg").attr("x", c).attr("y", 0).attr("width", l - c).attr("height", "100%").classed("zoom-bg-skeleton", r).style(\n      "stroke",\n      r ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null\n    ) : s === Ke.SLIDER_VIEW && N.appendOrSelect(d, "rect.zoom-slider-bg").attr("x", c).attr("y", o / 2 - 1).attr("width", l - c).attr("height", 2).classed("zoom-slider-bg-skeleton", r).style(\n      "stroke",\n      r ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null\n    ), r) {\n      this.renderSkeleton(d, c, l);\n      return;\n    }\n    const { cartesianScales: h } = this.services, p = h.getMainXScale(), f = h.getMainYScale(), g = h.getMainXScaleType();\n    if (p && g === et.TIME) {\n      let m = this.services.zoom.getZoomBarData();\n      if (Be(m) || m.length === 1)\n        return;\n      this.xScale = p.copy(), this.yScale = f.copy();\n      const v = this.services.zoom.getDefaultZoomBarDomain(m);\n      m = this.compensateDataForDefaultDomain(m, v);\n      const x = this.model.get("initialZoomDomain"), _ = y(\n        this.getOptions(),\n        "zoomBar",\n        G.TOP,\n        "initialZoomDomain"\n      );\n      _ && _[0] && _[1] && (_[0] = new Date(_[0]), _[1] = new Date(_[1])), _ && !(x && x[0].valueOf() === _[0].valueOf() && x[1].valueOf() === _[1].valueOf()) ? this.model.set(\n        {\n          // use a new object instead of newInitialZoomDomain\n          initialZoomDomain: at([], _),\n          zoomDomain: _ ? at([], _) : v\n        },\n        { skipUpdate: !0 }\n      ) : _ === null && x !== null && this.model.set(\n        {\n          initialZoomDomain: null,\n          zoomDomain: at([], v)\n        },\n        { skipUpdate: !0 }\n      ), this.xScale.range([c, l]).domain(v), this.maxSelectionRange = this.xScale.range(), this.yScale.range([0, o - 6]).domain(ze(m, (S) => S.value));\n      const E = this.model.get("zoomDomain");\n      if (s === Ke.GRAPH_VIEW && (this.renderZoomBarArea(d, "path.zoom-graph-area-unselected", m, null), this.updateClipPath(n, this.clipId, 0, 0, 0, 0), this.renderZoomBarArea(d, "path.zoom-graph-area", m, this.clipId), this.renderZoomBarBaseline(d, c, l), a)) {\n        const S = a.highlightStartMapsTo, M = a.highlightEndMapsTo, D = a.color, A = a.labelMapsTo;\n        a.data.forEach((R, $) => {\n          N.appendOrSelect(d, `rect.highlight-${$}`).attr("height", o - 2 * this.highlightStrokeWidth).attr("y", this.highlightStrokeWidth).attr("x", this.xScale(R[S])).attr(\n            "width",\n            this.xScale(R[M]) - this.xScale(R[S])\n          ).style(\n            "fill",\n            D && D.scale[R[A]] ? D.scale[R[A]] : null\n          ).style("fill-opacity", 0.1).style(\n            "stroke",\n            D && D.scale[R[A]] ? D.scale[R[A]] : null\n          ).style("stroke-dasharray", "2, 2").attr("stroke-width", "1px");\n        });\n      }\n      this.addBrushEventListener(E, c, l);\n      const b = N.appendOrSelect(n, this.brushSelector).call(this.brush);\n      if (E !== void 0) if (E[0].valueOf() === E[1].valueOf())\n        b.call(this.brush.move, this.xScale.range()), this.updateBrushHandle(this.getComponentContainer(), this.xScale.range());\n      else {\n        const S = E.map((M) => this.xScale(M));\n        S[1] - S[0] < this.MIN_SELECTION_DIFF || (b.call(this.brush.move, S), this.updateBrushHandle(this.getComponentContainer(), S));\n      }\n      i && (this.brush.filter(() => !1), b.selectAll("rect").attr("cursor", "auto"));\n    }\n  }\n  addBrushEventListener(t, n, r) {\n    const i = (o) => {\n      const l = o.selection;\n      l === null ? this.handleBrushedEvent(o, t, this.xScale, this.xScale.range()) : l[0] === l[1] || this.handleBrushedEvent(o, t, this.xScale, l);\n    }, s = y(this.getOptions(), "zoomBar", G.TOP, "type"), a = ye.height[s];\n    this.brush.extent([\n      [n, 0],\n      [r, a]\n    ]).on("start brush end", null).on("start brush end", i);\n  }\n  // brush event listener\n  handleBrushedEvent(t, n, r, i) {\n    const s = [r.invert(i[0]), r.invert(i[1])];\n    if (this.updateBrushHandle(this.getComponentContainer(), i), t.sourceEvent != null && (t.sourceEvent.type === "mousemove" || t.sourceEvent.type === "mouseup" || t.sourceEvent.type === "mousedown" || t.sourceEvent.type === "touchstart" || t.sourceEvent.type === "touchmove" || t.sourceEvent.type === "touchend")) {\n      (n === void 0 || n[0] !== s[0] || n[1] !== s[1]) && this.services.zoom.handleDomainChange(s, {\n        dispatchEvent: !1\n      });\n      let a;\n      t.type === "start" ? a = T.ZoomBar.SELECTION_START : t.type === "brush" ? a = T.ZoomBar.SELECTION_IN_PROGRESS : t.type === "end" && (a = T.ZoomBar.SELECTION_END, this.services.events.dispatchEvent(T.ZoomDomain.CHANGE, {\n        newDomain: s\n      })), this.services.events.dispatchEvent(a, {\n        selection: i,\n        newDomain: s\n      });\n    }\n  }\n  updateBrushHandle(t, n) {\n    const r = this, i = ye.handleWidth, s = y(this.getOptions(), "zoomBar", G.TOP, "type"), a = ye.height[s], o = -i / 2, l = ye.handleBarWidth, c = s === Ke.GRAPH_VIEW ? ye.handleBarHeight : 6, u = -l / 2, d = (a - c) / 2;\n    t.select(this.brushSelector).selectAll("rect.handle").data([{ type: "w" }, { type: "e" }]).attr("x", function(p) {\n      if (p.type === "w")\n        return Math.max(n[0] + o, r.maxSelectionRange[0]);\n      if (p.type === "e")\n        return Math.min(n[1] + o, r.maxSelectionRange[1] - i);\n    }).attr("y", 0).attr("width", i).attr("height", a).attr("cursor", "ew-resize").style("display", null);\n    const h = t.select(this.brushSelector).selectAll("rect.handle-bar").data([{ type: "w" }, { type: "e" }]);\n    h.enter().append("rect").attr("class", function(p) {\n      return "handle-bar handle-bar--" + p.type;\n    }), h.attr("x", function(p) {\n      if (p.type === "w")\n        return Math.max(\n          n[0] + u,\n          r.maxSelectionRange[0] - o + u\n        );\n      if (p.type === "e")\n        return Math.min(\n          n[1] + u,\n          r.maxSelectionRange[1] + o + u\n        );\n    }).attr("y", d).attr("width", l).attr("height", c).attr("cursor", "ew-resize"), s === Ke.SLIDER_VIEW && this.updateSliderSelectedArea(n), this.updateClipPath(\n      t,\n      this.clipId,\n      n[0],\n      0,\n      n[1] - n[0],\n      a\n    );\n  }\n  updateSliderSelectedArea(t) {\n    const n = y(this.getOptions(), "zoomBar", G.TOP, "type"), r = ye.height[n], i = this.getComponentContainer().select("svg.zoom-container");\n    N.appendOrSelect(i, "rect.zoom-slider-selected-area").attr("x", t[0]).attr("y", r / 2 - 1).attr("width", t[1] - t[0]).attr("height", 2);\n  }\n  renderZoomBarArea(t, n, r, i) {\n    const { cartesianScales: s } = this.services, a = s.getMainXAxisPosition(), o = s.getMainYAxisPosition(), l = s.getMainXScaleType(), c = s.getMainYScaleType(), u = (v, x, _) => (E) => s.getValueFromScale(v, x, _, E), d = u(this.xScale, l, a), h = u(this.yScale, c, o), p = y(this.getOptions(), "zoomBar", G.TOP, "type"), f = ye.height[p], g = au().x((v) => d(v)).y0(f).y1((v) => f - h(v)), m = N.appendOrSelect(t, n).datum(r).attr("d", g);\n    i && m.attr("clip-path", `url(#${i})`);\n  }\n  updateClipPath(t, n, r, i, s, a) {\n    const o = N.appendOrSelect(t, "clipPath").attr("id", n);\n    N.appendOrSelect(o, "rect").attr("x", r).attr("y", i).attr("width", s).attr("height", a);\n  }\n  // assume the domains in data are already sorted\n  compensateDataForDefaultDomain(t, n) {\n    if (!t || t.length < 2)\n      return;\n    const r = Sn(t), i = this.services.cartesianScales.getDomainIdentifier(), s = this.services.cartesianScales.getRangeIdentifier();\n    if (Number(n[0]) < Number(r[0][i])) {\n      const a = {};\n      a[i] = n[0], a[s] = 0, r.unshift(a);\n    }\n    if (Number(n[1]) > Number(r[r.length - 1][i])) {\n      const a = {};\n      a[i] = n[1], a[s] = 0, r.push(a);\n    }\n    return r;\n  }\n  renderZoomBarBaseline(t, n, r, i = !1) {\n    const s = y(\n      this.model.getOptions(),\n      "zoomBar",\n      G.TOP,\n      "type"\n    ), a = ye.height[s], o = xs()([\n      [n, a],\n      [r, a]\n    ]);\n    N.appendOrSelect(t, "path.zoom-bg-baseline").attr("d", o).classed("zoom-bg-baseline-skeleton", i).style(\n      "stroke",\n      i ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null\n    );\n  }\n  renderSkeleton(t, n, r) {\n    this.renderZoomBarArea(t, "path.zoom-graph-area-unselected", [], null), this.renderZoomBarArea(t, "path.zoom-graph-area", [], this.clipId), this.brush.on("start brush end", null), N.appendOrSelect(this.getComponentContainer(), this.brushSelector).html(null), y(this.getOptions(), "zoomBar", G.TOP, "type") === Ke.GRAPH_VIEW && this.renderZoomBarBaseline(t, n, r, !0);\n  }\n  destroy() {\n    this.brush.on("start brush end", null), this.services.events.removeEventListener(T.ZoomBar.UPDATE, this.render.bind(this));\n  }\n}\nclass Fk extends mt {\n  constructor(t, n) {\n    super(t, n), this.type = "threshold", this.renderType = rt.SVG, this.positionService = new mo();\n  }\n  render(t = !1) {\n    const n = y(this.getOptions(), "axes"), r = [];\n    Object.keys(n).forEach((c) => {\n      if (Object.values(G).includes(c)) {\n        const u = n[c];\n        u.thresholds && u.thresholds.length > 0 && r.push({\n          axisPosition: c,\n          thresholds: u.thresholds,\n          correspondingDatasets: u == null ? void 0 : u.correspondingDatasets,\n          mapsTo: u == null ? void 0 : u.mapsTo\n        });\n      }\n    });\n    const i = this.getComponentContainer({\n      ariaLabel: "threshold lines",\n      withinChartClip: !0\n    }).selectAll("g.axis-thresholds").data(r, (c) => c.axisPosition);\n    i.exit().attr("opacity", 0).remove();\n    const s = i.enter().append("g").merge(i);\n    s.attr("class", (c) => `axis-thresholds ${c.axisPosition}`);\n    const a = s.selectAll("g.threshold-group").data(\n      (c) => c.thresholds.map((u) => (u.axisPosition = c.axisPosition, u.datum = this.constructDatumObj(c, u), u))\n    );\n    a.exit().attr("opacity", 0).remove();\n    const o = a.enter().append("g");\n    o.append("line").attr("class", "threshold-line"), o.append("rect").attr("class", "threshold-hoverable-area"), o.merge(a).attr("class", "threshold-group");\n    const l = this;\n    s.each(function({ axisPosition: c }) {\n      const u = l.services.cartesianScales.getScaleByPosition(\n        c\n      ), d = l.services.cartesianScales.getScaleTypeByPosition(c);\n      let h = null, p = null;\n      c === G.LEFT || c === G.RIGHT ? (p = u, h = l.services.cartesianScales.getMainXScale()) : (h = u, p = l.services.cartesianScales.getMainYScale());\n      const f = d === et.LABELS, [g, m] = h.range(), [v, x] = p.range(), { cartesianScales: _ } = l.services, E = _.getOrientation(), b = (R) => _.getDomainValue(R), S = (R) => _.getRangeValue(R), [M, D] = En(\n        b,\n        S,\n        E\n      ), A = I(this);\n      c === G.TOP || c === G.BOTTOM ? (A.selectAll("line.threshold-line").transition().call(\n        (R) => l.services.transitions.setupTransition({\n          transition: R,\n          name: "threshold-line-update",\n          animate: t\n        })\n      ).attr("y1", x).attr("y2", v).attr(\n        "x1",\n        ({ datum: R }) => M(R) + (f ? u.step() / 2 : 0)\n      ).attr(\n        "x2",\n        ({ datum: R }) => M(R) + (f ? u.step() / 2 : 0)\n      ).style("stroke", ({ fillColor: R }) => R), A.selectAll("rect.threshold-hoverable-area").attr("x", 0).attr("y", ({ datum: R }) => -M(R)).attr("width", Math.abs(v - x)).classed("rotate", !0)) : (A.selectAll("line.threshold-line").transition().call(\n        (R) => l.services.transitions.setupTransition({\n          transition: R,\n          name: "threshold-line-update",\n          animate: t\n        })\n      ).attr("x1", g).attr("x2", m).attr(\n        "y1",\n        ({ datum: R }) => D(R) + (f ? u.step() / 2 : 0)\n      ).attr(\n        "y2",\n        ({ datum: R }) => D(R) + (f ? u.step() / 2 : 0)\n      ).style("stroke", ({ fillColor: R }) => R), A.selectAll("rect.threshold-hoverable-area").attr("x", g).attr("y", ({ datum: R }) => D(R)).attr("width", Math.abs(m - g)).classed("rotate", !1));\n    }), this.services.events.addEventListener(T.Threshold.SHOW, (c) => {\n      this.setThresholdLabelPosition(c.detail), this.label.classed("hidden", !1);\n    }), this.services.events.addEventListener(T.Threshold.HIDE, () => {\n      this.label.classed("hidden", !0);\n    }), this.appendThresholdLabel(), this.addEventListeners();\n  }\n  getFormattedValue(t) {\n    const { value: n, axisPosition: r } = t, i = this.getOptions(), s = this.services.cartesianScales.getScaleTypeByPosition(r), { code: a, number: o } = y(i, "locale");\n    if (s === et.TIME) {\n      const l = [G.LEFT, G.RIGHT].includes(r), c = this.services.cartesianScales.getMainXScale(), u = this.services.cartesianScales.getMainYScale(), d = l ? u : c, h = y(i, "timeScale"), p = Dl(\n        d.ticks(),\n        y(h, "timeInterval")\n      );\n      return kl(n, 0, d.ticks(), p, h, i.locale);\n    }\n    return o(n, a);\n  }\n  appendThresholdLabel() {\n    const t = I(this.services.domUtils.getHolder()), n = y(this.getOptions(), "style", "prefix");\n    this.label = N.appendOrSelect(\n      t,\n      `div.${ue}--${n}--threshold--label`\n    ).classed("hidden", !0);\n  }\n  setThresholdLabelPosition({ event: t, datum: n }) {\n    const r = this.services.domUtils.getHolder(), i = rr(t, r), s = n.valueFormatter ? n.valueFormatter(n.value) : this.getFormattedValue(n);\n    this.label.html(en(`${n.label || "Threshold"}: ${s}`)).style("background-color", n.fillColor);\n    const a = this.label.node(), o = this.positionService.findBestPlacementAt(\n      {\n        left: i[0],\n        top: i[1]\n      },\n      a,\n      [Vt.RIGHT, Vt.LEFT, Vt.TOP, Vt.BOTTOM],\n      () => ({\n        top: void 0,\n        // other package lists this as non-optional\n        left: void 0,\n        // ditto\n        width: r.offsetWidth,\n        height: r.offsetHeight\n      })\n    ), l = this.positionService.findPositionAt(\n      {\n        left: i[0],\n        top: i[1]\n      },\n      a,\n      o\n    );\n    this.positionService.setElement(a, l);\n  }\n  // Constructs object to pass in scale functions\n  constructDatumObj(t, n) {\n    const r = {};\n    return t.correspondingDatasets && (r.group = y(t, "correspondingDatasets", 0)), r[t.mapsTo] = n.value, r;\n  }\n  addEventListeners() {\n    const t = this;\n    this.getComponentContainer({ withinChartClip: !0 }).selectAll("rect.threshold-hoverable-area").on("mouseover mousemove", function(n) {\n      I(this.parentNode).select("line.threshold-line").classed("active", !0), t.services.events.dispatchEvent(T.Threshold.SHOW, {\n        event: n,\n        hoveredElement: I(this),\n        datum: I(this).datum()\n      });\n    }).on("mouseout", function(n) {\n      I(this.parentNode).select("line.threshold-line").classed("active", !1), t.services.events.dispatchEvent(T.Threshold.HIDE, {\n        event: n,\n        hoveredElement: I(this),\n        datum: I(this).datum()\n      });\n    });\n  }\n}\nclass jk extends mt {\n  constructor(t, n) {\n    super(t, n), this.type = "highlight", this.renderType = rt.SVG, this.positionService = new mo(), this.highlightStrokeWidth = 1;\n  }\n  render(t = !1) {\n    const n = y(this.getOptions(), "axes"), r = [];\n    Object.keys(n).forEach((c) => {\n      if (Object.values(G).includes(c)) {\n        const u = n[c];\n        u.highlights && u.highlights.data.length > 0 && r.push({\n          axisPosition: c,\n          highlightStartMapsTo: u.highlights.highlightStartMapsTo,\n          highlightEndMapsTo: u.highlights.highlightEndMapsTo,\n          labelMapsTo: u.highlights.labelMapsTo,\n          highlight: u.highlights.data,\n          color: u.highlights.color\n        });\n      }\n    });\n    const i = this.getComponentContainer({\n      ariaLabel: "highlight areas",\n      withinChartClip: !0\n    }).selectAll("g.axis-highlight").data(r, (c) => c.axisPosition);\n    i.exit().attr("opacity", 0).remove();\n    const s = i.enter().append("g").merge(i);\n    s.attr("class", (c) => `axis-highlight ${c.axisPosition}`);\n    const a = s.selectAll("g.highlight-group").data(\n      (c) => c.highlight.map((u) => (u.axisPosition = c.axisPosition, u.highlightStartMapsTo = c.highlightStartMapsTo, u.labelMapsTo = c.labelMapsTo, u.color = c.color, u.highlightEndMapsTo = c.highlightEndMapsTo, u))\n    );\n    a.exit().attr("opacity", 0).remove();\n    const o = a.enter().append("g");\n    o.append("rect").attr("class", "highlight-bar"), o.append("line").attr("class", "highlight-line"), o.merge(a).attr("class", "highlight-group");\n    const l = this;\n    s.each(function({ axisPosition: c }) {\n      const u = l.services.cartesianScales.getMainXScale(), d = l.services.cartesianScales.getMainYScale(), [h, p] = u.range(), [f, g] = d.range(), { cartesianScales: m } = l.services, v = m.getOrientation(), x = (M) => m.getDomainValue(M), _ = (M) => m.getRangeValue(M), [E, b] = En(\n        x,\n        _,\n        v\n      ), S = I(this);\n      c === G.TOP || c === G.BOTTOM ? S.selectAll("rect.highlight-bar").transition().call(\n        (M) => l.services.transitions.setupTransition({\n          transition: M,\n          name: "highlight-bar-update",\n          animate: t\n        })\n      ).attr("y", Math.max(g + l.highlightStrokeWidth, 0)).attr("height", Math.max(f - 2 * l.highlightStrokeWidth, 0)).attr("x", ({ highlightStartMapsTo: M, ...D }) => E(D[M])).attr(\n        "width",\n        ({ highlightStartMapsTo: M, highlightEndMapsTo: D, ...A }) => Math.max(E(A[D]) - E(A[M]), 0)\n      ).style("stroke", ({ color: M, labelMapsTo: D, ...A }) => M && M.scale[A[D]] ? M.scale[A[D]] : null).style("stroke-dasharray", "2, 2").attr("stroke-width", l.highlightStrokeWidth + "px").style("fill-opacity", 0.1).style("fill", ({ color: M, labelMapsTo: D, ...A }) => M && M.scale[A[D]] ? M.scale[A[D]] : null) : S.selectAll("rect.highlight-bar").transition().call(\n        (M) => l.services.transitions.setupTransition({\n          transition: M,\n          name: "highlight-bar-update",\n          animate: t\n        })\n      ).attr("x", h).attr("width", Math.max(p - h, 0)).attr("y", ({ highlightEndMapsTo: M, ...D }) => b(D[M])).attr(\n        "height",\n        ({ highlightStartMapsTo: M, highlightEndMapsTo: D, ...A }) => Math.max(b(A[M]) - b(A[D]), 0)\n      ).style("stroke", ({ color: M, labelMapsTo: D, ...A }) => M && M.scale[A[D]] ? M.scale[A[D]] : null).style("stroke-dasharray", "2, 2").attr("stroke-width", l.highlightStrokeWidth + "px").style("fill-opacity", 0.1).style("fill", ({ color: M, labelMapsTo: D, ...A }) => M && M.scale[A[D]] ? M.scale[A[D]] : null);\n    });\n  }\n}\nclass xv extends cu {\n  getItems(t) {\n    if (t.detail.items)\n      return t.detail.items;\n    const { data: n } = t.detail;\n    if (!n || !n.length || !n[0])\n      return [];\n    const r = this.getOptions(), { cartesianScales: i } = this.services, s = i.getDomainIdentifier(), a = i.isDualAxes(), { groupMapsTo: o } = r.data, l = i.getDomainLabel();\n    let c = i.getRangeLabel();\n    const u = n[0][s];\n    let d;\n    if (n.length === 1) {\n      const h = n[0], p = i.getRangeIdentifier(h);\n      if (a) {\n        const g = i.getRangeAxisPosition({\n          datum: h,\n          groups: [h[o]]\n        });\n        c = i.getScaleLabel(g);\n      }\n      const f = h[p];\n      d = [\n        {\n          label: l,\n          value: u\n        },\n        ...Array.isArray(f) && f.length === 2 ? [\n          {\n            label: "Start",\n            value: f[0]\n          },\n          {\n            label: "End",\n            value: f[1]\n          }\n        ] : [\n          {\n            label: c,\n            value: h[p]\n          }\n        ]\n      ], t.detail.additionalItems && t.detail.additionalItems.forEach(\n        (g) => d.push({\n          label: g.label,\n          value: g.value\n        })\n      ), d.push({\n        label: gt(r, "locale.translations.group") || gt(r, "tooltip.groupLabel"),\n        value: h[o],\n        color: this.model.getFillColor(h[o]),\n        class: this.model.getColorClassName({\n          classNameTypes: [it.TOOLTIP],\n          dataGroupName: h[o]\n        })\n      });\n    } else if (n.length > 1 && (d = [\n      {\n        label: l,\n        value: u\n      }\n    ], d = d.concat(\n      n.map((h) => {\n        const p = h[i.getRangeIdentifier(h)];\n        return {\n          label: h[o],\n          value: Array.isArray(p) && p.length === 2 ? `${p[0]} - ${p[1]}` : p,\n          color: this.model.getFillColor(h[o]),\n          class: this.model.getColorClassName({\n            classNameTypes: [it.TOOLTIP],\n            dataGroupName: h[o]\n          })\n        };\n      }).sort((h, p) => p.value - h.value)\n    ), !a && y(r, "tooltip", "showTotal") === !0)) {\n      const h = i.getRangeIdentifier();\n      d.push({\n        label: gt(r, "locale.translations.total") || gt(r, "tooltip.totalLabel") || "Total",\n        value: n.reduce(\n          (p, f) => p + f[h],\n          0\n        ),\n        bold: !0\n      });\n    }\n    return d;\n  }\n}\nfunction op(e, t) {\n  let n;\n  if (t === void 0)\n    for (const r of e)\n      r != null && (n < r || n === void 0 && r >= r) && (n = r);\n  else {\n    let r = -1;\n    for (let i of e)\n      (i = t(i, ++r, e)) != null && (n < i || n === void 0 && i >= i) && (n = i);\n  }\n  return n;\n}\nfunction Wk(e, t) {\n  let n;\n  if (t === void 0)\n    for (const r of e)\n      r != null && (n > r || n === void 0 && r >= r) && (n = r);\n  else {\n    let r = -1;\n    for (let i of e)\n      (i = t(i, ++r, e)) != null && (n > i || n === void 0 && i >= i) && (n = i);\n  }\n  return n;\n}\nfunction ll(e, t) {\n  let n = 0;\n  if (t === void 0)\n    for (let r of e)\n      (r = +r) && (n += r);\n  else {\n    let r = -1;\n    for (let i of e)\n      (i = +t(i, ++r, e)) && (n += i);\n  }\n  return n;\n}\nfunction qk(e) {\n  return e.depth;\n}\nfunction Yk(e, t) {\n  return t - 1 - e.height;\n}\nfunction bv(e, t) {\n  return e.sourceLinks.length ? e.depth : t - 1;\n}\nfunction zs(e) {\n  return function() {\n    return e;\n  };\n}\nfunction lp(e, t) {\n  return Pa(e.source, t.source) || e.index - t.index;\n}\nfunction cp(e, t) {\n  return Pa(e.target, t.target) || e.index - t.index;\n}\nfunction Pa(e, t) {\n  return e.y0 - t.y0;\n}\nfunction cl(e) {\n  return e.value;\n}\nfunction Xk(e) {\n  return e.index;\n}\nfunction Zk(e) {\n  return e.nodes;\n}\nfunction Kk(e) {\n  return e.links;\n}\nfunction up(e, t) {\n  const n = e.get(t);\n  if (!n) throw new Error("missing: " + t);\n  return n;\n}\nfunction hp({ nodes: e }) {\n  for (const t of e) {\n    let n = t.y0, r = n;\n    for (const i of t.sourceLinks)\n      i.y0 = n + i.width / 2, n += i.width;\n    for (const i of t.targetLinks)\n      i.y1 = r + i.width / 2, r += i.width;\n  }\n}\nfunction Qk() {\n  let e = 0, t = 0, n = 1, r = 1, i = 24, s = 8, a, o = Xk, l = bv, c, u, d = Zk, h = Kk, p = 6;\n  function f() {\n    const O = { nodes: d.apply(null, arguments), links: h.apply(null, arguments) };\n    return g(O), m(O), v(O), x(O), b(O), hp(O), O;\n  }\n  f.update = function(O) {\n    return hp(O), O;\n  }, f.nodeId = function(O) {\n    return arguments.length ? (o = typeof O == "function" ? O : zs(O), f) : o;\n  }, f.nodeAlign = function(O) {\n    return arguments.length ? (l = typeof O == "function" ? O : zs(O), f) : l;\n  }, f.nodeSort = function(O) {\n    return arguments.length ? (c = O, f) : c;\n  }, f.nodeWidth = function(O) {\n    return arguments.length ? (i = +O, f) : i;\n  }, f.nodePadding = function(O) {\n    return arguments.length ? (s = a = +O, f) : s;\n  }, f.nodes = function(O) {\n    return arguments.length ? (d = typeof O == "function" ? O : zs(O), f) : d;\n  }, f.links = function(O) {\n    return arguments.length ? (h = typeof O == "function" ? O : zs(O), f) : h;\n  }, f.linkSort = function(O) {\n    return arguments.length ? (u = O, f) : u;\n  }, f.size = function(O) {\n    return arguments.length ? (e = t = 0, n = +O[0], r = +O[1], f) : [n - e, r - t];\n  }, f.extent = function(O) {\n    return arguments.length ? (e = +O[0][0], n = +O[1][0], t = +O[0][1], r = +O[1][1], f) : [[e, t], [n, r]];\n  }, f.iterations = function(O) {\n    return arguments.length ? (p = +O, f) : p;\n  };\n  function g({ nodes: O, links: w }) {\n    for (const [k, U] of O.entries())\n      U.index = k, U.sourceLinks = [], U.targetLinks = [];\n    const L = new Map(O.map((k, U) => [o(k, U, O), k]));\n    for (const [k, U] of w.entries()) {\n      U.index = k;\n      let { source: Z, target: j } = U;\n      typeof Z != "object" && (Z = U.source = up(L, Z)), typeof j != "object" && (j = U.target = up(L, j)), Z.sourceLinks.push(U), j.targetLinks.push(U);\n    }\n    if (u != null)\n      for (const { sourceLinks: k, targetLinks: U } of O)\n        k.sort(u), U.sort(u);\n  }\n  function m({ nodes: O }) {\n    for (const w of O)\n      w.value = w.fixedValue === void 0 ? Math.max(ll(w.sourceLinks, cl), ll(w.targetLinks, cl)) : w.fixedValue;\n  }\n  function v({ nodes: O }) {\n    const w = O.length;\n    let L = new Set(O), k = /* @__PURE__ */ new Set(), U = 0;\n    for (; L.size; ) {\n      for (const Z of L) {\n        Z.depth = U;\n        for (const { target: j } of Z.sourceLinks)\n          k.add(j);\n      }\n      if (++U > w) throw new Error("circular link");\n      L = k, k = /* @__PURE__ */ new Set();\n    }\n  }\n  function x({ nodes: O }) {\n    const w = O.length;\n    let L = new Set(O), k = /* @__PURE__ */ new Set(), U = 0;\n    for (; L.size; ) {\n      for (const Z of L) {\n        Z.height = U;\n        for (const { source: j } of Z.targetLinks)\n          k.add(j);\n      }\n      if (++U > w) throw new Error("circular link");\n      L = k, k = /* @__PURE__ */ new Set();\n    }\n  }\n  function _({ nodes: O }) {\n    const w = op(O, (U) => U.depth) + 1, L = (n - e - i) / (w - 1), k = new Array(w);\n    for (const U of O) {\n      const Z = Math.max(0, Math.min(w - 1, Math.floor(l.call(null, U, w))));\n      U.layer = Z, U.x0 = e + Z * L, U.x1 = U.x0 + i, k[Z] ? k[Z].push(U) : k[Z] = [U];\n    }\n    if (c) for (const U of k)\n      U.sort(c);\n    return k;\n  }\n  function E(O) {\n    const w = Wk(O, (L) => (r - t - (L.length - 1) * a) / ll(L, cl));\n    for (const L of O) {\n      let k = t;\n      for (const U of L) {\n        U.y0 = k, U.y1 = k + U.value * w, k = U.y1 + a;\n        for (const Z of U.sourceLinks)\n          Z.width = Z.value * w;\n      }\n      k = (r - k + a) / (L.length + 1);\n      for (let U = 0; U < L.length; ++U) {\n        const Z = L[U];\n        Z.y0 += k * (U + 1), Z.y1 += k * (U + 1);\n      }\n      H(L);\n    }\n  }\n  function b(O) {\n    const w = _(O);\n    a = Math.min(s, (r - t) / (op(w, (L) => L.length) - 1)), E(w);\n    for (let L = 0; L < p; ++L) {\n      const k = Math.pow(0.99, L), U = Math.max(1 - k, (L + 1) / p);\n      M(w, k, U), S(w, k, U);\n    }\n  }\n  function S(O, w, L) {\n    for (let k = 1, U = O.length; k < U; ++k) {\n      const Z = O[k];\n      for (const j of Z) {\n        let F = 0, Y = 0;\n        for (const { source: Q, value: q } of j.targetLinks) {\n          let tt = q * (j.layer - Q.layer);\n          F += P(Q, j) * tt, Y += tt;\n        }\n        if (!(Y > 0)) continue;\n        let ot = (F / Y - j.y0) * w;\n        j.y0 += ot, j.y1 += ot, $(j);\n      }\n      c === void 0 && Z.sort(Pa), D(Z, L);\n    }\n  }\n  function M(O, w, L) {\n    for (let k = O.length, U = k - 2; U >= 0; --U) {\n      const Z = O[U];\n      for (const j of Z) {\n        let F = 0, Y = 0;\n        for (const { target: Q, value: q } of j.sourceLinks) {\n          let tt = q * (Q.layer - j.layer);\n          F += B(j, Q) * tt, Y += tt;\n        }\n        if (!(Y > 0)) continue;\n        let ot = (F / Y - j.y0) * w;\n        j.y0 += ot, j.y1 += ot, $(j);\n      }\n      c === void 0 && Z.sort(Pa), D(Z, L);\n    }\n  }\n  function D(O, w) {\n    const L = O.length >> 1, k = O[L];\n    R(O, k.y0 - a, L - 1, w), A(O, k.y1 + a, L + 1, w), R(O, r, O.length - 1, w), A(O, t, 0, w);\n  }\n  function A(O, w, L, k) {\n    for (; L < O.length; ++L) {\n      const U = O[L], Z = (w - U.y0) * k;\n      Z > 1e-6 && (U.y0 += Z, U.y1 += Z), w = U.y1 + a;\n    }\n  }\n  function R(O, w, L, k) {\n    for (; L >= 0; --L) {\n      const U = O[L], Z = (U.y1 - w) * k;\n      Z > 1e-6 && (U.y0 -= Z, U.y1 -= Z), w = U.y0 - a;\n    }\n  }\n  function $({ sourceLinks: O, targetLinks: w }) {\n    if (u === void 0) {\n      for (const { source: { sourceLinks: L } } of w)\n        L.sort(cp);\n      for (const { target: { targetLinks: L } } of O)\n        L.sort(lp);\n    }\n  }\n  function H(O) {\n    if (u === void 0)\n      for (const { sourceLinks: w, targetLinks: L } of O)\n        w.sort(cp), L.sort(lp);\n  }\n  function P(O, w) {\n    let L = O.y0 - (O.sourceLinks.length - 1) * a / 2;\n    for (const { target: k, width: U } of O.sourceLinks) {\n      if (k === w) break;\n      L += U + a;\n    }\n    for (const { source: k, width: U } of w.targetLinks) {\n      if (k === O) break;\n      L -= U;\n    }\n    return L;\n  }\n  function B(O, w) {\n    let L = w.y0 - (w.targetLinks.length - 1) * a / 2;\n    for (const { source: k, width: U } of w.targetLinks) {\n      if (k === O) break;\n      L += U + a;\n    }\n    for (const { target: k, width: U } of O.sourceLinks) {\n      if (k === w) break;\n      L -= U;\n    }\n    return L;\n  }\n  return f;\n}\nvar ac = Math.PI, oc = 2 * ac, Zn = 1e-6, Jk = oc - Zn;\nfunction lc() {\n  this._x0 = this._y0 = // start of current subpath\n  this._x1 = this._y1 = null, this._ = "";\n}\nfunction _v() {\n  return new lc();\n}\nlc.prototype = _v.prototype = {\n  constructor: lc,\n  moveTo: function(e, t) {\n    this._ += "M" + (this._x0 = this._x1 = +e) + "," + (this._y0 = this._y1 = +t);\n  },\n  closePath: function() {\n    this._x1 !== null && (this._x1 = this._x0, this._y1 = this._y0, this._ += "Z");\n  },\n  lineTo: function(e, t) {\n    this._ += "L" + (this._x1 = +e) + "," + (this._y1 = +t);\n  },\n  quadraticCurveTo: function(e, t, n, r) {\n    this._ += "Q" + +e + "," + +t + "," + (this._x1 = +n) + "," + (this._y1 = +r);\n  },\n  bezierCurveTo: function(e, t, n, r, i, s) {\n    this._ += "C" + +e + "," + +t + "," + +n + "," + +r + "," + (this._x1 = +i) + "," + (this._y1 = +s);\n  },\n  arcTo: function(e, t, n, r, i) {\n    e = +e, t = +t, n = +n, r = +r, i = +i;\n    var s = this._x1, a = this._y1, o = n - e, l = r - t, c = s - e, u = a - t, d = c * c + u * u;\n    if (i < 0) throw new Error("negative radius: " + i);\n    if (this._x1 === null)\n      this._ += "M" + (this._x1 = e) + "," + (this._y1 = t);\n    else if (d > Zn) if (!(Math.abs(u * o - l * c) > Zn) || !i)\n      this._ += "L" + (this._x1 = e) + "," + (this._y1 = t);\n    else {\n      var h = n - s, p = r - a, f = o * o + l * l, g = h * h + p * p, m = Math.sqrt(f), v = Math.sqrt(d), x = i * Math.tan((ac - Math.acos((f + d - g) / (2 * m * v))) / 2), _ = x / v, E = x / m;\n      Math.abs(_ - 1) > Zn && (this._ += "L" + (e + _ * c) + "," + (t + _ * u)), this._ += "A" + i + "," + i + ",0,0," + +(u * h > c * p) + "," + (this._x1 = e + E * o) + "," + (this._y1 = t + E * l);\n    }\n  },\n  arc: function(e, t, n, r, i, s) {\n    e = +e, t = +t, n = +n, s = !!s;\n    var a = n * Math.cos(r), o = n * Math.sin(r), l = e + a, c = t + o, u = 1 ^ s, d = s ? r - i : i - r;\n    if (n < 0) throw new Error("negative radius: " + n);\n    this._x1 === null ? this._ += "M" + l + "," + c : (Math.abs(this._x1 - l) > Zn || Math.abs(this._y1 - c) > Zn) && (this._ += "L" + l + "," + c), n && (d < 0 && (d = d % oc + oc), d > Jk ? this._ += "A" + n + "," + n + ",0,1," + u + "," + (e - a) + "," + (t - o) + "A" + n + "," + n + ",0,1," + u + "," + (this._x1 = l) + "," + (this._y1 = c) : d > Zn && (this._ += "A" + n + "," + n + ",0," + +(d >= ac) + "," + u + "," + (this._x1 = e + n * Math.cos(i)) + "," + (this._y1 = t + n * Math.sin(i))));\n  },\n  rect: function(e, t, n, r) {\n    this._ += "M" + (this._x0 = this._x1 = +e) + "," + (this._y0 = this._y1 = +t) + "h" + +n + "v" + +r + "h" + -n + "Z";\n  },\n  toString: function() {\n    return this._;\n  }\n};\nfunction dp(e) {\n  return function() {\n    return e;\n  };\n}\nfunction tD(e) {\n  return e[0];\n}\nfunction eD(e) {\n  return e[1];\n}\nvar nD = Array.prototype.slice;\nfunction rD(e) {\n  return e.source;\n}\nfunction iD(e) {\n  return e.target;\n}\nfunction sD(e) {\n  var t = rD, n = iD, r = tD, i = eD, s = null;\n  function a() {\n    var o, l = nD.call(arguments), c = t.apply(this, l), u = n.apply(this, l);\n    if (s || (s = o = _v()), e(s, +r.apply(this, (l[0] = c, l)), +i.apply(this, l), +r.apply(this, (l[0] = u, l)), +i.apply(this, l)), o) return s = null, o + "" || null;\n  }\n  return a.source = function(o) {\n    return arguments.length ? (t = o, a) : t;\n  }, a.target = function(o) {\n    return arguments.length ? (n = o, a) : n;\n  }, a.x = function(o) {\n    return arguments.length ? (r = typeof o == "function" ? o : dp(+o), a) : r;\n  }, a.y = function(o) {\n    return arguments.length ? (i = typeof o == "function" ? o : dp(+o), a) : i;\n  }, a.context = function(o) {\n    return arguments.length ? (s = o ?? null, a) : s;\n  }, a;\n}\nfunction aD(e, t, n, r, i) {\n  e.moveTo(t, n), e.bezierCurveTo(t = (t + r) / 2, n, t, i, r, i);\n}\nfunction oD() {\n  return sD(aD);\n}\nfunction lD(e) {\n  return [e.source.x1, e.y0];\n}\nfunction cD(e) {\n  return [e.target.x0, e.y1];\n}\nfunction uD() {\n  return oD().source(lD).target(cD);\n}\nclass hD extends mt {\n  constructor() {\n    super(...arguments), this.type = "alluvial", this.renderType = rt.SVG, this.gradient_id = "gradient-id-" + Math.floor(Math.random() * 99999999999);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = this.getComponentContainer({ ariaLabel: "alluvial graphs", withinChartClip: !0 });\n    n.html("");\n    const { width: r, height: i } = N.getSVGElementSize(n, {\n      useAttrs: !0\n    });\n    if (r < 1 || i < 1)\n      return;\n    const s = this.model.getOptions(), a = this.model.getDisplayData(), o = y(\n      this.getOptions(),\n      "color",\n      "gradient",\n      "enabled"\n    );\n    let l = Pe.minNodePadding;\n    s.alluvial.nodePadding > Pe.minNodePadding && (l = s.alluvial.nodePadding);\n    const c = y(s, "alluvial", "nodeAlignment");\n    let u = bv;\n    c === jt.LEFT ? u = qk : c === jt.RIGHT && (u = Yk);\n    const d = Qk().nodeId((x) => x.name).nodeWidth(Pe.nodeWidth).nodePadding(l).nodeAlign(u).extent([\n      [2, 30],\n      [r - 2, i]\n    ]);\n    this.graph = d({\n      nodes: s.alluvial.nodes.map((x) => Object.assign({}, x)),\n      links: a.map((x) => Object.assign({}, x))\n    }), this.graph.nodes = this.graph.nodes.filter((x) => x.value !== 0);\n    const h = {};\n    this.graph.nodes.forEach((x) => {\n      const _ = x.x0;\n      x.category && (h[_] = x == null ? void 0 : x.category);\n    }), n.append("g").classed("header-arrows", !0).selectAll("g").data(Object.keys(h)).join("g").attr("transform", (x) => `translate(${x}, 0)`).append("text").attr(\n      "id",\n      (x, _) => this.services.domUtils.generateElementIDString(`alluvial-category-${_}`)\n    ).style("font-size", "14px").text((x) => h[x] ? h[x] : "").attr("y", 20).attr("x", (x, _) => {\n      const E = this.services.domUtils.generateElementIDString(\n        `alluvial-category-${_}`\n      ), { width: b } = N.getSVGElementSize(I(`text#${E}`), {\n        useBBox: !0\n      });\n      let S = 0;\n      return x + S >= b && (S = -b + 4), S;\n    });\n    const p = n.append("g").attr("fill", "none").selectAll("g").data(this.graph.links);\n    if (p.exit().remove(), o) {\n      const x = y(this.getOptions(), "color", "scale");\n      x && p.enter().append("linearGradient").attr("id", (_) => `${this.gradient_id}-link-${_.index}`).attr("gradientUnits", "userSpaceOnUse").call(\n        (_) => _.append("stop").attr("offset", "0%").attr("stop-color", (E) => x[E.source.name])\n      ).call(\n        (_) => _.append("stop").attr("offset", "100%").attr("stop-color", (E) => x[E.target.name])\n      ), p.exit().remove();\n    }\n    p.enter().append("path").classed("link", !0).attr("d", uD()).attr(\n      "id",\n      (x) => this.services.domUtils.generateElementIDString(`alluvial-line-${x.index}`)\n    ).attr("class", (x) => s.alluvial.monochrome ? this.model.getColorClassName({\n      classNameTypes: [it.STROKE],\n      dataGroupName: 0,\n      originalClassName: "link"\n    }) : this.model.getColorClassName({\n      classNameTypes: [it.STROKE],\n      dataGroupName: x.source.index,\n      originalClassName: "link"\n    })).style("stroke", (x) => o ? `url(#${this.gradient_id}-link-${x.index})` : this.model.getFillColor(x.source.name, null, {\n      ...x,\n      source: x.source.name,\n      target: x.target.name\n    })).attr("stroke-width", (x) => Math.max(1, x.width)).style("stroke-opacity", Pe.opacity.default).attr(\n      "aria-label",\n      (x) => `${x.source.name} → ${x.target.name} (${x.value}${s.alluvial.units ? " " + s.alluvial.units : ""})`\n    );\n    const f = n.append("g").selectAll("g").data(this.graph.nodes).enter().append("g").attr(\n      "id",\n      (x) => this.services.domUtils.generateElementIDString(`alluvial-node-${x.index}`)\n    ).classed("node-group", !0).attr("transform", (x) => `translate(${x.x0}, ${x.y0})`);\n    f.append("rect").classed("node", !0).attr("height", (x) => x.y1 - x.y0).attr("width", (x) => x.x1 - x.x0).attr("fill", "black");\n    const g = f.append("g").attr(\n      "id",\n      (x) => this.services.domUtils.generateElementIDString(`alluvial-node-title-${x.index}`)\n    ), { code: m, number: v } = y(s, "locale");\n    g.append("text").attr(\n      "id",\n      (x) => this.services.domUtils.generateElementIDString(`alluvial-node-text-${x.index}`)\n    ).attr("class", "node-text").style("font-size", "12px").attr("text-anchor", "start").attr("fill", "white").attr("x", 4).attr("dy", 13).text((x) => `${x.name} (${v(x.value, m)})`).attr("aria-label", (x) => `${x.name} (${x.value})`), g.append("rect").classed("node-text-bg", !0).attr("width", (x, _) => {\n      const E = this.services.domUtils.generateElementIDString(\n        `alluvial-node-text-${_}`\n      ), { width: b } = N.getSVGElementSize(I(`text#${E}`), {\n        useBBox: !0\n      });\n      return b + 8;\n    }).attr("height", 18).attr("stroke-width", 2).lower(), g.attr("transform", (x, _) => {\n      const E = this.services.domUtils.generateElementIDString(\n        `alluvial-node-text-${_}`\n      ), { width: b } = N.getSVGElementSize(I(`text#${E}`), {\n        useBBox: !0\n      }), S = (x.y1 - x.y0) / 2 - 9;\n      let M = x.x1 - x.x0;\n      return x.x1 >= b ? M = M - (b + 16) : M += 4, `translate(${M}, ${S})`;\n    }), this.addLineEventListener(), this.addNodeEventListener();\n  }\n  addLineEventListener() {\n    const t = this.getOptions(), n = this, { number: r, code: i } = y(this.getOptions(), "locale"), s = ba((a, o = "mouseover") => {\n      const l = n.parent.selectAll("path.link").transition().call(\n        (c) => n.services.transitions.setupTransition({\n          transition: c,\n          name: "alluvial-links-mouse-highlight"\n        })\n      );\n      o === "mouseout" ? (I(a).lower(), l.style("stroke-opacity", Pe.opacity.default)) : l.style("stroke-opacity", function() {\n        return a === this ? (I(this).raise(), Pe.opacity.selected) : Pe.opacity.unfocus;\n      });\n    }, 33);\n    this.parent.selectAll("path.link").on("mouseover", function(a, o) {\n      const l = I(this);\n      s(this, "mouseover"), l.classed("link-hovered", !0);\n      const c = getComputedStyle(this).getPropertyValue("stroke");\n      n.services.events.dispatchEvent(T.Alluvial.LINE_MOUSEOVER, {\n        event: a,\n        element: l,\n        datum: o\n      }), n.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: a,\n        hoveredElement: l,\n        items: [\n          {\n            label: o.target.name,\n            value: (r(o.value, i) ? `${r(o.value, i)}` : "-") + (t.alluvial.units ? ` ${t.alluvial.units}` : ""),\n            color: c,\n            labelIcon: n.getRightArrowIcon()\n          }\n        ]\n      });\n    }).on("mousemove", function(a, o) {\n      n.services.events.dispatchEvent(T.Alluvial.LINE_MOUSEMOVE, {\n        event: a,\n        element: I(this),\n        datum: o\n      }), n.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: a\n      });\n    }).on("click", function(a, o) {\n      n.services.events.dispatchEvent(T.Alluvial.LINE_CLICK, {\n        event: a,\n        element: I(this),\n        datum: o\n      });\n    }).on("mouseout", function(a, o) {\n      const l = I(this);\n      s(this, "mouseout"), l.classed("link-hovered", !1), n.services.events.dispatchEvent(T.Alluvial.LINE_MOUSEOUT, {\n        event: a,\n        element: l,\n        datum: o\n      }), n.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        event: a,\n        hoveredElement: l\n      });\n    });\n  }\n  addNodeEventListener() {\n    const t = this, n = ba((r = [], i = "mouseover") => {\n      if (i === "mouseout" || r.length === 0) {\n        t.parent.selectAll("path.link").classed("link-hovered", !1).data(this.graph.links, (s) => s.index).order().style("stroke-opacity", Pe.opacity.default);\n        return;\n      }\n      t.parent.selectAll("path.link").transition().call(\n        (s) => this.services.transitions.setupTransition({\n          transition: s,\n          name: "alluvial-link-mouse-highlight"\n        })\n      ).style("stroke-opacity", function(s) {\n        return r.some((a) => a === s.index) ? (I(this).classed("link-hovered", !0).raise(), Pe.opacity.selected) : Pe.opacity.unfocus;\n      });\n    }, 66);\n    t.parent.selectAll(".node-group").on("mouseover", function(r, i) {\n      const s = I(this), a = [];\n      if (t.traverse({ link: "sourceLinks", node: "target" }, i, a), t.traverse({ link: "targetLinks", node: "source" }, i, a), a.length) {\n        const o = Mi(s.attr("transform"));\n        if (s.attr("transform", `translate(${o.x - 2}, ${o.y})`), s.classed("node-hovered", !0).selectAll("rect.node").attr("width", 8), i.x0 - 2 === 0) {\n          const c = t.services.domUtils.generateElementIDString(\n            `alluvial-node-title-${i.index}`\n          ), u = t.parent.select(`g#${c}`), d = Mi(u.attr("transform"));\n          u.attr("transform", `translate(${d.x + 4},${d.y})`);\n        }\n        const l = t.services.domUtils.generateElementIDString(\n          `alluvial-node-text-${i.index}`\n        );\n        t.parent.select(`text#${l}`).style("font-weight", "bold"), n(a, "mouseover"), t.services.events.dispatchEvent(T.Alluvial.NODE_MOUSEOVER, {\n          event: r,\n          element: s,\n          datum: i\n        });\n      }\n    }).on("mousemove", function(r, i) {\n      t.services.events.dispatchEvent(T.Alluvial.NODE_MOUSEMOVE, {\n        event: r,\n        element: I(this),\n        datum: i\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: r\n      });\n    }).on("click", function(r, i) {\n      t.services.events.dispatchEvent(T.Alluvial.NODE_CLICK, {\n        event: r,\n        element: I(this),\n        datum: i\n      });\n    }).on("mouseout", function(r, i) {\n      const s = I(this), a = Mi(s.attr("transform"));\n      if (s.classed("node-hovered", !1).attr("transform", `translate(${a.x + 2}, ${a.y})`).select("rect.node").attr("width", Pe.nodeWidth), i.x0 - 2 === 0) {\n        const l = t.services.domUtils.generateElementIDString(\n          `alluvial-node-title-${i.index}`\n        ), c = t.parent.select(`g#${l}`), u = Mi(c.attr("transform"));\n        c.attr("transform", `translate(${u.x - 4},${u.y})`);\n      }\n      const o = t.services.domUtils.generateElementIDString(\n        `alluvial-node-text-${i.index}`\n      );\n      t.parent.select(`text#${o}`).style("font-weight", "normal"), n([], "mouseout"), t.services.events.dispatchEvent(T.Alluvial.NODE_MOUSEOUT, {\n        event: r,\n        element: s,\n        datum: i\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: s\n      });\n    });\n  }\n  // Traverse graph and get all connected links to node\n  traverse(t, n, r = []) {\n    n[t.link].map((i) => (r.push(i.index), i[t.node])).forEach((i) => this.traverse(t, i, r));\n  }\n  getRightArrowIcon() {\n    return `\n\t\t<svg xmlns="http://www.w3.org/2000/svg" class="arrow-right" width="32" height="32" viewBox="0 0 32 32">\n\t\t\t<polygon points="18 6 16.57 7.393 24.15 15 4 15 4 17 24.15 17 16.57 24.573 18 26 28 16 18 6"/>\n\t\t\t<rect width="32" height="32"/>\n\t\t</svg>`;\n  }\n  // Remove event listeners\n  destroy() {\n    this.parent.selectAll("path.line,.node-group").on("mouseover", null).on("mousemove", null).on("click", null).on("mouseout", null);\n  }\n}\nclass Oe extends mt {\n  constructor() {\n    super(...arguments), this.type = "grid", this.renderType = rt.SVG;\n  }\n  render(t = !0) {\n    const n = y(this.getOptions(), "grid", "x", "enabled"), r = y(this.getOptions(), "grid", "y", "enabled");\n    this.drawBackdrop(n, r), !(!n && !r) && (n && (N.appendOrSelect(this.backdrop, "g.x.grid"), this.drawXGrid(t)), r && (N.appendOrSelect(this.backdrop, "g.y.grid"), this.drawYGrid(t)));\n  }\n  drawXGrid(t) {\n    const n = this.parent, r = this.backdrop.attr("height"), i = this.services.cartesianScales.getMainXScale(), s = Jc(i).tickSizeInner(-r).tickSizeOuter(0);\n    if (y(this.getOptions(), "grid", "x", "alignWithAxisTicks")) {\n      const o = this.services.cartesianScales.getDomainAxisPosition(), l = y(this.getOptions(), "axes", o, "ticks", "values");\n      l && s.tickValues(l);\n    } else {\n      const o = y(this.getOptions(), "grid", "x", "numberOfTicks");\n      s.ticks(o);\n    }\n    const a = n.select(".x.grid").attr("transform", `translate(${-this.backdrop.attr("x")}, ${r})`);\n    t ? a.transition().call(\n      (o) => this.services.transitions.setupTransition({\n        transition: o,\n        name: "grid-update",\n        animate: t\n      })\n    ).call(s) : a.call(s), this.cleanGrid(a);\n  }\n  drawYGrid(t) {\n    const n = this.parent, r = this.backdrop.attr("width"), i = this.services.cartesianScales.getMainYScale(), s = Lg(i).tickSizeInner(-r).tickSizeOuter(0);\n    if (y(this.getOptions(), "grid", "y", "alignWithAxisTicks")) {\n      const o = this.services.cartesianScales.getRangeAxisPosition(), l = y(this.getOptions(), "axes", o, "ticks", "values");\n      l && s.tickValues(l);\n    } else {\n      const o = y(this.getOptions(), "grid", "y", "numberOfTicks");\n      s.ticks(o);\n    }\n    const a = n.select(".y.grid").attr("transform", `translate(0, ${-this.backdrop.attr("y")})`);\n    t ? a.transition().call(\n      (o) => this.services.transitions.setupTransition({\n        transition: o,\n        name: "grid-update",\n        animate: t\n      })\n    ).call(s) : a.call(s), this.cleanGrid(a);\n  }\n  /**\n   * Returns the threshold for the gridline tooltips based on the mouse location.\n   * Calculated based on the mouse position between the two closest gridlines or edges of chart.\n   */\n  getGridlineThreshold(t) {\n    const n = this.parent, r = n.selectAll(".x.grid .tick").nodes().sort((u, d) => Number(fn(u).tx) - Number(fn(d).tx));\n    let i = -1;\n    if (!r.length)\n      return;\n    r.forEach((u) => {\n      t[0] >= +fn(u).tx && i++;\n    });\n    const s = i + 1 < r.length ? i + 1 : r.length, a = r[i], o = r[s];\n    let l;\n    if (!a)\n      l = +fn(o).tx;\n    else if (o)\n      l = +fn(o).tx - +fn(a).tx;\n    else {\n      const u = n.select("rect.chart-grid-backdrop").node();\n      l = N.getSVGElementSize(u).width - +fn(a).tx;\n    }\n    const { threshold: c } = this.getOptions().tooltip.gridline;\n    return l * c;\n  }\n  /**\n   * Returns the active gridlines based on the gridline threshold and mouse position.\n   * @param position mouse positon\n   */\n  getActiveGridline(t) {\n    const n = y(this.getOptions, "tooltip", "gridline", "threshold"), r = n || this.getGridlineThreshold(t);\n    return this.parent.selectAll(".x.grid .tick").filter(function() {\n      const i = fn(this), s = {\n        min: Number(i.tx) - r,\n        max: Number(i.tx) + r\n      };\n      return s.min <= t[0] && t[0] <= s.max;\n    });\n  }\n  drawBackdrop(t, n) {\n    const r = this.parent, i = this.services.cartesianScales.getMainXScale(), s = this.services.cartesianScales.getMainYScale(), [a, o] = i.range(), [l, c] = s.range();\n    this.backdrop = N.appendOrSelect(r, "svg.chart-grid-backdrop").attr(\n      "role",\n      "presentation"\n    );\n    const u = N.appendOrSelect(\n      this.backdrop,\n      t || n ? "rect.chart-grid-backdrop.stroked" : "rect.chart-grid-backdrop"\n    );\n    this.backdrop.merge(u).attr("x", a).attr("y", c).attr("width", Math.abs(o - a)).attr("height", Math.abs(l - c)).lower(), u.attr("width", "100%").attr("height", "100%");\n  }\n  cleanGrid(t) {\n    t.selectAll("text").remove(), t.select(".domain").remove();\n  }\n}\nclass Ev extends mt {\n  constructor() {\n    super(...arguments), this.type = "area", this.renderType = rt.SVG, this.gradient_id = "gradient-id-" + Math.floor(Math.random() * 99999999999), this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail;\n      this.parent.selectAll("path.area").transition("legend-hover-area").call(\n        (r) => this.services.transitions.setupTransition({\n          transition: r,\n          name: "legend-hover-area"\n        })\n      ).attr("opacity", (r) => r.name !== n.datum().name ? yn.opacity.unselected : yn.opacity.selected);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.area").transition("legend-mouseout-area").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-area"\n        })\n      ).attr("opacity", yn.opacity.selected);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t = !0) {\n    const n = this.getComponentContainer({ ariaLabel: "area graphs", withinChartClip: !0 }), r = this.getOptions();\n    let i = [0, 0];\n    const { cartesianScales: s } = this.services, a = s.getOrientation(), o = au().curve(this.services.curves.getD3Curve()).defined((b) => {\n      const S = s.getRangeIdentifier();\n      return b[S] != null;\n    }), l = this.model.getGroupedData(this.configs.groups), c = y(r, "bounds"), u = c && l && l.length === 1;\n    !u && c && console.warn(\n      `Bounds can only be shown when having 1 single datagroup, you\'ve supplied ${l.length}`\n    );\n    let d = 0;\n    const h = (b, S) => {\n      y(r, "axes", b, "includeZero") === !1 && S[0] > 0 && S[1] > 0 && (d = S[0]);\n    }, p = (b) => u ? s.getBoundedScaledValues(b)[0] : s.getRangeValue(d), f = (b) => u ? s.getBoundedScaledValues(b)[1] : s.getRangeValue(b);\n    a === Ft.VERTICAL ? (i = s.getMainYScale().domain(), h(s.getMainYAxisPosition(), i), o.x((b) => s.getDomainValue(b)).y0((b) => p(b)).y1((b) => f(b))) : (i = s.getMainXScale().domain(), h(s.getMainXAxisPosition(), i), o.x0((b) => p(b)).x1((b) => f(b)).y((b) => s.getDomainValue(b)));\n    const g = y(r, "color", "gradient", "enabled"), m = l && l.length === 1 && g;\n    l.length > 1 && g && console.error("Gradients can only be enabled when having 1 single dataset");\n    const v = n.selectAll("path.area").data(l, (b) => b.name), x = I(this.services.domUtils.getMainContainer());\n    if (v.exit().attr("opacity", 0).remove(), !l.length)\n      return;\n    if (m) {\n      const b = x.select(\n        `path.${this.model.getColorClassName({\n          classNameTypes: [it.STROKE],\n          dataGroupName: l[0].name\n        })}`\n      ).node();\n      let S;\n      if (b)\n        S = getComputedStyle(b, null).getPropertyValue(\n          "stroke"\n        );\n      else {\n        const M = y(this.model.getOptions(), "color", "scale");\n        if (M !== null) {\n          const D = Object.keys(M);\n          S = M[D[0]];\n        }\n      }\n      Nl.appendOrUpdateLinearGradient({\n        svg: this.parent,\n        id: this.services.domUtils.generateElementIDString(\n          `${l[0].name.replace(" ", "")}_${this.gradient_id}`\n        ),\n        x1: "0%",\n        x2: "0%",\n        y1: "0%",\n        y2: "100%",\n        stops: Nl.getStops(i, S)\n      });\n    } else\n      this.parent.selectAll("defs linearGradient").empty() || this.parent.selectAll("defs linearGradient").each(function() {\n        this.parentNode.remove();\n      });\n    const _ = this, E = v.enter().append("path");\n    m ? E.merge(v).style(\n      "fill",\n      (b) => `url(#${this.services.domUtils.generateElementIDString(\n        `${b.name.replace(" ", "")}_${this.gradient_id}`\n      )})`\n    ).attr("class", "area").attr(\n      "class",\n      (b) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: b.name,\n        originalClassName: "area"\n      })\n    ).attr("d", (b) => {\n      const { data: S } = b;\n      return o(S);\n    }) : (E.attr("opacity", 0).merge(v).attr("class", "area").attr(\n      "class",\n      (b) => this.model.getColorClassName({\n        classNameTypes: [it.FILL, it.STROKE],\n        dataGroupName: b.name,\n        originalClassName: "area"\n      })\n    ).style("fill", (b) => _.model.getFillColor(b.name, null, b.data)).transition().call(\n      (b) => this.services.transitions.setupTransition({\n        transition: b,\n        name: "area-update-enter",\n        animate: t\n      })\n    ).attr("opacity", u ? 1 : yn.opacity.selected).attr("d", (b) => {\n      const { data: S } = b;\n      return o(S);\n    }), u && E.attr("fill-opacity", yn.opacity.selected).style("stroke", (b) => _.model.getStrokeColor(b.name, null, b.data)).style("stroke-dasharray", "2, 2").attr("stroke-width", 0.7 + "px"));\n  }\n  destroy() {\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n}\nclass Fr extends mt {\n  constructor() {\n    super(...arguments), this.type = "line", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail;\n      this.parent.selectAll("path.line").transition("legend-hover-line").call(\n        (r) => this.services.transitions.setupTransition({\n          transition: r,\n          name: "legend-hover-line"\n        })\n      ).attr("opacity", (r) => r.name !== n.datum().name ? vn.opacity.unselected : vn.opacity.selected);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.line").transition("legend-mouseout-line").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-line"\n        })\n      ).attr("opacity", vn.opacity.selected);\n    };\n  }\n  init() {\n    const { events: t } = this.services;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t = !0) {\n    const n = this.getComponentContainer({ ariaLabel: "lines", withinChartClip: !0 }), { cartesianScales: r, curves: i } = this.services, s = (p) => r.getDomainValue(p), a = (p) => r.getRangeValue(p), [o, l] = En(\n      s,\n      a,\n      r.getOrientation()\n    ), c = this.getOptions(), u = xs().x(o).y(l).curve(i.getD3Curve()).defined((p) => {\n      const f = r.getRangeIdentifier(p);\n      return p[f] != null;\n    });\n    let d = [];\n    if (this.configs.stacked) {\n      const p = Object.keys(c.axes).some((g) => c.axes[g].percentage), { groupMapsTo: f } = c.data;\n      d = this.model.getStackedData({\n        groups: this.configs.groups,\n        percentage: p\n      }).map((g) => {\n        const m = this.services.cartesianScales.getDomainIdentifier(g), v = this.services.cartesianScales.getRangeIdentifier(g);\n        return {\n          name: y(g, 0, f),\n          data: g.map((x) => ({\n            [m]: x.data.sharedStackKey,\n            [f]: x[f],\n            [v]: x[1]\n          })),\n          hidden: !NC(g, (x) => x[0] !== x[1])\n        };\n      });\n    } else\n      d = this.model.getGroupedData(this.configs.groups);\n    const h = n.selectAll("path.line").data(d, (p) => p.name);\n    h.exit().attr("opacity", 0).remove(), h.enter().append("path").classed("line", !0).attr("opacity", 0).merge(h).data(d, (p) => p.name).attr(\n      "class",\n      (p) => this.model.getColorClassName({\n        classNameTypes: [it.STROKE],\n        dataGroupName: p.name,\n        originalClassName: "line"\n      })\n    ).style("stroke", (p) => this.model.getStrokeColor(p.name, null, p.data)).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "line").attr("aria-label", (p) => {\n      const { data: f } = p;\n      return f.map((g) => {\n        const m = this.services.cartesianScales.getRangeIdentifier(g);\n        return g[m];\n      }).join(",");\n    }).transition().call(\n      (p) => this.services.transitions.setupTransition({\n        transition: p,\n        name: "line-update-enter",\n        animate: t\n      })\n    ).attr("opacity", (p) => p.hidden ? 0 : 1).attr("d", (p) => {\n      const { data: f } = p;\n      return u(f);\n    });\n  }\n  destroy() {\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n}\nconst pp = 5;\nfunction dD(e, t) {\n  return e > t - pp && e < t + pp;\n}\nclass Vn extends mt {\n  constructor() {\n    super(...arguments), this.type = "ruler", this.renderType = rt.SVG, this.isXGridEnabled = y(this.getOptions(), "grid", "x", "enabled"), this.isYGridEnabled = y(this.getOptions(), "grid", "y", "enabled"), this.isEventListenerAdded = !1;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !1) {\n    const n = y(this.getOptions(), "ruler", "enabled");\n    this.drawBackdrop(), n && !this.isEventListenerAdded ? this.addBackdropEventListeners() : !n && this.isEventListenerAdded && this.removeBackdropEventListeners();\n  }\n  removeBackdropEventListeners() {\n    this.isEventListenerAdded = !1, this.backdrop.on("mousemove mouseover mouseout", null);\n  }\n  formatTooltipData(t) {\n    return t;\n  }\n  showRuler(t, [n, r]) {\n    const i = this.parent, s = this.services.cartesianScales.getOrientation(), a = this.model.getDisplayData(), o = this.services.cartesianScales.getRangeScale(), [l, c] = o.range(), u = s === Ft.HORIZONTAL ? r : n, d = N.appendOrSelect(i, "g.ruler").attr("aria-label", "ruler"), h = N.appendOrSelect(d, "line.ruler-line"), p = i.selectAll("[role=graphics-symbol]"), f = a.map((m) => ({\n      domainValue: this.services.cartesianScales.getDomainValue(m),\n      originalData: m\n    })).filter((m) => dD(m.domainValue, u));\n    if (this.pointsWithinLine && f.length === this.pointsWithinLine.length && f.map((m) => m.domainValue).join() === this.pointsWithinLine.map((m) => m.domainValue).join())\n      return this.pointsWithinLine = f, this.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        mousePosition: [n, r]\n      });\n    this.pointsWithinLine = f;\n    const g = this.pointsWithinLine.reduce((m, v) => {\n      if (m.length === 0)\n        return m.push(v), m;\n      const x = m[0].domainValue, _ = Math.abs(u - v.domainValue), E = Math.abs(u - x);\n      return _ > E || (_ < E ? m = [v] : m.push(v)), m;\n    }, []);\n    if (g.length > 0) {\n      const m = g.map((E) => E.originalData).filter((E) => {\n        const b = this.services.cartesianScales.getRangeIdentifier(E);\n        return E[b] != null;\n      }), v = g.map(\n        (E) => E.domainValue\n      ), x = p.filter((E) => {\n        const b = this.services.cartesianScales.getDomainValue(E);\n        return v.includes(b);\n      });\n      this.elementsToHighlight && this.elementsToHighlight.size() > 0 && !Cg(this.elementsToHighlight, x) && this.hideRuler(), x.dispatch("mouseover"), this.elementsToHighlight = x, this.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: t,\n        mousePosition: [n, r],\n        hoveredElement: h,\n        data: this.formatTooltipData(m)\n      }), d.attr("opacity", 1);\n      const _ = g[0];\n      s === "horizontal" ? h.attr("x1", c).attr("x2", l).attr("y1", _.domainValue).attr("y2", _.domainValue) : h.attr("y1", c).attr("y2", l).attr("x1", _.domainValue).attr("x2", _.domainValue);\n    } else\n      this.hideRuler();\n  }\n  hideRuler() {\n    const t = this.parent, n = N.appendOrSelect(t, "g.ruler");\n    t.selectAll("[role=graphics-symbol]").dispatch("mouseout"), this.services.events.dispatchEvent(T.Tooltip.HIDE), n.attr("opacity", 0);\n  }\n  /**\n   * Adds the listener on the X grid to trigger multiple point tooltips along the x axis.\n   */\n  addBackdropEventListeners() {\n    this.isEventListenerAdded = !0;\n    const t = this, n = this.services.domUtils.getHolder(), r = this.model.getDisplayData();\n    let i = function(s) {\n      const a = rr(s, t.parent.node());\n      t.showRuler(s, a);\n    };\n    if (r.length > 100) {\n      const s = r.length % 50 * 12.5;\n      i = iw(\n        function(a) {\n          const { mousePosition: o } = this;\n          t.showRuler(a, o);\n        },\n        s,\n        n\n      );\n    }\n    this.backdrop.on("mousemove mouseover", i).on("mouseout", this.hideRuler.bind(this));\n  }\n  drawBackdrop() {\n    const t = this.parent;\n    this.backdrop = N.appendOrSelect(t, "svg.chart-grid-backdrop");\n  }\n}\nlet nn = class extends mt {\n  constructor() {\n    super(...arguments), this.type = "scatter", this.renderType = rt.SVG, this.handleChartHolderOnHover = () => {\n      if (!this.parent) throw new Error("Parent not defined");\n      this.parent.selectAll("circle.dot").transition("chart-holder-hover-scatter").call(\n        (t) => {\n          var n;\n          return (n = this.services.transitions) == null ? void 0 : n.setupTransition({\n            transition: t,\n            name: "chart-holder-hover-scatter"\n          });\n        }\n      ).attr("opacity", 1);\n    }, this.handleChartHolderOnMouseOut = () => {\n      if (!this.parent) throw new Error("Parent not defined");\n      this.parent.selectAll("circle.dot").transition("chart-holder-mouseout-scatter").call(\n        (t) => {\n          var n;\n          return (n = this.services.transitions) == null ? void 0 : n.setupTransition({\n            transition: t,\n            name: "chart-holder-mouseout-scatter"\n          });\n        }\n      ).attr("opacity", 0);\n    }, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, { groupMapsTo: r } = this.getOptions().data;\n      if (!this.parent) throw new Error("Parent not defined");\n      this.parent.selectAll("circle.dot").transition("legend-hover-scatter").call(\n        (i) => {\n          var s;\n          return (s = this.services.transitions) == null ? void 0 : s.setupTransition({\n            transition: i,\n            name: "legend-hover-scatter"\n          });\n        }\n      ).attr("opacity", (i) => i[r] !== n.datum().name ? 0.3 : 1);\n    }, this.handleLegendMouseOut = () => {\n      if (!this.parent) throw new Error("Parent not defined");\n      this.parent.selectAll("circle.dot").transition("legend-mouseout-scatter").call(\n        (t) => {\n          var n;\n          return (n = this.services.transitions) == null ? void 0 : n.setupTransition({\n            transition: t,\n            name: "legend-mouseout-scatter"\n          });\n        }\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const { events: t } = this.services;\n    if (!t) throw new Error("Services events are undefined.");\n    t.addEventListener(\n      T.Legend.ITEM_HOVER,\n      this.handleLegendOnHover\n    ), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n    const { fadeInOnChartHolderMouseover: n } = this.configs;\n    n && (t.addEventListener(T.Chart.MOUSEOVER, this.handleChartHolderOnHover), t.addEventListener(T.Chart.MOUSEOUT, this.handleChartHolderOnMouseOut));\n  }\n  filterBasedOnZoomDomain(t) {\n    const { cartesianScales: n } = this.services;\n    if (!n) throw new Error("Services cartesianScales are undefined.");\n    const r = n.getDomainIdentifier(t), i = this.model.get("zoomDomain");\n    return i !== void 0 ? t.filter(\n      (s) => s[r].getTime() >= i[0].getTime() && s[r].getTime() <= i[1].getTime()\n    ) : t;\n  }\n  getScatterData() {\n    const t = this.getOptions(), { stacked: n } = this.configs;\n    let r;\n    if (n) {\n      const i = Object.keys(t.axes).some((s) => t.axes[s].percentage);\n      r = this.model.getStackedData({\n        groups: this.configs.groups,\n        percentage: i\n      });\n    } else {\n      const { cartesianScales: i } = this.services;\n      if (!i) throw new Error("Services cartesianScales are undefined.");\n      r = this.model.getDisplayData(this.configs.groups).filter((s) => {\n        const a = i.getRangeIdentifier(s);\n        return s[a] !== void 0 && s[a] !== null;\n      });\n    }\n    return this.filterBasedOnZoomDomain(r);\n  }\n  render(t) {\n    if (!(y(this.getOptions(), "points", "enabled") || y(this.getOptions(), "bubble", "enabled")))\n      return;\n    const n = this.getComponentContainer({ ariaLabel: "scatter points", withinChartClip: !0 }), r = this.getOptions(), { groupMapsTo: i } = r.data, { cartesianScales: s } = this.services;\n    if (!s) throw new Error("Services cartesianScales are undefined.");\n    const a = s.getDomainIdentifier(), o = n.selectAll("circle.dot").data(\n      this.getScatterData(),\n      (c) => `${c[i]}-${c[a]}`\n    );\n    o.exit().attr("opacity", 0).remove();\n    const l = o.enter().append("circle").classed("dot", !0).attr("opacity", 0).merge(o);\n    this.styleCircles(l, t), this.addEventListeners();\n  }\n  // A value is an anomaly if is above all defined domain and range thresholds\n  isDatapointThresholdAnomaly(t) {\n    const { handleThresholds: n } = this.configs;\n    if (!n)\n      return !1;\n    const { cartesianScales: r } = this.services;\n    if (!r) throw new Error("Cartesian scales service is undefined");\n    const i = r.getOrientation(), [s, a] = En(\n      r.getHighestDomainThreshold(),\n      r.getHighestRangeThreshold(),\n      i\n    ), [o, l] = En(\n      (d) => r.getDomainValue(d),\n      (d) => r.getRangeValue(d),\n      i\n    ), c = o(t), u = l(t);\n    return a && s ? u <= a.scaleValue && c >= s.scaleValue : a ? u <= a.scaleValue : s ? c >= s.scaleValue : !1;\n  }\n  styleCircles(t, n) {\n    const r = this.getOptions(), { filled: i, fillOpacity: s } = r.points, { cartesianScales: a } = this.services;\n    if (!a) throw new Error("Cartesian scales service is undefined");\n    const { groupMapsTo: o } = r.data, l = (p) => a.getDomainValue(p), c = (p) => a.getRangeValue(p), [u, d] = En(\n      l,\n      c,\n      a.getOrientation()\n    ), { fadeInOnChartHolderMouseover: h } = this.configs;\n    t.raise().classed("dot", !0).attr("class", (p) => {\n      const f = a.getDomainIdentifier(p), g = this.model.getIsFilled(p[o], p[f], p, i) ? [it.FILL, it.STROKE] : [it.STROKE];\n      return this.model.getColorClassName({\n        classNameTypes: g,\n        dataGroupName: p[o],\n        originalClassName: "dot"\n      }) || "";\n    }).classed("threshold-anomaly", (p) => this.isDatapointThresholdAnomaly(p)).classed("filled", (p) => {\n      const f = a.getDomainIdentifier(p);\n      return this.model.getIsFilled(p[o], p[f], p, i);\n    }).classed("unfilled", (p) => {\n      const f = a.getDomainIdentifier(p);\n      return !this.model.getIsFilled(p[o], p[f], p, i);\n    }).transition().call(\n      (p) => {\n        var f;\n        return (f = this.services.transitions) == null ? void 0 : f.setupTransition({\n          transition: p,\n          name: "scatter-update-enter",\n          animate: n\n        });\n      }\n    ).attr("cx", u).attr("cy", d).attr("r", r.points.radius).style("fill", (p) => {\n      const f = a.getDomainIdentifier(p);\n      if (this.model.getIsFilled(p[o], p[f], p, i))\n        return this.model.getFillColor(p[o], p[f], p);\n    }).style("stroke", (p) => {\n      const f = a.getDomainIdentifier(p);\n      return this.model.getStrokeColor(p[o], p[f], p);\n    }).attr("fill-opacity", i ? s : 1).attr("opacity", h ? 0 : 1).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "point").attr("aria-label", (p) => {\n      const f = a.getRangeIdentifier(p);\n      return p[f];\n    }), this.addEventListeners();\n  }\n  // Extended in bubble graphs\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  getTooltipAdditionalItems(t) {\n    return null;\n  }\n  addEventListeners() {\n    const t = this, { groupMapsTo: n } = t.getOptions().data;\n    if (!this.parent) throw new Error("Parent not defined");\n    this.parent.selectAll("circle").on("mouseover", function(r, i) {\n      var s, a;\n      const o = I(this);\n      o.classed("hovered", !0).attr(\n        "class",\n        (l) => t.model.getColorClassName({\n          classNameTypes: [it.FILL],\n          dataGroupName: l[n],\n          originalClassName: o.attr("class")\n        })\n      ).style("fill", (l) => {\n        var c;\n        const u = (c = t.services.cartesianScales) == null ? void 0 : c.getDomainIdentifier(l);\n        return t.model.getFillColor(l[n], l[u], l);\n      }).classed("unfilled", !1), (s = t.services.events) == null || s.dispatchEvent(T.Tooltip.SHOW, {\n        event: r,\n        hoveredElement: o,\n        data: [i],\n        additionalItems: t.getTooltipAdditionalItems(i)\n      }), (a = t.services.events) == null || a.dispatchEvent(T.Scatter.SCATTER_MOUSEOVER, {\n        event: r,\n        element: o,\n        datum: i\n      });\n    }).on("mousemove", function(r, i) {\n      var s, a;\n      const o = I(this);\n      (s = t.services.events) == null || s.dispatchEvent(T.Scatter.SCATTER_MOUSEMOVE, {\n        event: r,\n        element: o,\n        datum: i\n      }), (a = t.services.events) == null || a.dispatchEvent(T.Tooltip.MOVE, {\n        event: r\n      });\n    }).on("click", function(r, i) {\n      var s;\n      (s = t.services.events) == null || s.dispatchEvent(T.Scatter.SCATTER_CLICK, {\n        event: r,\n        element: I(this),\n        datum: i\n      });\n    }).on("mouseout", function(r, i) {\n      var s, a, o;\n      const l = I(this);\n      if (l.classed("hovered", !1), !t.configs.filled) {\n        const { filled: c } = t.getOptions().points, u = (s = t.services.cartesianScales) == null ? void 0 : s.getDomainIdentifier(i), d = t.model.getIsFilled(\n          i[n],\n          i[u],\n          i,\n          c\n        );\n        l.classed("unfilled", !d).style("fill", (h) => d || c ? t.model.getFillColor(h[n], h[u], h) : null);\n      }\n      (a = t.services.events) == null || a.dispatchEvent(T.Scatter.SCATTER_MOUSEOUT, {\n        event: r,\n        element: l,\n        datum: i\n      }), (o = t.services.events) == null || o.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: l\n      });\n    });\n  }\n  destroy() {\n    var t;\n    (t = this.parent) == null || t.selectAll("circle").on("mousemove", null).on("mouseout", null);\n    const { events: n } = this.services;\n    if (!n) throw new Error("Services events undefined");\n    n.removeEventListener(\n      T.Legend.ITEM_HOVER,\n      this.handleLegendOnHover\n    ), n.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut), n.removeEventListener(T.Chart.MOUSEOVER, this.handleChartHolderOnHover), n.removeEventListener(T.Chart.MOUSEOUT, this.handleChartHolderOnMouseOut);\n  }\n};\nclass Ov extends mt {\n  constructor(t, n, r) {\n    super(t, n, r), this.type = "axes", this.renderType = rt.SVG, this.truncation = {\n      [G.LEFT]: !1,\n      [G.RIGHT]: !1,\n      [G.TOP]: !1,\n      [G.BOTTOM]: !1\n    }, r && (this.configs = r), this.margins = this.configs.margins;\n  }\n  render(t = !0) {\n    const { position: n } = this.configs, r = this.getOptions(), i = y(r, "axes", n, "visible"), s = this.getComponentContainer({\n      ariaLabel: "axes"\n    }), { width: a, height: o } = N.getSVGElementSize(s, {\n      useAttrs: !0\n    }), l = N.appendOrSelect(s, `g.axis.${n}`);\n    let c, u;\n    if (n === G.BOTTOM || n === G.TOP ? (c = this.configs.axes[G.LEFT] ? this.margins.left : 0, u = this.configs.axes[G.RIGHT] ? a - this.margins.right : a) : (c = o - this.margins.bottom, u = this.margins.top), !this.services.cartesianScales) throw new Error("Services cartesianScales undefined");\n    const d = this.services.cartesianScales.getScaleByPosition(n);\n    this.scaleType === et.LABELS || this.scaleType === et.LABELS_RATIO ? d.rangeRound([c, u]) : d.range([c, u]);\n    let h;\n    switch (n) {\n      case G.LEFT:\n        h = Lg;\n        break;\n      case G.BOTTOM:\n        h = Jc;\n        break;\n      case G.RIGHT:\n        h = jC;\n        break;\n      case G.TOP:\n        h = FC;\n        break;\n    }\n    l.attr("aria-label", `${n} axis`);\n    const p = !l.select("g.ticks").empty();\n    let f = N.appendOrSelect(l, "g.ticks");\n    p || (f.attr("role", `${ht.GRAPHICS_OBJECT} ${ht.GROUP}`), f.attr("aria-label", `${n} ticks`));\n    const g = N.appendOrSelect(l, "g.ticks.invisible").style("opacity", "0").style("pointer-events", "none").attr("aria-hidden", !0).attr("aria-label", `invisible ${n} ticks`), m = y(r, "axes", n), v = this.scaleType === et.TIME || m.scaleType === et.TIME, x = n === G.LEFT || n === G.RIGHT, _ = this.model.get("zoomDomain");\n    if (_ && v && !x && d.domain(_), !i) {\n      f.attr("aria-hidden", !0);\n      return;\n    }\n    const E = y(m, "scaleType"), b = y(r, "data", "loading"), S = y(m, "ticks", "number"), M = y(m, "ticks", "values"), D = y(m, "truncation", "type"), A = y(m, "truncation", "threshold"), R = y(m, "truncation", "numCharacter"), $ = S !== null, H = y(r, "timeScale"), P = N.appendOrSelect(g, "g.tick"), B = N.appendOrSelect(P, "text").text("0"), O = N.getSVGElementSize(B.node(), {\n      useBBox: !0\n    }).height;\n    P.remove();\n    const w = this.scaleType || m.scaleType || et.LINEAR, L = h(d).tickSizeOuter(0);\n    if (d.ticks) {\n      let q;\n      if ($ ? q = S : (q = Pn.ticks.number, x && (q = this.getNumberOfFittingTicks(\n        o,\n        O,\n        Pn.ticks.verticalSpaceRatio\n      ))), d.ticks().length === 1 && d.ticks()[0] === 0 && (q = 0), L.ticks(q), v)\n        if (!d.ticks(q).length)\n          L.tickValues([]);\n        else {\n          const tt = y(r, "timeScale", "addSpaceOnEdges"), lt = y(r, "axes", n, "domain"), z = d.copy();\n          tt && !lt && z.nice(q);\n          const W = z.ticks(q);\n          tt && W.length > 2 && !lt && (W.splice(W.length - 1, 1), W.splice(0, 1)), L.tickValues(W);\n        }\n    }\n    let k;\n    const U = y(m, "ticks", "formatter"), { code: Z, number: j } = y(r, "locale");\n    if (v) {\n      const q = Dl(\n        L.tickValues(),\n        y(r, "timeScale", "timeInterval")\n      );\n      U === null ? k = (tt, lt) => kl(tt, lt, L.tickValues(), q, H, r.locale) : k = (tt, lt) => {\n        const z = kl(\n          tt,\n          lt,\n          L.tickValues(),\n          q,\n          H,\n          r.locale\n        );\n        return U(tt, lt, z);\n      };\n    } else\n      U === null ? w === et.LINEAR && (k = (q) => j(q, Z)) : k = U;\n    L.tickFormat(k);\n    const [F, Y] = this.services.cartesianScales.getScaleByPosition(n).domain();\n    let ot;\n    if (M) {\n      if (v)\n        M.forEach((q, tt) => {\n          q.getTime === void 0 && (M[tt] = new Date(q));\n        }), ot = M.filter((q) => {\n          const tt = q.getTime();\n          return tt >= new Date(F).getTime() && tt <= new Date(Y).getTime();\n        });\n      else if (E === et.LABELS) {\n        const q = this.services.cartesianScales.getScaleByPosition(n).domain();\n        ot = M.filter((tt) => q.includes(tt));\n      } else\n        ot = M.filter(\n          (q) => q >= F && q <= Y\n        );\n      L.tickValues(ot);\n    }\n    switch (n) {\n      case G.LEFT:\n        f.attr("transform", `translate(${this.margins.left}, 0)`);\n        break;\n      case G.BOTTOM:\n        f.attr("transform", `translate(0, ${o - this.margins.bottom})`);\n        break;\n      case G.RIGHT:\n        f.attr("transform", `translate(${a - this.margins.right}, 0)`);\n        break;\n      case G.TOP:\n        f.attr("transform", `translate(0, ${this.margins.top})`);\n        break;\n    }\n    const Q = this.model.isDataEmpty();\n    if (m.title) {\n      const q = N.appendOrSelect(l, "text.axis-title").html(\n        Q || b ? "" : en(m.title)\n      ), tt = y(m, "titleOrientation");\n      let lt;\n      switch (n) {\n        case G.LEFT:\n          tt === fl.RIGHT ? q.attr("transform", "rotate(90)").attr("y", 0).attr("x", d.range()[0] / 2).attr("dy", "-0.5em").style("text-anchor", "middle") : q.attr("transform", "rotate(-90)").attr("y", 0).attr("x", -(d.range()[0] / 2)).attr("dy", "0.75em").style("text-anchor", "middle");\n          break;\n        case G.BOTTOM:\n          q.attr(\n            "transform",\n            `translate(${this.margins.left / 2 + d.range()[1] / 2}, ${o + 4})`\n          ).style("text-anchor", "middle");\n          break;\n        case G.RIGHT:\n          tt === fl.LEFT ? q.attr("transform", "rotate(-90)").attr("y", a).attr("x", -(d.range()[0] / 2)).style("text-anchor", "middle") : q.attr("transform", "rotate(90)").attr("y", -a).attr("x", d.range()[0] / 2).attr("dy", "0.75em").style("text-anchor", "middle");\n          break;\n        case G.TOP:\n          lt = N.getSVGElementSize(q, {\n            useBBox: !0\n          }).height, q.attr(\n            "transform",\n            `translate(${this.margins.left / 2 + d.range()[1] / 2}, ${lt / 2})`\n          ).style("text-anchor", "middle");\n          break;\n      }\n    }\n    if (v) {\n      const q = Dl(\n        L.tickValues(),\n        y(r, "timeScale", "timeInterval")\n      ), tt = H.showDayName, lt = f;\n      t && (f = f.transition().call(\n        (z) => this.services.transitions.setupTransition({\n          transition: z,\n          name: "axis-update",\n          animate: t\n        })\n      )), f = f.call(L), lt.selectAll(".tick").data(L.tickValues(), d).order().select("text").attr(\n        "class",\n        (z, W) => Gm(z, W, L.tickValues(), q, tt) ? "tick-label--primary" : "tick-label"\n      );\n    } else\n      !t || !p ? f = f.call(L) : f = f.transition().call(\n        (q) => this.services.transitions.setupTransition({\n          transition: q,\n          name: "axis-update",\n          animate: t\n        })\n      ).call(L);\n    if (g.call(L), n === G.BOTTOM || n === G.TOP) {\n      let q = !1;\n      const tt = y(m, "ticks", "rotation");\n      if (tt === Ws.ALWAYS)\n        q = !0;\n      else if (tt === Ws.NEVER)\n        q = !1;\n      else if (!tt || tt === Ws.AUTO)\n        if (d.step)\n          q = g.selectAll("g.tick text").nodes().some(\n            (lt) => N.getSVGElementSize(lt, {\n              useBBox: !0\n            }).width >= d.step()\n          );\n        else {\n          q = !1;\n          const lt = g.append("text").text("A"), z = N.getSVGElementSize(lt.node(), {\n            useBBox: !0\n          }).width;\n          let W;\n          g.selectAll("g.tick").each(function() {\n            const X = I(this), V = parseFloat(y(fn(this), "tx"));\n            V !== null && W + X.text().length * z * 0.8 >= V && (q = !0), W = V;\n          }), lt.remove();\n        }\n      q ? ($ || (L.ticks(\n        this.getNumberOfFittingTicks(a, O, Pn.ticks.horizontalSpaceRatio)\n      ), g.call(L), f.call(L)), l.selectAll("g.ticks g.tick text").attr("transform", "rotate(-45)").attr("text-anchor", n === G.TOP ? "start" : "end")) : l.selectAll("g.ticks g.tick text").attr("transform", null).attr("text-anchor", null);\n    }\n    if (b ? l.attr("opacity", 0) : l.attr("opacity", 1), f.selectAll("g.tick").attr("aria-label", (q) => q), g.selectAll("g.tick").attr("aria-label", (q) => q), D !== Ve.NONE && E === et.LABELS && !M) {\n      const q = this.services.cartesianScales.getScaleDomain(n);\n      if (q.length > 0) {\n        const tt = s.select(`g.axis.${n} g.ticks g.tick`).html();\n        l.selectAll("g.ticks g.tick").html(tt);\n        const lt = this;\n        l.selectAll("g.tick text").data(q).text(function(z) {\n          return z.length > A ? (lt.truncation[n] = !0, es(z, D, R)) : z;\n        }), this.getInvisibleAxisRef().selectAll("g.tick text").data(q).text(function(z) {\n          return z.length > A ? es(z, D, R) : z;\n        }), l.selectAll("g.ticks").html(this.getInvisibleAxisRef().html()), l.selectAll("g.tick text").data(q);\n      }\n    }\n    this.addEventListeners();\n  }\n  addEventListeners() {\n    const t = this.getComponentContainer(), { position: n } = this.configs, r = N.appendOrSelect(t, `g.axis.${n}`), i = this.getOptions(), s = y(i, "axes", n), a = y(s, "scaleType"), o = y(s, "truncation", "threshold"), l = this;\n    r.selectAll("g.tick text").on("mouseover", function(c, u) {\n      l.services.events.dispatchEvent(T.Axis.LABEL_MOUSEOVER, {\n        event: c,\n        element: I(this),\n        datum: u\n      }), a === et.LABELS && u.length > o && l.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: c,\n        hoveredElement: I(this),\n        content: u\n      });\n    }).on("mousemove", function(c, u) {\n      l.services.events.dispatchEvent(T.Axis.LABEL_MOUSEMOVE, {\n        event: c,\n        element: I(this),\n        datum: u\n      }), a === et.LABELS && u.length > o && l.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: c\n      });\n    }).on("click", function(c, u) {\n      l.services.events.dispatchEvent(T.Axis.LABEL_CLICK, {\n        event: c,\n        element: I(this),\n        datum: u\n      });\n    }).on("mouseout", function(c, u) {\n      l.services.events.dispatchEvent(T.Axis.LABEL_MOUSEOUT, {\n        event: c,\n        element: I(this),\n        datum: u\n      }), a === et.LABELS && l.services.events.dispatchEvent(T.Tooltip.HIDE);\n    });\n  }\n  getInvisibleAxisRef() {\n    const { position: t } = this.configs;\n    return this.getComponentContainer().select(`g.axis.${t} g.ticks.invisible`);\n  }\n  getTitleRef() {\n    const { position: t } = this.configs;\n    return this.getComponentContainer().select(`g.axis.${t} text.axis-title`);\n  }\n  getNumberOfFittingTicks(t, n, r) {\n    const i = Math.floor(t / (n * r));\n    return Mg(i, 2, Pn.ticks.number);\n  }\n  destroy() {\n    const t = this.getComponentContainer(), { position: n } = this.configs;\n    N.appendOrSelect(t, `g.axis.${n}`).selectAll("g.tick text").on("mouseover", null).on("mousemove", null).on("mouseout", null);\n  }\n}\nclass pD extends Ov {\n  constructor(t, n, r) {\n    super(t, n, r);\n  }\n  render(t = !0) {\n    super.render(t), super.destroy();\n    const n = this.configs.position, r = this.getComponentContainer({\n      ariaLabel: "axes"\n    }), i = N.appendOrSelect(r, `g.axis.${n}`), s = this;\n    i.selectAll("g.tick").each(function(a, o) {\n      const l = I(this);\n      l.classed("tick-hover", !0).attr("tabindex", o === 0 ? 0 : -1);\n      const c = l.select("text"), { width: u, height: d } = N.getSVGElementSize(c, {\n        useBBox: !0\n      }), h = N.appendOrSelect(l, "rect.axis-holder");\n      let p = 0, f = 0;\n      switch (n) {\n        case G.LEFT:\n          p = -u + Number(c.attr("x")), f = -(d / 2);\n          break;\n        case G.RIGHT:\n          p = Math.abs(Number(c.attr("x"))), f = -(d / 2);\n          break;\n        case G.TOP:\n          p = -(u / 2), f = -d + Number(c.attr("y")) / 2, s.truncation[n] && (p = 0, h.attr("transform", "rotate(-45)"));\n          break;\n        case G.BOTTOM:\n          p = -(u / 2), f = d / 2 - 2, s.truncation[n] && (p = -u, h.attr("transform", "rotate(-45)"));\n          break;\n      }\n      h.attr("x", p - Pn.hover.rectanglePadding).attr("y", f).attr("width", u + Pn.hover.rectanglePadding * 2).attr("height", d).lower();\n    }), this.addEventListeners();\n  }\n  addEventListeners() {\n    const t = this.getComponentContainer(), { position: n } = this.configs, r = N.appendOrSelect(t, `g.axis.${n}`), i = this.getOptions(), s = y(i, "axes", n), a = y(s, "scaleType"), o = y(s, "truncation", "threshold"), l = this;\n    r.selectAll("g.tick.tick-hover").on("mouseover", function(c) {\n      const u = I(this).select("text"), d = u.datum();\n      l.services.events.dispatchEvent(T.Axis.LABEL_MOUSEOVER, {\n        event: c,\n        element: u,\n        datum: d\n      }), a === et.LABELS && d.length > o && l.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: c,\n        element: u,\n        datum: d\n      });\n    }).on("mousemove", function(c) {\n      const u = I(this).select("text"), d = u.datum();\n      l.services.events.dispatchEvent(T.Axis.LABEL_MOUSEMOVE, {\n        event: c,\n        element: u,\n        datum: d\n      }), l.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: c\n      });\n    }).on("click", function(c) {\n      l.services.events.dispatchEvent(T.Axis.LABEL_CLICK, {\n        event: c,\n        element: I(this).select("text"),\n        datum: I(this).select("text").datum()\n      });\n    }).on("mouseout", function(c) {\n      l.services.events.dispatchEvent(T.Axis.LABEL_MOUSEOUT, {\n        event: c,\n        element: I(this).select("text"),\n        datum: I(this).select("text").datum()\n      }), a === et.LABELS && l.services.events.dispatchEvent(T.Tooltip.HIDE);\n    }).on("focus", function(c) {\n      const u = { clientX: 0, clientY: 0 };\n      if (c.target) {\n        c.target.focus();\n        const d = c.target.getBoundingClientRect();\n        u.clientX = d.x, u.clientY = d.y;\n      }\n      l.services.events.dispatchEvent(T.Axis.LABEL_FOCUS, {\n        event: { ...c, ...u },\n        element: I(this),\n        datum: I(this).select("text").datum()\n      });\n    }).on("blur", function(c) {\n      l.services.events.dispatchEvent(T.Axis.LABEL_BLUR, {\n        event: c,\n        element: I(this),\n        datum: I(this).select("text").datum()\n      });\n    }).on("keydown", function(c) {\n      c.key && c.key === "Escape" && (l.services.events.dispatchEvent(T.Tooltip.HIDE), l.services.events.dispatchEvent(T.Axis.LABEL_BLUR, {\n        event: c,\n        element: I(this),\n        datum: I(this).select("text").datum()\n      })), n === G.LEFT || n === G.RIGHT ? c.key && c.key === "ArrowUp" ? l.goNext(this, c) : c.key && c.key === "ArrowDown" && l.goPrevious(this, c) : c.key && c.key === "ArrowLeft" ? l.goPrevious(this, c) : c.key && c.key === "ArrowRight" && l.goNext(this, c);\n    });\n  }\n  // Focus on the next HTML element sibling\n  goNext(t, n) {\n    t.nextElementSibling && t.nextElementSibling.tagName !== "path" && t.nextElementSibling.dispatchEvent(new Event("focus")), n.preventDefault();\n  }\n  // Focus on the previous HTML element sibling\n  goPrevious(t, n) {\n    t.previousElementSibling && t.previousElementSibling.tagName !== "path" && t.previousElementSibling.dispatchEvent(new Event("focus")), n.preventDefault();\n  }\n  destroy() {\n    const t = this.getComponentContainer(), { position: n } = this.configs;\n    N.appendOrSelect(t, `g.axis.${n}`).selectAll("g.tick.tick-hover").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("focus", null).on("blur", null);\n  }\n}\nclass fe extends mt {\n  constructor() {\n    super(...arguments), this.type = "2D-axes", this.renderType = rt.SVG, this.children = {}, this.thresholds = [], this.margins = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n  }\n  render(t = !1) {\n    const n = {}, r = Object.keys(G), i = y(this.getOptions(), "axes");\n    r.forEach((a) => {\n      i[G[a]] && (n[G[a]] = !0);\n    }), this.configs.axes = n, r.forEach((a) => {\n      const o = G[a];\n      if (this.configs.axes[o] && !this.children[o]) {\n        const l = {\n          position: o,\n          axes: this.configs.axes,\n          margins: this.margins\n        }, c = this.model.axisFlavor === Ga.DEFAULT ? new Ov(this.model, this.services, l) : new pD(this.model, this.services, l);\n        c.setModel(this.model), c.setServices(this.services), c.setParent(this.parent), this.children[o] = c;\n      }\n    }), Object.keys(this.children).forEach((a) => {\n      this.children[a].render(t);\n    });\n    const s = {};\n    Object.keys(this.children).forEach((a) => {\n      const o = this.children[a], l = o.configs.position, c = o.getInvisibleAxisRef(), { width: u, height: d } = N.getSVGElementSize(c, { useBBox: !0 });\n      let h;\n      switch (o.getTitleRef().empty() ? h = 0 : (h = N.getSVGElementSize(o.getTitleRef(), {\n        useBBox: !0\n      }).height, (l === G.LEFT || l === G.RIGHT) && (h += 5)), l) {\n        case G.TOP:\n          s.top = d + h;\n          break;\n        case G.BOTTOM:\n          s.bottom = d + h;\n          break;\n        case G.LEFT:\n          s.left = u + h;\n          break;\n        case G.RIGHT:\n          s.right = u + h;\n          break;\n      }\n    }), this.services.events.dispatchEvent(T.Axis.RENDER_COMPLETE), Object.keys(s).some(\n      (a) => this.margins[a] !== s[a]\n    ) && (this.margins = Object.assign(this.margins, s), this.model.set({ axesMargins: this.margins }, { skipUpdate: !0 }), this.services.events.dispatchEvent(T.ZoomBar.UPDATE), Object.keys(this.children).forEach((a) => {\n      const o = this.children[a];\n      o.margins = this.margins;\n    }), this.render(!0));\n  }\n}\nclass ce extends mt {\n  constructor() {\n    super(...arguments), this.type = "skeleton";\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = y(this.getOptions(), "data", "loading");\n    n ? this.renderSkeleton(n) : this.removeSkeleton();\n  }\n  renderSkeleton(t) {\n    if (this.configs.skeleton === zt.GRID)\n      this.renderGridSkeleton(t);\n    else if (this.configs.skeleton === zt.VERT_OR_HORIZ)\n      this.renderVertOrHorizSkeleton(t);\n    else if (this.configs.skeleton === zt.PIE)\n      this.renderPieSkeleton(t);\n    else if (this.configs.skeleton === zt.DONUT)\n      this.renderDonutSkeleton(t);\n    else\n      throw new Error(`"${this.configs.skeleton}" is not a valid Skeleton type.`);\n  }\n  renderGridSkeleton(t) {\n    this.setScales(), this.drawBackdrop(t), this.drawXGrid(t), this.drawYGrid(t), t && this.setShimmerEffect("shimmer-lines");\n  }\n  renderVertOrHorizSkeleton(t) {\n    const n = this.services.cartesianScales.getOrientation();\n    this.setScales(), this.drawBackdrop(t), n === Ft.VERTICAL && this.drawYGrid(t), n === Ft.HORIZONTAL && this.drawXGrid(t), this.setShimmerEffect("shimmer-lines");\n  }\n  renderPieSkeleton(t) {\n    const n = this.computeOuterRadius();\n    this.drawRing(n, 0, t), t && this.setShimmerEffect("shimmer-areas");\n  }\n  renderDonutSkeleton(t) {\n    const n = this.computeOuterRadius(), r = this.computeInnerRadius();\n    this.drawRing(n, r, t), t && this.setShimmerEffect("shimmer-areas");\n  }\n  setScales() {\n    const t = this.services.cartesianScales.getMainXScale().range(), n = this.services.cartesianScales.getMainYScale().range();\n    this.xScale = Fe().domain([0, 1]).range(t), this.yScale = Fe().domain([0, 1]).range(n);\n  }\n  drawBackdrop(t) {\n    const n = this.parent, { width: r, height: i } = N.getSVGElementSize(n, {\n      useAttrs: !0\n    });\n    this.backdrop = N.appendOrSelect(n, "svg.chart-skeleton.DAII").attr("role", "presentation").attr("width", r).attr("height", i);\n    const s = N.appendOrSelect(this.backdrop, "rect.chart-skeleton-backdrop");\n    s.attr("width", "100%").attr("height", "100%");\n    const [a] = this.xScale.range(), [, o] = this.yScale.range();\n    this.backdrop.merge(s).attr("x", a).attr("y", o), s.classed("shimmer-effect-lines", t).classed("empty-state-lines", !t).style(\n      "stroke",\n      t ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null\n    );\n  }\n  drawXGrid(t) {\n    const n = +this.backdrop.attr("width"), r = y(this.getOptions(), "grid", "x", "numberOfTicks"), i = this.xScale.ticks(r).map((o) => o * n), s = N.appendOrSelect(this.backdrop, "g.x.skeleton"), a = s.selectAll("line").data(i);\n    a.enter().append("line").merge(a).attr("x1", (o) => o).attr("x2", (o) => o).attr("y1", 0).attr("y2", "100%"), s.selectAll("line").classed("shimmer-effect-lines", t).classed("empty-state-lines", !t).style(\n      "stroke",\n      t ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null\n    );\n  }\n  drawYGrid(t) {\n    const n = +this.backdrop.attr("height"), r = this.backdrop.attr("width"), i = y(this.getOptions(), "grid", "y", "numberOfTicks"), s = this.xScale.ticks(i).map((l) => l * n), a = N.appendOrSelect(this.backdrop, "g.y.skeleton"), o = a.selectAll("line").data(s);\n    o.enter().append("line").merge(o).attr("x1", 0).attr("x2", r).attr("y1", (l) => l).attr("y2", (l) => l), a.selectAll("line").classed("shimmer-effect-lines", t).classed("empty-state-lines", !t).style(\n      "stroke",\n      t ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null\n    );\n  }\n  drawRing(t, n, r = !0) {\n    const i = this.parent, { width: s, height: a } = N.getSVGElementSize(i, {\n      useAttrs: !0\n    }), o = N.appendOrSelect(i, "svg.chart-skeleton").attr("width", s).attr("height", a).attr("role", "presentation"), l = n === 0 ? "pie" : "donut", c = y(this.getOptions(), l, "alignment");\n    N.appendOrSelect(o, "rect.chart-skeleton-area-container").attr("width", s).attr("height", a).attr("fill", "none");\n    const u = as().innerRadius(n).outerRadius(t).startAngle(0).endAngle(Math.PI * 2), d = t + Math.abs(Mt.radiusOffset), h = t + (Math.min(s, a) - t * 2) / 2, p = N.appendOrSelect(o, "path").attr("class", "skeleton-area-shape").attr("transform", `translate(${d}, ${h})`).attr("d", u).classed("shimmer-effect-areas", r).classed("empty-state-areas", !r).style(\n      "fill",\n      r ? `url(#${this.services.domUtils.generateElementIDString("shimmer-areas")})` : null\n    );\n    let f = t + Mt.xOffset;\n    c === jt.CENTER ? f = s / 2 : c === jt.RIGHT && (f = s - t - Mt.xOffset);\n    const g = t + Mt.yOffset;\n    p.attr("transform", `translate(${f}, ${g})`);\n  }\n  // same logic in pie\n  computeOuterRadius() {\n    const { width: t, height: n } = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    });\n    return Math.min(t, n) / 2 + Mt.radiusOffset;\n  }\n  // same logic in donut\n  computeInnerRadius() {\n    return this.computeOuterRadius() * (3 / 4);\n  }\n  setShimmerEffect(t) {\n    const n = "stop-bg-shimmer", r = "stop-shimmer", i = this.parent.select(".chart-skeleton"), { width: s } = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    }), a = 0, o = s, l = N.appendOrSelect(i, "defs").lower(), c = N.appendOrSelect(l, "linearGradient").attr("id", this.services.domUtils.generateElementIDString(t)).attr("class", t).attr("x1", a - 3 * 0.2 * s).attr("x2", o).attr("y1", 0).attr("y2", 0).attr("gradientUnits", "userSpaceOnUse").attr("gradientTransform", "translate(0, 0)"), u = `\n\t\t\t<stop class="${n}" offset="${a}"></stop>\n\t\t\t<stop class="${r}" offset="${a + 0.2}"></stop>\n\t\t\t<stop class="${n}" offset="${a + 2 * 0.2}"></stop>\n\t\t`;\n    c.html(u), d();\n    function d() {\n      c.attr("gradientTransform", `translate(${a - 3 * 0.2 * s}, 0)`).transition().duration(2e3).delay(1e3).ease(XC).attr("gradientTransform", `translate(${o + 3 * 0.2 * s}, 0)`).on("end", d);\n    }\n  }\n  removeSkeleton() {\n    this.parent.select(".chart-skeleton").remove();\n  }\n}\nclass fD extends mt {\n  constructor() {\n    super(...arguments), this.type = "boxplot", this.renderType = rt.SVG;\n  }\n  render(t) {\n    const n = this.getComponentContainer({ ariaLabel: "box plots", withinChartClip: !0 }), r = this.getOptions(), { groupMapsTo: i } = r.data, s = this.model.getDataGroupNames(), a = this.services.cartesianScales.getMainXScale(), o = this.services.cartesianScales.getMainYScale(), [l, c] = a.range(), [u, d] = o.range(), h = c - l, p = u - d;\n    if (h === 0)\n      return;\n    const { cartesianScales: f } = this.services, g = f.getOrientation(), m = g === Ft.VERTICAL, [v, x] = En(\n      ($) => this.services.cartesianScales.getDomainValue($),\n      ($) => this.services.cartesianScales.getRangeValue($),\n      g\n    ), _ = Math.floor((m ? h : p) / s.length), E = Math.min(_ / 2, 16), b = this.model.getBoxplotData(), S = n.selectAll(".box-group").data(b);\n    S.exit().remove();\n    const M = S.enter().append("g").attr("class", "box-group"), D = S.merge(M);\n    M.append("path").merge(S.select("path.vertical-line.start")).attr(\n      "class",\n      () => this.model.getColorClassName({\n        classNameTypes: [it.STROKE],\n        originalClassName: "vertical-line start"\n      })\n    ).attr("stroke-width", Te.strokeWidth.default).attr("fill", "none").transition().call(\n      ($) => this.services.transitions.setupTransition({\n        transition: $,\n        name: "boxplot-update-verticalstartline",\n        animate: t\n      })\n    ).attr("d", ($) => {\n      const H = f.getDomainValue($[i]), P = H, B = f.getRangeValue($.whiskers.min), O = f.getRangeValue($.quartiles.q_25);\n      return ae({ x0: H, x1: P, y0: B, y1: O }, g);\n    }), M.append("path").merge(S.select("path.vertical-line.end")).attr(\n      "class",\n      () => this.model.getColorClassName({\n        classNameTypes: [it.STROKE],\n        originalClassName: "vertical-line end"\n      })\n    ).attr("stroke-width", Te.strokeWidth.default).attr("fill", "none").transition().call(\n      ($) => this.services.transitions.setupTransition({\n        transition: $,\n        name: "boxplot-update-verticalendline",\n        animate: t\n      })\n    ).attr("d", ($) => {\n      const H = f.getDomainValue($[i]), P = H, B = f.getRangeValue($.whiskers.max), O = f.getRangeValue($.quartiles.q_75);\n      return ae({ x0: H, x1: P, y0: B, y1: O }, g);\n    }), M.append("path").merge(S.select("path.box")).attr(\n      "class",\n      () => this.model.getColorClassName({\n        classNameTypes: [it.FILL, it.STROKE],\n        originalClassName: "box"\n      })\n    ).attr("fill-opacity", Te.box.opacity.default).attr("stroke-width", Te.strokeWidth.default).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "box").attr("aria-label", ($) => $[i]).transition().call(\n      ($) => this.services.transitions.setupTransition({\n        transition: $,\n        name: "boxplot-update-quartiles",\n        animate: t\n      })\n    ).attr("d", ($) => {\n      const H = f.getDomainValue($[i]) - E / 2, P = H + E, B = f.getRangeValue(\n        Math[m ? "max" : "min"]($.quartiles.q_75, $.quartiles.q_25)\n      ), O = B + Math.abs(\n        f.getRangeValue($.quartiles.q_75) - f.getRangeValue($.quartiles.q_25)\n      );\n      return ae({ x0: H, x1: P, y0: B, y1: O }, g);\n    }), M.append("path").merge(S.select("path.highlight-area")).attr("class", "highlight-area").attr("opacity", 0).attr("d", ($) => {\n      const H = f.getDomainValue($[i]) - E / 2, P = H + E, B = f.getRangeValue($.whiskers.min), O = f.getRangeValue($.whiskers.max);\n      return ae({ x0: H, x1: P, y0: B, y1: O }, g);\n    }), M.append("path").merge(S.select("path.whisker.start")).attr(\n      "class",\n      () => this.model.getColorClassName({\n        classNameTypes: [it.STROKE],\n        originalClassName: "whisker start"\n      })\n    ).attr("stroke-width", Te.strokeWidth.thicker).attr("fill", "none").transition().call(\n      ($) => this.services.transitions.setupTransition({\n        transition: $,\n        name: "boxplot-update-startingwhisker",\n        animate: t\n      })\n    ).attr("d", ($) => {\n      const H = f.getDomainValue($[i]) - E / 4, P = H + E / 2, B = f.getRangeValue($.whiskers.min), O = f.getRangeValue($.whiskers.min);\n      return ae({ x0: H, x1: P, y0: B, y1: O }, g);\n    }), M.append("path").merge(S.select("path.median")).attr("fill", "none").attr(\n      "class",\n      () => this.model.getColorClassName({\n        classNameTypes: [it.STROKE],\n        originalClassName: "median"\n      })\n    ).attr("stroke-width", 2).transition().call(\n      ($) => this.services.transitions.setupTransition({\n        transition: $,\n        name: "boxplot-update-median",\n        animate: t\n      })\n    ).attr("d", ($) => {\n      const H = f.getDomainValue($[i]) - E / 2, P = H + E, B = f.getRangeValue($.quartiles.q_50);\n      return ae({ x0: H, x1: P, y0: B, y1: B }, g);\n    }), M.append("path").merge(S.select("path.whisker.end")).attr(\n      "class",\n      () => this.model.getColorClassName({\n        classNameTypes: [it.STROKE],\n        originalClassName: "whisker end"\n      })\n    ).attr("stroke-width", Te.strokeWidth.thicker).attr("fill", "none").transition().call(\n      ($) => this.services.transitions.setupTransition({\n        transition: $,\n        name: "boxplot-update-endingwhisker",\n        animate: t\n      })\n    ).attr("d", ($) => {\n      const H = f.getDomainValue($[i]) - E / 4, P = H + E / 2, B = f.getRangeValue($.whiskers.max), O = f.getRangeValue($.whiskers.max);\n      return ae({ x0: H, x1: P, y0: B, y1: O }, g);\n    });\n    const A = D.selectAll("circle.outlier").data(\n      ($) => $.outliers.map((H) => ({\n        min: $.whiskers.min,\n        max: $.whiskers.max,\n        [i]: $[i],\n        value: H\n      }))\n    );\n    A.exit().remove();\n    const R = A.enter().append("circle");\n    A.merge(R).attr("r", Te.circle.radius).attr(\n      "class",\n      () => this.model.getColorClassName({\n        classNameTypes: [it.FILL, it.STROKE],\n        originalClassName: "outlier"\n      })\n    ).attr("fill-opacity", Te.circle.opacity.default).attr("cx", v).transition().call(\n      ($) => this.services.transitions.setupTransition({\n        transition: $,\n        name: "boxplot-update-circles",\n        animate: t\n      })\n    ).attr("cy", x), this.addBoxEventListeners(), this.addCircleEventListeners();\n  }\n  addBoxEventListeners() {\n    const t = this, n = this.getOptions(), { groupMapsTo: r } = n.data;\n    this.parent.selectAll("path.highlight-area").on("mouseover", function(i, s) {\n      const a = I(this);\n      I(this.parentNode).select("path.box").classed("hovered", !0).attr("fill-opacity", Te.box.opacity.hovered), t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: i,\n        hoveredElement: a,\n        items: [\n          {\n            label: y(n, "locale", "translations", "group") || y(n, "tooltip", "groupLabel") || "Group",\n            value: s[r],\n            class: t.model.getColorClassName({\n              classNameTypes: [it.TOOLTIP]\n            })\n          },\n          {\n            label: "Minimum",\n            value: s.whiskers.min\n          },\n          {\n            label: "Q1",\n            value: s.quartiles.q_25\n          },\n          {\n            label: "Median",\n            value: s.quartiles.q_50\n          },\n          {\n            label: "Q3",\n            value: s.quartiles.q_75\n          },\n          {\n            label: "Maximum",\n            value: s.whiskers.max\n          },\n          {\n            label: "IQR",\n            value: s.quartiles.q_75 - s.quartiles.q_25\n          }\n        ]\n      }), t.services.events.dispatchEvent(T.Boxplot.BOX_MOUSEOVER, {\n        event: i,\n        element: a,\n        datum: s\n      });\n    }).on("mousemove", function(i, s) {\n      const a = I(this);\n      t.services.events.dispatchEvent(T.Boxplot.BOX_MOUSEMOVE, {\n        event: i,\n        element: a,\n        datum: s\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: i\n      });\n    }).on("click", function(i, s) {\n      t.services.events.dispatchEvent(T.Boxplot.BOX_CLICK, {\n        event: i,\n        element: I(this),\n        datum: s\n      });\n    }).on("mouseout", function(i, s) {\n      const a = I(this);\n      I(this.parentNode).select("path.box").classed("hovered", !1).attr("fill-opacity", Te.box.opacity.default), t.services.events.dispatchEvent(T.Boxplot.BOX_MOUSEOUT, {\n        event: i,\n        element: a,\n        datum: s\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: a\n      });\n    });\n  }\n  addCircleEventListeners() {\n    const t = this, n = this.getOptions(), { groupMapsTo: r } = n.data, i = this.services.cartesianScales.getRangeIdentifier();\n    this.parent.selectAll("circle").on("mouseover", function(s, a) {\n      const o = I(this);\n      o.classed("hovered", !0).attr("fill-opacity", Te.circle.opacity.hovered).classed("unfilled", !1), t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: s,\n        hoveredElement: o,\n        items: [\n          {\n            label: y(n, "locale", "translations", "group") || y(n, "tooltip", "groupLabel") || "Group",\n            value: a[r],\n            class: t.model.getColorClassName({\n              classNameTypes: [it.TOOLTIP]\n            })\n          },\n          {\n            label: "Outlier",\n            value: a[i]\n          }\n        ]\n      }), t.services.events.dispatchEvent(T.Boxplot.OUTLIER_MOUSEOVER, {\n        event: s,\n        element: o,\n        datum: a\n      });\n    }).on("mousemove", function(s, a) {\n      const o = I(this);\n      t.services.events.dispatchEvent(T.Boxplot.OUTLIER_MOUSEMOVE, {\n        event: s,\n        element: o,\n        datum: a\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: s\n      });\n    }).on("click", function(s, a) {\n      t.services.events.dispatchEvent(T.Boxplot.OUTLIER_CLICK, {\n        event: s,\n        element: I(this),\n        datum: a\n      });\n    }).on("mouseout", function(s, a) {\n      const o = I(this);\n      o.classed("hovered", !1).attr("fill-opacity", Te.circle.opacity.default), t.services.events.dispatchEvent(T.Boxplot.OUTLIER_MOUSEOUT, {\n        event: s,\n        element: o,\n        datum: a\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: o\n      });\n    });\n  }\n}\nclass si extends mt {\n  constructor() {\n    super(...arguments), this.type = "zero-line", this.renderType = rt.SVG;\n  }\n  render(t) {\n    const n = this.services.cartesianScales.getRangeAxisPosition({\n      groups: this.configs.groups\n    }), r = this.services.cartesianScales.getScaleByPosition(n), [i, s] = r.domain(), a = i > 0 && s < 0 || i < 0 && s > 0, o = this.getComponentContainer({\n      isPresentational: !0\n    });\n    if (!a) {\n      o.selectAll("line.domain").remove();\n      return;\n    }\n    const [l, c] = this.services.cartesianScales.getDomainScale().range();\n    let u = +r(0) + 0.5;\n    u || (u = r.range()[0]);\n    const d = Pm(\n      {\n        x0: l,\n        x1: c,\n        y0: u,\n        y1: u\n      },\n      this.services.cartesianScales.getOrientation()\n    );\n    N.appendOrSelect(o, "line.domain").transition().call(\n      (h) => this.services.transitions.setupTransition({\n        transition: h,\n        name: "zero-line-update",\n        animate: t\n      })\n    ).attr("y1", d.y0).attr("y2", d.y1).attr("x1", d.x0).attr("x2", d.x1);\n  }\n}\nclass mD extends nn {\n  constructor() {\n    super(...arguments), this.type = "bubble", this.renderType = rt.SVG;\n  }\n  getRadiusScale(t) {\n    const n = this.getOptions(), { radiusMapsTo: r } = n.bubble, i = t.data(), s = i.map((c) => c[r]).filter((c) => c), a = N.getHTMLElementSize(this.services.domUtils.getMainContainer()), o = s.length > 0, l = o ? ze(s) : [1, 1];\n    return Fe().domain(l).range(o ? n.bubble.radiusRange(a, i) : [4, 4]);\n  }\n  styleCircles(t, n) {\n    const r = this.getOptions(), { radiusMapsTo: i } = r.bubble, s = this.getRadiusScale(t), { groupMapsTo: a } = r.data, { cartesianScales: o } = this.services, l = (h) => o.getDomainValue(h), c = (h) => o.getRangeValue(h), [u, d] = En(\n      l,\n      c,\n      o.getOrientation()\n    );\n    t.raise().classed("dot", !0).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-label", (h) => {\n      const p = o.getRangeIdentifier(h);\n      return h[p];\n    }).transition().call(\n      (h) => this.services.transitions.setupTransition({\n        transition: h,\n        name: "bubble-update-enter",\n        animate: n\n      })\n    ).attr("cx", u).attr("cy", d).attr("r", (h) => s(h[i] || 1)).attr(\n      "class",\n      (h) => this.model.getColorClassName({\n        classNameTypes: [it.FILL, it.STROKE],\n        dataGroupName: h[a],\n        originalClassName: "dot"\n      })\n    ).style("fill", (h) => {\n      const p = this.services.cartesianScales.getDomainIdentifier(h);\n      return this.model.getFillColor(h[a], h[p], h);\n    }).style("stroke", (h) => {\n      const p = this.services.cartesianScales.getDomainIdentifier(h);\n      return this.model.getStrokeColor(h[a], h[p], h);\n    }).attr("fill-opacity", r.bubble.fillOpacity).attr("opacity", 1);\n  }\n  getTooltipAdditionalItems(t) {\n    const n = y(this.getOptions(), "bubble");\n    return [\n      {\n        label: y(n, "radiusLabel"),\n        value: t[y(n, "radiusMapsTo")]\n      }\n    ];\n  }\n}\nclass gD extends mt {\n  constructor() {\n    super(...arguments), this.type = "bullet", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, { groupMapsTo: r } = this.getOptions().data;\n      this.parent.selectAll("path.bar").transition("legend-hover-simple-bar").call(\n        (i) => this.services.transitions.setupTransition({\n          transition: i,\n          name: "legend-hover-simple-bar"\n        })\n      ).attr("opacity", (i) => i[r] !== n.datum().name ? 0.3 : 1);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.bar").transition("legend-mouseout-simple-bar").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-simple-bar"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t) {\n    const n = this.getOptions(), { groupMapsTo: r } = n.data, i = this.getComponentContainer({ ariaLabel: "bullet graphs", withinChartClip: !0 }), s = this.model.getDisplayData(this.configs.groups), a = this.services.cartesianScales.getRangeScale(), o = this.services.cartesianScales.getRangeIdentifier(), [l, c] = a.range(), [, u] = a.domain(), d = () => {\n      const g = [];\n      s.forEach((v) => {\n        v.ranges ? v.ranges.forEach((x, _) => {\n          x != null && x < u && g.push({\n            datum: v,\n            value: x,\n            order: _ + 1\n          });\n        }) : g.push({\n          datum: v,\n          order: 1\n        });\n      });\n      const m = N.appendOrSelect(i, "g.range-boxes").selectAll("path.range-box").data(g, (v) => `${v[r]}-${v.order}`);\n      m.exit().attr("opacity", 0).remove(), m.enter().append("path").attr("opacity", 0).merge(m).attr("class", (v) => `range-box order-${v.order}`).transition().call(\n        (v) => this.services.transitions.setupTransition({\n          transition: v,\n          name: "bullet-range-box-update-enter",\n          animate: t\n        })\n      ).attr("d", (v) => {\n        let x, _, E, b;\n        return v.order === 1 ? (x = this.services.cartesianScales.getDomainValue(v.datum) - 16 / 2, _ = x + 16, E = c - 2, b = l + 1) : (x = this.services.cartesianScales.getDomainValue(v.datum) - 16 / 2, _ = x + 16, E = this.services.cartesianScales.getRangeValue(v.value), b = c), ae(\n          { x0: x, x1: _, y0: E, y1: b },\n          this.services.cartesianScales.getOrientation()\n        );\n      }).attr("opacity", 1);\n    }, h = () => {\n      const g = N.appendOrSelect(i, "g.bars").selectAll("path.bar").data(s, (m) => m[r]);\n      g.exit().attr("opacity", 0).remove(), g.enter().append("path").attr("opacity", 0).merge(g).classed("bar", !0).transition().call(\n        (m) => this.services.transitions.setupTransition({\n          transition: m,\n          name: "bullet-bar-update-enter",\n          animate: t\n        })\n      ).attr(\n        "class",\n        (m) => this.model.getColorClassName({\n          classNameTypes: [it.FILL],\n          dataGroupName: m[r],\n          originalClassName: "bar"\n        })\n      ).style("fill", (m) => {\n        const v = this.services.cartesianScales.getDomainIdentifier(m);\n        return this.model.getFillColor(m[r], m[v], m);\n      }).attr("d", (m) => {\n        const v = this.services.cartesianScales.getDomainValue(m) - 4, x = v + 8, _ = this.services.cartesianScales.getRangeValue(0) + 1, E = this.services.cartesianScales.getRangeValue(m);\n        return ae(\n          { x0: v, x1: x, y0: _, y1: E },\n          this.services.cartesianScales.getOrientation()\n        );\n      }).attr("opacity", 1).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (m) => m.value);\n    }, p = () => {\n      const g = N.appendOrSelect(i, "g.markers").selectAll("path.marker").data(\n        s.filter((m) => y(m, "marker") !== null),\n        (m) => m[r]\n      );\n      g.exit().attr("opacity", 0).remove(), g.enter().append("path").attr("opacity", 0).merge(g).classed("marker", !0).transition().call(\n        (m) => this.services.transitions.setupTransition({\n          transition: m,\n          name: "bullet-marker-update-enter",\n          animate: t\n        })\n      ).attr("d", (m) => {\n        const v = this.services.cartesianScales.getDomainValue(m) - 12, x = v + 24, _ = this.services.cartesianScales.getRangeValue(m.marker);\n        return ae(\n          { x0: v, x1: x, y0: _, y1: _ },\n          this.services.cartesianScales.getOrientation()\n        );\n      }).attr("opacity", 1);\n    }, f = () => {\n      let g = [];\n      s.filter((v) => y(v, "marker") !== null).forEach((v) => {\n        const x = v.marker, _ = v[o];\n        g = g.concat([\n          { datum: v, value: x * 0.25, barValue: _ },\n          { datum: v, value: x * 0.5, barValue: _ },\n          { datum: v, value: x * 0.75, barValue: _ }\n        ]);\n      });\n      const m = N.appendOrSelect(i, "g.quartiles").selectAll("path.quartile").data(g, (v) => v[r]);\n      m.exit().attr("opacity", 0).remove(), m.enter().append("path").attr("opacity", 0).merge(m).attr("class", (v) => `quartile ${v.value <= v.barValue ? "over-bar" : ""}`).transition().call(\n        (v) => this.services.transitions.setupTransition({\n          transition: v,\n          name: "bullet-quartile-update-enter",\n          animate: t\n        })\n      ).attr("d", ({ datum: v, value: x }) => {\n        let _ = 4;\n        v.ranges && v.ranges.indexOf(x) !== -1 && (_ = 8);\n        const E = this.services.cartesianScales.getDomainValue(v) - _ / 2, b = E + _, S = this.services.cartesianScales.getRangeValue(x);\n        return ae(\n          { x0: E, x1: b, y0: S, y1: S },\n          this.services.cartesianScales.getOrientation()\n        );\n      }).attr("opacity", 1);\n    };\n    d(), h(), p(), f(), this.addEventListeners();\n  }\n  addEventListeners() {\n    const t = this, n = this.getOptions(), { groupMapsTo: r } = n.data, i = this.services.cartesianScales.getRangeIdentifier(), { code: s, number: a } = y(n, "locale");\n    this.parent.selectAll("path.bar").on("mouseover", function(o, l) {\n      const c = I(this);\n      c.classed("hovered", !0), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOVER, {\n        event: o,\n        element: c,\n        datum: l\n      });\n      const u = y(n, "bullet", "performanceAreaTitles"), d = t.model.getMatchingRangeIndexForDatapoint(l);\n      t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: o,\n        hoveredElement: c,\n        items: [\n          {\n            label: y(n, "locale", "translations", "group") || y(n, "tooltip", "groupLabel") || "Group",\n            value: l[r],\n            class: t.model.getColorClassName({\n              classNameTypes: [it.TOOLTIP],\n              dataGroupName: l[r]\n            })\n          },\n          {\n            label: "Value",\n            value: l[i]\n          },\n          {\n            label: "Target",\n            value: l.marker\n          },\n          {\n            label: "Percentage",\n            value: `${a(Math.floor(l[i] / l.marker * 100), s)}%`\n          },\n          {\n            label: "Performance",\n            value: u[d]\n          }\n        ]\n      });\n    }).on("mousemove", function(o, l) {\n      t.services.events.dispatchEvent(T.Bar.BAR_MOUSEMOVE, {\n        event: o,\n        element: I(this),\n        datum: l\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: o\n      });\n    }).on("click", function(o, l) {\n      t.services.events.dispatchEvent(T.Bar.BAR_CLICK, {\n        event: o,\n        element: I(this),\n        datum: l\n      });\n    }).on("mouseout", function(o, l) {\n      const c = I(this);\n      c.classed("hovered", !1), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOUT, {\n        event: o,\n        element: c,\n        datum: l\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: c\n      });\n    });\n  }\n  destroy() {\n    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n}\nfunction vD(e) {\n  return e;\n}\nfunction yD(e) {\n  if (e == null) return vD;\n  var t, n, r = e.scale[0], i = e.scale[1], s = e.translate[0], a = e.translate[1];\n  return function(o, l) {\n    l || (t = n = 0);\n    var c = 2, u = o.length, d = new Array(u);\n    for (d[0] = (t += o[0]) * r + s, d[1] = (n += o[1]) * i + a; c < u; ) d[c] = o[c], ++c;\n    return d;\n  };\n}\nfunction xD(e, t) {\n  for (var n, r = e.length, i = r - t; i < --r; ) n = e[i], e[i++] = e[r], e[r] = n;\n}\nfunction bD(e, t) {\n  return typeof t == "string" && (t = e.objects[t]), t.type === "GeometryCollection" ? { type: "FeatureCollection", features: t.geometries.map(function(n) {\n    return fp(e, n);\n  }) } : fp(e, t);\n}\nfunction fp(e, t) {\n  var n = t.id, r = t.bbox, i = t.properties == null ? {} : t.properties, s = uu(e, t);\n  return n == null && r == null ? { type: "Feature", properties: i, geometry: s } : r == null ? { type: "Feature", id: n, properties: i, geometry: s } : { type: "Feature", id: n, bbox: r, properties: i, geometry: s };\n}\nfunction uu(e, t) {\n  var n = yD(e.transform), r = e.arcs;\n  function i(u, d) {\n    d.length && d.pop();\n    for (var h = r[u < 0 ? ~u : u], p = 0, f = h.length; p < f; ++p)\n      d.push(n(h[p], p));\n    u < 0 && xD(d, f);\n  }\n  function s(u) {\n    return n(u);\n  }\n  function a(u) {\n    for (var d = [], h = 0, p = u.length; h < p; ++h) i(u[h], d);\n    return d.length < 2 && d.push(d[0]), d;\n  }\n  function o(u) {\n    for (var d = a(u); d.length < 4; ) d.push(d[0]);\n    return d;\n  }\n  function l(u) {\n    return u.map(o);\n  }\n  function c(u) {\n    var d = u.type, h;\n    switch (d) {\n      case "GeometryCollection":\n        return { type: d, geometries: u.geometries.map(c) };\n      case "Point":\n        h = s(u.coordinates);\n        break;\n      case "MultiPoint":\n        h = u.coordinates.map(s);\n        break;\n      case "LineString":\n        h = a(u.arcs);\n        break;\n      case "MultiLineString":\n        h = u.arcs.map(a);\n        break;\n      case "Polygon":\n        h = l(u.arcs);\n        break;\n      case "MultiPolygon":\n        h = u.arcs.map(l);\n        break;\n      default:\n        return null;\n    }\n    return { type: d, coordinates: h };\n  }\n  return c(t);\n}\nfunction _D(e, t) {\n  var n = {}, r = {}, i = {}, s = [], a = -1;\n  t.forEach(function(c, u) {\n    var d = e.arcs[c < 0 ? ~c : c], h;\n    d.length < 3 && !d[1][0] && !d[1][1] && (h = t[++a], t[a] = c, t[u] = h);\n  }), t.forEach(function(c) {\n    var u = o(c), d = u[0], h = u[1], p, f;\n    if (p = i[d])\n      if (delete i[p.end], p.push(c), p.end = h, f = r[h]) {\n        delete r[f.start];\n        var g = f === p ? p : p.concat(f);\n        r[g.start = p.start] = i[g.end = f.end] = g;\n      } else\n        r[p.start] = i[p.end] = p;\n    else if (p = r[h])\n      if (delete r[p.start], p.unshift(c), p.start = d, f = i[d]) {\n        delete i[f.end];\n        var m = f === p ? p : f.concat(p);\n        r[m.start = f.start] = i[m.end = p.end] = m;\n      } else\n        r[p.start] = i[p.end] = p;\n    else\n      p = [c], r[p.start = d] = i[p.end = h] = p;\n  });\n  function o(c) {\n    var u = e.arcs[c < 0 ? ~c : c], d = u[0], h;\n    return e.transform ? (h = [0, 0], u.forEach(function(p) {\n      h[0] += p[0], h[1] += p[1];\n    })) : h = u[u.length - 1], c < 0 ? [h, d] : [d, h];\n  }\n  function l(c, u) {\n    for (var d in c) {\n      var h = c[d];\n      delete u[h.start], delete h.start, delete h.end, h.forEach(function(p) {\n        n[p < 0 ? ~p : p] = 1;\n      }), s.push(h);\n    }\n  }\n  return l(i, r), l(r, i), t.forEach(function(c) {\n    n[c < 0 ? ~c : c] || s.push([c]);\n  }), s;\n}\nfunction ED(e) {\n  for (var t = -1, n = e.length, r, i = e[n - 1], s = 0; ++t < n; ) r = i, i = e[t], s += r[0] * i[1] - r[1] * i[0];\n  return Math.abs(s);\n}\nfunction OD(e) {\n  return uu(e, SD.apply(this, arguments));\n}\nfunction SD(e, t) {\n  var n = {}, r = [], i = [];\n  t.forEach(s);\n  function s(l) {\n    switch (l.type) {\n      case "GeometryCollection":\n        l.geometries.forEach(s);\n        break;\n      case "Polygon":\n        a(l.arcs);\n        break;\n      case "MultiPolygon":\n        l.arcs.forEach(a);\n        break;\n    }\n  }\n  function a(l) {\n    l.forEach(function(c) {\n      c.forEach(function(u) {\n        (n[u = u < 0 ? ~u : u] || (n[u] = [])).push(l);\n      });\n    }), r.push(l);\n  }\n  function o(l) {\n    return ED(uu(e, { type: "Polygon", arcs: [l] }).coordinates[0]);\n  }\n  return r.forEach(function(l) {\n    if (!l._) {\n      var c = [], u = [l];\n      for (l._ = 1, i.push(c); l = u.pop(); )\n        c.push(l), l.forEach(function(d) {\n          d.forEach(function(h) {\n            n[h < 0 ? ~h : h].forEach(function(p) {\n              p._ || (p._ = 1, u.push(p));\n            });\n          });\n        });\n    }\n  }), r.forEach(function(l) {\n    delete l._;\n  }), {\n    type: "MultiPolygon",\n    arcs: i.map(function(l) {\n      var c = [], u;\n      if (l.forEach(function(g) {\n        g.forEach(function(m) {\n          m.forEach(function(v) {\n            n[v < 0 ? ~v : v].length < 2 && c.push(v);\n          });\n        });\n      }), c = _D(e, c), (u = c.length) > 1)\n        for (var d = 1, h = o(c[0]), p, f; d < u; ++d)\n          (p = o(c[d])) > h && (f = c[0], c[0] = c[d], c[d] = f, h = p);\n      return c;\n    }).filter(function(l) {\n      return l.length > 0;\n    })\n  };\n}\nclass TD extends Vn {\n  constructor() {\n    super(...arguments), this.type = "ruler-binned", this.renderType = rt.SVG;\n  }\n  showRuler(t, [n, r]) {\n    const i = this.parent, s = this.model.getOptions(), { cartesianScales: a } = this.services, o = a.getOrientation(), l = a.getRangeScale(), [c, u] = l.range(), d = a.getDomainScale(), h = d.invert(\n      o === Ft.VERTICAL ? n : r\n    ), p = N.appendOrSelect(i, "g.ruler").attr("aria-label", "ruler"), f = N.appendOrSelect(p, "line.ruler-line"), g = i.selectAll("[role=graphics-symbol]").filter((m) => {\n      if (parseFloat(gt(m, "data.x0")) <= h && parseFloat(gt(m, "data.x1")) >= h)\n        return !0;\n    });\n    if (g.size() > 0) {\n      this.elementsToHighlight && this.elementsToHighlight.size() > 0 && !Cg(this.elementsToHighlight, g) && this.hideRuler(), g.dispatch("mouseover"), this.elementsToHighlight = g;\n      const m = I(g.nodes()[0]).datum(), v = parseFloat(gt(m, "data.x0")), x = parseFloat(gt(m, "data.x1")), _ = this.model.getActiveDataGroupNames(), E = _.reverse().map((b) => ({\n        label: b,\n        value: gt(m, `data.${b}`),\n        class: this.model.getColorClassName({\n          classNameTypes: [it.TOOLTIP],\n          dataGroupName: b\n        })\n      })).filter((b) => b.value !== 0);\n      if (E.length > 0) {\n        this.services.events.dispatchEvent(T.Tooltip.SHOW, {\n          event: t,\n          mousePosition: [n, r],\n          hoveredElement: f,\n          items: [\n            {\n              label: gt(s, "bins.rangeLabel") || "Range",\n              value: `${v} – ${x}`\n            },\n            ...E,\n            ...y(s, "tooltip", "showTotal") === !0 ? [\n              {\n                label: gt(s, "locale.translations.total") || gt(s, "tooltip.totalLabel") || "Total",\n                value: _.reduce(\n                  (S, M) => S + parseFloat(gt(m, `data.${M}`)),\n                  0\n                )\n              }\n            ] : []\n          ]\n        }), p.attr("opacity", 1);\n        const b = d((v + x) / 2);\n        o === "horizontal" ? f.attr("x1", u).attr("x2", c).attr("y1", b).attr("y2", b) : f.attr("y1", u).attr("y2", c).attr("x1", b).attr("x2", b);\n      } else\n        this.hideRuler();\n    } else\n      this.hideRuler();\n  }\n}\nclass Ua extends Vn {\n  formatTooltipData(t) {\n    return t.reverse();\n  }\n}\nconst wD = (e, t) => {\n  const n = e.x, r = e.y, i = t.x, s = t.y, a = Rg();\n  return a.moveTo(n, r), a.lineTo(i, s), a.toString();\n}, $D = {\n  d: "M7 0v8L0 4z"\n}, MD = {\n  d: "M0 0v8l7-4z"\n}, CD = {\n  d: "M5.32 9.513a4.75 4.75 0 100-9.5 4.75 4.75 0 000 9.5z"\n}, AD = {\n  d: "M5.03517654-1e-7l4.99999996 5-4.99999996 5-5-5L2.4517844 2.58339204z"\n}, LD = {\n  d: "M0 .44974747h8v8H0v-3.6830331z"\n}, kD = {\n  d: "M0 0h1.5v8H0z"\n};\nclass Sv extends lu {\n  constructor(t, n, r) {\n    super(t, n, r), this.type = "color-legend", this.renderType = rt.SVG, this.gradient_id = `gradient-id-${Math.floor(Math.random() * 99999999999)}`, this.handleAxisCompleteEvent = () => {\n      const i = this.getComponentContainer(), { width: s } = N.getSVGElementSize(i, {\n        useAttrs: !0\n      }), a = y(this.getOptions(), "data", "loading");\n      if (s > It.color.barWidth && !a) {\n        const o = y(this.getOptions(), "heatmap", "colorLegend", "title"), { cartesianScales: l } = this.services, c = l.getMainXScale().range();\n        if (c[0] > 1 && (i.select("g.legend").attr("transform", `translate(${c[0]}, 0)`), o)) {\n          const { width: u } = N.getSVGElementSize(\n            i.select("g.legend-title").select("text"),\n            { useBBox: !0 }\n          ), d = c[0] - u - 9;\n          d > 1 ? i.select("g.legend-title").attr("transform", `translate(${d}, 0)`) : (i.select("g.legend").attr("transform", `translate(${c[0]}, 16)`), i.select("g.legend-title").attr("transform", `translate(${c[0]}, 0)`));\n        }\n      } else\n        i.select("g.legend-title").attr("transform", "translate(0, 0)");\n    }, this.chartType = r.chartType;\n  }\n  init() {\n    this.chartType === "heatmap" && this.services.events.addEventListener(T.Axis.RENDER_COMPLETE, this.handleAxisCompleteEvent);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !1) {\n    const n = this.getOptions(), r = this.getComponentContainer({\n      ariaLabel: "legend"\n    }), { width: i } = N.getSVGElementSize(r, {\n      useAttrs: !0\n    }), s = y(n, "color", "gradient", "colors"), a = y(n, this.chartType, "colorLegend", "type");\n    let o = y(n, "color", "pairing", "option");\n    const l = y(n, "heatmap", "colorLegend", "title");\n    if (y(this.getOptions(), "data", "loading")) {\n      r.html("");\n      return;\n    }\n    const c = !Be(s), u = zm(this.model.getDisplayData()), d = !(i <= It.color.barWidth), h = d ? It.color.barWidth : i, p = N.appendOrSelect(r, "g.legend"), f = N.appendOrSelect(p, "g.legend-axis");\n    if (l) {\n      const A = N.appendOrSelect(r, "g.legend-title");\n      N.appendOrSelect(A, "text").text(l).attr("dy", "0.7em"), p.attr("transform", "translate(0, 16)");\n    }\n    const g = u[0] < 0 && u[1] > 0 ? "diverge" : "mono";\n    (o < 1 && o > 4 && g === "mono" || o < 1 && o > 2 && g === "diverge") && (o = 1);\n    let m = [];\n    const v = g === "diverge" ? 17 : 11;\n    if (c)\n      m = s;\n    else\n      for (let A = 1; A < v + 1; A++)\n        m.push(\n          a === qs.LINEAR ? `stop-color-${g}-${o}-${A}` : `fill-${g}-${o}-${A}`\n        );\n    const x = xe(u[0], u[1]), _ = YC(x, 3), E = Fe().domain(u).range([0, h]), b = Jc(E).tickSize(0).tickValues(_), { code: S, number: M } = y(n, "locale");\n    b.tickFormat((A) => M(A, S));\n    let D;\n    switch (a) {\n      case qs.LINEAR:\n        this.drawLinear(m, p, h);\n        break;\n      case qs.QUANTIZE:\n        D = this.drawQuantize(\n          m,\n          g,\n          c,\n          p,\n          h\n        ), E.range([D, h]);\n        break;\n      default:\n        throw Error("Entered color legend type is not supported.");\n    }\n    f.attr("transform", `translate(0,${It.color.axisYTranslation})`).call(b), f.select(".domain").remove(), f.select("g.tick:last-of-type text").style("text-anchor", d ? "middle" : "end"), f.select("g.tick:first-of-type text").style(\n      "text-anchor",\n      d && this.chartType !== "choropleth" ? "middle" : "start"\n    );\n  }\n  // Renders gradient legend\n  drawLinear(t, n, r) {\n    const i = 100 / (t.length - 1);\n    N.appendOrSelect(n, "linearGradient").attr("id", `${this.gradient_id}-legend`).selectAll("stop").data(t).enter().append("stop").attr("offset", (s, a) => `${a * i}%`).attr("class", (s, a) => t[a]).attr("stop-color", (s) => s), N.appendOrSelect(n, "rect").attr("width", r).attr("height", It.color.barHeight).style("fill", `url(#${this.gradient_id}-legend)`);\n  }\n  /**\n   * Renders quantized legend\n   * @returns number (range start)\n   */\n  drawQuantize(t, n, r, i, s) {\n    !r && n === "diverge" && t.splice(t.length / 2, 1);\n    const a = gs().domain(t).range([0, s]);\n    return N.appendOrSelect(i, "g.quantized-rect").selectAll("rect").data(a.domain()).join("rect").attr("x", (o) => a(o)).attr("y", 0).attr("width", Math.max(0, a.bandwidth() - 1)).attr("height", It.color.barHeight).attr("class", (o) => o).attr("fill", (o) => o), (!r && n) === "mono" ? a.bandwidth() - 1 : 0;\n  }\n  destroy() {\n    this.chartType === "heatmap" && this.services.events.removeEventListener(T.Axis.RENDER_COMPLETE, this.handleAxisCompleteEvent);\n  }\n}\nclass DD extends bs {\n  constructor() {\n    super(...arguments), this.type = "meter-title", this.renderType = rt.SVG;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !1) {\n    const n = y(this.model.getDisplayData(), 0), r = this.getOptions(), i = this.getComponentContainer({\n      ariaLabel: "meter title"\n    }), { groupMapsTo: s } = r.data, a = r.locale.translations.meter.title;\n    if (y(r, "meter", "proportional"))\n      this.displayTotal(), this.displayBreakdownTitle();\n    else {\n      const c = i.selectAll("text.meter-title").data(a ? [a] : [n[s]]);\n      c.enter().append("text").classed("meter-title", !0).merge(c).attr("x", 0).attr("y", "1em").text((u) => u), c.exit().remove(), this.appendPercentage();\n    }\n    this.displayStatus();\n    const o = this.getMaxTitleWidth(), l = N.appendOrSelect(i, "text.meter-title");\n    o > 0 && l.node().getComputedTextLength() > o && this.truncateTitle(l, o);\n  }\n  displayBreakdownTitle() {\n    const t = this.getComponentContainer(), n = this.getOptions(), r = this.model.getMaximumDomain(\n      this.model.getDisplayData()\n    ), i = y(n, "meter", "proportional", "total"), s = y(n, "meter", "proportional", "unit") ? y(n, "meter", "proportional", "unit") : "";\n    let a;\n    if (r === i)\n      a = null;\n    else {\n      const u = i !== null ? i - r : r, d = y(n, "meter", "proportional", "breakdownFormatter"), { code: h, number: p } = y(n, "locale");\n      a = d !== null ? d({\n        datasetsTotal: r,\n        total: i\n      }) : `${p(r, h)} ${s} used (${p(u, h)} ${s} available)`;\n    }\n    const o = t.selectAll("text.proportional-meter-title").data([a]);\n    o.enter().append("text").classed("proportional-meter-title", !0).merge(o).attr("x", 0).attr("y", "1em").text((u) => u), o.exit().remove();\n    const l = this.getMaxTitleWidth(), c = N.appendOrSelect(t, "text.proportional-meter-title");\n    l > 0 && c.node().getComputedTextLength() > l && this.truncateTitle(c, l);\n  }\n  // show the total for prop meter\n  displayTotal() {\n    const t = this.getComponentContainer(), n = this.getOptions(), r = y(n, "meter", "proportional", "total"), i = r ? y(n, "meter", "proportional", "total") : this.model.getMaximumDomain(this.model.getDisplayData()), s = y(n, "meter", "proportional", "unit") ? y(n, "meter", "proportional", "unit") : "", a = y(n, "meter", "proportional", "totalFormatter"), { code: o, number: l } = y(n, "locale"), c = a !== null ? a(i) : `${l(r, o)} ${s} total`, u = N.getHTMLElementSize(this.parent.node()).width, d = t.selectAll("text.proportional-meter-total").data([c]);\n    d.enter().append("text").classed("proportional-meter-total", !0).merge(d).attr(\n      "x",\n      this.model.getStatus() && typeof u != "string" ? u - Zt.total.paddingRight : u\n    ).attr("y", "1em").attr("text-anchor", "end").text((h) => h), d.exit().remove();\n  }\n  /**\n   * Appends the corresponding status based on the value and the peak.\n   */\n  displayStatus() {\n    const t = this, n = this.getComponentContainer(), r = N.getHTMLElementSize(this.parent.node()).width || 0, i = this.model.getStatus(), s = Zt.status.indicatorSize / 2, a = N.appendOrSelect(n, "g.status-indicator").attr("class", i !== null ? `status-indicator status--${i}` : "").attr("transform", `translate(${r - s}, 0)`), o = i ? [i] : [], l = a.selectAll("circle.status").data(o);\n    l.enter().append("circle").merge(l).attr("class", "status").attr("r", s).attr("cx", 0).attr("cy", 8);\n    const c = a.selectAll("path.innerFill").data(o);\n    c.enter().append("path").merge(c).attr("d", t.getStatusIconPathString(i)).attr("transform", `translate(-${s}, 0)`).attr("class", "innerFill"), c.exit().remove(), l.exit().remove();\n  }\n  /**\n   * Appends the associated percentage to the end of the title\n   */\n  appendPercentage() {\n    const t = y(this.model.getDisplayData(), 0, "value"), { code: n, number: r } = y(this.getOptions(), "locale"), i = this.getComponentContainer(), s = N.appendOrSelect(i, "text.meter-title"), a = y(this.getOptions(), "meter", "statusBar", "percentageIndicator", "enabled") === !0 ? [t] : [], o = i.selectAll("text.percent-value").data(a), l = Zt.statusBar.paddingRight;\n    o.enter().append("text").classed("percent-value", !0).merge(o).text((c) => `${c != null ? r(c, n) : 0}%`).attr("x", +s.attr("x") + s.node().getComputedTextLength() + l).attr("y", s.attr("y")), o.exit().remove();\n  }\n  /**\n   * Uses the parent class truncate logic\n   * @param title d3 selection of title element that will be truncated\n   * @param maxWidth the max width the title can take\n   */\n  truncateTitle(t, n) {\n    super.truncateTitle(t, n);\n    const r = N.appendOrSelect(this.parent, "tspan"), i = Zt.statusBar.paddingRight, s = Math.ceil(r.node().getComputedTextLength());\n    N.appendOrSelect(this.parent, "text.percent-value").attr(\n      "x",\n      +t.attr("x") + t.node().getComputedTextLength() + s + i\n    );\n  }\n  // computes the maximum space a title can take\n  getMaxTitleWidth() {\n    const t = y(this.getOptions(), "meter", "proportional"), n = N.getHTMLElementSize(this.parent.node()).width;\n    if (t !== null) {\n      const r = N.appendOrSelect(this.parent, "text.proportional-meter-total").node(), i = N.getSVGElementSize(r, {\n        useBBox: !0\n      }).width;\n      return n - i - Zt.total.paddingLeft;\n    } else {\n      const r = N.appendOrSelect(this.parent, "text.percent-value"), i = Zt.statusBar.paddingRight, s = r.node().getComputedTextLength(), a = N.appendOrSelect(this.parent, "g.status-indicator").node(), o = N.getSVGElementSize(a, { useBBox: !0 }).width + Zt.status.paddingLeft;\n      return n - s - i - o;\n    }\n  }\n  /**\n   * Get the associated status icon for the data\n   * @param status the active status for the meter chart\n   */\n  getStatusIconPathString(t) {\n    switch (t) {\n      case js.SUCCESS:\n        return "M6.875 11.3125 3.75 8.1875 4.74375 7.25 6.875 9.34375 11.50625 4.75 12.5 5.7375 Z";\n      case js.DANGER:\n        return "M10.7 11.5 4.5 5.3 5.3 4.5 11.5 10.7 Z";\n      case js.WARNING:\n        return "M7.9375,11.125 C7.41973305,11.125 7,11.544733 7,12.0625 C7,12.580267 7.41973305,13 7.9375,13 C8.45526695,13 8.875,12.580267 8.875,12.0625 C8.875,11.544733 8.45526695,11.125 7.9375,11.125 M7.3125, 3 8.5625, 3 8.5625, 9.875 7.3125, 9.875, 7.3125, 3 Z";\n    }\n  }\n}\nclass hu extends mt {\n  // Gets the correct width for bars based on options & configurations\n  getBarWidth() {\n    const t = this.getOptions();\n    if (t.bars.width)\n      return t.bars.width;\n    const n = this.model.getDisplayData().length, r = this.services.cartesianScales.getMainXScale(), i = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    }).width;\n    if (!r.step) {\n      const s = y(t, "bars", "spacingFactor");\n      return Math.min(t.bars.maxWidth, i * s / n);\n    }\n    return Math.min(t.bars.maxWidth, r.step() / 2);\n  }\n  isOutsideZoomedDomain(t, n) {\n    if (this.model.getDisplayData().length <= 1)\n      return !1;\n    const r = this.model.get("zoomDomain");\n    if (r !== void 0) {\n      const i = this.services.cartesianScales.getDomainScale();\n      return t < i(r[0]) || n > i(r[1]);\n    }\n    return !1;\n  }\n}\nclass RD extends mt {\n  constructor() {\n    super(...arguments), this.type = "circle-pack", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail;\n      this.parent.selectAll("circle.node").transition("legend-hover-circlepack").call(\n        (r) => this.services.transitions.setupTransition({\n          transition: r,\n          name: "legend-hover-circlepack"\n        })\n      ).attr("opacity", (r) => r.data.dataGroupName === n.datum().name ? 1 : Cr.circles.fillOpacity);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("circle.node").transition("legend-mouseout-circlepack").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-circlepack"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = this.getComponentContainer({\n      ariaLabel: "circle packs",\n      withinChartClip: !0\n    }), { width: r, height: i } = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    });\n    if (r < 1 || i < 1)\n      return;\n    let s = this.model.getDisplayData();\n    const a = this.model.hasParentNode(), o = this.model.getHierarchyLevel(), l = this.getOptions(), c = y(l, "canvasZoom", "enabled");\n    a && y(s, 0, "children") && (s = y(s, 0, "children"));\n    const u = ys({ children: s }).sum((f) => f.value).sort((f, g) => g.value - f.value), d = VL().size([r, i]).padding((f) => f.depth >= 1 ? Cr.padding.children + 3 : Cr.padding.mainGroup + 3)(u).descendants().splice(1).filter((f) => f.depth <= o), h = n.selectAll("circle.node").data(d);\n    h.exit().attr("width", 0).attr("height", 0).remove();\n    const p = h.enter().append("circle").classed("node", !0);\n    p.merge(h).attr("class", (f) => {\n      const g = c && o === 3 ? this.getZoomClass(f) : "";\n      return this.model.getColorClassName({\n        classNameTypes: [it.FILL, it.STROKE],\n        dataGroupName: f.data.dataGroupName,\n        originalClassName: f.children ? `node ${g}` : `node node-leaf ${g}`\n      });\n    }).style("fill", (f) => this.model.getFillColor(f.data.dataGroupName, null, f.data)).style("stroke", (f) => this.model.getFillColor(f.data.dataGroupName, null, f.data)).attr("cx", (f) => f.x).attr("cy", (f) => f.y).transition("circlepack-leaf-update-enter").call(\n      (f) => this.services.transitions.setupTransition({\n        transition: f,\n        name: "circlepack-leaf-update-enter"\n      })\n    ).attr("r", (f) => f.r).attr("opacity", 1).attr("fill-opacity", Cr.circles.fillOpacity), c === !0 && this.focal && (this.services.canvasZoom.zoomIn(this.focal, p, Nr), this.setBackgroundListeners()), a || this.addLegendListeners(), this.addEventListeners();\n  }\n  // turn off the highlight class on children circles\n  unhighlightChildren(t) {\n    const n = t.map((r) => r.data);\n    this.parent.selectAll("circle.node").filter((r) => n.some((i) => i === r.data) && r.depth > 1).style("stroke", (r) => this.model.getFillColor(r.data.dataGroupName, null, r.data));\n  }\n  // highlight the children circles with a stroke\n  highlightChildren(t) {\n    const n = t.map((r) => r.data);\n    this.parent.selectAll("circle.node").filter((r) => n.some((i) => i === r.data) && r.depth > 1).style("stroke", Cr.circles.hover.stroke);\n  }\n  getZoomClass(t) {\n    return this.model.getHierarchyLevel() === 3 && this.focal && (t.data === this.focal.data || this.focal.children.some((n) => n.data === t.data)) ? "focal" : "non-focal";\n  }\n  addLegendListeners() {\n    const { events: t } = this.services;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  removeBackgroundListeners() {\n    I(this.services.domUtils.getMainContainer()).on("click", () => null);\n  }\n  setBackgroundListeners() {\n    const t = I(this.services.domUtils.getMainContainer()), n = this, r = this.parent.selectAll("circle.node");\n    t.on("click", () => {\n      n.focal = null, n.model.updateHierarchyLevel(2), t.classed("zoomed-in", !1), n.services.canvasZoom.zoomOut(r, Nr);\n    });\n  }\n  // Zoom icon to be appended to the label in the tooltip\n  getZoomIcon() {\n    return `\n\t\t<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 10 10">\n\t\t\t<polygon points="5.93 3.71 4.45 3.71 4.45 2.23 3.71 2.23 3.71 3.71 2.23 3.71 2.23 4.45 3.71 4.45 3.71 5.93 4.45 5.93 4.45 4.45 5.93 4.45 5.93 3.71"/>\n\t\t\t<path d="M7.2,6.67a4,4,0,0,0,1-2.59A4.08,4.08,0,1,0,4.07,8.15h0a4,4,0,0,0,2.59-1L9.48,10,10,9.48Zm-3.12.77A3.34,3.34,0,1,1,7.41,4.08,3.34,3.34,0,0,1,4.08,7.44Z"/>\n\t\t</svg>`;\n  }\n  // add event listeners for tooltip on the circles\n  addEventListeners() {\n    const t = this;\n    this.parent.selectAll("circle.node").on("mouseover", function(n, r) {\n      const i = I(this);\n      i.classed("hovered", !0);\n      const s = t.model.getHierarchyLevel(), a = s > 2 && !i.classed("focal"), o = y(t.model.getOptions(), "canvasZoom", "enabled");\n      let l = !1;\n      if (!a) {\n        let c = [], u = [], d = null;\n        if (r.children) {\n          r.depth > 1 && o && (l = !0, i.classed("clickable", !0)), c = r.children.map((f) => {\n            if (f !== null)\n              return typeof f.data.value == "number" ? {\n                label: f.data.name,\n                value: f.data.value\n              } : {\n                label: f.data.name,\n                labelIcon: o && s <= 2 ? t.getZoomIcon() : null,\n                value: f.value\n              };\n          });\n          const p = t.model.getOptions();\n          u = [\n            {\n              label: gt(p, "locale.translations.total") || gt(p, "tooltip.totalLabel") || "Total",\n              value: r.value,\n              bold: !0\n            }\n          ], t.highlightChildren(r.children);\n        } else\n          d = r.value;\n        const h = getComputedStyle(this, null).getPropertyValue("fill");\n        t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n          event: n,\n          hoveredElement: i,\n          items: [\n            {\n              color: h,\n              label: r.data.name,\n              labelIcon: l && o && s <= 2 ? t.getZoomIcon() : null,\n              value: d\n            },\n            ...c,\n            ...u\n          ]\n        });\n      }\n      t.services.events.dispatchEvent(T.CirclePack.CIRCLE_MOUSEOVER, {\n        event: n,\n        element: i,\n        datum: r\n      });\n    }).on("mousemove", function(n, r) {\n      const i = I(this);\n      t.services.events.dispatchEvent(T.CirclePack.CIRCLE_MOUSEMOVE, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: n\n      });\n    }).on("mouseout", function(n, r) {\n      const i = I(this);\n      i.classed("hovered", !1), r.children && t.unhighlightChildren(r.children), t.services.events.dispatchEvent(T.CirclePack.CIRCLE_MOUSEOUT, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: i\n      });\n    }).on("click", function(n, r) {\n      const i = I(this), s = i.classed("non-focal"), a = y(t.model.getOptions(), "canvasZoom", "enabled");\n      if (a && t.model.getHierarchyLevel() > 2) {\n        const o = t.parent.selectAll("circle.node");\n        I(t.services.domUtils.getMainContainer()).classed("zoomed-in", !1), t.focal = null, t.model.updateHierarchyLevel(2), t.services.canvasZoom.zoomOut(o, Nr);\n      } else if (r.depth === 2 && r.children && !s && a) {\n        const o = t.parent.selectAll("circle.node");\n        I(t.services.domUtils.getMainContainer()).classed("zoomed-in", !0), t.focal = r, t.model.updateHierarchyLevel(3), t.services.canvasZoom.zoomIn(r, o, Nr), n.stopPropagation();\n      }\n      t.services.events.dispatchEvent(T.CirclePack.CIRCLE_CLICK, {\n        event: n,\n        element: i,\n        datum: r\n      });\n    });\n  }\n  destroy() {\n    this.parent.selectAll("circle.node").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("click", null);\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut), this.removeBackgroundListeners();\n  }\n}\nfunction ID(e, t) {\n  const n = fs(this._current, e);\n  return (r) => (this._current = n(r), t(this._current));\n}\nclass Tv extends mt {\n  constructor() {\n    super(...arguments), this.type = "pie", this.renderType = rt.SVG, this.isRendering = !1, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, { groupMapsTo: r } = this.getOptions().data;\n      this.parent.selectAll("path.slice").transition("legend-hover-bar").call(\n        (i) => this.services.transitions.setupTransition({\n          transition: i,\n          name: "legend-hover-bar"\n        })\n      ).attr(\n        "opacity",\n        (i) => i.data[r] !== n.datum().name ? 0.3 : 1\n      );\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.slice").transition("legend-mouseout-bar").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-bar"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  getInnerRadius() {\n    return Mt.innerRadius;\n  }\n  render(t = !0) {\n    const n = this, r = this.getComponentContainer({\n      ariaLabel: "pie graph"\n    }), i = this.getOptions(), { groupMapsTo: s } = i.data, { valueMapsTo: a } = i.pie;\n    this.isRendering = !0;\n    const o = this.model.getDisplayData().filter((A) => A[a] > 0), l = this.computeRadius();\n    this.arc = as().innerRadius(this.getInnerRadius()).outerRadius(l), this.hoverArc = as().innerRadius(this.getInnerRadius()).outerRadius(l + Mt.hoverArc.outerRadiusOffset);\n    const c = ck().value((A) => A[a]).sort(y(i, "pie", "sortFunction")).padAngle(Mt.padAngle)(o), u = N.appendOrSelect(r, "g.slices").attr("role", ht.GROUP).attr("data-name", "slices").selectAll("path.slice").data(c, (A) => A.data[s]);\n    u.exit().attr("opacity", 0).remove(), u.enter().append("path").classed("slice", !0).attr("opacity", 0).merge(u).attr(\n      "class",\n      (A) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: A.data[s],\n        originalClassName: "slice"\n      })\n    ).style("fill", (A) => n.model.getFillColor(A.data[s], null, A.data)).attr("d", this.arc).transition().call(\n      (A) => this.services.transitions.setupTransition({\n        transition: A,\n        name: "pie_slice_enter_update",\n        animate: t\n      })\n    ).attr("opacity", 1).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "slice").attr(\n      "aria-label",\n      (A) => `${A[a]}, ${Lo(A.data[a], o, a) + "%"}`\n    ).attrTween("d", function(A) {\n      return ID.bind(this)(A, n.arc);\n    }).on("end", () => {\n      n.isRendering = !1;\n    });\n    const { code: d, number: h } = y(i, "locale"), p = i.pie.labels.enabled, f = p ? c.filter((A) => A.data[a] > 0) : [], g = N.appendOrSelect(r, "g.labels").attr("role", ht.GROUP).attr("data-name", "labels").selectAll("text.pie-label").data(f, (A) => A.data[s]);\n    g.exit().attr("opacity", 0).remove();\n    const m = g.enter().append("text").classed("pie-label", !0), v = [];\n    m.merge(g).style("text-anchor", "middle").text((A) => i.pie.labels.formatter ? i.pie.labels.formatter({\n      ...A,\n      percentageValue: Lo(\n        A.data[a],\n        o,\n        a,\n        !0\n      )\n    }) : h(\n      Lo(A.data[a], o, a),\n      d\n    ) + "%").datum(function(A) {\n      const R = l + 7, $ = (A.endAngle - A.startAngle) / 2 + A.startAngle, H = $ / Math.PI * 180, P = this.getComputedTextLength();\n      return A.textOffsetX = P / 2, A.textOffsetY = H > 90 && H < 270 ? 10 : 0, A.xPosition = (A.textOffsetX + R) * Math.sin($), A.yPosition = (A.textOffsetY + R) * -Math.cos($), A;\n    }).attr("transform", function(A, R) {\n      const $ = f.length, H = (A.endAngle - A.startAngle) * (180 / Math.PI);\n      if (R >= $ - 2 && H < Mt.callout.minSliceDegree) {\n        let P, B;\n        return A.index === $ - 1 ? (P = A.xPosition + Mt.callout.offsetX + Mt.callout.textMargin + A.textOffsetX, B = A.yPosition - Mt.callout.offsetY, A.direction = Fs.RIGHT, v.push(A)) : (P = A.xPosition - Mt.callout.offsetX - A.textOffsetX - Mt.callout.textMargin, B = A.yPosition - Mt.callout.offsetY, A.direction = Fs.LEFT, v.push(A)), `translate(${P}, ${B})`;\n      }\n      return `translate(${A.xPosition}, ${A.yPosition})`;\n    }), this.renderCallouts(v);\n    const x = y(i, "donut") ? "donut" : "pie", _ = y(i, x, "alignment"), { width: E } = N.getSVGElementSize(this.getParent(), {\n      useAttrs: !0\n    }), b = p ? Mt.xOffset : 0, S = p ? Mt.yOffset : 0;\n    let M = l + b;\n    _ === jt.CENTER ? M = E / 2 : _ === jt.RIGHT && (M = E - l - Mt.xOffset);\n    let D = l + S;\n    v.length > 0 && (D += Mt.yOffsetCallout), r.attr("x", M + 7).attr("y", D), this.addEventListeners();\n  }\n  renderCallouts(t) {\n    const n = N.appendOrSelect(this.getComponentContainer(), "g.callouts").attr("role", ht.GROUP).attr("data-name", "callouts"), r = n.selectAll("g.callout").data(t);\n    r.exit().remove();\n    const i = r.enter().append("g").classed("callout", !0).attr("role", ht.GROUP).attr("aria-roledescription", "label callout");\n    i.merge(r).datum(function(s) {\n      const { xPosition: a, yPosition: o, direction: l } = s;\n      return l === Fs.RIGHT ? (s.startPos = {\n        x: a,\n        y: o + s.textOffsetY\n      }, s.endPos = {\n        x: a + Mt.callout.offsetX,\n        y: o - Mt.callout.offsetY + s.textOffsetY\n      }, s.intersectPointX = s.endPos.x - Mt.callout.horizontalLineLength) : (s.startPos = {\n        x: a,\n        y: o + s.textOffsetY\n      }, s.endPos = {\n        x: a - Mt.callout.offsetX,\n        y: o - Mt.callout.offsetY + s.textOffsetY\n      }, s.intersectPointX = s.endPos.x + Mt.callout.horizontalLineLength), s;\n    }), i.append("line").classed("vertical-line", !0).merge(n.selectAll("line.vertical-line")).datum(function() {\n      return I(this.parentNode).datum();\n    }).style("stroke-width", "1px").attr("x1", (s) => s.startPos.x).attr("y1", (s) => s.startPos.y).attr("x2", (s) => s.intersectPointX).attr("y2", (s) => s.endPos.y), i.append("line").classed("horizontal-line", !0).merge(n.selectAll("line.horizontal-line")).datum(function() {\n      return I(this.parentNode).datum();\n    }).style("stroke-width", "1px").attr("x1", (s) => s.intersectPointX).attr("y1", (s) => s.endPos.y).attr("x2", (s) => s.endPos.x).attr("y2", (s) => s.endPos.y);\n  }\n  addEventListeners() {\n    const t = this;\n    this.parent.selectAll("path.slice").on("mouseover", function(n, r) {\n      const i = I(this);\n      t.isRendering || i.classed("hovered", !0).transition("pie_slice_mouseover").call(\n        (o) => t.services.transitions.setupTransition({\n          transition: o,\n          name: "pie_slice_mouseover"\n        })\n      ).attr("d", t.hoverArc), t.services.events.dispatchEvent(T.Pie.SLICE_MOUSEOVER, {\n        event: n,\n        element: I(this),\n        datum: r\n      });\n      const { groupMapsTo: s } = t.getOptions().data, { valueMapsTo: a } = t.getOptions().pie;\n      t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: n,\n        hoveredElement: i,\n        items: [\n          {\n            label: r.data[s],\n            value: r.data[a]\n          }\n        ]\n      });\n    }).on("mousemove", function(n, r) {\n      const i = I(this);\n      t.services.events.dispatchEvent(T.Pie.SLICE_MOUSEMOVE, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: n\n      });\n    }).on("click", function(n, r) {\n      t.services.events.dispatchEvent(T.Pie.SLICE_CLICK, {\n        event: n,\n        element: I(this),\n        datum: r\n      });\n    }).on("mouseout", function(n, r) {\n      const i = I(this);\n      AC(() => {\n        t.isRendering || i.classed("hovered", !1).transition("pie_slice_mouseout").call(\n          (s) => t.services.transitions.setupTransition({\n            transition: s,\n            name: "pie_slice_mouseout"\n          })\n        ).attr("d", t.arc);\n      }, 100), t.services.events.dispatchEvent(T.Pie.SLICE_MOUSEOUT, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: i\n      });\n    });\n  }\n  // Helper functions\n  computeRadius() {\n    const { width: t, height: n } = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    }), r = this.getOptions(), i = Math.min(t, n) / 2;\n    return r.pie.labels.enabled ? i + Mt.radiusOffset : i;\n  }\n}\nclass ND extends Tv {\n  constructor() {\n    super(...arguments), this.type = "donut", this.renderType = rt.SVG;\n  }\n  render(t = !0) {\n    super.render(t);\n    const n = this;\n    if (this.model.isDataEmpty()) {\n      this.getComponentContainer({\n        ariaLabel: "donut graph"\n      }).select("g.center").remove();\n      return;\n    }\n    const r = N.appendOrSelect(\n      this.getComponentContainer({\n        ariaLabel: "donut graph"\n      }),\n      "g.center"\n    ), i = this.getOptions(), s = this.computeRadius(), a = y(i, "donut", "center", "label");\n    N.appendOrSelect(r, "text.donut-figure").attr("text-anchor", "middle").style("dominant-baseline", () => a === null || a === "" ? "central" : "initial").style("font-size", () => i.donut.center.numberFontSize(s)).transition().call(\n      (o) => this.services.transitions.setupTransition({\n        transition: o,\n        name: "donut-figure-enter-update",\n        animate: t\n      })\n    ).tween("text", function() {\n      return n.centerNumberTween(I(this));\n    }), a !== null && a !== "" && N.appendOrSelect(r, "text.donut-title").attr("text-anchor", "middle").style("font-size", () => i.donut.center.titleFontSize(s)).attr("y", i.donut.center.titleYPosition(s)).text(a);\n  }\n  getInnerRadius() {\n    return this.computeRadius() * (3 / 4);\n  }\n  centerNumberTween(t) {\n    const n = this.getOptions();\n    let r = y(n, "donut", "center", "number");\n    r === null && (r = this.model.getDisplayData().reduce((o, l) => o + l[n.pie.valueMapsTo], 0));\n    const i = parseInt(t.text().replace(/[, ]+/g, ""), 10) || 0;\n    let s;\n    i % 1 === 0 && r % 1 === 0 ? s = hm : s = xe;\n    const a = s(i, r);\n    return (o) => {\n      const { numberFormatter: l } = n.donut.center;\n      if (l)\n        t.text(l(a(o)));\n      else {\n        const { code: c, number: u } = y(n, "locale");\n        t.text(u(Math.floor(a(o)), c));\n      }\n    };\n  }\n}\nconst mp = "4,10 8,6 12,10", gp = "12,6 8,10 4,6";\nclass PD extends mt {\n  constructor() {\n    super(...arguments), this.type = "gauge", this.renderType = rt.SVG;\n  }\n  getValue() {\n    var t;\n    return ((t = this.model.getData().find((n) => n.group === "value")) == null ? void 0 : t.value) ?? null;\n  }\n  getValueRatio() {\n    return Mg(this.getValue(), 0, 100) / 100;\n  }\n  getDelta() {\n    var t;\n    return ((t = this.model.getData().find((n) => n.group === "delta")) == null ? void 0 : t.value) ?? null;\n  }\n  getArcRatio() {\n    const t = this.getOptions();\n    return y(t, "gauge", "type") === Rr.FULL ? 1 : 0.5;\n  }\n  getArcSize() {\n    return this.getArcRatio() * Math.PI * 2;\n  }\n  getStartAngle() {\n    const t = this.getArcSize();\n    return t === 2 * Math.PI ? 0 : -t / 2;\n  }\n  // use provided arrow direction or default to using the delta\n  getArrow(t) {\n    const n = this.getOptions();\n    switch (y(n, "gauge", "deltaArrow", "direction")) {\n      case pl.UP:\n        return mp;\n      case pl.DOWN:\n        return gp;\n      default:\n        return t > 0 ? mp : gp;\n    }\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = this.getComponentContainer({\n      ariaLabel: "gauge graph"\n    }).attr("width", "100%").attr("height", "100%"), r = this.getOptions(), i = this.getValue(), s = this.getValueRatio(), a = this.getArcSize(), o = this.getStartAngle(), l = s * a, c = o + l, u = o + a, d = this.computeRadius(), h = this.getInnerRadius();\n    this.backgroundArc = as().innerRadius(h).outerRadius(d).startAngle(c).endAngle(u), this.arc = as().innerRadius(h).outerRadius(d).startAngle(o).endAngle(c), N.appendOrSelect(n, "path.arc-background").attr("d", this.backgroundArc);\n    const p = n.selectAll("path.arc-foreground").data([i]);\n    p.enter().append("path").merge(p).attr(\n      "class",\n      this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: "value",\n        originalClassName: "arc-foreground"\n      })\n    ).style("fill", () => y(this.getOptions(), "color", "scale", "value")).attr("d", this.arc).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "value").attr("aria-label", (v) => v), this.drawValueNumber(), this.drawDelta(), p.exit().remove();\n    const f = y(r, "gauge", "alignment"), { width: g } = N.getSVGElementSize(this.getParent(), {\n      useAttrs: !0\n    });\n    let m = d;\n    f === jt.CENTER ? m = g / 2 : f === jt.RIGHT && (m = g - d), n.attr("x", m).attr("y", d), this.addEventListeners();\n  }\n  /**\n   * draws the value number associated with the Gauge component in the center\n   */\n  drawValueNumber() {\n    const t = this.getComponentContainer(), n = this.getOptions(), r = y(n, "gauge", "type"), i = this.getValue(), s = this.getDelta(), a = this.computeRadius(), o = y(n, "gauge", "valueFontSize"), l = y(n, "gauge", "deltaFontSize"), c = y(n, "gauge", "numberSpacing"), u = y(n, "gauge", "showPercentageSymbol");\n    let d = 0;\n    r === Rr.FULL && !s ? d = l(a) : r === Rr.SEMI && s && (d = -(l(a) + c));\n    const h = N.appendOrSelect(t, "g.gauge-numbers").attr(\n      "transform",\n      `translate(0, ${d})`\n    ), p = o(a), f = N.appendOrSelect(h, "g.gauge-value-number"), { code: g, number: m } = y(n, "locale"), v = y(n, "gauge", "numberFormatter"), x = f.selectAll("text.gauge-value-number").data([i]);\n    x.enter().append("text").attr("class", "gauge-value-number").merge(x).style("font-size", `${p}px`).attr("text-anchor", "middle").text((A) => {\n      let R;\n      return A != null ? R = Number(A.toFixed(2)) % 1 !== 0 ? A.toFixed(2) : A.toFixed() : R = 0, v ? v(R) : m(Number(R), g);\n    });\n    const { width: _ } = N.getSVGElementSize(\n      N.appendOrSelect(t, "text.gauge-value-number"),\n      { useBBox: !0 }\n    ), E = p / 2, b = u ? "%" : "", S = N.appendOrSelect(f, "text.gauge-value-symbol").style("font-size", `${E}px`).attr("x", _ / 2).text(b), { width: M, height: D } = N.getSVGElementSize(S, {\n      useBBox: !0\n    });\n    S.attr("y", `-${D / 2}px`), f.attr("transform", `translate(-${M / 2}, 0)`);\n  }\n  /**\n   * adds the delta number for the gauge\n   */\n  drawDelta() {\n    const t = this, n = this.getComponentContainer(), r = this.getOptions(), i = this.getDelta(), { code: s, number: a } = y(r, "locale");\n    if (i) {\n      const o = this.computeRadius(), l = i ? y(r, "gauge", "deltaFontSize") : () => 0, c = i ? y(r, "gauge", "numberFormatter") : () => null, u = y(r, "gauge", "deltaArrow", "size"), d = y(r, "gauge", "numberSpacing"), h = y(r, "gauge", "showPercentageSymbol"), p = N.appendOrSelect(n, "g.gauge-numbers"), f = N.appendOrSelect(p, "g.gauge-delta").attr(\n        "transform",\n        `translate(0, ${l(o) + d})`\n      ), g = N.appendOrSelect(f, "text.gauge-delta-number"), m = h ? "%" : "";\n      g.data(i === null ? [] : [i]), g.enter().append("text").classed("gauge-delta-number", !0).merge(g).attr("text-anchor", "middle").style("font-size", `${l(o)}px`).text((E) => {\n        let b;\n        return E != null ? b = Number(E.toFixed(2)) % 1 !== 0 ? E.toFixed(2) : E.toFixed() : b = 0, c ? `${c(b)}${m}` : `${a(Number(b), s)}${m}`;\n      });\n      const { width: v } = N.getSVGElementSize(\n        N.appendOrSelect(n, ".gauge-delta-number"),\n        { useBBox: !0 }\n      ), x = y(r, "gauge", "deltaArrow", "enabled"), _ = f.selectAll("svg.gauge-delta-arrow").data(i !== null && x ? [i] : []);\n      _.enter().append("svg").merge(_).attr("class", "gauge-delta-arrow").attr("x", -u(o) - v / 2).attr("y", -u(o) / 2 - l(o) * 0.35).attr("width", u(o)).attr("height", u(o)).attr("viewBox", "0 0 16 16").each(function() {\n        const E = I(this);\n        N.appendOrSelect(E, "rect.gauge-delta-arrow-backdrop").attr("width", "16").attr("height", "16").attr("fill", "none");\n        const b = y(r, "gauge", "status");\n        N.appendOrSelect(E, "polygon.gauge-delta-arrow").attr("class", b !== null ? `gauge-delta-arrow status--${b}` : "").attr("points", t.getArrow(i));\n      }), _.exit().remove(), g.exit().remove();\n    } else {\n      const o = n.select("g.gauge-delta");\n      o.empty() || o.remove();\n    }\n  }\n  getInnerRadius() {\n    const t = this.computeRadius(), n = y(this.getOptions(), "gauge", "arcWidth");\n    return t - n;\n  }\n  addEventListeners() {\n    const t = this;\n    this.parent.selectAll("path.arc-foreground").on("mouseover", function(n, r) {\n      t.services.events.dispatchEvent(T.Gauge.ARC_MOUSEOVER, {\n        event: n,\n        element: I(this),\n        datum: r\n      });\n    }).on("mousemove", function(n, r) {\n      const i = I(this);\n      t.services.events.dispatchEvent(T.Gauge.ARC_MOUSEMOVE, {\n        event: n,\n        element: i,\n        datum: r\n      });\n    }).on("click", function(n, r) {\n      t.services.events.dispatchEvent(T.Gauge.ARC_CLICK, {\n        event: n,\n        element: I(this),\n        datum: r\n      });\n    }).on("mouseout", function(n, r) {\n      const i = I(this);\n      t.services.events.dispatchEvent(T.Gauge.ARC_MOUSEOUT, {\n        event: n,\n        element: i,\n        datum: r\n      });\n    });\n  }\n  // Helper functions\n  computeRadius() {\n    const t = this.getOptions(), n = y(t, "gauge", "type"), { width: r, height: i } = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    });\n    return n === Rr.SEMI ? Math.min(r / 2, i) : Math.min(r / 2, i / 2);\n  }\n}\nclass wv extends hu {\n  constructor() {\n    super(...arguments), this.type = "grouped-bar", this.renderType = rt.SVG, this.padding = 5, this.defaultStepFactor = 70, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, { groupMapsTo: r } = this.getOptions().data;\n      this.parent.selectAll("path.bar").transition("legend-hover-bar").call(\n        (i) => this.services.transitions.setupTransition({\n          transition: i,\n          name: "legend-hover-bar"\n        })\n      ).attr("opacity", (i) => i[r] !== n.datum().name ? 0.3 : 1);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-bar"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t) {\n    const n = this.model.getDisplayData(this.configs.groups), r = this.getOptions(), { groupMapsTo: i } = r.data;\n    this.setGroupScale();\n    const s = this.getComponentContainer({ ariaLabel: "grouped bar graphs", withinChartClip: !0 }), a = Zi(\n      n.map((u) => {\n        const d = this.services.cartesianScales.getDomainIdentifier(u);\n        return u[d] && typeof u[d].toString == "function" ? u[d].toString() : u[d];\n      })\n    ), o = s.selectAll("g.bars").data(a, (u) => u);\n    o.exit().attr("opacity", 0).remove();\n    const l = o.enter().append("g").classed("bars", !0).attr("role", ht.GROUP).attr("data-name", "bars").merge(o);\n    l.transition().call(\n      (u) => this.services.transitions.setupTransition({\n        transition: u,\n        name: "bar-group-update-enter",\n        animate: t\n      })\n    ).attr("transform", (u) => {\n      const d = this.services.cartesianScales.getDomainValue(u) - this.getGroupWidth() / 2;\n      return this.services.cartesianScales.getOrientation() === Ft.VERTICAL ? `translate(${d}, 0)` : `translate(0, ${d})`;\n    });\n    const c = l.selectAll("path.bar").data(\n      (u) => this.getDataCorrespondingToLabel(u),\n      (u) => u[i]\n    );\n    c.exit().attr("opacity", 0).remove(), c.enter().append("path").attr("opacity", 0).merge(c).classed("bar", !0).transition().call(\n      (u) => this.services.transitions.setupTransition({\n        transition: u,\n        name: "bar-update-enter",\n        animate: t\n      })\n    ).attr(\n      "class",\n      (u) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: u[i],\n        originalClassName: "bar"\n      })\n    ).style("fill", (u) => {\n      const d = this.services.cartesianScales.getDomainIdentifier(u);\n      return this.model.getFillColor(u[i], u[d], u);\n    }).attr("d", (u) => {\n      const d = this.groupScale(u[i]), h = this.getBarWidth(), p = d, f = d + h, g = this.services.cartesianScales.getRangeAxisPosition({ datum: u }), m = this.services.cartesianScales.getDomainLowerBound(g), v = this.services.cartesianScales.getValueThroughAxisPosition(g, m), x = this.services.cartesianScales.getRangeValue(u), _ = this.services.cartesianScales.getDomainValue(u) - h / 2, E = _ + h;\n      if (!this.isOutsideZoomedDomain(_, E))\n        return ae(\n          { x0: p, x1: f, y0: v, y1: x },\n          this.services.cartesianScales.getOrientation()\n        );\n    }).attr("opacity", 1).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (u) => u.value), this.addEventListeners();\n  }\n  addEventListeners() {\n    const t = this;\n    this.parent.selectAll("path.bar").on("mouseover", function(n, r) {\n      const i = I(this);\n      i.classed("hovered", !0), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOVER, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: n,\n        hoveredElement: i,\n        data: [r]\n      });\n    }).on("mousemove", function(n, r) {\n      const i = I(this);\n      t.services.events.dispatchEvent(T.Bar.BAR_MOUSEMOVE, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: n\n      });\n    }).on("click", function(n, r) {\n      t.services.events.dispatchEvent(T.Bar.BAR_CLICK, {\n        event: n,\n        element: I(this),\n        datum: r\n      });\n    }).on("mouseout", function(n, r) {\n      const i = I(this);\n      i.classed("hovered", !1), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOUT, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: i\n      });\n    });\n  }\n  destroy() {\n    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  getDataCorrespondingToLabel(t) {\n    return this.model.getDisplayData(this.configs.groups).filter((n) => {\n      const r = this.services.cartesianScales.getDomainIdentifier(n);\n      return n[r].toString() === t;\n    });\n  }\n  getGroupWidth() {\n    const t = this.model.getGroupedData(this.configs.groups), n = this.getTotalGroupPadding();\n    return this.getBarWidth() * t.length + n;\n  }\n  getDomainScaleStep() {\n    const t = this.services.cartesianScales.getDomainScale(), n = this.model.getGroupedData(this.configs.groups);\n    let r = this.defaultStepFactor;\n    if (typeof t.step == "function")\n      r = t.step();\n    else if (n.length > 0) {\n      const i = n.find((s) => {\n        var a;\n        return ((a = s.data) == null ? void 0 : a.length) > 1;\n      });\n      if (i) {\n        const s = this.services.cartesianScales.getDomainIdentifier(i.data[0]);\n        r = Math.abs(\n          t(i.data[1][s]) - t(i.data[0][s])\n        );\n      }\n    }\n    return r;\n  }\n  getTotalGroupPadding() {\n    const t = this.model.getGroupedData(this.configs.groups);\n    return t.length === 1 ? 0 : Math.min(5, 5 * (this.getDomainScaleStep() / this.defaultStepFactor)) * (t.length - 1);\n  }\n  // Gets the correct width for bars based on options & configurations\n  getBarWidth() {\n    const t = this.getOptions(), n = y(t, "bars", "width"), r = y(t, "bars", "maxWidth");\n    if (n !== null && (r === null || n <= r))\n      return n;\n    const i = this.model.getGroupedData(this.configs.groups).length, s = this.getTotalGroupPadding();\n    return Math.min(\n      r,\n      (this.getDomainScaleStep() - s) / i\n    );\n  }\n  setGroupScale() {\n    const t = this.model.getActiveDataGroupNames(this.configs.groups);\n    this.groupScale = gs().domain(t).rangeRound([0, this.getGroupWidth()]);\n  }\n}\nclass UD extends mt {\n  constructor() {\n    super(...arguments), this.type = "heatmap", this.renderType = rt.SVG, this.matrix = {}, this.xBandwidth = 0, this.yBandwidth = 0, this.translationUnits = {\n      x: 0,\n      y: 0\n    }, this.handleAxisOnHover = (t) => {\n      const { detail: n } = t, { datum: r } = n, i = this.model.getUniqueRanges(), s = this.model.getUniqueDomain(), a = this.services.cartesianScales.getDomainLabel(), o = this.services.cartesianScales.getRangeLabel(), l = this.services.cartesianScales.getMainXScale(), c = this.services.cartesianScales.getMainYScale();\n      let u = "", d = null, h = null, p = null;\n      this.matrix[r] !== void 0 ? (u = a, i.forEach((f) => {\n        if (typeof this.matrix[r][f].value == "number") {\n          const g = this.matrix[r][f].value;\n          if (d === null) {\n            d = g, h = g, p = g;\n            return;\n          }\n          d += g, h = g < h ? g : h, p = g > p ? g : p;\n        }\n      })) : (u = o, s.forEach((f) => {\n        if (typeof this.matrix[f][r].value == "number") {\n          const g = this.matrix[f][r].value;\n          if (d === null) {\n            d = g, h = g, p = g;\n            return;\n          }\n          d += g, h = g < h ? g : h, p = g > p ? g : p;\n        }\n      })), l(r) !== void 0 ? this.parent.select("g.multi-cell.column-highlight").classed("highlighter-hidden", !1).attr("transform", `translate(${l(r)}, ${Bn(c.range())})`) : c(r) !== void 0 && this.parent.select("g.multi-cell.row-highlight").classed("highlighter-hidden", !1).attr("transform", `translate(${Bn(l.range())},${c(r)})`), this.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: n.event,\n        hoveredElement: I(t.detail.element),\n        items: [\n          {\n            label: u,\n            value: r,\n            bold: !0\n          },\n          {\n            label: "Min",\n            value: h !== null ? h : "-"\n          },\n          {\n            label: "Max",\n            value: p !== null ? p : "-"\n          },\n          {\n            label: "Average",\n            value: d !== null ? d / s.length : "-"\n          }\n        ]\n      });\n    }, this.handleAxisMouseOut = (t) => {\n      this.parent.selectAll("g.multi-cell").classed("highlighter-hidden", !0), this.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        event: t\n      });\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Axis.LABEL_MOUSEOVER, this.handleAxisOnHover), t.addEventListener(T.Axis.LABEL_MOUSEOUT, this.handleAxisMouseOut), t.addEventListener(T.Axis.LABEL_FOCUS, this.handleAxisOnHover), t.addEventListener(T.Axis.LABEL_BLUR, this.handleAxisMouseOut);\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = this.getComponentContainer({ ariaLabel: "heatmap", withinChartClip: !0 });\n    n.lower();\n    const { cartesianScales: r } = this.services;\n    if (this.matrix = this.model.getMatrix(), n.html(""), y(this.getOptions(), "data", "loading"))\n      return;\n    const i = r.getMainXScale(), s = r.getMainYScale(), a = r.getDomainIdentifier(), o = r.getRangeIdentifier(), l = this.model.getUniqueDomain(), c = this.model.getUniqueRanges(), u = this.model.getMatrixAsArray(), d = i.range(), h = s.range();\n    this.xBandwidth = Math.abs((d[1] - d[0]) / l.length), this.yBandwidth = Math.abs((h[1] - h[0]) / c.length);\n    const p = this.services.domUtils.generateElementIDString("heatmap-pattern-stripes");\n    n.append("defs").append("pattern").attr("id", p).attr("width", 3).attr("height", 3).attr("patternUnits", "userSpaceOnUse").attr("patternTransform", "rotate(45)").append("rect").classed("pattern-fill", !0).attr("width", 0.5).attr("height", 8);\n    const f = n.selectAll().data(u).enter().append("g").attr("class", (g) => `heat-${g.index}`).classed("cell", !0).attr(\n      "transform",\n      (g) => `translate(${i(g[a])}, ${s(g[o])})`\n    ).append("rect").attr(\n      "class",\n      (g) => this.model.getColorClassName({\n        value: g.value,\n        originalClassName: `heat-${g.index}`\n      })\n    ).classed("heat", !0).classed("null-state", (g) => g.index === -1 || g.value === null).attr("width", this.xBandwidth).attr("height", this.yBandwidth).style("fill", (g) => {\n      const m = this.services.cartesianScales.getDomainIdentifier(g);\n      return g.index === -1 || g.value === null ? `url(#${p})` : this.model.getFillColor(Number(g.value), g[m], g);\n    }).attr("aria-label", (g) => g.value);\n    this.createOuterBox("g.cell-highlight", this.xBandwidth, this.yBandwidth), this.createOuterBox(\n      "g.multi-cell.column-highlight",\n      this.xBandwidth,\n      Math.abs(h[1] - h[0])\n    ), this.createOuterBox(\n      "g.multi-cell.row-highlight",\n      Math.abs(d[1] - d[0]),\n      this.yBandwidth\n    ), this.determineDividerStatus() && (f.style("stroke-width", "1px"), this.parent.select("g.cell-highlight").classed("cell-2", !0)), this.addEventListener();\n  }\n  /**\n   * Generates a box using lines to create a hover effect\n   * The lines have drop shadow in their respective direction\n   * @param parentTag - tag name\n   * @param xBandwidth - X length\n   * @param yBandwidth - y length\n   */\n  createOuterBox(t, n, r) {\n    const i = N.appendOrSelect(this.parent, t).classed("shadows", !0).classed("highlighter-hidden", !0);\n    N.appendOrSelect(i, "line.top").attr("x1", -1).attr("x2", n + 1), N.appendOrSelect(i, "line.left").attr("x1", 0).attr("y1", -1).attr("x2", 0).attr("y2", r + 1), N.appendOrSelect(i, "line.down").attr("x1", -1).attr("x2", n + 1).attr("y1", r).attr("y2", r), N.appendOrSelect(i, "line.right").attr("x1", n).attr("x2", n).attr("y1", -1).attr("y2", r + 1);\n  }\n  determineDividerStatus() {\n    const t = y(this.getOptions(), "heatmap", "divider", "state");\n    return t !== Pi.OFF && (t === Pi.AUTO && Dh.minCellDividerDimension <= this.xBandwidth && Dh.minCellDividerDimension <= this.yBandwidth || t === Pi.ON);\n  }\n  addEventListener() {\n    const t = this, { cartesianScales: n } = this.services, r = this.getOptions(), i = gt(r, "locale.translations.total") || gt(r, "tooltip.totalLabel") || "Total", s = n.getDomainIdentifier(), a = n.getRangeIdentifier(), o = n.getDomainLabel(), l = n.getRangeLabel();\n    this.parent.selectAll("g.cell").on("mouseover", function(c, u) {\n      const d = I(this), h = d.select("rect.heat");\n      if (!h.classed("null-state")) {\n        const p = Mi(d.attr("transform"));\n        t.parent.select("g.cell-highlight").attr(\n          "transform",\n          `translate(${p.x + t.translationUnits.x}, ${p.y + t.translationUnits.y})`\n        ).classed("highlighter-hidden", !1), t.services.events.dispatchEvent(T.Heatmap.HEATMAP_MOUSEOVER, {\n          event: c,\n          element: h,\n          datum: u\n        }), t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n          event: c,\n          items: [\n            {\n              label: o,\n              value: u[s]\n            },\n            {\n              label: l,\n              value: u[a]\n            },\n            {\n              label: i,\n              value: u.value,\n              color: h.style("fill")\n            }\n          ]\n        });\n      }\n    }).on("mousemove", function(c, u) {\n      t.services.events.dispatchEvent(T.Heatmap.HEATMAP_MOUSEMOVE, {\n        event: c,\n        element: I(this),\n        datum: u\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: c\n      });\n    }).on("click", function(c, u) {\n      t.services.events.dispatchEvent(T.Heatmap.HEATMAP_CLICK, {\n        event: c,\n        element: I(this),\n        datum: u\n      });\n    }).on("mouseout", function(c, u) {\n      const d = I(this).select("rect.heat"), h = d.classed("null-state");\n      t.parent.select("g.cell-highlight").classed("highlighter-hidden", !0), h || (t.services.events.dispatchEvent(T.Heatmap.HEATMAP_MOUSEOUT, {\n        event: c,\n        element: d,\n        datum: u\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        event: c,\n        hoveredElement: d\n      }));\n    });\n  }\n  // Remove event listeners\n  destroy() {\n    this.parent.selectAll("rect.heat").on("mouseover", null).on("mousemove", null).on("click", null).on("mouseout", null);\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleAxisOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleAxisMouseOut);\n  }\n}\nclass BD extends mt {\n  constructor() {\n    super(...arguments), this.type = "histogram", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, r = this.getOptions(), { groupMapsTo: i } = r.data;\n      this.parent.selectAll("path.bar").transition("legend-hover-bar").call(\n        (s) => this.services.transitions.setupTransition({\n          transition: s,\n          name: "legend-hover-bar"\n        })\n      ).attr("opacity", (s) => s[i] !== n.datum().name ? 0.3 : 1);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-bar"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t) {\n    const n = this.getComponentContainer({\n      ariaLabel: "histogram bars"\n    }), r = this.model.getOptions(), { groupIdentifier: i } = r, { groupMapsTo: s } = r.data, a = this.model.getBinnedStackedData(), o = this.services.cartesianScales.getMainXScale(), l = n.selectAll("g.bars").data(a, (u) => gt(u, `0.${s}`));\n    l.exit().attr("opacity", 0).remove(), l.enter().append("g").classed("bars", !0).attr("role", ht.GROUP);\n    const c = n.selectAll("g.bars").selectAll("path.bar").data((u) => u);\n    c.exit().remove(), c.enter().append("path").merge(c).classed("bar", !0).attr(i, (u, d) => d).transition().call(\n      (u) => this.services.transitions.setupTransition({\n        transition: u,\n        name: "histogram-bar-update-enter",\n        animate: t\n      })\n    ).attr(\n      "class",\n      (u) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: u[s],\n        originalClassName: "bar"\n      })\n    ).style("fill", (u) => this.model.getFillColor(u[s], null, u)).attr("d", (u) => {\n      const d = gt(u, "data");\n      if (!d)\n        return;\n      const h = o(d.x1) - o(d.x0) - 1, p = this.services.cartesianScales.getDomainValue(d.x0), f = p + h, g = this.services.cartesianScales.getRangeValue(u[0]);\n      let m = this.services.cartesianScales.getRangeValue(u[1]);\n      return Math.abs(m - g) > 0 && Math.abs(m - g) > r.bars.dividerSize && (this.services.cartesianScales.getOrientation() === Ft.VERTICAL ? m += 1 : m -= 1), ae(\n        { x0: p, x1: f, y0: g, y1: m },\n        this.services.cartesianScales.getOrientation()\n      );\n    }).attr("opacity", 1).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (u) => y(u, "data", u[s])), this.addEventListeners();\n  }\n  addEventListeners() {\n    const t = this.model.getOptions(), { groupMapsTo: n } = t.data, { code: r, number: i } = y(t, "locale"), s = this;\n    this.parent.selectAll("path.bar").on("mouseover", function(a, o) {\n      const l = I(this);\n      l.classed("hovered", !0);\n      const c = i(parseFloat(gt(o, "data.x0")), r), u = i(parseFloat(gt(o, "data.x1")), r), d = s.services.cartesianScales.getRangeAxisPosition(), h = s.services.cartesianScales.getScaleLabel(d);\n      s.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: a,\n        hoveredElement: l,\n        items: [\n          {\n            label: gt(t, "bins.rangeLabel") || "Range",\n            value: `${c} – ${u}`\n          },\n          {\n            label: t.tooltip.groupLabel || "Group",\n            value: o[n],\n            class: s.model.getColorClassName({\n              classNameTypes: [it.TOOLTIP],\n              dataGroupName: o[n]\n            })\n          },\n          {\n            label: h,\n            value: gt(o, `data.${o[n]}`)\n          }\n        ]\n      });\n    }).on("mousemove", function(a) {\n      s.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: a\n      });\n    }).on("mouseout", function() {\n      I(this).classed("hovered", !1), s.services.events.dispatchEvent(T.Tooltip.HIDE);\n    });\n  }\n  destroy() {\n    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n}\nclass HD extends nn {\n  constructor() {\n    super(...arguments), this.type = "lollipop", this.renderType = rt.SVG, this.handleScatterOnHover = (t) => {\n      const n = t.detail, r = this.getOptions(), { groupMapsTo: i } = r.data;\n      this.parent.selectAll("line.line").attr("stroke-width", (s) => s[i] !== n.datum[i] ? vn.weight.unselected : vn.weight.selected);\n    }, this.handleScatterOnMouseOut = () => {\n      this.parent.selectAll("line.line").attr("stroke-width", vn.weight.unselected);\n    }, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, r = this.getOptions(), { groupMapsTo: i } = r.data;\n      this.parent.selectAll("line.line").transition("legend-hover-line").call(\n        (s) => this.services.transitions.setupTransition({\n          transition: s,\n          name: "legend-hover-line"\n        })\n      ).attr("opacity", (s) => s[i] !== n.datum().name ? vn.opacity.unselected : vn.opacity.selected);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("line.line").transition("legend-mouseout-line").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-line"\n        })\n      ).attr("opacity", vn.opacity.selected);\n    };\n  }\n  init() {\n    const { events: t } = this.services;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t) {\n    const n = this.getComponentContainer({ ariaLabel: "lines", withinChartClip: !0 }), r = this.model.getOptions(), { groupMapsTo: i } = r.data, { cartesianScales: s } = this.services, a = s.getMainXScale(), o = s.getMainYScale(), l = s.getDomainIdentifier(), c = (m) => s.getDomainValue(m), u = (m) => s.getRangeValue(m), d = s.getOrientation(), [h, p] = En(\n      c,\n      u,\n      d\n    ), f = n.selectAll("line.line").data(\n      this.getScatterData(),\n      (m) => `${m[i]}-${m[l]}`\n    );\n    f.exit().attr("opacity", 0).remove();\n    const g = f.enter().append("line").attr("opacity", 0).merge(f).classed("line", !0).attr(\n      "class",\n      (m) => this.model.getColorClassName({\n        classNameTypes: [it.STROKE],\n        dataGroupName: m[i],\n        originalClassName: "line"\n      })\n    ).transition().call(\n      (m) => this.services.transitions.setupTransition({\n        transition: m,\n        name: "lollipop-line-update-enter",\n        animate: t\n      })\n    ).style("stroke", (m) => this.model.getFillColor(m[i], m[l], m)).attr("opacity", 1);\n    d === Ft.HORIZONTAL ? g.attr("y1", p).attr("y2", p).attr("x1", a.range()[0]).attr("x2", (m) => h(m) - r.points.radius) : g.attr("x1", h).attr("x2", h).attr("y1", o.range()[0]).attr("y2", (m) => p(m) + r.points.radius), this.addScatterPointEventListeners();\n  }\n  // listen for when individual datapoints are hovered\n  addScatterPointEventListeners() {\n    this.services.events.addEventListener(\n      T.Scatter.SCATTER_MOUSEOVER,\n      this.handleScatterOnHover\n    ), this.services.events.addEventListener(\n      T.Scatter.SCATTER_MOUSEOUT,\n      this.handleScatterOnMouseOut\n    );\n  }\n  destroy() {\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut), t.removeEventListener(T.Scatter.SCATTER_MOUSEOVER, this.handleScatterOnHover), t.removeEventListener(\n      T.Scatter.SCATTER_MOUSEOUT,\n      this.handleScatterOnMouseOut\n    );\n  }\n}\nclass VD extends mt {\n  constructor() {\n    super(...arguments), this.type = "meter", this.renderType = rt.SVG;\n  }\n  getStackedBounds(t, n) {\n    let r = 0;\n    return t.map((i, s) => s !== 0 ? (r += n(i.value), {\n      ...i,\n      width: Math.abs(n(i.value) - Zt.dividerWidth),\n      x: r - n(i.value)\n    }) : (r = n(i.value), {\n      ...i,\n      width: Math.abs(n(i.value) - Zt.dividerWidth),\n      x: 0\n    }));\n  }\n  render(t = !0) {\n    const n = this, r = this.getComponentContainer({\n      ariaLabel: "meter lines"\n    }), i = this.getOptions(), s = y(i, "meter", "proportional"), a = this.model.getDisplayData(), o = this.model.getStatus(), { width: l } = N.getSVGElementSize(r, {\n      useAttrs: !0\n    }), { groupMapsTo: c } = i.data;\n    let u;\n    y(i, "meter", "proportional") === null ? u = 100 : u = y(i, "meter", "proportional", "total") || this.model.getMaximumDomain(this.model.getDisplayData());\n    const d = Fe().domain([0, u]).range([0, l]), h = this.getStackedBounds(a, d), p = y(i, "meter", "height");\n    N.appendOrSelect(r, "rect.container").attr("x", 0).attr("y", 0).attr("width", l).attr(\n      "height",\n      p || (s ? Zt.height.proportional : Zt.height.default)\n    ), N.appendOrSelect(r, "line.rangeIndicator").attr("x1", l).attr("x2", l).attr("y1", 0).attr(\n      "y2",\n      p || (s ? Zt.height.proportional : Zt.height.default)\n    );\n    const f = r.selectAll("rect.value").data(h), g = o != null && !n.model.isUserProvidedColorScaleValid() && !s ? `value status--${o}` : "value";\n    f.enter().append("rect").classed("value", !0).merge(f).attr("x", (_) => _.x).attr("y", 0).attr("height", () => p || (s ? Zt.height.proportional : Zt.height.default)).attr(\n      "class",\n      (_) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: _[c],\n        originalClassName: g\n      })\n    ).transition().call(\n      (_) => this.services.transitions.setupTransition({\n        transition: _,\n        name: "meter-bar-update",\n        animate: t\n      })\n    ).attr("width", (_) => _.value > u ? d(u) : Math.max(_.width, 2)).style("fill", (_) => n.model.getFillColor(_[c], null, _)).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "value").attr("aria-label", (_) => _.value), f.exit().remove();\n    const m = y(i, "meter", "peak");\n    let v = m;\n    m !== null && (m > u ? v = u : m < 0 && (v = 0));\n    const x = r.selectAll("line.peak").data(v == null ? [] : [v]);\n    x.enter().append("line").classed("peak", !0).merge(x).attr("y1", 0).attr("y2", () => p || (s ? Zt.height.proportional : Zt.height.default)).transition().call(\n      (_) => this.services.transitions.setupTransition({\n        transition: _,\n        name: "peak-line-update",\n        animate: t\n      })\n    ).attr("x1", (_) => d(_)).attr("x2", (_) => d(_)).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "peak").attr("aria-label", (_) => _), x.exit().remove(), this.services.domUtils.setSVGMaxHeight(), this.addEventListeners();\n  }\n  // add event listeners for tooltips on proportional meter bars\n  addEventListeners() {\n    const t = this.getOptions(), { groupMapsTo: n } = t.data, r = this, i = y(t, "meter", "proportional");\n    this.parent.selectAll("rect.value").on("mouseover", function(s, a) {\n      const o = I(this);\n      r.services.events.dispatchEvent(T.Meter.METER_MOUSEOVER, {\n        event: s,\n        element: o,\n        datum: a\n      }), i && (o.classed("hovered", !0), r.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: s,\n        hoveredElement: o,\n        items: [\n          {\n            label: a[n],\n            value: a.value\n          }\n        ]\n      }));\n    }).on("mousemove", function(s, a) {\n      const o = I(this);\n      r.services.events.dispatchEvent(T.Meter.METER_MOUSEMOVE, {\n        event: s,\n        element: o,\n        datum: a\n      }), i && r.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: s\n      });\n    }).on("click", function(s, a) {\n      r.services.events.dispatchEvent(T.Meter.METER_CLICK, {\n        event: s,\n        element: I(this),\n        datum: a\n      });\n    }).on("mouseout", function(s, a) {\n      const o = I(this);\n      r.services.events.dispatchEvent(T.Meter.METER_MOUSEOUT, {\n        event: s,\n        element: o,\n        datum: a\n      }), i && (o.classed("hovered", !1), r.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: o\n      }));\n    });\n  }\n  destroy() {\n    this.parent.selectAll("rect.value").on("mouseover", null).on("mousemove", null).on("mouseout", null).on("click", null);\n  }\n}\nclass GD extends mt {\n  constructor() {\n    super(...arguments), this.type = "radar", this.renderType = rt.SVG, this.getLabelDimensions = (t) => {\n      const n = N.appendOrSelect(this.getComponentContainer(), "g.tmp-tick"), r = N.appendOrSelect(n, "text").text(t), { width: i, height: s } = N.getSVGElementSize(r.node(), { useBBox: !0 });\n      return n.remove(), { width: i, height: s };\n    }, this.normalizeFlatData = (t) => {\n      const n = this.getOptions(), { angle: r, value: i } = y(n, "radar", "axes"), s = y(n, "data", "groupMapsTo"), a = RC(\n        this.uniqueKeys.map((o) => this.uniqueGroups.map((l) => ({\n          [r]: o,\n          [s]: l,\n          [i]: null\n        })))\n      );\n      return at(a, t);\n    }, this.normalizeGroupedData = (t) => {\n      const n = this.getOptions(), { angle: r, value: i } = y(n, "radar", "axes"), s = y(n, "data", "groupMapsTo");\n      return t.map(({ name: a, data: o }) => {\n        const l = this.uniqueKeys.map((c) => ({\n          [s]: a,\n          [r]: c,\n          [i]: null\n        }));\n        return { name: a, data: at(l, o) };\n      });\n    }, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail;\n      this.parent.selectAll("g.blobs path").transition("legend-hover-blob").call(\n        (r) => this.services.transitions.setupTransition({\n          transition: r,\n          name: "legend-hover-blob"\n        })\n      ).style("fill-opacity", (r) => r.name !== n.datum().name ? Wn.opacity.unselected : Wn.opacity.selected).style("stroke-opacity", (r) => r.name !== n.datum().name ? Wn.opacity.unselected : 1);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("g.blobs path").transition("legend-mouseout-blob").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-blob"\n        })\n      ).style("fill-opacity", Wn.opacity.selected).style("stroke-opacity", 1);\n    };\n  }\n  init() {\n    const { events: t } = this.services;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t = !0) {\n    const n = this.getComponentContainer({\n      ariaLabel: "radar graph"\n    }), { width: r, height: i } = N.getSVGElementSize(n, {\n      useAttrs: !0\n    }), s = this.model.getData(), a = this.model.getGroupedData(), o = this.getOptions(), l = y(o, "data", "groupMapsTo"), c = y(o, "radar", "axes", "value"), { angle: u, value: d } = y(o, "radar", "axes"), { xLabelPadding: h, yLabelPadding: p, yTicksNumber: f, minRange: g, xAxisRectHeight: m } = Wn;\n    this.uniqueKeys = Array.from(new Set(s.map((O) => O[u]))), this.uniqueGroups = Array.from(new Set(s.map((O) => O[l]))), this.fullDataNormalized = this.normalizeFlatData(s), this.groupedDataNormalized = this.normalizeGroupedData(a);\n    const v = 2 * (this.getLabelDimensions(this.uniqueKeys[0]).height + p), x = (Math.min(r, i) - v) / 2;\n    if (x <= 0)\n      return;\n    const _ = gs().domain(this.fullDataNormalized.map((O) => O[u])).range([0, 2 * Math.PI].map((O) => O - Math.PI / 2)), E = Bn(this.fullDataNormalized.map((O) => O[d])), b = Fe().domain([\n      E >= 0 ? 0 : E,\n      nr(this.fullDataNormalized.map((O) => O[d]))\n    ]).range([g, x]).nice(f), S = b.ticks(f), M = (O, w, L) => this.model.getFillColor(O, w, L), D = dk().angle((O) => _(O[u]) + Math.PI / 2).radius((O) => b(O[d])).curve(ig), A = this.uniqueKeys.map((O) => {\n      const w = this.getLabelDimensions(O).width, L = U2(\n        _(O),\n        x\n      );\n      return w + L;\n    }), R = {\n      x: nr(A) + h,\n      y: i / 2\n    }, $ = N.appendOrSelect(n, "g.y-axes").attr("role", ht.GROUP).selectAll("path").data(S, (O) => O), H = (O) => this.uniqueKeys.map((w) => ({ [u]: w, [d]: O }));\n    $.join(\n      (O) => O.append("path").attr("opacity", 0).attr("transform", `translate(${R.x}, ${R.y})`).attr("fill", "none").call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_y_axes_enter",\n            animate: t\n          })\n        ).attr("opacity", 1).attr("d", (L) => D(H(L)))\n      ),\n      (O) => O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_y_axes_update",\n            animate: t\n          })\n        ).attr("opacity", 1).attr("transform", `translate(${R.x}, ${R.y})`).attr("d", (L) => D(H(L)))\n      ),\n      (O) => O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_y_axes_exit",\n            animate: t\n          })\n        ).attr("d", (L) => D(H(L))).attr("opacity", 0).remove()\n      )\n    ), N.appendOrSelect(n, "g.x-axes").attr("role", ht.GROUP).selectAll("line").data(this.uniqueKeys, (O) => O).join(\n      (O) => O.append("line").attr("opacity", 0).attr("class", (w) => `x-axis-${Tr(w)}`).attr("stroke-dasharray", "0").attr("x1", (w) => Ut(_(w), 0, R).x).attr("y1", (w) => Ut(_(w), 0, R).y).attr("x2", (w) => Ut(_(w), 0, R).x).attr("y2", (w) => Ut(_(w), 0, R).y).call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_x_axes_enter",\n            animate: t\n          })\n        ).attr("opacity", 1).attr("x1", (L) => Ut(_(L), b.range()[0], R).x).attr("y1", (L) => Ut(_(L), b.range()[0], R).y).attr("x2", (L) => Ut(_(L), b.range()[1], R).x).attr("y2", (L) => Ut(_(L), b.range()[1], R).y)\n      ),\n      (O) => O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_x_axes_update",\n            animate: t\n          })\n        ).attr("opacity", 1).attr("x1", (L) => Ut(_(L), b.range()[0], R).x).attr("y1", (L) => Ut(_(L), b.range()[0], R).y).attr("x2", (L) => Ut(_(L), b.range()[1], R).x).attr("y2", (L) => Ut(_(L), b.range()[1], R).y)\n      ),\n      (O) => O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_x_axes_exit",\n            animate: t\n          })\n        ).attr("opacity", 0).remove()\n      )\n    ), N.appendOrSelect(n, "g.x-labels").attr("role", ht.GROUP).selectAll("text").data(this.uniqueKeys).join(\n      (O) => O.append("text").text((w) => w).attr("opacity", 0).attr(\n        "x",\n        (w) => Ut(_(w), b.range()[1] + h, R).x\n      ).attr(\n        "y",\n        (w) => Ut(_(w), b.range()[1] + h, R).y\n      ).style("text-anchor", (w) => pd(_(w)).textAnchor).style(\n        "dominant-baseline",\n        (w) => pd(_(w)).dominantBaseline\n      ).call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_x_labels_enter",\n            animate: t\n          })\n        ).attr("opacity", 1)\n      ),\n      (O) => O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_x_labels_update",\n            animate: t\n          })\n        ).attr("opacity", 1).attr(\n          "x",\n          (L) => Ut(_(L), b.range()[1] + h, R).x\n        ).attr(\n          "y",\n          (L) => Ut(_(L), b.range()[1] + h, R).y\n        ).end().finally(() => {\n          const L = y(o, "radar", "alignment"), k = this.getAlignmentXOffset(L, n, this.getParent());\n          n.attr("x", k);\n        })\n      ),\n      (O) => O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_x_labels_exit",\n            animate: t\n          })\n        ).attr("opacity", 0).remove()\n      )\n    ), N.appendOrSelect(n, "g.blobs").attr("role", ht.GROUP).selectAll("path").data(this.groupedDataNormalized, (O) => O.name).join(\n      (O) => O.append("path").attr(\n        "class",\n        (w) => this.model.getColorClassName({\n          classNameTypes: [it.FILL, it.STROKE],\n          dataGroupName: w.name,\n          originalClassName: "blob"\n        })\n      ).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-label", (w) => w.name).attr("opacity", 0).attr(\n        "transform",\n        t ? () => `translate(${R.x}, ${R.y}) scale(${1 + Math.random() * 0.35})` : `translate(${R.x}, ${R.y})`\n      ).style("fill", (w) => M(w.name, null, w.data)).style("fill-opacity", Wn.opacity.selected).style("stroke", (w) => M(w.name, null, w.data)).call((w) => {\n        const L = w.transition().call(\n          (k) => this.services.transitions.setupTransition({\n            transition: k,\n            name: "radar_blobs_enter",\n            animate: t\n          })\n        );\n        t && L.delay(() => Math.random() * 30).attr("transform", `translate(${R.x}, ${R.y})`), L.attr("opacity", 1).attr("d", (k) => D(k.data));\n      }),\n      (O) => (O.attr(\n        "class",\n        (w) => this.model.getColorClassName({\n          classNameTypes: [it.FILL, it.STROKE],\n          dataGroupName: w.name,\n          originalClassName: "blob"\n        })\n      ).style("fill", (w) => M(w.name, null, w.data)).style("stroke", (w) => M(w.name, null, w.data)), O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_blobs_update",\n            animate: t\n          })\n        ).attr("opacity", 1).attr("transform", `translate(${R.x}, ${R.y})`).attr("d", (L) => D(L.data))\n      ), O),\n      (O) => O.call((w) => {\n        const L = w.transition().call(\n          (k) => this.services.transitions.setupTransition({\n            transition: k,\n            name: "radar_blobs_exit",\n            animate: t\n          })\n        );\n        t && L.delay(() => Math.random() * 30).attr(\n          "transform",\n          () => `translate(${R.x}, ${R.y}) scale(${1 + Math.random() * 0.35})`\n        ), L.attr("opacity", 0).remove();\n      })\n    ), N.appendOrSelect(n, "g.dots").attr("role", ht.GROUP).selectAll("circle").data(this.fullDataNormalized.filter((O) => y(O, d) !== null)).join(\n      (O) => O.append("circle").attr("role", ht.GRAPHICS_SYMBOL).attr("aria-label", (w) => w[c]),\n      (O) => O,\n      (O) => O.remove()\n    ).attr(\n      "class",\n      (O) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: O[l],\n        originalClassName: Tr(O[u])\n      })\n    ).attr("cx", (O) => Ut(_(O[u]), b(O[d]), R).x).attr("cy", (O) => Ut(_(O[u]), b(O[d]), R).y).attr("r", 0).attr("opacity", 0).style("fill", (O) => M(O[l])), N.appendOrSelect(n, "g.x-axes-rect").attr("role", ht.GROUP).selectAll("rect").data(this.uniqueKeys).join(\n      (O) => O.append("rect"),\n      (O) => O,\n      (O) => O.remove()\n    ).attr("x", R.x).attr("y", R.y - m / 2).attr("width", b.range()[1]).attr("height", m).style("fill", "red").style("fill-opacity", 0).attr("transform", (O) => `rotate(${pg(_(O))}, ${R.x}, ${R.y})`);\n    const { code: P, number: B } = y(o, "locale");\n    N.appendOrSelect(n, "g.y-labels").attr("role", ht.GROUP).selectAll("text").data(ze(S)).join(\n      (O) => O.append("text").attr("opacity", 0).text((w) => B(w, P)).attr(\n        "x",\n        (w) => Ut(-Math.PI / 2, b(w), R).x + p\n      ).attr("y", (w) => Ut(-Math.PI / 2, b(w), R).y).style("text-anchor", "start").style("dominant-baseline", "middle").call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_y_labels_enter",\n            animate: t\n          })\n        ).attr("opacity", 1)\n      ),\n      (O) => O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_y_labels_update",\n            animate: t\n          })\n        ).text((L) => L).attr("opacity", 1).attr(\n          "x",\n          (L) => Ut(-Math.PI / 2, b(L), R).x + p\n        ).attr("y", (L) => Ut(-Math.PI / 2, b(L), R).y)\n      ),\n      (O) => O.call(\n        (w) => w.transition().call(\n          (L) => this.services.transitions.setupTransition({\n            transition: L,\n            name: "radar_y_labels_exit",\n            animate: t\n          })\n        ).attr("opacity", 0).remove()\n      )\n    ), this.addEventListeners();\n  }\n  getAlignmentXOffset(t, n, r) {\n    const i = N.getSVGElementSize(n, {\n      useBBox: !0\n    }), { width: s } = N.getSVGElementSize(r, {\n      useAttrs: !0\n    });\n    let a = 0;\n    return t === jt.CENTER ? a = Math.floor((s - i.width) / 2) : t === jt.RIGHT && (a = s - i.width), a;\n  }\n  destroy() {\n    this.parent.selectAll(".x-axes-rect > rect").on("mouseover", null).on("mousemove", null).on("mouseout", null);\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  addEventListeners() {\n    const t = this, {\n      axes: { angle: n }\n    } = y(this.getOptions(), "radar");\n    this.parent.selectAll(".x-axes-rect > rect").on("mouseover", function(r, i) {\n      const s = I(this);\n      t.services.events.dispatchEvent(T.Radar.X_AXIS_MOUSEOVER, {\n        event: r,\n        element: s,\n        datum: i\n      });\n      const a = t.parent.select(`.x-axes .x-axis-${Tr(i)}`), o = t.parent.selectAll(`.dots circle.${Tr(i)}`), l = t.model.getActiveDataGroupNames(), c = t.getOptions(), { groupMapsTo: u } = c.data, d = y(c, "radar", "axes", "value");\n      a.classed("hovered", !0).attr("stroke-dasharray", "4 4"), o.classed("hovered", !0).attr(\n        "opacity",\n        (p) => l.indexOf(p[u]) !== -1 ? 1 : 0\n      ).attr("r", Wn.dotsRadius);\n      const h = t.fullDataNormalized.filter(\n        (p) => p[n] === i && l.indexOf(p[u]) !== -1\n      );\n      t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: r,\n        hoveredElement: s,\n        items: h.filter((p) => typeof p[d] == "number").map((p) => ({\n          label: p[u],\n          value: p[d],\n          color: t.model.getFillColor(p[u], null, p),\n          class: t.model.getColorClassName({\n            classNameTypes: [it.TOOLTIP],\n            dataGroupName: p[u]\n          })\n        }))\n      });\n    }).on("mousemove", function(r, i) {\n      const s = I(this);\n      t.services.events.dispatchEvent(T.Radar.X_AXIS_MOUSEMOVE, {\n        event: r,\n        element: s,\n        datum: i\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: r\n      });\n    }).on("click", function(r, i) {\n      t.services.events.dispatchEvent(T.Radar.X_AXIS_CLICK, {\n        event: r,\n        element: I(this),\n        datum: i\n      });\n    }).on("mouseout", function(r, i) {\n      const s = I(this), a = t.parent.select(`.x-axes .x-axis-${Tr(i)}`), o = t.parent.selectAll(`.dots circle.${Tr(i)}`);\n      a.classed("hovered", !1).attr("stroke-dasharray", "0"), o.classed("hovered", !1).attr("opacity", 0).attr("r", 0), t.services.events.dispatchEvent(T.Radar.X_AXIS_MOUSEOUT, {\n        event: r,\n        element: s,\n        datum: i\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE);\n    });\n  }\n}\nclass $v extends hu {\n  constructor() {\n    super(...arguments), this.type = "simple-bar", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, { groupMapsTo: r } = this.getOptions().data;\n      this.parent.selectAll("path.bar").transition("legend-hover-simple-bar").call(\n        (i) => this.services.transitions.setupTransition({\n          transition: i,\n          name: "legend-hover-simple-bar"\n        })\n      ).attr("opacity", (i) => i[r] !== n.datum().name ? 0.3 : 1);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.bar").transition("legend-mouseout-simple-bar").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-simple-bar"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t) {\n    const n = this.getOptions(), { groupMapsTo: r } = n.data, i = this.getComponentContainer({\n      ariaLabel: "bar graphs",\n      withinChartClip: !0\n    }), s = this.model.getDisplayData(this.configs.groups), a = this.services.cartesianScales.getOrientation(), o = i.selectAll("path.bar").data(s, (l) => l[r]);\n    o.exit().attr("opacity", 0).remove(), o.enter().append("path").attr("opacity", 0).merge(o).classed("bar", !0).attr("width", this.getBarWidth.bind(this)).transition().call(\n      (l) => this.services.transitions.setupTransition({\n        transition: l,\n        name: "bar-update-enter",\n        animate: t\n      })\n    ).attr(\n      "class",\n      (l) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: l[r],\n        originalClassName: "bar"\n      })\n    ).style("fill", (l) => {\n      const c = this.services.cartesianScales.getDomainIdentifier(l);\n      return this.model.getFillColor(l[r], l[c], l);\n    }).attr("d", (l) => {\n      const c = this.services.cartesianScales.getRangeIdentifier(), u = this.getBarWidth(), d = l[c], h = this.services.cartesianScales.getDomainValue(l) - u / 2, p = h + u;\n      let f, g;\n      if (Array.isArray(d) && d.length === 2)\n        f = this.services.cartesianScales.getRangeValue(d[0]), g = this.services.cartesianScales.getRangeValue(d[1]);\n      else {\n        const v = this.services.cartesianScales.getRangeScale().domain()[0];\n        f = this.services.cartesianScales.getRangeValue(Math.max(0, v)), g = this.services.cartesianScales.getRangeValue(l);\n      }\n      const m = Math.abs(g - f);\n      if (m !== 0 && m < 2 && (d > 0 && a === Ft.VERTICAL || d < 0 && a === Ft.HORIZONTAL ? g = f - 2 : g = f + 2), !this.isOutsideZoomedDomain(h, p))\n        return ae({ x0: h, x1: p, y0: f, y1: g }, a);\n    }).attr("opacity", 1).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (l) => l.value), this.addEventListeners();\n  }\n  addEventListeners() {\n    const t = this;\n    this.parent.selectAll("path.bar").on("mouseover", function(n, r) {\n      const i = I(this);\n      i.classed("hovered", !0), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOVER, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: n,\n        hoveredElement: i,\n        data: [r]\n      });\n    }).on("mousemove", function(n, r) {\n      t.services.events.dispatchEvent(T.Bar.BAR_MOUSEMOVE, {\n        event: n,\n        element: I(this),\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: n\n      });\n    }).on("click", function(n, r) {\n      t.services.events.dispatchEvent(T.Bar.BAR_CLICK, {\n        event: n,\n        element: I(this),\n        datum: r\n      });\n    }).on("mouseout", function(n, r) {\n      const i = I(this);\n      i.classed("hovered", !1), t.services.events.dispatchEvent(T.Bar.BAR_MOUSEOUT, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: i\n      });\n    });\n  }\n  destroy() {\n    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n}\nclass zD extends ce {\n  constructor() {\n    super(...arguments), this.type = "skeleton-lines";\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = y(this.getOptions(), "data", "loading"), r = !y(this.getOptions(), "grid", "x", "enabled") && !y(this.getOptions(), "grid", "y", "enabled") && !y(this.getOptions(), "axes", "bottom", "visible") && !y(this.getOptions(), "axes", "left", "visible");\n    n && !r ? super.renderGridSkeleton(n) : n && r ? this.renderSparklineSkeleton(n) : this.removeSkeleton();\n  }\n  renderSparklineSkeleton(t) {\n    this.setScales(), this.drawBackdrop(t), this.drawSparkline(t), this.updateBackdropStyle(), t && this.setShimmerEffect("shimmer-lines");\n  }\n  drawSparkline(t) {\n    const n = this.backdrop.attr("width"), r = [100], i = N.appendOrSelect(this.backdrop, "g.y.skeleton"), s = i.selectAll("line").data(r);\n    s.enter().append("line").merge(s).attr("x1", 0).attr("x2", n).attr("y1", (a) => a).attr("y2", (a) => a), i.selectAll("line").classed("shimmer-effect-lines", t).classed("empty-state-lines", !t).style(\n      "stroke",\n      t ? `url(#${this.services.domUtils.generateElementIDString("shimmer-lines")})` : null\n    );\n  }\n  updateBackdropStyle() {\n    const t = this.parent;\n    this.backdrop = N.appendOrSelect(t, "svg.chart-skeleton.DAII").attr(\n      "role",\n      "presentation"\n    ), N.appendOrSelect(this.backdrop, "rect.chart-skeleton-backdrop").classed("shimmer-effect-lines", !1).classed("shimmer-effect-sparkline", !0).style("stroke", null);\n  }\n}\nclass Mv extends mt {\n  constructor() {\n    super(...arguments), this.type = "area-stacked", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, r = this.getOptions(), { groupMapsTo: i } = r.data;\n      this.parent.selectAll("path.area").transition("legend-hover-area").call(\n        (s) => this.services.transitions.setupTransition({\n          transition: s,\n          name: "legend-hover-area"\n        })\n      ).attr("opacity", (s) => y(s, 0, i) !== n.datum().name ? yn.opacity.unselected : yn.opacity.selected);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.area").transition("legend-mouseout-area").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-area"\n        })\n      ).attr("opacity", yn.opacity.selected);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t = !0) {\n    const n = this.getComponentContainer({\n      ariaLabel: "stacked area graphs",\n      withinChartClip: !0\n    }), r = this, i = this.getOptions(), { groupMapsTo: s } = i.data, a = Object.keys(i.axes).some((p) => i.axes[p].percentage), o = this.model.getStackedData({\n      percentage: a,\n      groups: this.configs.groups\n    }), l = y(o, 0, 0), c = this.services.cartesianScales.getDomainAxisPosition({ datum: l }), u = this.services.cartesianScales.getRangeAxisPosition({ datum: l }), d = this.services.cartesianScales.getScaleByPosition(u), h = n.selectAll("path.area").data(o, (p) => y(p, 0, s));\n    this.areaGenerator = au().x(\n      (p) => this.services.cartesianScales.getValueThroughAxisPosition(\n        c,\n        p.data.sharedStackKey\n      )\n    ).y0((p) => d(p[0])).y1((p) => d(p[1])).curve(this.services.curves.getD3Curve()), h.exit().attr("opacity", 0).remove(), h.enter().append("path").attr("opacity", 0).merge(h).data(o, (p) => y(p, 0, s)).attr("class", "area").attr(\n      "class",\n      (p) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: y(p, 0, s),\n        originalClassName: "area"\n      })\n    ).style("fill", (p) => r.model.getFillColor(y(p, 0, s), null, p)).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "area").attr("aria-label", (p) => y(p, 0, s)).transition().call(\n      (p) => this.services.transitions.setupTransition({\n        transition: p,\n        name: "area-update-enter",\n        animate: t\n      })\n    ).attr("opacity", yn.opacity.selected).attr("d", this.areaGenerator);\n  }\n}\nclass Cv extends hu {\n  constructor() {\n    super(...arguments), this.type = "stacked-bar", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, { groupMapsTo: r } = this.model.getOptions().data;\n      this.parent.selectAll("path.bar").transition("legend-hover-bar").call(\n        (i) => this.services.transitions.setupTransition({\n          transition: i,\n          name: "legend-hover-bar"\n        })\n      ).attr("opacity", (i) => i[r] !== n.datum().name ? 0.3 : 1);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("path.bar").transition("legend-mouseout-bar").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-bar"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t) {\n    const n = this.getComponentContainer({ ariaLabel: "stacked bar graphs", withinChartClip: !0 }), r = this.getOptions(), { groupMapsTo: i } = r.data, s = this.model.getStackedData({\n      groups: this.configs.groups,\n      divergent: !0\n    }), a = this.model.getActiveDataGroupNames(), o = n.selectAll("g.bars").data(s, (c) => y(c, 0, i));\n    o.exit().attr("opacity", 0).remove(), o.enter().append("g").classed("bars", !0).attr("role", ht.GROUP).attr("data-name", "bars");\n    const l = n.selectAll("g.bars").selectAll("path.bar").data(\n      (c) => c,\n      (c) => c.data.sharedStackKey\n    );\n    l.exit().remove(), l.enter().append("path").merge(l).classed("bar", !0).transition().call(\n      (c) => this.services.transitions.setupTransition({\n        transition: c,\n        name: "bar-update-enter",\n        animate: t\n      })\n    ).attr(\n      "class",\n      (c) => this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: c[i],\n        originalClassName: "bar"\n      })\n    ).style(\n      "fill",\n      (c) => this.model.getFillColor(c[i], c.data.sharedStackKey, c.data)\n    ).attr("d", (c) => {\n      const u = c.data.sharedStackKey, d = this.getBarWidth(), h = this.services.cartesianScales.getDomainValue(u) - d / 2, p = h + d, f = this.services.cartesianScales.getRangeValue(c[0]);\n      let g = this.services.cartesianScales.getRangeValue(c[1]);\n      if (!this.isOutsideZoomedDomain(h, p)) {\n        if (Math.abs(g - f) > 0 && Math.abs(g - f) > r.bars.dividerSize) {\n          const m = c[0] < 0 && c[1] <= 0;\n          m && a.length > 1 ? this.services.cartesianScales.getOrientation() === Ft.VERTICAL ? g += c[1] === 0 ? 2 : 1 : g -= 1 : m || (this.services.cartesianScales.getOrientation() === Ft.VERTICAL ? g += 1 : g -= 1);\n        }\n        return ae(\n          { x0: h, x1: p, y0: f, y1: g },\n          this.services.cartesianScales.getOrientation()\n        );\n      }\n    }).attr("opacity", 1).attr("role", ht.GRAPHICS_SYMBOL).attr("aria-roledescription", "bar").attr("aria-label", (c) => c[1] - c[0]), this.addEventListeners();\n  }\n  addEventListeners() {\n    const t = this.getOptions(), { groupMapsTo: n } = t.data, r = this;\n    this.parent.selectAll("path.bar").on("mouseover", function(i, s) {\n      const a = I(this);\n      a.classed("hovered", !0), r.services.events.dispatchEvent(T.Bar.BAR_MOUSEOVER, {\n        event: i,\n        element: a,\n        datum: s\n      });\n      let o = r.model.getDisplayData(r.configs.groups).find((l) => {\n        const c = r.services.cartesianScales.getDomainIdentifier(l), u = r.services.cartesianScales.getRangeIdentifier(l);\n        return l[u] === s.data[s[n]] && l[c].toString() === s.data.sharedStackKey && l[n] === s[n];\n      });\n      if (o === void 0) {\n        const l = r.services.cartesianScales.getDomainIdentifier(), c = r.services.cartesianScales.getRangeIdentifier();\n        o = {\n          [l]: s.data.sharedStackKey,\n          [c]: s.data[s[n]],\n          [n]: s[n]\n        };\n      }\n      r.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: i,\n        hoveredElement: a,\n        data: [o]\n      });\n    }).on("mousemove", function(i, s) {\n      const a = I(this);\n      r.services.events.dispatchEvent(T.Bar.BAR_MOUSEMOVE, {\n        event: i,\n        element: a,\n        datum: s\n      }), r.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: i\n      });\n    }).on("click", function(i, s) {\n      r.services.events.dispatchEvent(T.Bar.BAR_CLICK, {\n        event: i,\n        element: I(this),\n        datum: s\n      });\n    }).on("mouseout", function(i, s) {\n      const a = I(this);\n      a.classed("hovered", !1), r.services.events.dispatchEvent(T.Bar.BAR_MOUSEOUT, {\n        event: i,\n        element: a,\n        datum: s\n      }), r.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: a\n      });\n    });\n  }\n  getBarWidth() {\n    const t = this.getOptions();\n    if (y(t, "bars", "width"))\n      return t.bars.width;\n    const n = this.services.cartesianScales.getMainXScale(), r = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    }).width, i = this.model.getStackKeys().length, s = y(t, "bars", "spacingFactor");\n    return n.step ? Math.min(t.bars.maxWidth, n.step() / 2) : Math.min(t.bars.maxWidth, r * s / i);\n  }\n  destroy() {\n    this.parent.selectAll("path.bar").on("mouseover", null).on("mousemove", null).on("mouseout", null);\n    const t = this.services.events;\n    t.removeEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.removeEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n}\nclass Av extends nn {\n  constructor() {\n    super(...arguments), this.type = "scatter-stacked", this.renderType = rt.SVG;\n  }\n  render(t) {\n    if (!y(this.getOptions(), "points", "enabled"))\n      return;\n    const n = this.getComponentContainer({ ariaLabel: "scatter points", withinChartClip: !0 }), r = this.getOptions(), { groupMapsTo: i } = r.data, s = Object.keys(r.axes).some((u) => r.axes[u].percentage), a = this.model.getStackedData({\n      groups: this.configs.groups,\n      percentage: s\n    }), o = n.selectAll("g.dots").data(a, (u) => y(u, 0, i));\n    o.exit().attr("opacity", 0).remove();\n    const l = o.enter().append("g").classed("dots", !0).attr("role", ht.GROUP).merge(o).selectAll("circle.dot").data((u) => u);\n    l.exit().attr("opacity", 0).remove();\n    const c = l.enter().append("circle").classed("dot", !0).attr("opacity", 0).merge(l).datum((u) => {\n      const d = u[i], h = this.services.cartesianScales.getDomainIdentifier(u), p = this.services.cartesianScales.getRangeIdentifier(u);\n      return {\n        [i]: d,\n        [h]: u.data.sharedStackKey,\n        [p]: u[1]\n      };\n    });\n    this.styleCircles(c, t), this.addEventListeners();\n  }\n  getTooltipData(t, n) {\n    const r = this.getOptions(), { groupMapsTo: i } = r.data, s = Object.keys(r.axes).some((l) => r.axes[l].percentage), a = this.model.getStackedData({\n      groups: this.configs.groups,\n      percentage: s\n    }), o = [];\n    return a.forEach((l, c) => {\n      l.forEach((u, d) => {\n        const h = u[i], p = u.data.sharedStackKey;\n        let f = u.data[h];\n        const g = u[1], m = this.services.cartesianScales.getDomainIdentifier(u), v = this.services.cartesianScales.getRangeIdentifier(u);\n        f != null && t === this.services.cartesianScales.getDomainValue(p) && n === this.services.cartesianScales.getRangeValue(g) && (s && (f = this.model.getStackedData({\n          groups: this.configs.groups\n        })[c][d].data[h]), f !== null && o.push({\n          [i]: h,\n          [m]: p,\n          [v]: f\n        }));\n      });\n    }), this.model.getDisplayData(this.configs.groups).filter((l) => {\n      const c = this.services.cartesianScales.getDomainIdentifier(l), u = this.services.cartesianScales.getRangeIdentifier(l);\n      return o.find((d) => d[i] == l[i] && d[c] == l[c] && d[u] == l[u]) !== void 0;\n    });\n  }\n}\nconst Si = 6;\nclass FD extends mt {\n  constructor() {\n    super(...arguments), this.type = "tree", this.renderType = rt.SVG;\n  }\n  getLongestLabel(t) {\n    let n = "";\n    return t.forEach((r) => {\n      const i = r.children ? this.getLongestLabel(r.children) : "";\n      (i.length > n.length || r.name.length > n.length) && (n = i.length > r.name.length ? i : r.name);\n    }), n;\n  }\n  getMockLabelWidth(t, n) {\n    const r = t.append("text").attr("dy", "0.31em").attr("x", 0).attr("text-anchor", "end").text(n), { width: i } = N.getSVGElementSize(r.node(), {\n      useBBox: !0\n    });\n    return r.remove(), i;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    const n = this.getComponentContainer({\n      ariaLabel: "tree diagram"\n    });\n    n.html("");\n    const { width: r, height: i } = N.getSVGElementSize(this.parent, {\n      useAttrs: !0\n    });\n    if (r < 1 || i < 1)\n      return;\n    const s = this.model.getOptions(), a = this.model.getDisplayData(), o = y(s, "tree", "rootTitle") || "Tree", l = this.getMockLabelWidth(n, o), c = this.getLongestLabel(a), u = this.getMockLabelWidth(n, c), d = {\n      left: l > 0 ? l + Si : 30 - Si\n    }, h = ys({\n      name: o,\n      children: a\n    }), p = 10, f = r / 6, g = (S) => {\n      const M = h.descendants().reverse(), D = h.links();\n      let A = h, R = h;\n      h.eachBefore((k) => {\n        k.x < A.x && (A = k), k.x > R.x && (R = k);\n      });\n      const $ = R.x - A.x, H = n.transition().call(\n        (k) => this.services.transitions.setupTransition({\n          transition: k,\n          name: "tree-update-viewbox",\n          animate: !0\n        })\n      ).attr("viewBox", [-d.left, A.x, r, $].join(" ")), P = b.selectAll("g").data(M, (k) => k.id), B = this, O = P.enter().append("g").attr("transform", () => `translate(${S.y0},${S.x0})`).attr(\n        "class",\n        (k) => k.depth !== 0 && k.children && k.children.length > 0 ? "clickable" : null\n      ).on("mouseover", function(k, U) {\n        B.services.events.dispatchEvent(T.Tree.NODE_MOUSEOVER, {\n          event: k,\n          element: I(this),\n          datum: U\n        });\n      }).on("click", function(k, U) {\n        U.depth !== 0 && (U.children = U.children ? null : U._children, g(U)), B.services.events.dispatchEvent(T.Tree.NODE_CLICK, {\n          event: k,\n          element: I(this),\n          datum: U\n        });\n      }).on("mouseout", function(k, U) {\n        B.services.events.dispatchEvent(T.Tree.NODE_MOUSEOUT, {\n          event: k,\n          element: I(this),\n          datum: U\n        });\n      });\n      O.append("circle").attr("r", 2.5).attr("class", (k) => k._children ? "parent" : "child").attr("stroke-width", 10), O.append("text").attr("dy", "0.31em").attr("x", (k) => k._children ? -6 : Si).attr("text-anchor", (k) => k._children ? "end" : "start").text((k) => k.data.name).clone(!0).attr("class", "text-stroke").lower(), P.merge(O).transition(H).attr("transform", (k) => `translate(${k.y},${k.x})`).attr("fill-opacity", 1).attr("stroke-opacity", 1), P.exit().transition(H).remove().attr("transform", () => `translate(${S.y},${S.x})`).attr("fill-opacity", 0).attr("stroke-opacity", 0);\n      const w = E.selectAll("path").data(D, (k) => k.target.id), L = w.enter().append("path").attr("d", () => {\n        const k = { x: S.x0, y: S.y0 };\n        return _({ source: k, target: k });\n      });\n      w.merge(L).transition(H).attr("d", _), w.exit().transition(H).remove().attr("d", () => {\n        const k = { x: S.x, y: S.y };\n        return _({ source: k, target: k });\n      }), h.eachBefore((k) => {\n        k.x0 = k.x, k.y0 = k.y;\n      });\n    }, m = h.descendants(), v = m[m.length - 1].depth, x = y(s, "tree", "type") === pc.DENDROGRAM ? lL().size([\n      i,\n      r - u - v * Si - l\n    ]) : XL().nodeSize([p, f]).size([\n      i,\n      r - u - v * Si - l\n    ]), _ = yk().x((S) => S.y).y((S) => S.x);\n    h.x0 = f / 2, h.y0 = 0, h.descendants().forEach((S, M) => {\n      S.id = M, S._children = S.children;\n    }), x(h), n.attr("viewBox", [-d.left, -0, r, p]).style("user-select", "none");\n    const E = n.append("g").attr("class", "links"), b = n.append("g").attr("class", "nodes");\n    g(h);\n  }\n}\nvar jD = "#000000", WD = "#ffffff", qD = "#fcf4d6", YD = "#fddc69", XD = "#f1c21b", ZD = "#d2a106", KD = "#b28600", QD = "#8e6a00", JD = "#684e00", tR = "#483700", eR = "#302400", nR = "#1c1500", rR = {\n  10: qD,\n  20: YD,\n  30: XD,\n  40: ZD,\n  50: KD,\n  60: QD,\n  70: JD,\n  80: tR,\n  90: eR,\n  100: nR\n}, iR = "#fff2e8", sR = "#ffd9be", aR = "#ffb784", oR = "#ff832b", lR = "#eb6200", cR = "#ba4e00", uR = "#8a3800", hR = "#5e2900", dR = "#3e1a00", pR = "#231000", fR = {\n  10: iR,\n  20: sR,\n  30: aR,\n  40: oR,\n  50: lR,\n  60: cR,\n  70: uR,\n  80: hR,\n  90: dR,\n  100: pR\n}, mR = "#fff1f1", gR = "#ffd7d9", vR = "#ffb3b8", yR = "#ff8389", xR = "#fa4d56", bR = "#da1e28", _R = "#a2191f", ER = "#750e13", OR = "#520408", SR = "#2d0709", TR = {\n  10: mR,\n  20: gR,\n  30: vR,\n  40: yR,\n  50: xR,\n  60: bR,\n  70: _R,\n  80: ER,\n  90: OR,\n  100: SR\n}, wR = "#fff0f7", $R = "#ffd6e8", MR = "#ffafd2", CR = "#ff7eb6", AR = "#ee5396", LR = "#d02670", kR = "#9f1853", DR = "#740937", RR = "#510224", IR = "#2a0a18", NR = {\n  10: wR,\n  20: $R,\n  30: MR,\n  40: CR,\n  50: AR,\n  60: LR,\n  70: kR,\n  80: DR,\n  90: RR,\n  100: IR\n}, PR = "#f6f2ff", UR = "#e8daff", BR = "#d4bbff", HR = "#be95ff", VR = "#a56eff", GR = "#8a3ffc", zR = "#6929c4", FR = "#491d8b", jR = "#31135e", WR = "#1c0f30", qR = {\n  10: PR,\n  20: UR,\n  30: BR,\n  40: HR,\n  50: VR,\n  60: GR,\n  70: zR,\n  80: FR,\n  90: jR,\n  100: WR\n}, YR = "#edf5ff", XR = "#d0e2ff", ZR = "#a6c8ff", KR = "#78a9ff", QR = "#4589ff", JR = "#0f62fe", tI = "#0043ce", eI = "#002d9c", nI = "#001d6c", rI = "#001141", iI = {\n  10: YR,\n  20: XR,\n  30: ZR,\n  40: KR,\n  50: QR,\n  60: JR,\n  70: tI,\n  80: eI,\n  90: nI,\n  100: rI\n}, sI = "#e5f6ff", aI = "#bae6ff", oI = "#82cfff", lI = "#33b1ff", cI = "#1192e8", uI = "#0072c3", hI = "#00539a", dI = "#003a6d", pI = "#012749", fI = "#061727", mI = {\n  10: sI,\n  20: aI,\n  30: oI,\n  40: lI,\n  50: cI,\n  60: uI,\n  70: hI,\n  80: dI,\n  90: pI,\n  100: fI\n}, gI = "#d9fbfb", vI = "#9ef0f0", yI = "#3ddbd9", xI = "#08bdba", bI = "#009d9a", _I = "#007d79", EI = "#005d5d", OI = "#004144", SI = "#022b30", TI = "#081a1c", wI = {\n  10: gI,\n  20: vI,\n  30: yI,\n  40: xI,\n  50: bI,\n  60: _I,\n  70: EI,\n  80: OI,\n  90: SI,\n  100: TI\n}, $I = "#defbe6", MI = "#a7f0ba", CI = "#6fdc8c", AI = "#42be65", LI = "#24a148", kI = "#198038", DI = "#0e6027", RI = "#044317", II = "#022d0d", NI = "#071908", PI = {\n  10: $I,\n  20: MI,\n  30: CI,\n  40: AI,\n  50: LI,\n  60: kI,\n  70: DI,\n  80: RI,\n  90: II,\n  100: NI\n}, UI = "#f2f4f8", BI = "#dde1e6", HI = "#c1c7cd", VI = "#a2a9b0", GI = "#878d96", zI = "#697077", FI = "#4d5358", jI = "#343a3f", WI = "#21272a", qI = "#121619", YI = {\n  10: UI,\n  20: BI,\n  30: HI,\n  40: VI,\n  50: GI,\n  60: zI,\n  70: FI,\n  80: jI,\n  90: WI,\n  100: qI\n}, XI = "#f4f4f4", ZI = "#e0e0e0", KI = "#c6c6c6", QI = "#a8a8a8", JI = "#8d8d8d", tN = "#6f6f6f", eN = "#525252", nN = "#393939", rN = "#262626", iN = "#161616", sN = {\n  10: XI,\n  20: ZI,\n  30: KI,\n  40: QI,\n  50: JI,\n  60: tN,\n  70: eN,\n  80: nN,\n  90: rN,\n  100: iN\n}, aN = "#f7f3f2", oN = "#e5e0df", lN = "#cac5c4", cN = "#ada8a8", uN = "#8f8b8b", hN = "#726e6e", dN = "#565151", pN = "#3c3838", fN = "#272525", mN = "#171414", gN = {\n  10: aN,\n  20: oN,\n  30: lN,\n  40: cN,\n  50: uN,\n  60: hN,\n  70: dN,\n  80: pN,\n  90: fN,\n  100: mN\n}, vp = {\n  black: {\n    100: jD\n  },\n  blue: iI,\n  coolGray: YI,\n  cyan: mI,\n  gray: sN,\n  green: PI,\n  magenta: NR,\n  orange: fR,\n  purple: qR,\n  red: TR,\n  teal: wI,\n  warmGray: gN,\n  white: {\n    0: WD\n  },\n  yellow: rR\n};\nconst vN = (e) => {\n  if (!e)\n    return null;\n  for (const t of Object.keys(vp)) {\n    const n = vp[t];\n    for (const r of Object.keys(n))\n      if (n[+r] === e)\n        return r;\n  }\n  return null;\n}, yp = function(e) {\n  const t = I(this.parentNode).select("rect.leaf"), n = e.backgroundColor ?? getComputedStyle(t.node(), null).getPropertyValue("fill"), r = Tn(n);\n  let i;\n  if (r && (i = vN(r ? r.hex() : null)), i == null) {\n    const s = lm(r).l;\n    i = Math.abs(s * 100 - 100);\n  }\n  return i > 50 ? "white" : "black";\n};\nlet yN = 0;\nclass xN extends mt {\n  constructor() {\n    super(...arguments), this.type = "treemap", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail;\n      this.parent.selectAll("g[data-name=\'leaf\']").transition("legend-hover-treemap").call(\n        (r) => this.services.transitions.setupTransition({\n          transition: r,\n          name: "legend-hover-treemap"\n        })\n      ).attr(\n        "opacity",\n        (r) => r.parent.data.name === n.datum().name ? 1 : 0.3\n      );\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("g[data-name=\'leaf\']").transition("legend-mouseout-treemap").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-treemap"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const { events: t } = this.services;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t = !0) {\n    const n = this.getComponentContainer({\n      ariaLabel: "treemap"\n    });\n    this.model.getData();\n    const r = this.model.getDisplayData(), i = this.model.getOptions(), s = y(window, "location"), { width: a, height: o } = N.getSVGElementSize(n, {\n      useAttrs: !0\n    }), l = ys({\n      name: i.title || "Treemap",\n      children: r\n    }).sum((p) => p.value).sort((p, f) => f.value - p.value), c = tk().size([a, o]).paddingInner(1).paddingOuter(0).round(!0)(\n      l\n    ), u = n.selectAll("g[data-name=\'leaf\']").data(c.leaves(), (p) => p.data.name);\n    u.exit().attr("opacity", 0).remove();\n    const d = u.enter().append("g").attr("data-name", "leaf").attr("data-uid", () => yN++).merge(u);\n    d.attr("data-name", "leaf").transition().call(\n      (p) => this.services.transitions.setupTransition({\n        transition: p,\n        name: "treemap-group-update",\n        animate: t\n      })\n    ).attr("transform", (p) => `translate(${p.x0},${p.y0})`);\n    const h = d.selectAll("rect.leaf").data((p) => [p]);\n    h.exit().attr("width", 0).attr("height", 0).remove(), h.enter().append("rect").classed("leaf", !0).merge(h).attr("width", 0).attr("height", 0).attr("id", function() {\n      const p = I(this.parentNode).attr("data-uid");\n      return `${i.style.prefix}-leaf-${p}`;\n    }).attr("class", (p) => {\n      for (; p.depth > 1; ) p = p.parent;\n      return this.model.getColorClassName({\n        classNameTypes: [it.FILL],\n        dataGroupName: p.data.name,\n        originalClassName: "leaf"\n      });\n    }).transition().call(\n      (p) => this.services.transitions.setupTransition({\n        transition: p,\n        name: "treemap-leaf-update-enter",\n        animate: t\n      })\n    ).attr("width", (p) => p.x1 - p.x0).attr("height", (p) => p.y1 - p.y0).style("fill", (p) => {\n      for (; p.depth > 1; ) p = p.parent;\n      return this.model.getFillColor(p.data.name, null, p.data);\n    }), d.selectAll("clipPath").data(\n      (p) => p.data.showLabel !== !0 ? [] : [1],\n      (p) => p\n    ).join(\n      (p) => p.append("clipPath").attr("id", function() {\n        const f = I(this.parentNode).attr("data-uid");\n        return `${i.style.prefix}-clip-${f}`;\n      }).append("use").attr("xlink:href", function() {\n        const f = I(this.parentNode.parentNode).attr("data-uid"), g = `${i.style.prefix}-leaf-${f}`;\n        return new URL(`#${g}`, s) + "";\n      }),\n      // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n      // @ts-ignore\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      (p) => null,\n      (p) => p.remove()\n    ), d.selectAll("text").data(\n      (p) => {\n        if (p.data.showLabel !== !0)\n          return [];\n        let f = p;\n        for (; f.depth > 1; ) f = f.parent;\n        return [\n          {\n            text: p.data.name,\n            backgroundColor: this.model.getFillColor(f.data.name)\n          }\n        ];\n      },\n      (p) => p\n    ).join(\n      (p) => {\n        const f = p.append("text").text((g) => g.text).style("fill", yp).attr("x", 7).attr("y", 18);\n        return s && f.attr("clip-path", function() {\n          const g = I(this.parentNode).attr("data-uid"), m = `${i.style.prefix}-clip-${g}`;\n          return `url(${new URL(`#${m}`, s) + ""})`;\n        }), f;\n      },\n      (p) => p.text((f) => f.text).style("fill", yp),\n      (p) => p.remove()\n    ), this.addEventListeners();\n  }\n  addEventListeners() {\n    const t = this;\n    this.parent.selectAll("rect.leaf").on("mouseover", function(n, r) {\n      const i = I(this);\n      let s = getComputedStyle(this, null).getPropertyValue("fill"), a = r;\n      for (; a.depth > 1; ) a = a.parent;\n      i.transition("graph_element_mouseover_fill_update").call(\n        (o) => t.services.transitions.setupTransition({\n          transition: o,\n          name: "graph_element_mouseover_fill_update"\n        })\n      ).style("fill", (o) => {\n        const l = t.model.getFillColor(o.parent.data.name, null, o.data);\n        return l && (s = l), Tn(s).darker(0.7).toString();\n      }), t.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: n,\n        hoveredElement: i,\n        items: [\n          {\n            color: s,\n            label: a.data.name,\n            bold: !0\n          },\n          {\n            label: r.data.name,\n            value: r.data.value\n          }\n        ]\n      }), t.services.events.dispatchEvent(T.Treemap.LEAF_MOUSEOVER, {\n        event: n,\n        element: i,\n        datum: r\n      });\n    }).on("mousemove", function(n, r) {\n      const i = I(this);\n      t.services.events.dispatchEvent(T.Treemap.LEAF_MOUSEMOVE, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: n\n      });\n    }).on("click", function(n, r) {\n      t.services.events.dispatchEvent(T.Treemap.LEAF_CLICK, {\n        event: n,\n        element: I(this),\n        datum: r\n      });\n    }).on("mouseout", function(n, r) {\n      const i = I(this);\n      i.classed("hovered", !1);\n      let s = r;\n      for (; s.depth > 1; ) s = s.parent;\n      i.transition().call(\n        (a) => t.services.transitions.setupTransition({\n          transition: a,\n          name: "graph_element_mouseout_fill_update"\n        })\n      ).style("fill", (a) => t.model.getFillColor(a.parent.data.name, null, a.data)), t.services.events.dispatchEvent(T.Treemap.LEAF_MOUSEOUT, {\n        event: n,\n        element: i,\n        datum: r\n      }), t.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: i\n      });\n    });\n  }\n}\nfunction bN(e) {\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;\n}\nfunction _N(e) {\n  if (Object.prototype.hasOwnProperty.call(e, "__esModule")) return e;\n  var t = e.default;\n  if (typeof t == "function") {\n    var n = function r() {\n      return this instanceof r ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);\n    };\n    n.prototype = t.prototype;\n  } else n = {};\n  return Object.defineProperty(n, "__esModule", { value: !0 }), Object.keys(e).forEach(function(r) {\n    var i = Object.getOwnPropertyDescriptor(e, r);\n    Object.defineProperty(n, r, i.get ? i : {\n      enumerable: !0,\n      get: function() {\n        return e[r];\n      }\n    });\n  }), n;\n}\nvar EN = { value: function() {\n} };\nfunction Lv() {\n  for (var e = 0, t = arguments.length, n = {}, r; e < t; ++e) {\n    if (!(r = arguments[e] + "") || r in n || /[\\s.]/.test(r)) throw new Error("illegal type: " + r);\n    n[r] = [];\n  }\n  return new sa(n);\n}\nfunction sa(e) {\n  this._ = e;\n}\nfunction ON(e, t) {\n  return e.trim().split(/^|\\s+/).map(function(n) {\n    var r = "", i = n.indexOf(".");\n    if (i >= 0 && (r = n.slice(i + 1), n = n.slice(0, i)), n && !t.hasOwnProperty(n)) throw new Error("unknown type: " + n);\n    return { type: n, name: r };\n  });\n}\nsa.prototype = Lv.prototype = {\n  constructor: sa,\n  on: function(e, t) {\n    var n = this._, r = ON(e + "", n), i, s = -1, a = r.length;\n    if (arguments.length < 2) {\n      for (; ++s < a; ) if ((i = (e = r[s]).type) && (i = SN(n[i], e.name))) return i;\n      return;\n    }\n    if (t != null && typeof t != "function") throw new Error("invalid callback: " + t);\n    for (; ++s < a; )\n      if (i = (e = r[s]).type) n[i] = xp(n[i], e.name, t);\n      else if (t == null) for (i in n) n[i] = xp(n[i], e.name, null);\n    return this;\n  },\n  copy: function() {\n    var e = {}, t = this._;\n    for (var n in t) e[n] = t[n].slice();\n    return new sa(e);\n  },\n  call: function(e, t) {\n    if ((i = arguments.length - 2) > 0) for (var n = new Array(i), r = 0, i, s; r < i; ++r) n[r] = arguments[r + 2];\n    if (!this._.hasOwnProperty(e)) throw new Error("unknown type: " + e);\n    for (s = this._[e], r = 0, i = s.length; r < i; ++r) s[r].value.apply(t, n);\n  },\n  apply: function(e, t, n) {\n    if (!this._.hasOwnProperty(e)) throw new Error("unknown type: " + e);\n    for (var r = this._[e], i = 0, s = r.length; i < s; ++i) r[i].value.apply(t, n);\n  }\n};\nfunction SN(e, t) {\n  for (var n = 0, r = e.length, i; n < r; ++n)\n    if ((i = e[n]).name === t)\n      return i.value;\n}\nfunction xp(e, t, n) {\n  for (var r = 0, i = e.length; r < i; ++r)\n    if (e[r].name === t) {\n      e[r] = EN, e = e.slice(0, r).concat(e.slice(r + 1));\n      break;\n    }\n  return n != null && e.push({ name: t, value: n }), e;\n}\nconst TN = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n  __proto__: null,\n  dispatch: Lv\n}, Symbol.toStringTag, { value: "Module" })), wN = /* @__PURE__ */ _N(TN);\nvar ul, bp;\nfunction $N() {\n  if (bp) return ul;\n  bp = 1;\n  const e = wN.dispatch, t = Math.PI / 180, n = {\n    archimedean: g,\n    rectangular: m\n  }, r = 64, i = 2048;\n  ul = function() {\n    var E = [256, 256], b = s, S = a, M = l, D = o, A = o, R = c, $ = u, H = g, P = [], B = 1 / 0, O = e("word", "end"), w = null, L = Math.random, k = {}, U = x;\n    k.canvas = function(F) {\n      return arguments.length ? (U = _(F), k) : U;\n    }, k.start = function() {\n      var F = Z(U()), Y = v((E[0] >> 5) * E[1]), ot = null, Q = P.length, q = -1, tt = [], lt = P.map(function(W, X) {\n        return W.text = b.call(this, W, X), W.font = S.call(this, W, X), W.style = D.call(this, W, X), W.weight = A.call(this, W, X), W.rotate = R.call(this, W, X), W.size = ~~M.call(this, W, X), W.padding = $.call(this, W, X), W;\n      }).sort(function(W, X) {\n        return X.size - W.size;\n      });\n      return w && clearInterval(w), w = setInterval(z, 0), z(), k;\n      function z() {\n        for (var W = Date.now(); Date.now() - W < B && ++q < Q && w; ) {\n          var X = lt[q];\n          X.x = E[0] * (L() + 0.5) >> 1, X.y = E[1] * (L() + 0.5) >> 1, d(F, X, lt, q), X.hasText && j(Y, X, ot) && (tt.push(X), O.call("word", k, X), ot ? p(ot, X) : ot = [{ x: X.x + X.x0, y: X.y + X.y0 }, { x: X.x + X.x1, y: X.y + X.y1 }], X.x -= E[0] >> 1, X.y -= E[1] >> 1);\n        }\n        q >= Q && (k.stop(), O.call("end", k, tt, ot));\n      }\n    }, k.stop = function() {\n      w && (clearInterval(w), w = null);\n      for (const F of P)\n        delete F.sprite;\n      return k;\n    };\n    function Z(F) {\n      const Y = F.getContext("2d", { willReadFrequently: !0 });\n      F.width = F.height = 1;\n      const ot = Math.sqrt(Y.getImageData(0, 0, 1, 1).data.length >> 2);\n      return F.width = (r << 5) / ot, F.height = i / ot, Y.fillStyle = Y.strokeStyle = "red", { context: Y, ratio: ot };\n    }\n    function j(F, Y, ot) {\n      E[0], E[1];\n      for (var Q = Y.x, q = Y.y, tt = Math.sqrt(E[0] * E[0] + E[1] * E[1]), lt = H(E), z = L() < 0.5 ? 1 : -1, W = -z, X, V, ut; (X = lt(W += z)) && (V = ~~X[0], ut = ~~X[1], !(Math.min(Math.abs(V), Math.abs(ut)) >= tt)); )\n        if (Y.x = Q + V, Y.y = q + ut, !(Y.x + Y.x0 < 0 || Y.y + Y.y0 < 0 || Y.x + Y.x1 > E[0] || Y.y + Y.y1 > E[1]) && (!ot || f(Y, ot)) && !h(Y, F, E[0])) {\n          for (var st = Y.sprite, Dt = Y.width >> 5, Nt = E[0] >> 5, nt = Y.x - (Dt << 4), yt = nt & 127, Se = 32 - yt, ge = Y.y1 - Y.y0, oi = (Y.y + Y.y0) * Nt + (nt >> 5), li, Fn = 0; Fn < ge; Fn++) {\n            li = 0;\n            for (var Ie = 0; Ie <= Dt; Ie++)\n              F[oi + Ie] |= li << Se | (Ie < Dt ? (li = st[Fn * Dt + Ie]) >>> yt : 0);\n            oi += Nt;\n          }\n          return !0;\n        }\n      return !1;\n    }\n    return k.timeInterval = function(F) {\n      return arguments.length ? (B = F ?? 1 / 0, k) : B;\n    }, k.words = function(F) {\n      return arguments.length ? (P = F, k) : P;\n    }, k.size = function(F) {\n      return arguments.length ? (E = [+F[0], +F[1]], k) : E;\n    }, k.font = function(F) {\n      return arguments.length ? (S = _(F), k) : S;\n    }, k.fontStyle = function(F) {\n      return arguments.length ? (D = _(F), k) : D;\n    }, k.fontWeight = function(F) {\n      return arguments.length ? (A = _(F), k) : A;\n    }, k.rotate = function(F) {\n      return arguments.length ? (R = _(F), k) : R;\n    }, k.text = function(F) {\n      return arguments.length ? (b = _(F), k) : b;\n    }, k.spiral = function(F) {\n      return arguments.length ? (H = n[F] || F, k) : H;\n    }, k.fontSize = function(F) {\n      return arguments.length ? (M = _(F), k) : M;\n    }, k.padding = function(F) {\n      return arguments.length ? ($ = _(F), k) : $;\n    }, k.random = function(F) {\n      return arguments.length ? (L = F, k) : L;\n    }, k.on = function() {\n      var F = O.on.apply(O, arguments);\n      return F === O ? k : F;\n    }, k;\n  };\n  function s(E) {\n    return E.text;\n  }\n  function a() {\n    return "serif";\n  }\n  function o() {\n    return "normal";\n  }\n  function l(E) {\n    return Math.sqrt(E.value);\n  }\n  function c() {\n    return (~~(random() * 6) - 3) * 30;\n  }\n  function u() {\n    return 1;\n  }\n  function d(E, b, S, M) {\n    if (!b.sprite) {\n      var D = E.context, A = E.ratio;\n      D.clearRect(0, 0, (r << 5) / A, i / A);\n      var R = 0, $ = 0, H = 0, P = S.length;\n      for (--M; ++M < P; ) {\n        b = S[M], D.save(), D.font = b.style + " " + b.weight + " " + ~~((b.size + 1) / A) + "px " + b.font;\n        const X = D.measureText(b.text), V = -Math.floor(X.width / 2);\n        let ut = (X.width + 1) * A, st = b.size << 1;\n        if (b.rotate) {\n          var B = Math.sin(b.rotate * t), O = Math.cos(b.rotate * t), w = ut * O, L = ut * B, k = st * O, U = st * B;\n          ut = Math.max(Math.abs(w + U), Math.abs(w - U)) + 31 >> 5 << 5, st = ~~Math.max(Math.abs(L + k), Math.abs(L - k));\n        } else\n          ut = ut + 31 >> 5 << 5;\n        if (st > H && (H = st), R + ut >= r << 5 && (R = 0, $ += H, H = 0), $ + st >= i) break;\n        D.translate((R + (ut >> 1)) / A, ($ + (st >> 1)) / A), b.rotate && D.rotate(b.rotate * t), D.fillText(b.text, V, 0), b.padding && (D.lineWidth = 2 * b.padding, D.strokeText(b.text, V, 0)), D.restore(), b.width = ut, b.height = st, b.xoff = R, b.yoff = $, b.x1 = ut >> 1, b.y1 = st >> 1, b.x0 = -b.x1, b.y0 = -b.y1, b.hasText = !0, R += ut;\n      }\n      for (var Z = D.getImageData(0, 0, (r << 5) / A, i / A).data, j = []; --M >= 0; )\n        if (b = S[M], !!b.hasText) {\n          for (var F = b.width, Y = F >> 5, ot = b.y1 - b.y0, Q = 0; Q < ot * Y; Q++) j[Q] = 0;\n          if (R = b.xoff, R == null) return;\n          $ = b.yoff;\n          for (var q = 0, tt = -1, lt = 0; lt < ot; lt++) {\n            for (var Q = 0; Q < F; Q++) {\n              var z = Y * lt + (Q >> 5), W = Z[($ + lt) * (r << 5) + (R + Q) << 2] ? 1 << 31 - Q % 32 : 0;\n              j[z] |= W, q |= W;\n            }\n            q ? tt = lt : (b.y0++, ot--, lt--, $++);\n          }\n          b.y1 = b.y0 + tt, b.sprite = j.slice(0, (b.y1 - b.y0) * Y);\n        }\n    }\n  }\n  function h(E, b, S) {\n    S >>= 5;\n    for (var M = E.sprite, D = E.width >> 5, A = E.x - (D << 4), R = A & 127, $ = 32 - R, H = E.y1 - E.y0, P = (E.y + E.y0) * S + (A >> 5), B, O = 0; O < H; O++) {\n      B = 0;\n      for (var w = 0; w <= D; w++)\n        if ((B << $ | (w < D ? (B = M[O * D + w]) >>> R : 0)) & b[P + w]) return !0;\n      P += S;\n    }\n    return !1;\n  }\n  function p(E, b) {\n    var S = E[0], M = E[1];\n    b.x + b.x0 < S.x && (S.x = b.x + b.x0), b.y + b.y0 < S.y && (S.y = b.y + b.y0), b.x + b.x1 > M.x && (M.x = b.x + b.x1), b.y + b.y1 > M.y && (M.y = b.y + b.y1);\n  }\n  function f(E, b) {\n    return E.x + E.x1 > b[0].x && E.x + E.x0 < b[1].x && E.y + E.y1 > b[0].y && E.y + E.y0 < b[1].y;\n  }\n  function g(E) {\n    var b = E[0] / E[1];\n    return function(S) {\n      return [b * (S *= 0.1) * Math.cos(S), S * Math.sin(S)];\n    };\n  }\n  function m(E) {\n    var b = 4, S = b * E[0] / E[1], M = 0, D = 0;\n    return function(A) {\n      var R = A < 0 ? -1 : 1;\n      switch (Math.sqrt(1 + 4 * R * A) - R & 3) {\n        case 0:\n          M += S;\n          break;\n        case 1:\n          D += b;\n          break;\n        case 2:\n          M -= S;\n          break;\n        default:\n          D -= b;\n          break;\n      }\n      return [M, D];\n    };\n  }\n  function v(E) {\n    for (var b = [], S = -1; ++S < E; ) b[S] = 0;\n    return b;\n  }\n  function x() {\n    return document.createElement("canvas");\n  }\n  function _(E) {\n    return typeof E == "function" ? E : function() {\n      return E;\n    };\n  }\n  return ul;\n}\nvar MN = $N();\nconst CN = /* @__PURE__ */ bN(MN);\nclass AN extends mt {\n  constructor() {\n    super(...arguments), this.type = "wordcloud", this.renderType = rt.SVG, this.handleLegendOnHover = (t) => {\n      const { hoveredElement: n } = t.detail, { groupMapsTo: r } = this.getOptions().data;\n      this.parent.selectAll("text.word").transition("legend-hover-wordcloud").call(\n        (i) => this.services.transitions.setupTransition({\n          transition: i,\n          name: "legend-hover-wordcloud"\n        })\n      ).attr("opacity", (i) => i[r] !== n.datum().name ? 0.3 : 1);\n    }, this.handleLegendMouseOut = () => {\n      this.parent.selectAll("text.word").transition("legend-mouseout-wordcloud").call(\n        (t) => this.services.transitions.setupTransition({\n          transition: t,\n          name: "legend-mouseout-wordcloud"\n        })\n      ).attr("opacity", 1);\n    };\n  }\n  init() {\n    const t = this.services.events;\n    t.addEventListener(T.Legend.ITEM_HOVER, this.handleLegendOnHover), t.addEventListener(T.Legend.ITEM_MOUSEOUT, this.handleLegendMouseOut);\n  }\n  render(t = !0) {\n    const n = this, r = this.getComponentContainer({\n      ariaLabel: "word cloud"\n    }).attr("width", "100%").attr("height", "100%"), i = this.model.getDisplayData(), s = this.getFontSizeScale(i), a = this.getOptions(), { fontSizeMapsTo: o, wordMapsTo: l } = a.wordCloud, { groupMapsTo: c } = a.data, { width: u, height: d } = N.getSVGElementSize(r, {\n      useAttrs: !0\n    });\n    if (u === 0 || d === 0)\n      return;\n    const h = CN().size([u, d]).words(\n      i.map(function(f) {\n        const g = f[o];\n        if (typeof f[o] != "number")\n          throw Error(\n            "Badly formatted WordCloud data. `value` should only be an integer or float"\n          );\n        return {\n          [c]: f[c],\n          text: f[l],\n          size: g,\n          value: g\n        };\n      })\n    ).padding(5).rotate(0).fontSize((f) => s(f.size)).on("end", p);\n    h.start();\n    function p(f) {\n      const g = N.appendOrSelect(r, "g.words");\n      g.attr("transform", `translate(${h.size()[0] / 2}, ${h.size()[1] / 2})`);\n      const m = g.selectAll("text").data(f, (v) => `${v[c]}-${v.text}`);\n      m.exit().attr("opacity", 0).remove(), m.enter().append("text").attr("opacity", 0).merge(m).style("font-size", (v) => `${v.size}px`).text(function(v) {\n        return v.text;\n      }).attr(\n        "class",\n        (v) => n.model.getColorClassName({\n          classNameTypes: [it.FILL],\n          dataGroupName: v[c],\n          originalClassName: `word ${v.size > 32 ? "light" : ""}`\n        })\n      ).style("fill", (v) => n.model.getFillColor(v[c], v.text, v)).attr("text-anchor", "middle").transition().call(\n        (v) => n.services.transitions.setupTransition({\n          transition: v,\n          name: "wordcloud-text-update-enter",\n          animate: t\n        })\n      ).attr("transform", (v) => `translate(${v.x}, ${v.y})`).attr("opacity", 1);\n    }\n    this.addEventListeners();\n  }\n  getFontSizeScale(t) {\n    const n = this.getOptions(), { fontSizeMapsTo: r } = n.wordCloud, i = t.map((l) => l[r]).filter((l) => l), s = N.getHTMLElementSize(this.services.domUtils.getMainContainer()), a = i.length > 0, o = a ? ze(i) : [1, 1];\n    return Fe().domain(o).range(a ? n.wordCloud.fontSizeRange(s, t) : [4, 4]);\n  }\n  addEventListeners() {\n    const t = this.getOptions(), { groupMapsTo: n } = t.data, r = this, i = ba((s) => {\n      const a = r.parent.selectAll("text.word").transition("wordcloud-word-mouse-highlight").call(\n        (o) => r.services.transitions.setupTransition({\n          transition: o,\n          name: "wordcloud-word-mouse-highlight"\n        })\n      );\n      s === null ? a.attr("opacity", 1) : a.attr("opacity", function() {\n        return s === this ? 1 : 0.3;\n      });\n    }, 6);\n    this.parent.selectAll("text.word").on("mouseover", function(s, a) {\n      const o = this;\n      i(o), r.services.events.dispatchEvent(T.WordCloud.WORD_MOUSEOVER, {\n        event: s,\n        element: I(this),\n        datum: a\n      }), r.services.events.dispatchEvent(T.Tooltip.SHOW, {\n        event: s,\n        hoveredElement: o,\n        items: [\n          {\n            label: t.tooltip.wordLabel,\n            value: a.text\n          },\n          {\n            label: t.tooltip.valueLabel,\n            value: a.value\n          },\n          {\n            label: gt(t, "locale.translations.group") || gt(t, "tooltip.groupLabel") || "Group",\n            value: a[n],\n            class: r.model.getColorClassName({\n              classNameTypes: [it.TOOLTIP],\n              dataGroupName: a[n]\n            })\n          }\n        ]\n      });\n    }).on("mousemove", function(s, a) {\n      const o = I(this);\n      r.services.events.dispatchEvent(T.WordCloud.WORD_MOUSEMOVE, {\n        element: o,\n        datum: a\n      }), r.services.events.dispatchEvent(T.Tooltip.MOVE, {\n        event: s\n      });\n    }).on("click", function(s, a) {\n      r.services.events.dispatchEvent(T.WordCloud.WORD_CLICK, {\n        event: s,\n        element: I(this),\n        datum: a\n      });\n    }).on("mouseout", function(s, a) {\n      const o = I(this);\n      i(null), r.services.events.dispatchEvent(T.WordCloud.WORD_MOUSEOUT, {\n        event: s,\n        element: o,\n        datum: a\n      }), r.services.events.dispatchEvent(T.Tooltip.HIDE, {\n        hoveredElement: o\n      });\n    });\n  }\n}\nclass LN extends mt {\n  constructor() {\n    super(...arguments), this.type = "geo", this.renderType = rt.SVG;\n  }\n  render() {\n    const t = this.getComponentContainer({ withinChartClip: !0 }), { width: n, height: r } = N.getSVGElementSize(t, {\n      useAttrs: !0\n    });\n    if (n < 1 || r < 1)\n      return;\n    const i = this.getProjection(), s = y(this.getOptions(), "geoData"), a = this.model.getCombinedData(), o = {}, l = {};\n    Object.keys(a).forEach((m) => {\n      typeof a[m].value == "number" ? o[m] = a[m] : l[m] = a[m];\n    });\n    const c = OD(s, Object.values(l)), u = bD(s, {\n      // We need to specify that we are converting geometry collections\n      type: "GeometryCollection",\n      geometries: Object.values(o)\n    }), d = i.fitSize([n, r], u), h = RA().projection(d);\n    N.appendOrSelect(t, "g.geo").selectAll("path").data(u.features).join("path").attr("d", h);\n    const p = this.services.domUtils.generateElementIDString("geo-pattern-stripes"), f = N.appendOrSelect(t, "defs");\n    N.appendOrSelect(f, "pattern").attr("id", p).attr("width", 5).attr("height", 10).attr("patternUnits", "userSpaceOnUse").attr("patternTransform", "rotate(45)").append("path").classed("pattern-fill", !0).attr(\n      "d",\n      xs()([\n        [0, 0],\n        [0, 10]\n      ])\n    );\n    const g = N.appendOrSelect(t, "g.missing-data");\n    N.appendOrSelect(g, "path").datum(c).attr("d", h).style("fill", `url(#${p})`);\n  }\n  /**\n   * Retrieves the D3 geographic projection based on the options provided.\n   *\n   * This method selects a geographic projection from the available D3 projections\n   * based on the `projection` property in the `thematic` options. If the projection\n   * is not supported or is missing, an error is thrown.\n   *\n   * @returns {d3.GeoProjection} - The D3 geographic projection corresponding to the selected option.\n   * @throws {Error} If the projection is not supported or is missing.\n   */\n  getProjection() {\n    let t = null;\n    switch (y(this.getOptions(), "thematic", "projection")) {\n      // Azimuthal Projections\n      case gn.geoEqualEarth:\n        t = JA();\n        break;\n      // Conic Projections\n      case gn.geoAlbers:\n        t = WA();\n        break;\n      case gn.geoConicEqualArea:\n        t = tv();\n        break;\n      case gn.geoConicEquidistant:\n        t = KA();\n        break;\n      // Cyndrical projections\n      case gn.geoEquirectangular:\n        t = XA();\n        break;\n      case gn.geoMercator:\n        t = qA();\n        break;\n      case gn.geoNaturalEarth1:\n        t = tL();\n        break;\n      default:\n        throw new Error("Projection is not supported.");\n    }\n    return t;\n  }\n}\nclass kN extends LN {\n  constructor() {\n    super(...arguments), this.type = "choropleth";\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  render(t = !0) {\n    super.render();\n    const n = this.model.getCombinedData(), r = this.getComponentContainer({ ariaLabel: "map", withinChartClip: !0 }), i = y(this.getOptions(), "color"), s = y(i, "gradient", "colors");\n    r.select("g.geo").selectAll("path").classed("border", !0).attr("class", (a) => this.model.getColorClassName({\n      value: n[a.properties.NAME].value,\n      originalClassName: "border"\n    })).attr("style", (a) => s ? `fill: ${this.model.getColorClassName({\n      value: n[a.properties.NAME].value\n    })}` : null), this.addCountryAreaEventListener();\n  }\n  addCountryAreaEventListener() {\n    const t = this, n = this.model.getCombinedData();\n    this.parent.selectAll("path.border").on("mouseover", function(r, i) {\n      const s = I(this);\n      t.services.events.dispatchEvent(Dr.CHOROPLETH_MOUSEOVER, {\n        event: r,\n        element: s,\n        datum: n[i.properties.NAME]\n      }), t.services.events.dispatchEvent(Ii.SHOW, {\n        event: r,\n        hoveredElement: s,\n        items: [\n          {\n            label: i.properties.NAME,\n            value: n[i.properties.NAME].value\n          }\n        ]\n      });\n    }).on("mousemove", function(r, i) {\n      t.services.events.dispatchEvent(Dr.CHOROPLETH_MOUSEMOVE, {\n        event: r,\n        element: I(this),\n        datum: n[i.properties.NAME]\n      }), t.services.events.dispatchEvent(Ii.MOVE, {\n        event: r\n      });\n    }).on("click", function(r, i) {\n      t.services.events.dispatchEvent(Dr.CHOROPLETH_CLICK, {\n        event: r,\n        element: I(this),\n        datum: n[i.properties.NAME]\n      });\n    }).on("mouseout", function(r, i) {\n      const s = I(this);\n      t.services.events.dispatchEvent(Dr.CHOROPLETH_MOUSEOUT, {\n        event: r,\n        element: s,\n        datum: n[i.properties.NAME]\n      }), t.services.events.dispatchEvent(Ii.HIDE, {\n        event: r,\n        hoveredElement: s\n      });\n    });\n  }\n}\nfunction du(e) {\n  var t = e == null ? 0 : e.length;\n  return t ? Ka(e, 1) : [];\n}\nfunction DN(e) {\n  return vf(xf(e, void 0, du), e + "");\n}\nfunction kv(e, t, n) {\n  var r = -1, i = e.length;\n  t < 0 && (t = -t > i ? 0 : i + t), n = n > i ? i : n, n < 0 && (n += i), i = t > n ? 0 : n - t >>> 0, t >>>= 0;\n  for (var s = Array(i); ++r < i; )\n    s[r] = e[r + t];\n  return s;\n}\nfunction RN(e, t) {\n  return t.length < 2 ? e : Oc(e, kv(t, 0, -1));\n}\nfunction IN(e, t) {\n  return t = Za(t, e), e = RN(e, t), e == null || delete e[hs(Wf(t))];\n}\nfunction NN(e) {\n  return $f(e) ? void 0 : e;\n}\nvar PN = 1, UN = 2, BN = 4, HN = DN(function(e, t) {\n  var n = {};\n  if (e == null)\n    return n;\n  var r = !1;\n  t = fc(t, function(s) {\n    return s = Za(s, e), r || (r = s.length > 1), s;\n  }), ri(e, Df(e), n), r && (n = Bi(n, PN | UN | BN, NN));\n  for (var i = t.length; i--; )\n    IN(n, t[i]);\n  return n;\n});\nfunction _p(e) {\n  return Math.log(e);\n}\nfunction Ep(e) {\n  return Math.exp(e);\n}\nfunction VN(e) {\n  return -Math.log(-e);\n}\nfunction GN(e) {\n  return -Math.exp(-e);\n}\nfunction zN(e) {\n  return isFinite(e) ? +("1e" + e) : e < 0 ? 0 : e;\n}\nfunction FN(e) {\n  return e === 10 ? zN : e === Math.E ? Math.exp : (t) => Math.pow(e, t);\n}\nfunction jN(e) {\n  return e === Math.E ? Math.log : e === 10 && Math.log10 || e === 2 && Math.log2 || (e = Math.log(e), (t) => Math.log(t) / e);\n}\nfunction Op(e) {\n  return (t, n) => -e(-t, n);\n}\nfunction WN(e) {\n  const t = e(_p, Ep), n = t.domain;\n  let r = 10, i, s;\n  function a() {\n    return i = jN(r), s = FN(r), n()[0] < 0 ? (i = Op(i), s = Op(s), e(VN, GN)) : e(_p, Ep), t;\n  }\n  return t.base = function(o) {\n    return arguments.length ? (r = +o, a()) : r;\n  }, t.domain = function(o) {\n    return arguments.length ? (n(o), a()) : n();\n  }, t.ticks = (o) => {\n    const l = n();\n    let c = l[0], u = l[l.length - 1];\n    const d = u < c;\n    d && ([c, u] = [u, c]);\n    let h = i(c), p = i(u), f, g;\n    const m = o == null ? 10 : +o;\n    let v = [];\n    if (!(r % 1) && p - h < m) {\n      if (h = Math.floor(h), p = Math.ceil(p), c > 0) {\n        for (; h <= p; ++h)\n          for (f = 1; f < r; ++f)\n            if (g = h < 0 ? f / s(-h) : f * s(h), !(g < c)) {\n              if (g > u) break;\n              v.push(g);\n            }\n      } else for (; h <= p; ++h)\n        for (f = r - 1; f >= 1; --f)\n          if (g = h > 0 ? f / s(-h) : f * s(h), !(g < c)) {\n            if (g > u) break;\n            v.push(g);\n          }\n      v.length * 2 < m && (v = ca(c, u, m));\n    } else\n      v = ca(h, p, Math.min(p - h, m)).map(s);\n    return d ? v.reverse() : v;\n  }, t.tickFormat = (o, l) => {\n    if (o == null && (o = 10), l == null && (l = r === 10 ? "s" : ","), typeof l != "function" && (!(r % 1) && (l = ts(l)).precision == null && (l.trim = !0), l = Hc(l)), o === 1 / 0) return l;\n    const c = Math.max(1, r * o / t.ticks().length);\n    return (u) => {\n      let d = u / s(Math.round(i(u)));\n      return d * r < r - 0.5 && (d *= r), d <= c ? l(u) : "";\n    };\n  }, t.nice = () => n(qm(n(), {\n    floor: (o) => s(Math.floor(i(o))),\n    ceil: (o) => s(Math.ceil(i(o)))\n  })), t;\n}\nfunction Dv() {\n  const e = WN(Tm()).domain([1, 10]);\n  return e.copy = () => Vc(e, Dv()).base(e.base()), ii.apply(e, arguments), e;\n}\nfunction Ba(e, t, n) {\n  e._context.bezierCurveTo(\n    (2 * e._x0 + e._x1) / 3,\n    (2 * e._y0 + e._y1) / 3,\n    (e._x0 + 2 * e._x1) / 3,\n    (e._y0 + 2 * e._y1) / 3,\n    (e._x0 + 4 * e._x1 + t) / 6,\n    (e._y0 + 4 * e._y1 + n) / 6\n  );\n}\nfunction go(e) {\n  this._context = e;\n}\ngo.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 3:\n        Ba(this, this._x1, this._y1);\n      // falls through\n      case 2:\n        this._context.lineTo(this._x1, this._y1);\n        break;\n    }\n    (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;\n  },\n  point: function(e, t) {\n    switch (e = +e, t = +t, this._point) {\n      case 0:\n        this._point = 1, this._line ? this._context.lineTo(e, t) : this._context.moveTo(e, t);\n        break;\n      case 1:\n        this._point = 2;\n        break;\n      case 2:\n        this._point = 3, this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);\n      // falls through\n      default:\n        Ba(this, e, t);\n        break;\n    }\n    this._x0 = this._x1, this._x1 = e, this._y0 = this._y1, this._y1 = t;\n  }\n};\nfunction qN(e) {\n  return new go(e);\n}\nfunction Rv(e) {\n  this._context = e;\n}\nRv.prototype = {\n  areaStart: Hn,\n  areaEnd: Hn,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN, this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x2, this._y2), this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3), this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3), this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x2, this._y2), this.point(this._x3, this._y3), this.point(this._x4, this._y4);\n        break;\n      }\n    }\n  },\n  point: function(e, t) {\n    switch (e = +e, t = +t, this._point) {\n      case 0:\n        this._point = 1, this._x2 = e, this._y2 = t;\n        break;\n      case 1:\n        this._point = 2, this._x3 = e, this._y3 = t;\n        break;\n      case 2:\n        this._point = 3, this._x4 = e, this._y4 = t, this._context.moveTo((this._x0 + 4 * this._x1 + e) / 6, (this._y0 + 4 * this._y1 + t) / 6);\n        break;\n      default:\n        Ba(this, e, t);\n        break;\n    }\n    this._x0 = this._x1, this._x1 = e, this._y0 = this._y1, this._y1 = t;\n  }\n};\nfunction YN(e) {\n  return new Rv(e);\n}\nfunction Iv(e) {\n  this._context = e;\n}\nIv.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._y0 = this._y1 = NaN, this._point = 0;\n  },\n  lineEnd: function() {\n    (this._line || this._line !== 0 && this._point === 3) && this._context.closePath(), this._line = 1 - this._line;\n  },\n  point: function(e, t) {\n    switch (e = +e, t = +t, this._point) {\n      case 0:\n        this._point = 1;\n        break;\n      case 1:\n        this._point = 2;\n        break;\n      case 2:\n        this._point = 3;\n        var n = (this._x0 + 4 * this._x1 + e) / 6, r = (this._y0 + 4 * this._y1 + t) / 6;\n        this._line ? this._context.lineTo(n, r) : this._context.moveTo(n, r);\n        break;\n      case 3:\n        this._point = 4;\n      // falls through\n      default:\n        Ba(this, e, t);\n        break;\n    }\n    this._x0 = this._x1, this._x1 = e, this._y0 = this._y1, this._y1 = t;\n  }\n};\nfunction XN(e) {\n  return new Iv(e);\n}\nfunction Nv(e, t) {\n  this._basis = new go(e), this._beta = t;\n}\nNv.prototype = {\n  lineStart: function() {\n    this._x = [], this._y = [], this._basis.lineStart();\n  },\n  lineEnd: function() {\n    var e = this._x, t = this._y, n = e.length - 1;\n    if (n > 0)\n      for (var r = e[0], i = t[0], s = e[n] - r, a = t[n] - i, o = -1, l; ++o <= n; )\n        l = o / n, this._basis.point(\n          this._beta * e[o] + (1 - this._beta) * (r + l * s),\n          this._beta * t[o] + (1 - this._beta) * (i + l * a)\n        );\n    this._x = this._y = null, this._basis.lineEnd();\n  },\n  point: function(e, t) {\n    this._x.push(+e), this._y.push(+t);\n  }\n};\nconst ZN = function e(t) {\n  function n(r) {\n    return t === 1 ? new go(r) : new Nv(r, t);\n  }\n  return n.beta = function(r) {\n    return e(+r);\n  }, n;\n}(0.85);\nfunction Ha(e, t, n) {\n  e._context.bezierCurveTo(\n    e._x1 + e._k * (e._x2 - e._x0),\n    e._y1 + e._k * (e._y2 - e._y0),\n    e._x2 + e._k * (e._x1 - t),\n    e._y2 + e._k * (e._y1 - n),\n    e._x2,\n    e._y2\n  );\n}\nfunction pu(e, t) {\n  this._context = e, this._k = (1 - t) / 6;\n}\npu.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x2, this._y2);\n        break;\n      case 3:\n        Ha(this, this._x1, this._y1);\n        break;\n    }\n    (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;\n  },\n  point: function(e, t) {\n    switch (e = +e, t = +t, this._point) {\n      case 0:\n        this._point = 1, this._line ? this._context.lineTo(e, t) : this._context.moveTo(e, t);\n        break;\n      case 1:\n        this._point = 2, this._x1 = e, this._y1 = t;\n        break;\n      case 2:\n        this._point = 3;\n      // falls through\n      default:\n        Ha(this, e, t);\n        break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = e, this._y0 = this._y1, this._y1 = this._y2, this._y2 = t;\n  }\n};\nconst KN = function e(t) {\n  function n(r) {\n    return new pu(r, t);\n  }\n  return n.tension = function(r) {\n    return e(+r);\n  }, n;\n}(0);\nfunction fu(e, t) {\n  this._context = e, this._k = (1 - t) / 6;\n}\nfu.prototype = {\n  areaStart: Hn,\n  areaEnd: Hn,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3), this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3), this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(e, t) {\n    switch (e = +e, t = +t, this._point) {\n      case 0:\n        this._point = 1, this._x3 = e, this._y3 = t;\n        break;\n      case 1:\n        this._point = 2, this._context.moveTo(this._x4 = e, this._y4 = t);\n        break;\n      case 2:\n        this._point = 3, this._x5 = e, this._y5 = t;\n        break;\n      default:\n        Ha(this, e, t);\n        break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = e, this._y0 = this._y1, this._y1 = this._y2, this._y2 = t;\n  }\n};\nconst QN = function e(t) {\n  function n(r) {\n    return new fu(r, t);\n  }\n  return n.tension = function(r) {\n    return e(+r);\n  }, n;\n}(0);\nfunction mu(e, t) {\n  this._context = e, this._k = (1 - t) / 6;\n}\nmu.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;\n  },\n  lineEnd: function() {\n    (this._line || this._line !== 0 && this._point === 3) && this._context.closePath(), this._line = 1 - this._line;\n  },\n  point: function(e, t) {\n    switch (e = +e, t = +t, this._point) {\n      case 0:\n        this._point = 1;\n        break;\n      case 1:\n        this._point = 2;\n        break;\n      case 2:\n        this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n        break;\n      case 3:\n        this._point = 4;\n      // falls through\n      default:\n        Ha(this, e, t);\n        break;\n    }\n    this._x0 = this._x1, this._x1 = this._x2, this._x2 = e, this._y0 = this._y1, this._y1 = this._y2, this._y2 = t;\n  }\n};\nconst JN = function e(t) {\n  function n(r) {\n    return new mu(r, t);\n  }\n  return n.tension = function(r) {\n    return e(+r);\n  }, n;\n}(0);\nfunction gu(e, t, n) {\n  var r = e._x1, i = e._y1, s = e._x2, a = e._y2;\n  if (e._l01_a > ne) {\n    var o = 2 * e._l01_2a + 3 * e._l01_a * e._l12_a + e._l12_2a, l = 3 * e._l01_a * (e._l01_a + e._l12_a);\n    r = (r * o - e._x0 * e._l12_2a + e._x2 * e._l01_2a) / l, i = (i * o - e._y0 * e._l12_2a + e._y2 * e._l01_2a) / l;\n  }\n  if (e._l23_a > ne) {\n    var c = 2 * e._l23_2a + 3 * e._l23_a * e._l12_a + e._l12_2a, u = 3 * e._l23_a * (e._l23_a + e._l12_a);\n    s = (s * c + e._x1 * e._l23_2a - t * e._l12_2a) / u, a = (a * c + e._y1 * e._l23_2a - n * e._l12_2a) / u;\n  }\n  e._context.bezierCurveTo(r, i, s, a, e._x2, e._y2);\n}\nfunction Pv(e, t) {\n  this._context = e, this._alpha = t;\n}\nPv.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x2, this._y2);\n        break;\n      case 3:\n        this.point(this._x2, this._y2);\n        break;\n    }\n    (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;\n  },\n  point: function(e, t) {\n    if (e = +e, t = +t, this._point) {\n      var n = this._x2 - e, r = this._y2 - t;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(n * n + r * r, this._alpha));\n    }\n    switch (this._point) {\n      case 0:\n        this._point = 1, this._line ? this._context.lineTo(e, t) : this._context.moveTo(e, t);\n        break;\n      case 1:\n        this._point = 2;\n        break;\n      case 2:\n        this._point = 3;\n      // falls through\n      default:\n        gu(this, e, t);\n        break;\n    }\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = e, this._y0 = this._y1, this._y1 = this._y2, this._y2 = t;\n  }\n};\nconst tP = function e(t) {\n  function n(r) {\n    return t ? new Pv(r, t) : new pu(r, 0);\n  }\n  return n.alpha = function(r) {\n    return e(+r);\n  }, n;\n}(0.5);\nfunction Uv(e, t) {\n  this._context = e, this._alpha = t;\n}\nUv.prototype = {\n  areaStart: Hn,\n  areaEnd: Hn,\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 1: {\n        this._context.moveTo(this._x3, this._y3), this._context.closePath();\n        break;\n      }\n      case 2: {\n        this._context.lineTo(this._x3, this._y3), this._context.closePath();\n        break;\n      }\n      case 3: {\n        this.point(this._x3, this._y3), this.point(this._x4, this._y4), this.point(this._x5, this._y5);\n        break;\n      }\n    }\n  },\n  point: function(e, t) {\n    if (e = +e, t = +t, this._point) {\n      var n = this._x2 - e, r = this._y2 - t;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(n * n + r * r, this._alpha));\n    }\n    switch (this._point) {\n      case 0:\n        this._point = 1, this._x3 = e, this._y3 = t;\n        break;\n      case 1:\n        this._point = 2, this._context.moveTo(this._x4 = e, this._y4 = t);\n        break;\n      case 2:\n        this._point = 3, this._x5 = e, this._y5 = t;\n        break;\n      default:\n        gu(this, e, t);\n        break;\n    }\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = e, this._y0 = this._y1, this._y1 = this._y2, this._y2 = t;\n  }\n};\nconst eP = function e(t) {\n  function n(r) {\n    return t ? new Uv(r, t) : new fu(r, 0);\n  }\n  return n.alpha = function(r) {\n    return e(+r);\n  }, n;\n}(0.5);\nfunction Bv(e, t) {\n  this._context = e, this._alpha = t;\n}\nBv.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;\n  },\n  lineEnd: function() {\n    (this._line || this._line !== 0 && this._point === 3) && this._context.closePath(), this._line = 1 - this._line;\n  },\n  point: function(e, t) {\n    if (e = +e, t = +t, this._point) {\n      var n = this._x2 - e, r = this._y2 - t;\n      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(n * n + r * r, this._alpha));\n    }\n    switch (this._point) {\n      case 0:\n        this._point = 1;\n        break;\n      case 1:\n        this._point = 2;\n        break;\n      case 2:\n        this._point = 3, this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);\n        break;\n      case 3:\n        this._point = 4;\n      // falls through\n      default:\n        gu(this, e, t);\n        break;\n    }\n    this._l01_a = this._l12_a, this._l12_a = this._l23_a, this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a, this._x0 = this._x1, this._x1 = this._x2, this._x2 = e, this._y0 = this._y1, this._y1 = this._y2, this._y2 = t;\n  }\n};\nconst nP = function e(t) {\n  function n(r) {\n    return t ? new Bv(r, t) : new mu(r, 0);\n  }\n  return n.alpha = function(r) {\n    return e(+r);\n  }, n;\n}(0.5);\nfunction Sp(e) {\n  return e < 0 ? -1 : 1;\n}\nfunction Tp(e, t, n) {\n  var r = e._x1 - e._x0, i = t - e._x1, s = (e._y1 - e._y0) / (r || i < 0 && -0), a = (n - e._y1) / (i || r < 0 && -0), o = (s * i + a * r) / (r + i);\n  return (Sp(s) + Sp(a)) * Math.min(Math.abs(s), Math.abs(a), 0.5 * Math.abs(o)) || 0;\n}\nfunction wp(e, t) {\n  var n = e._x1 - e._x0;\n  return n ? (3 * (e._y1 - e._y0) / n - t) / 2 : t;\n}\nfunction hl(e, t, n) {\n  var r = e._x0, i = e._y0, s = e._x1, a = e._y1, o = (s - r) / 3;\n  e._context.bezierCurveTo(r + o, i + o * t, s - o, a - o * n, s, a);\n}\nfunction Va(e) {\n  this._context = e;\n}\nVa.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN, this._point = 0;\n  },\n  lineEnd: function() {\n    switch (this._point) {\n      case 2:\n        this._context.lineTo(this._x1, this._y1);\n        break;\n      case 3:\n        hl(this, this._t0, wp(this, this._t0));\n        break;\n    }\n    (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;\n  },\n  point: function(e, t) {\n    var n = NaN;\n    if (e = +e, t = +t, !(e === this._x1 && t === this._y1)) {\n      switch (this._point) {\n        case 0:\n          this._point = 1, this._line ? this._context.lineTo(e, t) : this._context.moveTo(e, t);\n          break;\n        case 1:\n          this._point = 2;\n          break;\n        case 2:\n          this._point = 3, hl(this, wp(this, n = Tp(this, e, t)), n);\n          break;\n        default:\n          hl(this, this._t0, n = Tp(this, e, t));\n          break;\n      }\n      this._x0 = this._x1, this._x1 = e, this._y0 = this._y1, this._y1 = t, this._t0 = n;\n    }\n  }\n};\nfunction Hv(e) {\n  this._context = new Vv(e);\n}\n(Hv.prototype = Object.create(Va.prototype)).point = function(e, t) {\n  Va.prototype.point.call(this, t, e);\n};\nfunction Vv(e) {\n  this._context = e;\n}\nVv.prototype = {\n  moveTo: function(e, t) {\n    this._context.moveTo(t, e);\n  },\n  closePath: function() {\n    this._context.closePath();\n  },\n  lineTo: function(e, t) {\n    this._context.lineTo(t, e);\n  },\n  bezierCurveTo: function(e, t, n, r, i, s) {\n    this._context.bezierCurveTo(t, e, r, n, s, i);\n  }\n};\nfunction rP(e) {\n  return new Va(e);\n}\nfunction iP(e) {\n  return new Hv(e);\n}\nfunction Gv(e) {\n  this._context = e;\n}\nGv.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = [], this._y = [];\n  },\n  lineEnd: function() {\n    var e = this._x, t = this._y, n = e.length;\n    if (n)\n      if (this._line ? this._context.lineTo(e[0], t[0]) : this._context.moveTo(e[0], t[0]), n === 2)\n        this._context.lineTo(e[1], t[1]);\n      else\n        for (var r = $p(e), i = $p(t), s = 0, a = 1; a < n; ++s, ++a)\n          this._context.bezierCurveTo(r[0][s], i[0][s], r[1][s], i[1][s], e[a], t[a]);\n    (this._line || this._line !== 0 && n === 1) && this._context.closePath(), this._line = 1 - this._line, this._x = this._y = null;\n  },\n  point: function(e, t) {\n    this._x.push(+e), this._y.push(+t);\n  }\n};\nfunction $p(e) {\n  var t, n = e.length - 1, r, i = new Array(n), s = new Array(n), a = new Array(n);\n  for (i[0] = 0, s[0] = 2, a[0] = e[0] + 2 * e[1], t = 1; t < n - 1; ++t) i[t] = 1, s[t] = 4, a[t] = 4 * e[t] + 2 * e[t + 1];\n  for (i[n - 1] = 2, s[n - 1] = 7, a[n - 1] = 8 * e[n - 1] + e[n], t = 1; t < n; ++t) r = i[t] / s[t - 1], s[t] -= r, a[t] -= r * a[t - 1];\n  for (i[n - 1] = a[n - 1] / s[n - 1], t = n - 2; t >= 0; --t) i[t] = (a[t] - i[t + 1]) / s[t];\n  for (s[n - 1] = (e[n] + i[n - 1]) / 2, t = 0; t < n - 1; ++t) s[t] = 2 * e[t + 1] - i[t + 1];\n  return [i, s];\n}\nfunction sP(e) {\n  return new Gv(e);\n}\nfunction vo(e, t) {\n  this._context = e, this._t = t;\n}\nvo.prototype = {\n  areaStart: function() {\n    this._line = 0;\n  },\n  areaEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._x = this._y = NaN, this._point = 0;\n  },\n  lineEnd: function() {\n    0 < this._t && this._t < 1 && this._point === 2 && this._context.lineTo(this._x, this._y), (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line >= 0 && (this._t = 1 - this._t, this._line = 1 - this._line);\n  },\n  point: function(e, t) {\n    switch (e = +e, t = +t, this._point) {\n      case 0:\n        this._point = 1, this._line ? this._context.lineTo(e, t) : this._context.moveTo(e, t);\n        break;\n      case 1:\n        this._point = 2;\n      // falls through\n      default: {\n        if (this._t <= 0)\n          this._context.lineTo(this._x, t), this._context.lineTo(e, t);\n        else {\n          var n = this._x * (1 - this._t) + e * this._t;\n          this._context.lineTo(n, this._y), this._context.lineTo(n, t);\n        }\n        break;\n      }\n    }\n    this._x = e, this._y = t;\n  }\n};\nfunction aP(e) {\n  return new vo(e, 0.5);\n}\nfunction oP(e) {\n  return new vo(e, 0);\n}\nfunction lP(e) {\n  return new vo(e, 1);\n}\nclass cP extends Dn {\n  /**\n   * focal:  object to zoom into\n   * canvasElements: all the elements to translate and zoom on the chart area\n   * zoomSettings: object containing duration, easing and zoomlevel for the zoom behaviours\n   *  */\n  zoomIn(t, n, r) {\n    let i, s, a;\n    const o = r || Nr;\n    t && (i = t.x, s = t.y, a = 2);\n    const { width: l, height: c } = N.getSVGElementSize(this.services.domUtils.getHolder(), {\n      useClientDimensions: !0\n    });\n    n.transition().duration(o.duration).ease(o.ease).attr(\n      "transform",\n      `translate(${l / 2}, ${c / 2}) scale(${a}) translate(${-i},${-s})`\n    ), this.services.events.dispatchEvent(T.CanvasZoom.CANVAS_ZOOM_IN, {\n      element: I(t)\n    });\n  }\n  zoomOut(t, n) {\n    const r = n || Nr;\n    t.transition().duration(r.duration).ease(r.ease).attr("transform", ""), this.services.events.dispatchEvent(T.CanvasZoom.CANVAS_ZOOM_OUT);\n  }\n}\nclass uP extends Dn {\n  init() {\n    this.documentFragment = document.createDocumentFragment();\n  }\n  addEventListener(t, n) {\n    this.documentFragment.addEventListener(t, n);\n  }\n  removeEventListener(t, n) {\n    this.documentFragment.removeEventListener(t, n);\n  }\n  dispatchEvent(t, n) {\n    let r;\n    n ? r = new CustomEvent(t, {\n      detail: n\n    }) : (r = document.createEvent("Event"), r.initEvent(t, !1, !0)), this.documentFragment.dispatchEvent(r);\n  }\n}\nclass hP extends Dn {\n  constructor(t, n) {\n    super(t, n);\n  }\n  downloadCSV(t, n) {\n    const r = document.createElement("a"), i = "text/csv;encoding:utf-8";\n    if (navigator.msSaveBlob)\n      navigator.msSaveBlob(\n        new Blob([t], {\n          type: i\n        }),\n        n\n      );\n    else if (URL && "download" in r) {\n      const s = URL.createObjectURL(\n        new Blob([t], {\n          type: i\n        })\n      );\n      r.href = s, r.setAttribute("download", n), document.body.appendChild(r), r.click(), document.body.removeChild(r), URL.revokeObjectURL(s);\n    } else\n      location.href = `data:application/octet-stream,${encodeURIComponent(t)}`;\n  }\n  downloadImage(t, n) {\n    const r = document.createElement("a");\n    r.download = n, r.href = t, document.body.appendChild(r), r.click(), document.body.removeChild(r);\n  }\n}\nclass dP extends Dn {\n  constructor() {\n    super(...arguments), this.pendingTransitions = {};\n  }\n  init() {\n    var t;\n    (t = this.services.events) == null || t.addEventListener(T.Model.UPDATE, () => {\n      this.pendingTransitions = {};\n    });\n  }\n  setupTransition({ transition: t, name: n, animate: r }) {\n    return this.pendingTransitions[t._id] = t, t.on("end interrupt cancel", () => {\n      delete this.pendingTransitions[t._id];\n    }), this.model.getOptions().animations === !1 || r === !1 ? t.duration(0) : t.duration(\n      y(Nh, n, "duration") || Nh.default.duration\n    );\n  }\n  getPendingTransitions() {\n    return this.pendingTransitions;\n  }\n}\nfunction Fi(e, t) {\n  const n = +Ht(e) - +Ht(t);\n  return n < 0 ? -1 : n > 0 ? 1 : n;\n}\nfunction pP(e, t, n) {\n  const [r, i] = ur(\n    void 0,\n    e,\n    t\n  );\n  return r.getFullYear() - i.getFullYear();\n}\nfunction fP(e, t, n) {\n  const [r, i] = ur(\n    void 0,\n    e,\n    t\n  ), s = Fi(r, i), a = Math.abs(pP(r, i));\n  r.setFullYear(1584), i.setFullYear(1584);\n  const o = Fi(r, i) === -s, l = s * (a - +o);\n  return l === 0 ? 0 : l;\n}\nfunction vu(e, t, n) {\n  const r = Ht(e, void 0);\n  if (isNaN(t)) return Le(e, NaN);\n  if (!t)\n    return r;\n  const i = r.getDate(), s = Le(e, r.getTime());\n  s.setMonth(r.getMonth() + t + 1, 0);\n  const a = s.getDate();\n  return i >= a ? s : (r.setFullYear(\n    s.getFullYear(),\n    s.getMonth(),\n    i\n  ), r);\n}\nfunction zv(e, t, n) {\n  return vu(e, t * 12);\n}\nfunction mP(e, t, n) {\n  return zv(e, -t);\n}\nfunction gP(e, t, n) {\n  const [r, i] = ur(\n    void 0,\n    e,\n    t\n  ), s = r.getFullYear() - i.getFullYear(), a = r.getMonth() - i.getMonth();\n  return s * 12 + a;\n}\nfunction vP(e, t) {\n  const n = Ht(e, void 0);\n  return n.setHours(23, 59, 59, 999), n;\n}\nfunction yP(e, t) {\n  const n = Ht(e, void 0), r = n.getMonth();\n  return n.setFullYear(n.getFullYear(), r + 1, 0), n.setHours(23, 59, 59, 999), n;\n}\nfunction xP(e, t) {\n  const n = Ht(e, void 0);\n  return +vP(n) == +yP(n);\n}\nfunction bP(e, t, n) {\n  const [r, i, s] = ur(\n    void 0,\n    e,\n    e,\n    t\n  ), a = Fi(i, s), o = Math.abs(\n    gP(i, s)\n  );\n  if (o < 1) return 0;\n  i.getMonth() === 1 && i.getDate() > 27 && i.setDate(30), i.setMonth(i.getMonth() - a * o);\n  let l = Fi(i, s) === -a;\n  xP(r) && o === 1 && Fi(r, s) === 1 && (l = !1);\n  const c = a * (o - +l);\n  return c === 0 ? 0 : c;\n}\nfunction _P(e, t, n) {\n  return vu(e, -t);\n}\nfunction EP(e, t, n) {\n  const [r, i] = ur(\n    void 0,\n    e,\n    t\n  ), s = Mp(r, i), a = Math.abs(\n    Um(r, i)\n  );\n  r.setDate(r.getDate() - s * a);\n  const o = +(Mp(r, i) === -s), l = s * (a - o);\n  return l === 0 ? 0 : l;\n}\nfunction Mp(e, t) {\n  const n = e.getFullYear() - t.getFullYear() || e.getMonth() - t.getMonth() || e.getDate() - t.getDate() || e.getHours() - t.getHours() || e.getMinutes() - t.getMinutes() || e.getSeconds() - t.getSeconds() || e.getMilliseconds() - t.getMilliseconds();\n  return n < 0 ? -1 : n > 0 ? 1 : n;\n}\nfunction Fv(e, t, n) {\n  const r = Ht(e, void 0);\n  return isNaN(t) ? Le(e, NaN) : (t && r.setDate(r.getDate() + t), r);\n}\nfunction OP(e, t, n) {\n  return Fv(e, -t);\n}\nfunction yu(e) {\n  return (t) => {\n    const n = (0, Math.trunc)(t);\n    return n === 0 ? 0 : n;\n  };\n}\nfunction SP(e, t, n) {\n  const [r, i] = ur(\n    void 0,\n    e,\n    t\n  ), s = (+r - +i) / hf;\n  return yu()(s);\n}\nfunction jv(e, t, n) {\n  return Le(e, +Ht(e) + t);\n}\nfunction Wv(e, t, n) {\n  return jv(e, t * hf);\n}\nfunction TP(e, t, n) {\n  return Wv(e, -t);\n}\nfunction qv(e, t) {\n  return +Ht(e) - +Ht(t);\n}\nfunction Cp(e, t, n) {\n  const r = qv(e, t) / uf;\n  return yu()(r);\n}\nfunction cc(e, t, n) {\n  const r = Ht(e, void 0);\n  return r.setTime(r.getTime() + t * uf), r;\n}\nfunction Ap(e, t, n) {\n  return cc(e, -t);\n}\nfunction Lp(e, t, n) {\n  const r = qv(e, t) / 1e3;\n  return yu()(r);\n}\nfunction uc(e, t, n) {\n  return jv(e, t * 1e3);\n}\nfunction kp(e, t, n) {\n  return uc(e, -t);\n}\nclass wP extends Dn {\n  constructor() {\n    super(...arguments), this.scaleTypes = {\n      top: null,\n      right: null,\n      bottom: null,\n      left: null\n    }, this.scales = {\n      // null or function\n      top: null,\n      right: null,\n      bottom: null,\n      left: null\n    };\n  }\n  getDomainAxisPosition({ datum: t = null } = {}) {\n    if (this.dualAxes && t) {\n      const n = this.model.getOptions(), { groupMapsTo: r } = n.data, i = y(n, "axes", this.secondaryDomainAxisPosition), s = t[r];\n      if (i != null && i.correspondingDatasets && i.correspondingDatasets.includes(s))\n        return this.secondaryDomainAxisPosition;\n    }\n    return this.domainAxisPosition;\n  }\n  getRangeAxisPosition({ datum: t = null, groups: n = null } = {}) {\n    if (this.dualAxes) {\n      const r = this.model.getOptions(), { groupMapsTo: i } = r.data, s = y(r, "axes", this.secondaryRangeAxisPosition);\n      let a;\n      if (t !== null ? a = t[i] : n && n.length > 0 && (a = n[0]), s != null && s.correspondingDatasets && s.correspondingDatasets.includes(a))\n        return this.secondaryRangeAxisPosition;\n    }\n    return this.rangeAxisPosition;\n  }\n  getAxisOptions(t) {\n    return y(this.model.getOptions(), "axes", t);\n  }\n  getDomainAxisOptions() {\n    const t = this.getDomainAxisPosition();\n    return this.getAxisOptions(t);\n  }\n  getRangeAxisOptions() {\n    const t = this.getRangeAxisPosition();\n    return this.getAxisOptions(t);\n  }\n  getScaleLabel(t) {\n    return this.getAxisOptions(t).title || (t === G.BOTTOM || t === G.TOP ? "x-value" : "y-value");\n  }\n  getDomainLabel() {\n    return this.getScaleLabel(this.getDomainAxisPosition());\n  }\n  getRangeLabel() {\n    return this.getScaleLabel(this.getRangeAxisPosition());\n  }\n  update() {\n    this.determineAxisDuality(), this.findDomainAndRangeAxes(), this.determineOrientation(), Object.keys(G).map(\n      (t) => G[t]\n    ).forEach((t) => {\n      this.scales[t] = this.createScale(t);\n    });\n  }\n  findDomainAndRangeAxes() {\n    const t = this.findVerticalAxesPositions(), n = this.findHorizontalAxesPositions(), r = this.findDomainAndRangeAxesPositions(\n      t,\n      n\n    );\n    this.domainAxisPosition = r.primaryDomainAxisPosition, this.rangeAxisPosition = r.primaryRangeAxisPosition, this.isDualAxes() && (this.secondaryDomainAxisPosition = r.secondaryDomainAxisPosition, this.secondaryRangeAxisPosition = r.secondaryRangeAxisPosition);\n  }\n  determineOrientation() {\n    (this.rangeAxisPosition === G.LEFT || this.rangeAxisPosition === G.RIGHT) && (this.domainAxisPosition === G.BOTTOM || this.domainAxisPosition === G.TOP) ? this.orientation = Ft.VERTICAL : this.orientation = Ft.HORIZONTAL;\n  }\n  isDualAxes() {\n    return this.dualAxes;\n  }\n  // if any of the axes objects have correspondingDatasets [] asserted we flag the chart as dual axes\n  // it does not count as dual axes if it just has another axis turned on but is not actually using it to map a dataset\n  determineAxisDuality() {\n    var t, n, r, i;\n    const s = this.model.getOptions(), a = y(s, "axes");\n    ((t = a[G.LEFT]) != null && t.correspondingDatasets && a[G.RIGHT] || (n = a[G.RIGHT]) != null && n.correspondingDatasets && a[G.LEFT] || (r = a[G.TOP]) != null && r.correspondingDatasets && a[G.BOTTOM] || (i = a[G.BOTTOM]) != null && i.correspondingDatasets && a[G.TOP]) && (this.dualAxes = !0);\n  }\n  getCustomDomainValuesByposition(t) {\n    const n = y(this.model.getOptions(), "axes", t, "domain");\n    if (n && !Array.isArray(n))\n      throw new Error(`Domain in ${t} axis is not a valid array`);\n    if (Array.isArray(n) && (this.scaleTypes[t] === et.LINEAR || this.scaleTypes[t] === et.TIME) && n.length !== 2)\n      throw new Error(\n        `There can only be 2 elements in domain for scale type: ${this.scaleTypes[t]}`\n      );\n    return n;\n  }\n  getOrientation() {\n    return this.orientation;\n  }\n  getScaleByPosition(t) {\n    return this.scales[t];\n  }\n  getScaleTypeByPosition(t) {\n    return this.scaleTypes[t];\n  }\n  getDomainAxisScaleType() {\n    const t = this.getDomainAxisPosition();\n    return this.getScaleTypeByPosition(t);\n  }\n  getRangeAxisScaleType() {\n    const t = this.getRangeAxisPosition();\n    return this.getScaleTypeByPosition(t);\n  }\n  getDomainScale() {\n    return this.scales[this.domainAxisPosition];\n  }\n  getRangeScale() {\n    return this.scales[this.rangeAxisPosition];\n  }\n  // Find the main x-axis out of the 2 x-axis on the chart (when 2D axis is used)\n  getMainXAxisPosition() {\n    const t = [G.BOTTOM, G.TOP];\n    return [this.domainAxisPosition, this.rangeAxisPosition].find(\n      (n) => t.indexOf(n) > -1\n    );\n  }\n  // Find the main y-axis out of the 2 y-axis on the chart (when 2D axis is used)\n  getMainYAxisPosition() {\n    const t = [G.LEFT, G.RIGHT];\n    return [this.domainAxisPosition, this.rangeAxisPosition].find(\n      (n) => t.indexOf(n) > -1\n    );\n  }\n  getMainXScale() {\n    return this.scales[this.getMainXAxisPosition()];\n  }\n  getMainYScale() {\n    return this.scales[this.getMainYAxisPosition()];\n  }\n  getValueFromScale(t, n, r, i) {\n    const s = this.model.getOptions(), a = y(s, "axes")[r], { mapsTo: o } = a, l = y(i, o) !== null ? i[o] : i;\n    let c;\n    switch (n) {\n      case et.LABELS:\n        c = t(l) + t.step() / 2;\n        break;\n      case et.TIME:\n        c = t(new Date(l));\n        break;\n      default:\n        c = t(l);\n    }\n    return c;\n  }\n  getBoundedScaledValues(t) {\n    const { bounds: n } = this.model.getOptions(), r = this.getRangeAxisPosition({ datum: t }), i = this.scales[r], s = this.model.getOptions(), a = y(s, "axes")[r], { mapsTo: o } = a, l = t[o] !== void 0 ? t[o] : t;\n    return [\n      i(\n        y(t, n.upperBoundMapsTo) !== null ? t[n.upperBoundMapsTo] : l\n      ),\n      i(\n        y(t, n.lowerBoundMapsTo) !== null ? t[n.lowerBoundMapsTo] : l\n      )\n    ];\n  }\n  getValueThroughAxisPosition(t, n) {\n    const r = this.scaleTypes[t], i = this.scales[t];\n    return this.getValueFromScale(i, r, t, n);\n  }\n  getDomainValue(t) {\n    const n = this.getDomainAxisPosition({ datum: t });\n    return this.getValueThroughAxisPosition(n, t);\n  }\n  getRangeValue(t) {\n    const n = this.getRangeAxisPosition({ datum: t });\n    return this.getValueThroughAxisPosition(n, t);\n  }\n  getMainXScaleType() {\n    return this.getScaleTypeByPosition(this.getMainXAxisPosition());\n  }\n  getMainYScaleType() {\n    return this.getScaleTypeByPosition(this.getMainYAxisPosition());\n  }\n  getDomainIdentifier(t) {\n    const n = this.model.getOptions();\n    return y(n, "axes", this.getDomainAxisPosition({ datum: t }), "mapsTo");\n  }\n  getRangeIdentifier(t) {\n    const n = this.model.getOptions();\n    return y(n, "axes", this.getRangeAxisPosition({ datum: t }), "mapsTo");\n  }\n  extendsDomain(t, n) {\n    const r = this.model.getOptions(), i = y(r, "axes", t);\n    if (i.scaleType === et.TIME) {\n      const s = y(r, "timeScale", "addSpaceOnEdges");\n      return $P(n, s);\n    } else\n      return MP(n, Pn.paddingRatio, i.scaleType);\n  }\n  findVerticalAxesPositions() {\n    const t = this.model.getOptions(), n = y(t, "axes"), r = this.isDualAxes();\n    return y(n, G.LEFT) === null && y(n, G.RIGHT) !== null || y(n, G.RIGHT, "main") === !0 || r && y(n, G.LEFT, "correspondingDatasets") ? {\n      primary: G.RIGHT,\n      secondary: G.LEFT\n    } : { primary: G.LEFT, secondary: G.RIGHT };\n  }\n  findHorizontalAxesPositions() {\n    const t = this.model.getOptions(), n = y(t, "axes"), r = this.isDualAxes();\n    return y(n, G.BOTTOM) === null && y(n, G.TOP) !== null || y(n, G.TOP, "main") === !0 || r && y(n, G.BOTTOM, "correspondingDatasets") ? {\n      primary: G.TOP,\n      secondary: G.BOTTOM\n    } : { primary: G.BOTTOM, secondary: G.TOP };\n  }\n  findDomainAndRangeAxesPositions(t, n) {\n    const r = this.model.getOptions(), i = y(r, "axes", t.primary), s = y(r, "axes", n.primary), a = i.scaleType || et.LINEAR, o = s.scaleType || et.LINEAR, l = {\n      primaryDomainAxisPosition: null,\n      secondaryDomainAxisPosition: null,\n      primaryRangeAxisPosition: null,\n      secondaryRangeAxisPosition: null\n    };\n    return l.primaryDomainAxisPosition = n.primary, l.primaryRangeAxisPosition = t.primary, l.secondaryDomainAxisPosition = n.secondary, l.secondaryRangeAxisPosition = t.secondary, (!(o === et.LABELS || o === et.TIME) && a === et.LABELS || a === et.TIME) && (l.primaryDomainAxisPosition = t.primary, l.primaryRangeAxisPosition = n.primary, l.secondaryDomainAxisPosition = t.secondary, l.secondaryRangeAxisPosition = n.secondary), l;\n  }\n  getScaleDomain(t) {\n    const n = this.model.getOptions(), r = y(n, "axes", t), i = y(n, "bounds"), { includeZero: s } = r, a = y(r, "scaleType") || et.LINEAR;\n    if (this.model.isDataEmpty())\n      return [];\n    if (r.binned) {\n      const { bins: v } = this.model.getBinConfigurations();\n      return [0, nr(v, (x) => x.length)];\n    } else if (r.limitDomainToBins) {\n      const { bins: v } = this.model.getBinConfigurations(), x = this.model.getStackKeys({ bins: v });\n      return [x[0].split(":")[0], x[x.length - 1].split(":")[1]];\n    }\n    const o = this.model.getDisplayData(), { extendLinearDomainBy: l, mapsTo: c, percentage: u, thresholds: d } = r, { reference: h, compareTo: p } = Pn.ratio;\n    if (r.domain)\n      return a === et.LABELS ? r.domain : (a === et.TIME && (r.domain = r.domain.map(\n        (v) => v.getTime === void 0 ? new Date(v) : v\n      )), this.extendsDomain(t, r.domain));\n    if (u)\n      return [0, 100];\n    if (r && a === et.LABELS)\n      return Zi(o.map((v) => v[c]));\n    let f, g;\n    const m = this.model.getDataGroupNames();\n    if (a === et.LABELS_RATIO)\n      return o.map((v) => `${v[h]}/${v[p]}`);\n    if (a === et.TIME)\n      g = o.map((v) => +new Date(v[c]));\n    else if (i && n.axes)\n      g = [], o.forEach((v) => {\n        g.push(v[c]), v[i.upperBoundMapsTo] && g.push(v[i.upperBoundMapsTo]), v[i.lowerBoundMapsTo] && g.push(v[i.lowerBoundMapsTo]);\n      });\n    else if (r.stacked === !0 && m && t === this.getRangeAxisPosition()) {\n      const { groupMapsTo: v } = n.data, x = this.model.getDataValuesGroupedByKeys({\n        groups: m\n      }), _ = o.filter(\n        (b) => !m.includes(b[v])\n      ), E = [];\n      x.forEach((b) => {\n        const { ...S } = b;\n        let M = 0, D = 0;\n        Object.values(HN(S, "sharedStackKey")).forEach((A) => {\n          isNaN(A) || (A < 0 ? D += A : M += A);\n        }), E.push([D, M]);\n      }), g = [\n        ...du(E),\n        ..._.map((b) => b[c])\n      ];\n    } else\n      g = [], o.forEach((v) => {\n        const x = v[c];\n        Array.isArray(x) && x.length === 2 ? (g.push(x[0]), g.push(x[1])) : (l && g.push(Math.max(v[c], v[l])), g.push(x));\n      });\n    return a !== et.TIME && a !== et.LOG && s && g.push(0), d && d.length > 0 && d.forEach((v) => {\n      const x = y(v, "value");\n      x !== null && g.push(x);\n    }), f = ze(g), f = this.extendsDomain(t, f), f;\n  }\n  createScale(t) {\n    const n = this.model.getOptions(), r = y(n, "axes", t);\n    if (!r)\n      return null;\n    const i = y(r, "scaleType") || et.LINEAR;\n    this.scaleTypes[t] = i;\n    let s;\n    return i === et.TIME ? s = eg() : i === et.LOG ? s = Dv().base(r.base || 10) : i === et.LABELS || i === et.LABELS_RATIO ? s = gs() : s = Fe(), s.domain(this.getScaleDomain(t)), s;\n  }\n  getDomainLowerBound(t) {\n    let n, r = 0;\n    return this.getOrientation() === Ft.VERTICAL ? n = this.getMainYScale().domain() : n = this.getMainXScale().domain(), y(this.model.getOptions(), "axes", t, "includeZero") === !1 && n[0] > 0 && n[1] > 0 && (r = n[0]), r;\n  }\n  getHighestDomainThreshold() {\n    const t = y(this.model.getOptions(), "axes"), n = this.getDomainAxisPosition(), { thresholds: r } = t[n];\n    if (!Array.isArray(r) || Array.isArray(r) && !r.length)\n      return null;\n    const i = this.getDomainScale(), s = r.sort((a, o) => o.value - a.value)[0];\n    return this.getScaleTypeByPosition(n) === et.TIME && (typeof s.value == "string" || s.value.getTime === void 0) && (s.value = new Date(s.value)), {\n      threshold: s,\n      scaleValue: i(s.value)\n    };\n  }\n  getHighestRangeThreshold() {\n    const t = y(this.model.getOptions(), "axes"), n = this.getRangeAxisPosition(), { thresholds: r } = t[n];\n    if (!Array.isArray(r) || Array.isArray(r) && !r.length)\n      return null;\n    const i = this.getRangeScale(), s = r.sort((a, o) => o.value - a.value)[0];\n    return {\n      threshold: s,\n      scaleValue: i(s.value)\n    };\n  }\n}\nfunction $P(e, t) {\n  const n = new Date(e[0]), r = new Date(e[1]);\n  return fP(r, n) > 1 ? [mP(n, t), zv(r, t)] : bP(r, n) > 1 ? [_P(n, t), vu(r, t)] : EP(r, n) > 1 ? [OP(n, t), Fv(r, t)] : SP(r, n) > 1 ? [TP(n, t), Wv(r, t)] : Cp(r, n) > 30 ? [\n    Ap(n, t * 30),\n    cc(r, t * 30)\n  ] : Cp(r, n) > 1 ? [Ap(n, t), cc(r, t)] : Lp(r, n) > 15 ? [\n    kp(n, t * 15),\n    uc(r, t * 15)\n  ] : Lp(r, n) > 1 ? [kp(n, t), uc(r, t)] : [n, r];\n}\nfunction MP([e, t], n, r) {\n  const i = (t - e) * n, s = t <= 0 && t + i > 0 ? 0 : t + i;\n  let a = e >= 0 && e - i < 0 ? 0 : e - i;\n  if (r === et.LOG && a <= 0) {\n    if (e <= 0)\n      throw Error("Data must have values greater than 0 if log scale type is used.");\n    a = e;\n  }\n  return [a, s];\n}\nclass CP extends Dn {\n  constructor() {\n    super(...arguments), this.curveTypes = {\n      curveLinear: oo,\n      curveLinearClosed: ig,\n      curveBasis: qN,\n      curveBasisClosed: YN,\n      curveBasisOpen: XN,\n      curveBundle: ZN,\n      curveCardinal: KN,\n      curveCardinalClosed: QN,\n      curveCardinalOpen: JN,\n      curveCatmullRom: tP,\n      curveCatmullRomClosed: eP,\n      curveCatmullRomOpen: nP,\n      curveMonotoneX: rP,\n      curveMonotoneY: iP,\n      curveNatural: sP,\n      curveStep: aP,\n      curveStepAfter: lP,\n      curveStepBefore: oP\n    };\n  }\n  getD3Curve() {\n    let t = "curveLinear";\n    const n = this.model.getOptions().curve;\n    if (n && (typeof n == "string" ? t = n : t = n.name), this.curveTypes[t]) {\n      let r = this.curveTypes[t];\n      return n && Object.keys(n).forEach((i) => {\n        r[i] && (r = r[i](n[i]));\n      }), r;\n    }\n    return console.warn(`The curve type \'${t}\' is invalid, using \'curveLinear\' instead`), this.curveTypes.curveLinear;\n  }\n}\nclass AP extends Dn {\n  isZoomBarEnabled() {\n    if (!this.services.cartesianScales || !y(this.model.getOptions(), "zoomBar", "top", "enabled"))\n      return !1;\n    this.services.cartesianScales.findDomainAndRangeAxes();\n    const t = this.services.cartesianScales.getMainXAxisPosition(), n = y(\n      this.model.getOptions(),\n      "axes",\n      t,\n      "scaleType"\n    );\n    return t === G.BOTTOM && n === et.TIME;\n  }\n  // get display data for zoom bar\n  // basically it\'s sum of value grouped by time\n  getZoomBarData() {\n    const t = this.model.getZoomBarData();\n    return t && t.length > 1 ? t : this.model.getDisplayData();\n  }\n  getDefaultZoomBarDomain(t) {\n    if (!this.services.zoom) throw new Error("Services zoom not defined");\n    const n = t || this.services.zoom.getZoomBarData(), { cartesianScales: r } = this.services;\n    if (!r) throw new Error("Services cartesianScales undefined");\n    const i = r.getMainXAxisPosition(), s = r.getDomainIdentifier(), a = y(this.model.getOptions(), "axes", i, "domain");\n    if (Array.isArray(a) && a.length === 2)\n      return a;\n    if (!i) throw new Error("Not defined: mainXAxisPosition");\n    return r.extendsDomain(\n      i,\n      ze(n, (o) => o[s])\n    );\n  }\n  handleDomainChange(t, n = { dispatchEvent: !0 }) {\n    var r;\n    this.model.set({ zoomDomain: t }, { animate: !1 }), n.dispatchEvent && ((r = this.services.events) == null || r.dispatchEvent(T.ZoomDomain.CHANGE, {\n      newDomain: t\n    }));\n  }\n  getZoomRatio() {\n    return y(this.model.getOptions(), "zoomBar", "zoomRatio");\n  }\n  // filter out data not inside zoom domain\n  // to get better range value for axis label\n  filterDataForRangeAxis(t, n) {\n    var r;\n    const i = this.model.get("zoomDomain"), s = Object.assign(\n      { stacked: !1 },\n      // default configs\n      n\n    ), a = y(this.model.getOptions(), "zoomBar", "updateRangeAxis");\n    if (this.isZoomBarEnabled() && a && i) {\n      const o = s.stacked ? "sharedStackKey" : (r = this.services.cartesianScales) == null ? void 0 : r.getDomainIdentifier(), l = t.filter(\n        (c) => new Date(c[o]) >= i[0] && new Date(c[o]) <= i[1]\n      );\n      if (l.length > 0)\n        return l;\n    }\n    return t;\n  }\n  zoomIn(t = this.getZoomRatio()) {\n    var n;\n    const r = this.model.get("zoomDomain"), i = ye.handleWidth, s = (n = this.services.cartesianScales) == null ? void 0 : n.getMainXScale().copy();\n    s.domain(this.getDefaultZoomBarDomain());\n    const a = s(r[0]), o = s(r[1]);\n    if (o - a < i + 1)\n      return;\n    const l = s.range(), c = o - a, u = Math.min((l[1] - l[0]) / 2 * (t / 2), c / 2);\n    let d = a + u, h = o - u;\n    d >= h && (d = a + c / 2 - i / 2, h = o - c / 2 + i / 2);\n    const p = [s.invert(d), s.invert(h)];\n    (r[0].valueOf() !== p[0].valueOf() || r[1].valueOf() !== p[1].valueOf()) && this.handleDomainChange(p);\n  }\n  zoomOut(t = this.getZoomRatio()) {\n    const n = this.model.get("zoomDomain");\n    if (!this.services.cartesianScales) throw new Error("Services cartesianScales undefined");\n    const r = this.services.cartesianScales.getMainXScale().copy();\n    r.domain(this.getDefaultZoomBarDomain());\n    const i = r(n[0]), s = r(n[1]), a = r.range(), o = (a[1] - a[0]) / 2 * (t / 2), l = Math.max(i - o, a[0]), c = Math.min(s + o, a[1]), u = [r.invert(l), r.invert(c)];\n    (n[0].valueOf() !== u[0].valueOf() || n[1].valueOf() !== u[1].valueOf()) && this.handleDomainChange(u);\n  }\n  resetZoomDomain() {\n    const t = this.model.get("zoomDomain"), n = this.getDefaultZoomBarDomain();\n    (t[0].valueOf() !== n[0].valueOf() || t[1].valueOf() !== n[1].valueOf()) && this.handleDomainChange(n);\n  }\n  // check if current zoom domain is already the min zoom domain\n  // when toolbar is rendered, we don\'t render chart yet\n  // don\'t depend on scale range\n  isMinZoomDomain() {\n    const t = this.model.get("zoomDomain"), n = this.getDefaultZoomBarDomain();\n    if (!t || !n)\n      return !1;\n    const r = t[1].valueOf() - t[0].valueOf(), i = n[1].valueOf() - n[0].valueOf(), s = y(this.model.getOptions(), "zoomBar", "minZoomRatio");\n    return r / i < s;\n  }\n  // check if current zoom domain is already the max zoom domain\n  isMaxZoomDomain() {\n    const t = this.model.get("zoomDomain"), n = this.getDefaultZoomBarDomain();\n    return !!(t && n && t[0].valueOf() === n[0].valueOf() && t[1].valueOf() === n[1].valueOf());\n  }\n  isEmptyState() {\n    return this.getZoomBarData().length === 0;\n  }\n  isZoomBarLoading(t) {\n    return y(this.model.getOptions(), "zoomBar", t, "loading");\n  }\n  isZoomBarLocked(t) {\n    return y(this.model.getOptions(), "zoomBar", t, "locked");\n  }\n}\nfunction LP(e, t, n) {\n  var r = e.length;\n  return n = n === void 0 ? r : n, kv(e, t, n);\n}\nvar kP = "\\\\ud800-\\\\udfff", DP = "\\\\u0300-\\\\u036f", RP = "\\\\ufe20-\\\\ufe2f", IP = "\\\\u20d0-\\\\u20ff", NP = DP + RP + IP, PP = "\\\\ufe0e\\\\ufe0f", UP = "\\\\u200d", BP = RegExp("[" + UP + kP + NP + PP + "]");\nfunction Yv(e) {\n  return BP.test(e);\n}\nfunction HP(e) {\n  return e.split("");\n}\nvar Xv = "\\\\ud800-\\\\udfff", VP = "\\\\u0300-\\\\u036f", GP = "\\\\ufe20-\\\\ufe2f", zP = "\\\\u20d0-\\\\u20ff", FP = VP + GP + zP, jP = "\\\\ufe0e\\\\ufe0f", WP = "[" + Xv + "]", hc = "[" + FP + "]", dc = "\\\\ud83c[\\\\udffb-\\\\udfff]", qP = "(?:" + hc + "|" + dc + ")", Zv = "[^" + Xv + "]", Kv = "(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}", Qv = "[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]", YP = "\\\\u200d", Jv = qP + "?", t0 = "[" + jP + "]?", XP = "(?:" + YP + "(?:" + [Zv, Kv, Qv].join("|") + ")" + t0 + Jv + ")*", ZP = t0 + Jv + XP, KP = "(?:" + [Zv + hc + "?", hc, Kv, Qv, WP].join("|") + ")", QP = RegExp(dc + "(?=" + dc + ")|" + KP + ZP, "g");\nfunction JP(e) {\n  return e.match(QP) || [];\n}\nfunction t3(e) {\n  return Yv(e) ? JP(e) : HP(e);\n}\nfunction e3(e) {\n  return function(t) {\n    t = us(t);\n    var n = Yv(t) ? t3(t) : void 0, r = n ? n[0] : t.charAt(0), i = n ? LP(n, 1).join("") : t.slice(1);\n    return r[e]() + i;\n  };\n}\nvar n3 = e3("toUpperCase");\nfunction r3(e) {\n  return n3(us(e).toLowerCase());\n}\nvar i3 = $g(function(e, t, n) {\n  return t = t.toLowerCase(), e + (n ? r3(t) : t);\n});\nclass Ye {\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  constructor(t, n) {\n    this.components = [], this.services = {\n      canvasZoom: cP,\n      domUtils: N,\n      events: uP,\n      files: hP,\n      gradientUtils: Nl,\n      transitions: dP\n    }, this.model = new an(this.services);\n  }\n  // Contains the code that uses properties that are overridable by the super-class\n  init(t, n) {\n    this.model.set({ holder: t }, { skipUpdate: !0 }), Object.keys(this.services).forEach((r) => {\n      const i = this.services[r];\n      this.services[r] = new i(this.model, this.services);\n    }), this.services.events.addEventListener(T.Model.UPDATE, (r) => {\n      const i = !!y(r, "detail", "animate");\n      this.update(i);\n    }), this.model.setData(n.data), this.services.events.addEventListener(T.Chart.RESIZE, () => {\n      this.update(!1);\n    }), this.components = this.getComponents(), this.update();\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    return console.error("getComponents() method is not implemented"), [];\n  }\n  update(t = !0) {\n    if (!this.components)\n      return;\n    Object.keys(this.services).forEach((i) => {\n      this.services[i].update();\n    }), this.components.forEach((i) => i.render(t));\n    const n = this.services.transitions.getPendingTransitions(), r = Object.keys(n).map((i) => n[i].end().catch((s) => s));\n    Promise.all(r).then(\n      () => this.services.events.dispatchEvent(T.Chart.RENDER_FINISHED)\n    );\n  }\n  destroy() {\n    this.components.forEach((t) => t.destroy()), this.services.domUtils.getHolder().remove(), this.model.set({ destroyed: !0 }, { skipUpdate: !0 });\n  }\n  getChartComponents(t, n) {\n    const r = this.model.getOptions(), i = y(r, "toolbar", "enabled"), s = {\n      id: "legend",\n      components: [new lu(this.model, this.services)],\n      growth: ct.PREFERRED\n    }, a = y(r, "canvasZoom", "enabled");\n    a && a === !0 && t.push(new Vk(this.model, this.services));\n    const o = !!this.model.getOptions().title, l = {\n      id: "title",\n      components: [new bs(this.model, this.services)],\n      growth: ct.STRETCH\n    }, c = {\n      id: "toolbar",\n      components: [new po(this.model, this.services)],\n      growth: ct.PREFERRED\n    }, u = {\n      id: "header",\n      components: [\n        new be(\n          this.model,\n          this.services,\n          [\n            // always add title to keep layout correct\n            l,\n            ...i ? [c] : []\n          ],\n          {\n            direction: At.ROW,\n            alignItems: ni.CENTER\n          }\n        )\n      ],\n      growth: ct.PREFERRED\n    }, d = {\n      id: "graph-frame",\n      components: t,\n      growth: ct.STRETCH,\n      renderType: y(n, "graphFrameRenderType") || rt.SVG\n    }, h = y(n, "excludeLegend") !== !0 && r.legend.enabled !== !1;\n    let p = At.COLUMN;\n    if (h) {\n      const v = y(r, "legend", "position");\n      v === "left" ? (p = At.ROW, r.legend.orientation || (r.legend.orientation = ji.VERTICAL)) : v === "right" ? (p = At.ROW_REVERSE, r.legend.orientation || (r.legend.orientation = ji.VERTICAL)) : v === "bottom" && (p = At.COLUMN_REVERSE);\n    }\n    const f = {\n      id: "spacer",\n      components: [new An(this.model, this.services)],\n      growth: ct.PREFERRED\n    }, g = {\n      id: "full-frame",\n      components: [\n        new be(\n          this.model,\n          this.services,\n          [\n            ...h ? [s] : [],\n            ...h ? [f] : [],\n            d\n          ],\n          {\n            direction: p\n          }\n        )\n      ],\n      growth: ct.STRETCH\n    }, m = [];\n    if (o || i) {\n      m.push(u);\n      const v = {\n        id: "spacer",\n        components: [\n          new An(this.model, this.services, i ? { size: 15 } : void 0)\n        ],\n        growth: ct.PREFERRED\n      };\n      m.push(v);\n    }\n    return m.push(g), [\n      new cu(this.model, this.services),\n      new fo(this.model, this.services),\n      new be(this.model, this.services, m, {\n        direction: At.COLUMN\n      })\n    ];\n  }\n}\nclass me extends Ye {\n  constructor(t, n) {\n    super(t, n), this.services = Object.assign(this.services, {\n      cartesianScales: wP,\n      curves: CP,\n      zoom: AP\n    }), this.model = new mr(this.services);\n  }\n  getAxisChartComponents(t, n) {\n    const r = this.model.getOptions(), i = y(r, "zoomBar", G.TOP, "enabled"), s = y(r, "toolbar", "enabled");\n    this.services.cartesianScales.determineAxisDuality(), this.services.cartesianScales.findDomainAndRangeAxes(), this.services.cartesianScales.determineOrientation();\n    const a = this.services.cartesianScales.getMainXAxisPosition(), o = y(r, "axes", a, "scaleType"), l = i && a === G.BOTTOM && o === et.TIME, c = this.services.zoom.isZoomBarLocked(G.TOP), u = !!this.model.getOptions().title, d = {\n      id: "title",\n      components: [new bs(this.model, this.services)],\n      growth: ct.STRETCH\n    }, h = {\n      id: "toolbar",\n      components: [new po(this.model, this.services)],\n      growth: ct.PREFERRED\n    }, p = {\n      id: "header",\n      components: [\n        new be(\n          this.model,\n          this.services,\n          [\n            // always add title to keep layout correct\n            d,\n            ...s ? [h] : []\n          ],\n          {\n            direction: At.ROW,\n            alignItems: ni.CENTER\n          }\n        )\n      ],\n      growth: ct.PREFERRED\n    }, f = {\n      id: "legend",\n      components: [new lu(this.model, this.services)],\n      growth: ct.PREFERRED\n    };\n    l && !c && t.push(\n      new vv(this.model, this.services),\n      new Gk(this.model, this.services)\n    ), t.push(new Fk(this.model, this.services)), t.push(new jk(this.model, this.services));\n    const g = {\n      id: "graph-frame",\n      components: t,\n      growth: ct.STRETCH,\n      renderType: rt.SVG\n    }, m = y(n, "legend", "enabled") !== !1 && this.model.getOptions().legend.enabled !== !1;\n    let v = At.COLUMN;\n    if (m) {\n      const S = y(this.model.getOptions(), "legend", "position");\n      S === Ni.LEFT ? (v = At.ROW, this.model.getOptions().legend.orientation || (this.model.getOptions().legend.orientation = ji.VERTICAL)) : S === Ni.RIGHT ? (v = At.ROW_REVERSE, this.model.getOptions().legend.orientation || (this.model.getOptions().legend.orientation = ji.VERTICAL)) : S === Ni.BOTTOM && (v = At.COLUMN_REVERSE);\n    }\n    const x = {\n      id: "spacer",\n      components: [new An(this.model, this.services)],\n      growth: ct.PREFERRED\n    }, _ = {\n      id: "full-frame",\n      components: [\n        new be(\n          this.model,\n          this.services,\n          [\n            ...m ? [f] : [],\n            ...m ? [x] : [],\n            g\n          ],\n          {\n            direction: v\n          }\n        )\n      ],\n      growth: ct.STRETCH\n    }, E = {\n      id: "zoom-bar",\n      components: [new zk(this.model, this.services)],\n      growth: ct.PREFERRED,\n      renderType: rt.SVG\n    }, b = [];\n    if (u || s) {\n      b.push(p);\n      const S = {\n        id: "spacer",\n        components: [\n          new An(this.model, this.services, s ? { size: 15 } : void 0)\n        ],\n        growth: ct.PREFERRED\n      };\n      b.push(S);\n    }\n    return l && b.push(E), b.push(_), [\n      new xv(this.model, this.services),\n      new fo(this.model, this.services),\n      new be(this.model, this.services, b, {\n        direction: At.COLUMN\n      })\n    ];\n  }\n}\nclass s3 extends Ye {\n  constructor(t, n) {\n    super(t, n), this.model = new Qw(this.services), this.model.setOptions(Rt(wt.alluvialChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [new hD(this.model, this.services)];\n    return this.getChartComponents(t, {\n      excludeLegend: !0\n    });\n  }\n}\nclass a3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(\n      Rt(Sn(wt.areaChart), n.options)\n    ), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new Vn(this.model, this.services),\n      new Fr(this.model, this.services),\n      new Ev(this.model, this.services),\n      new nn(this.model, this.services, {\n        fadeInOnChartHolderMouseover: !0,\n        handleThresholds: !0\n      }),\n      new ce(this.model, this.services, {\n        skeleton: zt.GRID\n      })\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass o3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model = new Jw(this.services), this.model.setOptions(Rt(wt.boxplotChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new fD(this.model, this.services),\n      new si(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.VERT_OR_HORIZ\n      })\n    ];\n    return this.getAxisChartComponents(t, {\n      legend: {\n        enabled: !1\n      }\n    });\n  }\n}\nclass l3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(Rt(wt.bubbleChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new Vn(this.model, this.services),\n      new mD(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.GRID\n      })\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass c3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model = new t$(this.services), this.model.setOptions(Rt(wt.bulletChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new gD(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.GRID\n      })\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass u3 extends Ye {\n  constructor(t, n) {\n    super(t, n), this.model = new e$(this.services), this.model.setOptions(\n      Rt(wt.choroplethChart, n.options)\n    ), this.init(t, n);\n  }\n  // Custom getChartComponents - Implements getChartComponents\n  // Removes zoombar support and additional `features` that are not supported in heatmap\n  getChartComponents(t, n) {\n    const r = this.model.getOptions(), i = y(r, "toolbar", "enabled"), s = !!this.model.getOptions().title, a = {\n      id: "title",\n      components: [new bs(this.model, this.services)],\n      growth: ct.STRETCH\n    }, o = {\n      id: "toolbar",\n      components: [new po(this.model, this.services)],\n      growth: ct.PREFERRED\n    }, l = {\n      id: "header",\n      components: [\n        new be(\n          this.model,\n          this.services,\n          [\n            // always add title to keep layout correct\n            a,\n            ...i ? [o] : []\n          ],\n          {\n            direction: At.ROW,\n            alignItems: ni.CENTER\n          }\n        )\n      ],\n      growth: ct.PREFERRED\n    }, c = {\n      id: "legend",\n      components: [\n        new Sv(this.model, this.services, {\n          chartType: "choropleth"\n        })\n      ],\n      growth: ct.PREFERRED,\n      renderType: rt.SVG\n    }, u = {\n      id: "graph-frame",\n      components: t,\n      growth: ct.STRETCH,\n      renderType: rt.SVG\n    }, d = y(n, "legend", "enabled") !== !1 && this.model.getOptions().legend.enabled !== !1 && this.model.getData().length > 0, h = At.COLUMN_REVERSE, p = {\n      id: "spacer",\n      components: [new An(this.model, this.services, { size: 15 })],\n      growth: ct.PREFERRED\n    }, f = {\n      id: "full-frame",\n      components: [\n        new be(\n          this.model,\n          this.services,\n          [\n            ...d ? [c] : [],\n            ...d ? [p] : [],\n            u\n          ],\n          {\n            direction: h\n          }\n        )\n      ],\n      growth: ct.STRETCH\n    }, g = [];\n    if (s || i) {\n      g.push(l);\n      const m = {\n        id: "spacer",\n        components: [\n          new An(this.model, this.services, i ? { size: 15 } : void 0)\n        ],\n        growth: ct.PREFERRED\n      };\n      g.push(m);\n    }\n    return g.push(f), [\n      new cu(this.model, this.services),\n      new fo(this.model, this.services),\n      new be(this.model, this.services, g, {\n        direction: At.COLUMN\n      })\n    ];\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [new kN(this.model, this.services)];\n    return this.getChartComponents(t);\n  }\n}\nclass h3 extends Ye {\n  constructor(t, n) {\n    super(t, n), this.model = new n$(this.services), this.model.setOptions(Rt(wt.circlePackChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [new RD(this.model, this.services)];\n    return this.getChartComponents(t);\n  }\n}\nconst Dp = {\n  [we.LINE]: [Fr, nn],\n  [we.SCATTER]: [nn],\n  [we.AREA]: [Ev, Fr, nn],\n  [we.STACKED_AREA]: [Mv, Fr, Av, Ua],\n  [we.SIMPLE_BAR]: [$v],\n  [we.GROUPED_BAR]: [wv, si],\n  [we.STACKED_BAR]: [Cv, Ua]\n};\nclass d3 extends me {\n  constructor(t, n) {\n    super(t, n);\n    const r = Rt(wt.comboChart, n.options);\n    n.options.comboChartTypes || (console.error("No comboChartTypes defined for the Combo Chart!"), r.comboChartTypes = [{ type: we.LINE, correspondingDatasets: [] }]), this.model.setOptions(r), this.init(t, n);\n  }\n  getGraphComponents() {\n    const { comboChartTypes: t } = this.model.getOptions();\n    let n = 0;\n    const r = t.map((i) => {\n      const s = i.type;\n      let a;\n      if (typeof i.type == "string") {\n        if (!Object.keys(Dp).includes(i.type))\n          return console.error(\n            `Invalid chart type "${i.type}" specified for combo chart. Please refer to the ComboChart tutorial for more guidance.`\n          ), null;\n        let o = !1;\n        const l = `${i3(i.type)}Chart`;\n        return a = at({}, wt[l], this.model.getOptions(), i.options), i.type === we.STACKED_AREA && (o = !0), Dp[i.type].map(\n          (c) => new c(this.model, this.services, {\n            groups: i.correspondingDatasets,\n            id: n++,\n            options: a,\n            stacked: o\n          })\n        );\n      } else\n        return a = at({}, this.model.getOptions(), i.options), new s(this.model, this.services, {\n          groups: i.correspondingDatasets,\n          id: n++,\n          options: a\n        });\n    }).filter((i) => i !== null);\n    return du(r);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const { comboChartTypes: t } = this.model.getOptions(), n = t.some(\n      (i) => i.type === we.STACKED_BAR || i.type === we.STACKED_AREA\n    ), r = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.GRID\n      }),\n      ...n ? [] : [new Vn(this.model, this.services)],\n      ...this.getGraphComponents()\n    ];\n    return this.getAxisChartComponents(r);\n  }\n}\nclass e0 extends Ye {\n  // TODO - Optimize the use of "extending"\n  constructor(t, n, r = !1) {\n    super(t, n), this.model = new r$(this.services), !r && (this.model.setOptions(Rt(wt.pieChart, n.options)), this.init(t, n));\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new Tv(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.PIE\n      })\n    ];\n    return this.getChartComponents(t);\n  }\n}\nclass p3 extends e0 {\n  constructor(t, n) {\n    super(t, n, !0), this.model.setOptions(Rt(wt.donutChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new ND(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.DONUT\n      })\n    ];\n    return this.getChartComponents(t);\n  }\n}\nclass f3 extends Ye {\n  constructor(t, n) {\n    super(t, n), this.model = new i$(this.services), this.model.setOptions(Rt(wt.gaugeChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [new PD(this.model, this.services)];\n    return this.getChartComponents(t);\n  }\n}\nclass m3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(Rt(wt.groupedBarChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new wv(this.model, this.services),\n      new si(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.VERT_OR_HORIZ\n      })\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass g3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model = new s$(this.services), this.model.setOptions(\n      Rt(wt.heatmapChart, n.options)\n    ), this.init(t, n);\n  }\n  // Custom getChartComponents - Implements getChartComponents\n  // Removes zoombar support and additional `features` that are not supported in heatmap\n  getAxisChartComponents(t, n) {\n    const r = this.model.getOptions(), i = y(r, "toolbar", "enabled");\n    this.services.cartesianScales.determineAxisDuality(), this.services.cartesianScales.findDomainAndRangeAxes(), this.services.cartesianScales.determineOrientation();\n    const s = !!this.model.getOptions().title, a = {\n      id: "title",\n      components: [new bs(this.model, this.services)],\n      growth: ct.STRETCH\n    }, o = {\n      id: "toolbar",\n      components: [new po(this.model, this.services)],\n      growth: ct.PREFERRED\n    }, l = {\n      id: "header",\n      components: [\n        new be(\n          this.model,\n          this.services,\n          [\n            // always add title to keep layout correct\n            a,\n            ...i ? [o] : []\n          ],\n          {\n            direction: At.ROW,\n            alignItems: ni.CENTER\n          }\n        )\n      ],\n      growth: ct.PREFERRED\n    }, c = {\n      id: "legend",\n      components: [\n        new Sv(this.model, this.services, {\n          chartType: "heatmap"\n        })\n      ],\n      growth: ct.PREFERRED,\n      renderType: rt.SVG\n    }, u = {\n      id: "graph-frame",\n      components: t,\n      growth: ct.STRETCH,\n      renderType: rt.SVG\n    }, d = y(n, "legend", "enabled") !== !1 && this.model.getOptions().legend.enabled !== !1 && this.model.getData().length > 0, h = At.COLUMN_REVERSE, p = {\n      id: "spacer",\n      components: [new An(this.model, this.services, { size: 15 })],\n      growth: ct.PREFERRED\n    }, f = {\n      id: "full-frame",\n      components: [\n        new be(\n          this.model,\n          this.services,\n          [\n            ...d ? [c] : [],\n            ...d ? [p] : [],\n            u\n          ],\n          {\n            direction: h\n          }\n        )\n      ],\n      growth: ct.STRETCH\n    }, g = [];\n    if (s || i) {\n      g.push(l);\n      const m = {\n        id: "spacer",\n        components: [\n          new An(this.model, this.services, i ? { size: 15 } : void 0)\n        ],\n        growth: ct.PREFERRED\n      };\n      g.push(m);\n    }\n    return g.push(f), [\n      new xv(this.model, this.services),\n      new fo(this.model, this.services),\n      new be(this.model, this.services, g, {\n        direction: At.COLUMN\n      })\n    ];\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new UD(this.model, this.services)\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass v3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model = new a$(this.services), this.model.setOptions(Rt(wt.histogramChart, n.options)), this.init(t, n), this.update();\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new TD(this.model, this.services),\n      new BD(this.model, this.services)\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass y3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(Rt(wt.lineChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new Vn(this.model, this.services),\n      new Fr(this.model, this.services),\n      new nn(this.model, this.services, { handleThresholds: !0 }),\n      new zD(this.model, this.services),\n      new si(this.model, this.services)\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass x3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(Rt(wt.lollipopChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new Vn(this.model, this.services),\n      new HD(this.model, this.services),\n      new nn(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.GRID\n      })\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass b3 extends Ye {\n  constructor(t, n) {\n    var r;\n    super(t, n), this.model = new o$(this.services);\n    const i = (r = n.options.meter) != null && r.proportional ? at(Sn(wt.proportionalMeterChart), n.options) : at(Sn(wt.meterChart), n.options);\n    this.model.setOptions(i), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      ...y(this.model.getOptions(), "meter", "showLabels") ? [\n        // Meter has a unique dataset title within the graph\n        {\n          id: "meter-title",\n          components: [new DD(this.model, this.services)],\n          growth: ct.STRETCH,\n          renderType: rt.SVG\n        },\n        // Create the title spacer\n        {\n          id: "spacer",\n          components: [\n            new An(this.model, this.services, {\n              size: 8\n            })\n          ],\n          growth: ct.STRETCH\n        }\n      ] : [],\n      // Specify what to render inside the graph only\n      {\n        id: "meter-graph",\n        components: [new VD(this.model, this.services)],\n        growth: ct.STRETCH,\n        renderType: rt.SVG\n      }\n    ], n = [\n      new be(this.model, this.services, t, {\n        direction: At.COLUMN\n      })\n    ];\n    return this.getChartComponents(n, {\n      graphFrameRenderType: rt.HTML\n    });\n  }\n}\nclass _3 extends Ye {\n  constructor(t, n) {\n    super(t, n), this.model = new l$(this.services), this.model.setOptions(Rt(wt.radarChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [new GD(this.model, this.services)];\n    return this.getChartComponents(t);\n  }\n}\nclass E3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(Rt(wt.scatterChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new Vn(this.model, this.services),\n      new nn(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.GRID\n      })\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass O3 extends Ye {\n  constructor(t, n) {\n    super(t, n), this.model = new c$(this.services), this.model.setOptions(Rt(wt.treeChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [new FD(this.model, this.services)];\n    return this.getChartComponents(t, {\n      excludeLegend: !0\n    });\n  }\n}\nclass S3 extends Ye {\n  constructor(t, n) {\n    super(t, n), this.model = new u$(this.services), this.model.setOptions(Rt(wt.treemapChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [new xN(this.model, this.services)];\n    return this.getChartComponents(t);\n  }\n}\nclass T3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(Rt(wt.simpleBarChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new $v(this.model, this.services),\n      new si(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.VERT_OR_HORIZ\n      })\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass w3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(Rt(wt.stackedAreaChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new Ua(this.model, this.services),\n      new Mv(this.model, this.services),\n      new Fr(this.model, this.services, { stacked: !0 }),\n      new Av(this.model, this.services, {\n        fadeInOnChartHolderMouseover: !0,\n        handleThresholds: !0,\n        stacked: !0\n      }),\n      new ce(this.model, this.services, {\n        skeleton: zt.GRID\n      })\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass $3 extends me {\n  constructor(t, n) {\n    super(t, n), this.model.setOptions(Rt(wt.stackedBarChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new fe(this.model, this.services),\n      new Oe(this.model, this.services),\n      new Ua(this.model, this.services),\n      new Cv(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.VERT_OR_HORIZ\n      }),\n      new si(this.model, this.services)\n    ];\n    return this.getAxisChartComponents(t);\n  }\n}\nclass M3 extends Ye {\n  constructor(t, n) {\n    super(t, n), this.model = new h$(this.services), this.model.setOptions(Rt(wt.wordCloudChart, n.options)), this.init(t, n);\n  }\n  /**\n   * Retrieves the components to be rendered inside the graph frame.\n   *\n   * @returns {Component[]} An array of components to be rendered.\n   */\n  getComponents() {\n    const t = [\n      new AN(this.model, this.services),\n      new ce(this.model, this.services, {\n        skeleton: zt.PIE\n      })\n    ];\n    return this.getChartComponents(t);\n  }\n}\nclass kt extends react__WEBPACK_IMPORTED_MODULE_0__.PureComponent {\n  constructor() {\n    super(...arguments);\n    So(this, "chart");\n    So(this, "chartRef", react__WEBPACK_IMPORTED_MODULE_0__.createRef());\n  }\n  // TODO: add abstract keyword once React 16 support no longer needed then remove the next 3 comments\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  createChart(n, r, i) {\n    throw new Error("Method not implemented.");\n  }\n  componentDidMount() {\n    this.chartRef.current && !this.chart && (this.chart = this.createChart(this.chartRef.current, this.props.data, this.props.options));\n  }\n  componentDidUpdate(n) {\n    var r, i;\n    this.props.data !== n.data && ((r = this.chart) == null || r.model.setData(this.props.data)), this.props.options !== n.options && ((i = this.chart) == null || i.model.setOptions(this.props.options));\n  }\n  render() {\n    return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", { ref: this.chartRef, className: "chart-holder" });\n  }\n}\nclass Z3 extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new s3(t, { data: n, options: r });\n  }\n}\nclass K3 extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new a3(t, { data: n, options: r });\n  }\n}\nclass Q3 extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new o3(t, { data: n, options: r });\n  }\n}\nclass J3 extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new l3(t, { data: n, options: r });\n  }\n}\nclass tU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new c3(t, { data: n, options: r });\n  }\n}\nclass eU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new u3(t, { data: n, options: r });\n  }\n}\nclass nU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new h3(t, { data: n, options: r });\n  }\n}\nclass rU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new d3(t, { data: n, options: r });\n  }\n}\nclass iU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new p3(t, { data: n, options: r });\n  }\n}\nclass sU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new f3(t, { data: n, options: r });\n  }\n}\nclass aU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new m3(t, { data: n, options: r });\n  }\n}\nclass oU extends kt {\n  createChart(t, n, r) {\n    return new g3(t, { data: n, options: r });\n  }\n}\nclass lU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new v3(t, { data: n, options: r });\n  }\n}\nclass cU extends kt {\n  createChart(t, n, r) {\n    return new y3(t, { data: n, options: r });\n  }\n}\nclass uU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new x3(t, { data: n, options: r });\n  }\n}\nclass hU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new b3(t, { data: n, options: r });\n  }\n}\nclass dU extends kt {\n  createChart(t, n, r) {\n    return new e0(t, { data: n, options: r });\n  }\n}\nclass pU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new _3(t, { data: n, options: r });\n  }\n}\nclass fU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new E3(t, { data: n, options: r });\n  }\n}\nclass mU extends kt {\n  createChart(t, n, r) {\n    return new T3(t, { data: n, options: r });\n  }\n}\nclass gU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new w3(t, { data: n, options: r });\n  }\n}\nclass vU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new $3(t, { data: n, options: r });\n  }\n}\nclass yU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new O3(t, { data: n, options: r });\n  }\n}\nclass xU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new S3(t, { data: n, options: r });\n  }\n}\nclass bU extends (/* unused pure expression or super */ null && (kt)) {\n  createChart(t, n, r) {\n    return new M3(t, { data: n, options: r });\n  }\n}\nfunction C3(e) {\n  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;\n}\nvar dl = { exports: {} };\n/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\nvar Rp;\nfunction A3() {\n  return Rp || (Rp = 1, function(e) {\n    (function() {\n      var t = {}.hasOwnProperty;\n      function n() {\n        for (var s = "", a = 0; a < arguments.length; a++) {\n          var o = arguments[a];\n          o && (s = i(s, r(o)));\n        }\n        return s;\n      }\n      function r(s) {\n        if (typeof s == "string" || typeof s == "number")\n          return s;\n        if (typeof s != "object")\n          return "";\n        if (Array.isArray(s))\n          return n.apply(null, s);\n        if (s.toString !== Object.prototype.toString && !s.toString.toString().includes("[native code]"))\n          return s.toString();\n        var a = "";\n        for (var o in s)\n          t.call(s, o) && s[o] && (a = i(a, o));\n        return a;\n      }\n      function i(s, a) {\n        return a ? s ? s + " " + a : s + a : s;\n      }\n      e.exports ? (n.default = n, e.exports = n) : window.classNames = n;\n    })();\n  }(dl)), dl.exports;\n}\nvar L3 = A3();\nconst Gn = /* @__PURE__ */ (/* unused pure expression or super */ null && (C3(L3))), zn = "cds", _U = ({ tag: e = "div", className: t, children: n, color: r, href: i, position: s = "static", stacked: a, ...o }) => {\n  const l = i ? "a" : o.onClick ? "button" : e, c = `${zn}--cc--card-node`, u = Gn(c, {\n    [`${c}--stacked`]: a,\n    [`${c}--${l}`]: l,\n    [t]: t\n  });\n  return Ct.createElement(\n    l,\n    {\n      className: u,\n      style: { borderColor: r, position: s },\n      tabIndex: 0,\n      ...o\n    },\n    n\n  );\n}, EU = ({\n  children: e,\n  farsideColumn: t = !1,\n  ...n\n}) => {\n  const r = `${zn}--cc--card-node`, i = Gn(`${r}__column`, {\n    [`${r}__column--farside`]: t,\n    ...n.className ? { [n.className]: !0 } : {}\n  });\n  return Ct.createElement("div", { className: i, ...n }, e);\n}, OU = ({\n  children: e,\n  ...t\n}) => {\n  const n = `${zn}--cc--card-node`, r = Gn(`${n}__label`, {\n    ...t.className ? { [t.className]: !0 } : {}\n  });\n  return Ct.createElement("label", { className: r, ...t }, e);\n}, SU = ({\n  children: e,\n  ...t\n}) => {\n  const n = `${zn}--cc--card-node`, r = Gn(`${n}__subtitle`, {\n    ...t.className ? { [t.className]: !0 } : {}\n  });\n  return Ct.createElement("div", { className: r, ...t }, e);\n}, TU = ({\n  children: e,\n  ...t\n}) => {\n  const n = `${zn}--cc--card-node`, r = Gn(`${n}__title`, {\n    ...t.className ? { [t.className]: !0 } : {}\n  });\n  return Ct.createElement("div", { className: r, ...t }, e);\n}, wU = ({\n  color: e,\n  markerEnd: t,\n  markerStart: n,\n  path: r,\n  source: i,\n  target: s,\n  variant: a = null,\n  ...o\n}) => {\n  const l = `${zn}--cc--edge`, c = Gn(l, {\n    [`${l}--${a}`]: a,\n    ...o.className ? { [o.className]: !0 } : {}\n  });\n  let u = r;\n  if (!u && i && s && (u = wD(i, s)), !u) throw Error("Missing parameters for Edge component: path or source and target.");\n  return Ct.createElement(\n    "g",\n    { className: c, ...o },\n    Ct.createElement("path", { d: u, className: `${l}__container` }),\n    Ct.createElement("path", { d: u, className: `${l}__outer` }),\n    Ct.createElement("path", {\n      d: u,\n      className: `${l}__inner`,\n      markerEnd: `url(#${t})`,\n      markerStart: `url(#${n})`,\n      style: { stroke: e }\n    })\n  );\n}, ai = ({\n  color: e,\n  d: t,\n  id: n,\n  orient: r = "auto",\n  height: i,\n  width: s,\n  position: a = "end",\n  className: o,\n  refX: l,\n  refY: c,\n  ...u\n}) => {\n  const d = `${zn}--cc--marker`, h = Gn(d, o), p = a === "end" ? (s || 0) / 2 + 0.5 : 0.5, f = (i || 0) / 2;\n  return Ct.createElement(\n    "marker",\n    {\n      className: h,\n      markerHeight: i,\n      markerWidth: s,\n      orient: r,\n      id: n,\n      refX: l || p,\n      refY: c || f,\n      markerUnits: "userSpaceOnUse",\n      ...u\n    },\n    Ct.createElement("path", { d: t, style: { fill: e } })\n  );\n}, $U = (e) => Ct.createElement(ai, { d: $D.d, ...e }), MU = (e) => Ct.createElement(ai, { d: MD.d, ...e }), CU = (e) => Ct.createElement(ai, { d: CD.d, ...e }), AU = (e) => Ct.createElement(ai, { d: AD.d, ...e }), LU = (e) => Ct.createElement(ai, { d: LD.d, ...e }), kU = (e) => Ct.createElement(ai, { d: kD.d, ...e }), DU = ({\n  shape: e = "circle",\n  tag: t = "div",\n  title: n = "Title",\n  className: r,\n  subtitle: i,\n  description: s,\n  renderIcon: a,\n  href: o,\n  size: l = 48,\n  stacked: c,\n  position: u = "fixed",\n  bodyPosition: d = "absolute",\n  ...h\n}) => {\n  const p = o ? "a" : h.onClick ? "button" : t, f = `${zn}--cc--shape-node`, g = Gn(f, {\n    [`${f}--stacked`]: c,\n    [`${f}--${e}`]: e,\n    [`${f}--${p}`]: p,\n    [r]: r\n  }), m = n ? Ct.createElement("div", { className: `${f}__title` }, n) : null, v = i ? Ct.createElement("div", { className: `${f}__subtitle` }, i) : null, x = s ? Ct.createElement("div", { className: `${f}__description` }, s) : null;\n  return Ct.createElement(\n    p,\n    {\n      className: g,\n      style: { height: l, width: l, position: u },\n      tabIndex: 0,\n      ...h\n    },\n    Ct.createElement("div", { className: `${f}__icon` }, a),\n    Ct.createElement(\n      "div",\n      { className: `${f}__body`, style: { position: d } },\n      m,\n      v,\n      x\n    )\n  );\n};\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///8645\n')}}]);