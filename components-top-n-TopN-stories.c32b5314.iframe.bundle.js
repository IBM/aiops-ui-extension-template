"use strict";(self.webpackChunk_ibm_aiops_ui_extension_template=self.webpackChunk_ibm_aiops_ui_extension_template||[]).push([[608],{1877:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: function() { return /* binding */ getStatusGroupCounts; }\n/* harmony export */ });\n/* harmony import */ var _components_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4224);\n/**\n * Â© Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\nfunction getStatusGroupCounts(groupBy, rows) {\n  const statusGroupCounts = {};\n  rows.forEach(alertRow => {\n    const groupKey = alertRow.fields[_components_constants__WEBPACK_IMPORTED_MODULE_0__/* .ALERT_QUERY_PARAMS */ .vb.columns.indexOf(groupBy)] || 'All alerts';\n    const acknowledged = alertRow.fields[_components_constants__WEBPACK_IMPORTED_MODULE_0__/* .ALERT_QUERY_PARAMS */ .vb.columns.indexOf('acknowledged')] === 'true';\n    const severity = +alertRow.fields[_components_constants__WEBPACK_IMPORTED_MODULE_0__/* .ALERT_QUERY_PARAMS */ .vb.columns.indexOf('severity')];\n    let ticketed = false;\n    try {\n      const hasRelatedStories = JSON.parse(alertRow.fields[_components_constants__WEBPACK_IMPORTED_MODULE_0__/* .ALERT_QUERY_PARAMS */ .vb.columns.indexOf('relatedStoryIds')]).length > 0;\n      const hasRelatedContextualStoryIds = JSON.parse(alertRow.fields[_components_constants__WEBPACK_IMPORTED_MODULE_0__/* .ALERT_QUERY_PARAMS */ .vb.columns.indexOf('relatedContextualStoryIds')]).length > 0;\n      ticketed = hasRelatedStories || hasRelatedContextualStoryIds;\n    } catch (e) {\n      // ignore for now\n    }\n    if (!statusGroupCounts[groupKey]) {\n      statusGroupCounts[groupKey] = {\n        ticketed: {\n          count: 0,\n          maxSeverity: 0\n        },\n        acknowledged: {\n          count: 0,\n          maxSeverity: 0\n        },\n        new: {\n          count: 0,\n          maxSeverity: 0\n        },\n        total: {\n          count: 0,\n          maxSeverity: 0\n        }\n      };\n      for (let i = 0; i < 6; i++) {\n        statusGroupCounts[groupKey].ticketed[`sev-${i + 1}`] = 0;\n        statusGroupCounts[groupKey].acknowledged[`sev-${i + 1}`] = 0;\n        statusGroupCounts[groupKey].new[`sev-${i + 1}`] = 0;\n      }\n    }\n    if (ticketed) {\n      statusGroupCounts[groupKey].ticketed.count++;\n      statusGroupCounts[groupKey].ticketed.maxSeverity = Math.max(severity, statusGroupCounts[groupKey].ticketed.maxSeverity);\n      statusGroupCounts[groupKey].ticketed[`sev-${severity}`]++;\n    } else if (acknowledged) {\n      statusGroupCounts[groupKey].acknowledged.count++;\n      statusGroupCounts[groupKey].acknowledged.maxSeverity = Math.max(severity, statusGroupCounts[groupKey].acknowledged.maxSeverity);\n      statusGroupCounts[groupKey].acknowledged[`sev-${severity}`]++;\n    } else {\n      statusGroupCounts[groupKey].new.count++;\n      statusGroupCounts[groupKey].new.maxSeverity = Math.max(severity, statusGroupCounts[groupKey].new.maxSeverity);\n      statusGroupCounts[groupKey].new[`sev-${severity}`]++;\n    }\n    statusGroupCounts[groupKey].total.count++;\n    statusGroupCounts[groupKey].total.maxSeverity = Math.max(severity, statusGroupCounts[groupKey].total.maxSeverity);\n    statusGroupCounts[groupKey].total[`sev-${severity}`]++;\n  });\n  return statusGroupCounts;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1877\n")},6293:function(module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4860);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7028);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_carbon_charts_dist_styles_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4740);\n// Imports\n\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_node_modules_carbon_charts_dist_styles_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".hdm--custom-layout-container{grid-template-columns:3fr 5fr !important}.hdm--custom-layout-container>div{border:unset !important}.hdm--custom-layout-container .top-n{background:#fff;display:flex;flex-direction:column;margin:1rem}.hdm--custom-layout-container .top-n__heading{display:flex;flex-direction:column;font-size:1.25rem;padding:1rem 1rem 0}.hdm--custom-layout-container .top-n__subheading{color:#525252;font-size:.875rem;line-height:2rem}.hdm--custom-layout-container .top-n__chart{padding:1rem}.hdm--custom-layout-container .top-n__reset{float:right;margin-right:1rem}", "",{"version":3,"sources":["webpack://./src/components/top-n/top-n.scss"],"names":[],"mappings":"AAOA,8BACE,wCAAA,CAEA,kCACE,uBAAA,CAGF,qCACE,eAAA,CACA,YAAA,CACA,qBAAA,CACA,WAAA,CAEA,8CACE,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,mBAAA,CAGF,iDACE,aAAA,CACA,iBAAA,CACA,gBAAA,CAGF,4CACE,YAAA,CAGF,4CACE,WAAA,CACA,iBAAA","sourcesContent":["/**\\n * Â© Copyright IBM Corp. 2022, 2025\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n@import \'@carbon/charts/styles.css\';\\n \\n.hdm--custom-layout-container {\\n  grid-template-columns: 3fr 5fr !important;\\n\\n  > div {\\n    border: unset !important;\\n  }\\n  \\n  .top-n {\\n    background: #fff;\\n    display: flex;\\n    flex-direction: column;\\n    margin: 1rem;\\n    \\n    &__heading {\\n      display: flex;\\n      flex-direction: column;\\n      font-size: 1.25rem;\\n      padding: 1rem 1rem 0;\\n    }\\n    \\n    &__subheading {\\n      color: #525252;\\n      font-size: 0.875rem;\\n      line-height: 2rem;\\n    }\\n    \\n    &__chart {\\n      padding: 1rem;\\n    }\\n    \\n    &__reset {\\n      float: right;\\n      margin-right: 1rem;\\n    }\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__.A = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjI5My5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ2dIO0FBQ2pCO0FBQ3FEO0FBQ3BKLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0YsMEJBQTBCLGdJQUFpQztBQUMzRDtBQUNBLHdFQUF3RSx5Q0FBeUMsa0NBQWtDLHdCQUF3QixxQ0FBcUMsZ0JBQWdCLGFBQWEsc0JBQXNCLFlBQVksOENBQThDLGFBQWEsc0JBQXNCLGtCQUFrQixvQkFBb0IsaURBQWlELGNBQWMsa0JBQWtCLGlCQUFpQiw0Q0FBNEMsYUFBYSw0Q0FBNEMsWUFBWSxrQkFBa0IsT0FBTyxpY0FBaWMsb0NBQW9DLDhDQUE4QyxhQUFhLCtCQUErQixLQUFLLGdCQUFnQix1QkFBdUIsb0JBQW9CLDZCQUE2QixtQkFBbUIsd0JBQXdCLHNCQUFzQiwrQkFBK0IsMkJBQTJCLDZCQUE2QixPQUFPLDJCQUEyQix1QkFBdUIsNEJBQTRCLDBCQUEwQixPQUFPLHNCQUFzQixzQkFBc0IsT0FBTyxzQkFBc0IscUJBQXFCLDJCQUEyQixPQUFPLEtBQUssR0FBRyxxQkFBcUI7QUFDenJEO0FBQ0Esc0RBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaWJtL2Fpb3BzLXVpLWV4dGVuc2lvbi10ZW1wbGF0ZS8uL3NyYy9jb21wb25lbnRzL3RvcC1uL3RvcC1uLnNjc3M/ODY3NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18gZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0BjYXJib24vY2hhcnRzL2Rpc3Qvc3R5bGVzLmNzc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18uaShfX19DU1NfTE9BREVSX0FUX1JVTEVfSU1QT1JUXzBfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXJ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjNmciA1ZnIgIWltcG9ydGFudH0uaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lcj5kaXZ7Ym9yZGVyOnVuc2V0ICFpbXBvcnRhbnR9LmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXIgLnRvcC1ue2JhY2tncm91bmQ6I2ZmZjtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO21hcmdpbjoxcmVtfS5oZG0tLWN1c3RvbS1sYXlvdXQtY29udGFpbmVyIC50b3Atbl9faGVhZGluZ3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZvbnQtc2l6ZToxLjI1cmVtO3BhZGRpbmc6MXJlbSAxcmVtIDB9LmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXIgLnRvcC1uX19zdWJoZWFkaW5ne2NvbG9yOiM1MjUyNTI7Zm9udC1zaXplOi44NzVyZW07bGluZS1oZWlnaHQ6MnJlbX0uaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lciAudG9wLW5fX2NoYXJ0e3BhZGRpbmc6MXJlbX0uaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lciAudG9wLW5fX3Jlc2V0e2Zsb2F0OnJpZ2h0O21hcmdpbi1yaWdodDoxcmVtfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL3RvcC1uL3RvcC1uLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBT0EsOEJBQ0Usd0NBQUEsQ0FFQSxrQ0FDRSx1QkFBQSxDQUdGLHFDQUNFLGVBQUEsQ0FDQSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxXQUFBLENBRUEsOENBQ0UsWUFBQSxDQUNBLHFCQUFBLENBQ0EsaUJBQUEsQ0FDQSxtQkFBQSxDQUdGLGlEQUNFLGFBQUEsQ0FDQSxpQkFBQSxDQUNBLGdCQUFBLENBR0YsNENBQ0UsWUFBQSxDQUdGLDRDQUNFLFdBQUEsQ0FDQSxpQkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIvKipcXG4gKiDCqSBDb3B5cmlnaHQgSUJNIENvcnAuIDIwMjIsIDIwMjVcXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxcbiAqL1xcblxcbkBpbXBvcnQgJ0BjYXJib24vY2hhcnRzL3N0eWxlcy5jc3MnO1xcbiBcXG4uaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lciB7XFxuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDNmciA1ZnIgIWltcG9ydGFudDtcXG5cXG4gID4gZGl2IHtcXG4gICAgYm9yZGVyOiB1bnNldCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgXFxuICAudG9wLW4ge1xcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBtYXJnaW46IDFyZW07XFxuICAgIFxcbiAgICAmX19oZWFkaW5nIHtcXG4gICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgZm9udC1zaXplOiAxLjI1cmVtO1xcbiAgICAgIHBhZGRpbmc6IDFyZW0gMXJlbSAwO1xcbiAgICB9XFxuICAgIFxcbiAgICAmX19zdWJoZWFkaW5nIHtcXG4gICAgICBjb2xvcjogIzUyNTI1MjtcXG4gICAgICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgICAgIGxpbmUtaGVpZ2h0OiAycmVtO1xcbiAgICB9XFxuICAgIFxcbiAgICAmX19jaGFydCB7XFxuICAgICAgcGFkZGluZzogMXJlbTtcXG4gICAgfVxcbiAgICBcXG4gICAgJl9fcmVzZXQge1xcbiAgICAgIGZsb2F0OiByaWdodDtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICAgIH1cXG4gIH1cXG59XFxuXCJdLFwic291cmNlUm9vdFwiOlwiXCJ9XSk7XG4vLyBFeHBvcnRzXG5leHBvcnQgZGVmYXVsdCBfX19DU1NfTE9BREVSX0VYUE9SVF9fXztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6293\n')},6906:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Default: function() { return /* binding */ Default; },\n  Incidents: function() { return /* binding */ Incidents; },\n  Skeleton: function() { return /* binding */ Skeleton; },\n  \"default\": function() { return /* binding */ TopN_stories; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(4674);\n// EXTERNAL MODULE: ./node_modules/react-dom/client.js\nvar client = __webpack_require__(5148);\n// EXTERNAL MODULE: ./node_modules/@carbon/react/es/index.js + 52 modules\nvar es = __webpack_require__(6732);\n// EXTERNAL MODULE: ./node_modules/@carbon/charts-react/dist/index.mjs\nvar dist = __webpack_require__(8645);\n// EXTERNAL MODULE: ./node_modules/@ibm/akora-renderer-react/dist/akora-renderer-react.umd.js\nvar akora_renderer_react_umd = __webpack_require__(1515);\nvar akora_renderer_react_umd_default = /*#__PURE__*/__webpack_require__.n(akora_renderer_react_umd);\n// EXTERNAL MODULE: ./src/components/constants.ts\nvar constants = __webpack_require__(4224);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(5072);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(7659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(5056);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(1113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./src/components/top-n/top-n.scss\nvar top_n = __webpack_require__(6293);\n;// ./src/components/top-n/top-n.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, \"head\");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(top_n/* default */.A, options);\n\n\n\n\n       /* harmony default export */ var top_n_top_n = (top_n/* default */.A && top_n/* default */.A.locals ? top_n/* default */.A.locals : undefined);\n\n;// ./src/components/top-n/TopN.tsx\n/**\n * Â© Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n\n\n// @ts-ignore\n\n\n// @ts-ignore\n\n\n\nconst ReactRenderer = akora_renderer_react_umd_default()(react, client);\nconst {\n  useAkoraState,\n  setUrlParameters\n} = ReactRenderer.components;\nconst className = 'top-n';\nconst TopN = props => {\n  const {\n    data,\n    loading,\n    refetch: fetchThings,\n    groups,\n    top = 10,\n    getStatusGroupCounts,\n    things = 'alerts',\n    timeProp = 'firstOccurrenceTime'\n  } = props;\n  const dataPoints = data?.tenant[things].rows || data?.tenant[things];\n  const {\n    state,\n    app\n  } = useAkoraState();\n  const [selectedGroup, _setSelectedGroup] = (0,react.useState)(groups?.[1]);\n  const [selectedTimeframe, _setSelectedTimeframe] = (0,react.useState)((0,constants/* TOP_N_TIMEFRAME */._4)(timeProp)[0]);\n  const [selectedBar, _setSelectedBar] = (0,react.useState)();\n\n  // use a ref since event listeners don't have access to latest state\n  const selectedGroupRef = (0,react.useRef)(selectedGroup);\n  const setSelectedGroup = group => {\n    selectedGroupRef.current = group;\n    _setSelectedGroup(group);\n  };\n  const selectedTimeframeRef = (0,react.useRef)(selectedTimeframe);\n  const setSelectedTimeframe = timeframe => {\n    selectedTimeframeRef.current = timeframe;\n    _setSelectedTimeframe(timeframe);\n  };\n  const selectedBarRef = (0,react.useRef)(selectedBar);\n  const setSelectedBar = bar => {\n    selectedBarRef.current = bar;\n    _setSelectedBar(bar);\n  };\n  const barChartRef = (0,react.useRef)(null);\n  const targetUrl = app.resolvePathExpression(state.path);\n  const {\n    title\n  } = app.getStateForPath(targetUrl);\n  const groupBy = selectedGroup.value;\n  const onStatusClick = filterwhereclause => {\n    const newRoute = setUrlParameters(state?.resolvedFullPath || state?.fullPath, {\n      filtername: `All ${things}`,\n      filterwhereclause\n    });\n    app.replaceRoute(newRoute);\n  };\n  const bars = (0,react.useMemo)(() => {\n    if (dataPoints) {\n      const groups = getStatusGroupCounts(groupBy, dataPoints);\n      const chartData = Object.keys(groups).sort().map(g => ({\n        group: g === '-' ? 'None' : g,\n        value: groups[g].total.count\n      }));\n      return chartData.sort((a, b) => b.value - a.value).slice(0, top);\n    }\n    return [];\n  }, [dataPoints, groupBy]);\n  (0,react.useEffect)(() => {\n    const onRefresh = e => {\n      if (e.data === `${things}refresh` && e.origin === state.clientConfiguration.publicurl) {\n        fetchThings({\n          filter: selectedTimeframeRef.current.value\n        });\n      }\n    };\n    window.addEventListener('message', onRefresh, false);\n    fetchThings({\n      filter: selectedTimeframeRef.current.value\n    });\n    return () => window.removeEventListener('message', onRefresh);\n  }, []);\n  (0,react.useEffect)(() => {\n    const filter = [];\n    if (selectedGroupRef.current.value && selectedBar !== null) filter.push(`${selectedGroupRef.current.value} = '${selectedBar === 'None' ? '-' : selectedBar}'`);\n    if (selectedTimeframeRef.current.value) filter.push(selectedTimeframeRef.current.value);\n    onStatusClick(filter.join(' and '));\n  }, [selectedBar]);\n  (0,react.useEffect)(() => {\n    const onBarClick = e => {\n      const whichGroup = e.detail.datum.group;\n      if (whichGroup !== selectedBarRef.current) {\n        setSelectedBar(whichGroup);\n      } else {\n        setSelectedBar(null);\n      }\n    };\n    barChartRef.current.chart.services.events.addEventListener('bar-click', onBarClick);\n    return () => {\n      if (barChartRef.current) {\n        barChartRef.current.chart.services.events.removeEventListener('bar-click', onBarClick);\n      }\n    };\n  }, [barChartRef]);\n  (0,react.useEffect)(() => {\n    setSelectedBar(null);\n    onStatusClick(selectedTimeframe.value);\n    fetchThings({\n      filter: selectedTimeframe.value\n    });\n  }, [selectedTimeframe]);\n  (0,react.useEffect)(() => {\n    setSelectedBar(null);\n    onStatusClick(selectedTimeframe.value);\n  }, [selectedGroup]);\n  const getFillColor = (g, label, data) => {\n    let barColor = '#4589ff';\n    const adjustedColor = selectedBar && selectedBar === g || !selectedBar ? barColor : `${barColor}53`;\n    return adjustedColor;\n  };\n  const renderChart = () => {\n    const options = {\n      axes: {\n        left: {\n          title: `Open ${things}`,\n          mapsTo: 'value'\n        },\n        bottom: {\n          title: selectedGroup.label,\n          mapsTo: 'group',\n          scaleType: 'labels'\n        }\n      },\n      bars: {\n        maxWidth: 40\n      },\n      data: {\n        loading\n      },\n      getFillColor,\n      height: '400px',\n      legend: {\n        enabled: false\n      }\n    };\n    return /*#__PURE__*/react.createElement(\"div\", {\n      className: `${className}__chart`\n    }, /*#__PURE__*/react.createElement(dist/* SimpleBarChart */.kf, {\n      data: bars // @ts-ignore\n      ,\n      options: options,\n      ref: barChartRef\n    }));\n  };\n  const renderHeader = () => /*#__PURE__*/react.createElement(react.Fragment, null, /*#__PURE__*/react.createElement(\"div\", {\n    className: `${className}__heading`\n  }, title), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${className}__selectors`\n  }, /*#__PURE__*/react.createElement(es/* Dropdown */.msM, {\n    id: \"group-selector\",\n    items: groups,\n    label: \"\",\n    onChange: _ref => {\n      let {\n        selectedItem\n      } = _ref;\n      return setSelectedGroup(selectedItem);\n    },\n    selectedItem: selectedGroup,\n    titleText: '',\n    type: \"inline\"\n  }), /*#__PURE__*/react.createElement(es/* Dropdown */.msM, {\n    id: \"timeframe-selector\",\n    items: (0,constants/* TOP_N_TIMEFRAME */._4)(timeProp),\n    label: \"\",\n    onChange: _ref2 => {\n      let {\n        selectedItem\n      } = _ref2;\n      return setSelectedTimeframe(selectedItem);\n    },\n    selectedItem: selectedTimeframe,\n    titleText: '',\n    type: \"inline\"\n  }), /*#__PURE__*/react.createElement(es/* Button */.$nd, {\n    className: `${className}__reset`,\n    disabled: loading || !selectedBar,\n    kind: \"ghost\",\n    onClick: () => {\n      onStatusClick(selectedTimeframe.value);\n      setSelectedBar(null);\n    }\n  }, \"Reset filter\")));\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: className,\n    role: \"contentinfo\"\n  }, renderHeader(), renderChart());\n};\n/* harmony default export */ var top_n_TopN = (TopN);\n// EXTERNAL MODULE: ./src/mocks/alerts.json\nvar alerts = __webpack_require__(6862);\n// EXTERNAL MODULE: ./src/mocks/incidents.json\nvar incidents = __webpack_require__(9192);\n// EXTERNAL MODULE: ./src/helpers/getStatusGroupCounts.ts\nvar getStatusGroupCounts = __webpack_require__(1877);\n;// ./src/helpers/getIncidentGroupCounts.ts\n/**\n * Â© Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\nfunction getIncidentGroupCounts(groupBy, rows) {\n  const statusGroupCounts = {};\n  rows.forEach(row => {\n    const groupKey = row[groupBy] || 'All incidents';\n    const assigned = row.state !== 'unassigned';\n    const priority = +row.priority;\n    const ticketed = row.state === 'inProgress';\n    if (!statusGroupCounts[groupKey]) {\n      statusGroupCounts[groupKey] = {\n        ticketed: {\n          count: 0,\n          maxSeverity: 1\n        },\n        assigned: {\n          count: 0,\n          maxSeverity: 1\n        },\n        new: {\n          count: 0,\n          maxSeverity: 1\n        },\n        total: {\n          count: 0,\n          maxSeverity: 1\n        }\n      };\n      for (let i = 1; i < 6; i++) {\n        statusGroupCounts[groupKey].ticketed[`pri-${i + 1}`] = 0;\n        statusGroupCounts[groupKey].assigned[`pri-${i + 1}`] = 0;\n        statusGroupCounts[groupKey].new[`pri-${i + 1}`] = 0;\n      }\n    }\n    if (ticketed) {\n      statusGroupCounts[groupKey].ticketed.count++;\n      statusGroupCounts[groupKey].ticketed.maxSeverity = Math.min(priority, statusGroupCounts[groupKey].ticketed.maxSeverity);\n      statusGroupCounts[groupKey].ticketed[`pri-${priority}`]++;\n    } else if (assigned) {\n      statusGroupCounts[groupKey].assigned.count++;\n      statusGroupCounts[groupKey].assigned.maxSeverity = Math.min(priority, statusGroupCounts[groupKey].assigned.maxSeverity);\n      statusGroupCounts[groupKey].assigned[`pri-${priority}`]++;\n    } else {\n      statusGroupCounts[groupKey].new.count++;\n      statusGroupCounts[groupKey].new.maxSeverity = Math.min(priority, statusGroupCounts[groupKey].new.maxSeverity);\n      statusGroupCounts[groupKey].new[`pri-${priority}`]++;\n    }\n    statusGroupCounts[groupKey].total.count++;\n    statusGroupCounts[groupKey].total.maxSeverity = Math.min(priority, statusGroupCounts[groupKey].total.maxSeverity);\n    statusGroupCounts[groupKey].total[`pri-${priority}`]++;\n  });\n  return statusGroupCounts;\n}\n;// ./src/components/top-n/TopN.stories.tsx\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\n/**\n * Â© Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n\n\n\n\n\n\n/* harmony default export */ var TopN_stories = ({\n  title: 'Top 10',\n  component: top_n_TopN,\n  argTypes: {\n    data: {\n      control: 'object'\n    },\n    groups: {\n      control: 'object'\n    },\n    top: {\n      control: {\n        type: 'number',\n        min: 1,\n        step: 1\n      }\n    }\n  }\n});\nconst Template = args => /*#__PURE__*/react.createElement(top_n_TopN, _extends({}, args, {\n  refetch: () => {}\n}));\nconst Default = Template.bind({});\nDefault.args = {\n  data: alerts/* data */.p,\n  groups: constants/* GROUP_BY */.a0,\n  top: 10,\n  getStatusGroupCounts: getStatusGroupCounts/* default */.A\n};\nconst Incidents = () => {\n  return /*#__PURE__*/react.createElement(\"div\", {\n    style: {\n      border: '1px solid #E0E0E0'\n    }\n  }, /*#__PURE__*/react.createElement(top_n_TopN, {\n    data: incidents/* data */.p,\n    groups: constants/* INCIDENT_GROUPBY */.WJ,\n    refetch: () => {},\n    things: 'stories',\n    timeProp: 'createdTime',\n    getStatusGroupCounts: getIncidentGroupCounts,\n    thresholds: constants/* INCIDENT_COUNT_THRESHOLD */.b\n  }));\n};\nconst Skeleton = () => {\n  return /*#__PURE__*/react.createElement(\"div\", {\n    style: {\n      border: '1px solid #E0E0E0'\n    }\n  }, /*#__PURE__*/react.createElement(top_n_TopN, {\n    groups: constants/* GROUP_BY */.a0,\n    loading: true,\n    refetch: () => {}\n  }));\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"(args: {\\n  data: {};\\n  groups: [];\\n  top: number;\\n}) => <TopN {...args} refetch={() => {}} />\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nIncidents.parameters = {\n  ...Incidents.parameters,\n  docs: {\n    ...Incidents.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  return <div style={{\\n    border: '1px solid #E0E0E0'\\n  }}>\\n      <TopN data={mockIncidents.data} groups={incidentGroups} refetch={() => {}} things={'stories'} timeProp={'createdTime'} getStatusGroupCounts={getIncidentGroupCounts} thresholds={thresholds} />\\n    </div>;\\n}\",\n      ...Incidents.parameters?.docs?.source\n    }\n  }\n};\nSkeleton.parameters = {\n  ...Skeleton.parameters,\n  docs: {\n    ...Skeleton.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  return <div style={{\\n    border: '1px solid #E0E0E0'\\n  }}>\\n      <TopN groups={groups} loading={true} refetch={() => {}} />\\n    </div>;\\n}\",\n      ...Skeleton.parameters?.docs?.source\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6906\n")}}]);