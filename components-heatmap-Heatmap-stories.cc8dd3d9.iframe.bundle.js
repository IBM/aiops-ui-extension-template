"use strict";(self.webpackChunk_ibm_aiops_ui_extension_template=self.webpackChunk_ibm_aiops_ui_extension_template||[]).push([[927],{2249:function(module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4860);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7028);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_carbon_charts_dist_styles_css__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4740);\n// Imports\n\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.i(_node_modules_css_loader_dist_cjs_js_node_modules_carbon_charts_dist_styles_css__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".hdm--custom-layout-container{display:flex;flex-direction:column}.hdm--custom-layout-container>div{border:unset !important}.hdm--custom-layout-container .heatmap{background:#fff;margin:1rem 1rem 0}.hdm--custom-layout-container .heatmap__heading{display:flex;flex-direction:column;font-size:1.25rem;padding:1rem 1rem 0}.hdm--custom-layout-container .heatmap__subheading{color:#525252;font-size:.875rem;line-height:2rem}.hdm--custom-layout-container .heatmap__chart{padding:1rem}.hdm--custom-layout-container .heatmap__reset{float:right;margin-right:1rem}.hdm--custom-layout-container .heatmap-options-firstrow{align-items:center;column-gap:12px;display:inline-flex}", "",{"version":3,"sources":["webpack://./src/components/heatmap/heatmap.scss"],"names":[],"mappings":"AAOA,8BACE,YAAA,CACA,qBAAA,CAEA,kCACE,uBAAA,CAGF,uCACE,eAAA,CACA,kBAAA,CAEA,gDACE,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,mBAAA,CAGF,mDACE,aAAA,CACA,iBAAA,CACA,gBAAA,CAGF,8CACE,YAAA,CAGF,8CACE,WAAA,CACA,iBAAA,CAIA,wDACE,kBAAA,CACA,eAAA,CACA,mBAAA","sourcesContent":["/**\\n * © Copyright IBM Corp. 2022, 2025\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n@import \'@carbon/charts/styles.css\';\\n \\n.hdm--custom-layout-container {\\n  display: flex;\\n  flex-direction: column;\\n\\n  > div {\\n    border: unset !important;\\n  }\\n  \\n  .heatmap {\\n    background: #fff;\\n    margin: 1rem 1rem 0;\\n    \\n    &__heading {\\n      display: flex;\\n      flex-direction: column;\\n      font-size: 1.25rem;\\n      padding: 1rem 1rem 0;\\n    }\\n    \\n    &__subheading {\\n      color: #525252;\\n      font-size: 0.875rem;\\n      line-height: 2rem;\\n    }\\n    \\n    &__chart {\\n      padding: 1rem;\\n    }\\n    \\n    &__reset {\\n      float: right;\\n      margin-right: 1rem;\\n    }\\n\\n    &-options {\\n      &-firstrow {\\n        align-items: center;\\n        column-gap: 12px;\\n        display: inline-flex;\\n      }\\n    }\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__.A = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjI0OS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ2dIO0FBQ2pCO0FBQ3FEO0FBQ3BKLDhCQUE4QixtRkFBMkIsQ0FBQyw0RkFBcUM7QUFDL0YsMEJBQTBCLGdJQUFpQztBQUMzRDtBQUNBLHdFQUF3RSxhQUFhLHNCQUFzQixrQ0FBa0Msd0JBQXdCLHVDQUF1QyxnQkFBZ0IsbUJBQW1CLGdEQUFnRCxhQUFhLHNCQUFzQixrQkFBa0Isb0JBQW9CLG1EQUFtRCxjQUFjLGtCQUFrQixpQkFBaUIsOENBQThDLGFBQWEsOENBQThDLFlBQVksa0JBQWtCLHdEQUF3RCxtQkFBbUIsZ0JBQWdCLG9CQUFvQixPQUFPLGllQUFpZSxvQ0FBb0Msa0JBQWtCLDJCQUEyQixhQUFhLCtCQUErQixLQUFLLGtCQUFrQix1QkFBdUIsMEJBQTBCLHdCQUF3QixzQkFBc0IsK0JBQStCLDJCQUEyQiw2QkFBNkIsT0FBTywyQkFBMkIsdUJBQXVCLDRCQUE0QiwwQkFBMEIsT0FBTyxzQkFBc0Isc0JBQXNCLE9BQU8sc0JBQXNCLHFCQUFxQiwyQkFBMkIsT0FBTyxtQkFBbUIsb0JBQW9CLDhCQUE4QiwyQkFBMkIsK0JBQStCLFNBQVMsT0FBTyxLQUFLLEdBQUcscUJBQXFCO0FBQ3Q1RDtBQUNBLHNEQUFlLHVCQUF1QixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGlibS9haW9wcy11aS1leHRlbnNpb24tdGVtcGxhdGUvLi9zcmMvY29tcG9uZW50cy9oZWF0bWFwL2hlYXRtYXAuc2Nzcz9hYWE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvQGNhcmJvbi9jaGFydHMvZGlzdC9zdHlsZXMuY3NzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5pKF9fX0NTU19MT0FERVJfQVRfUlVMRV9JTVBPUlRfMF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5oZG0tLWN1c3RvbS1sYXlvdXQtY29udGFpbmVyPmRpdntib3JkZXI6dW5zZXQgIWltcG9ydGFudH0uaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lciAuaGVhdG1hcHtiYWNrZ3JvdW5kOiNmZmY7bWFyZ2luOjFyZW0gMXJlbSAwfS5oZG0tLWN1c3RvbS1sYXlvdXQtY29udGFpbmVyIC5oZWF0bWFwX19oZWFkaW5ne2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Zm9udC1zaXplOjEuMjVyZW07cGFkZGluZzoxcmVtIDFyZW0gMH0uaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lciAuaGVhdG1hcF9fc3ViaGVhZGluZ3tjb2xvcjojNTI1MjUyO2ZvbnQtc2l6ZTouODc1cmVtO2xpbmUtaGVpZ2h0OjJyZW19LmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXIgLmhlYXRtYXBfX2NoYXJ0e3BhZGRpbmc6MXJlbX0uaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lciAuaGVhdG1hcF9fcmVzZXR7ZmxvYXQ6cmlnaHQ7bWFyZ2luLXJpZ2h0OjFyZW19LmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXIgLmhlYXRtYXAtb3B0aW9ucy1maXJzdHJvd3thbGlnbi1pdGVtczpjZW50ZXI7Y29sdW1uLWdhcDoxMnB4O2Rpc3BsYXk6aW5saW5lLWZsZXh9XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL2NvbXBvbmVudHMvaGVhdG1hcC9oZWF0bWFwLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBT0EsOEJBQ0UsWUFBQSxDQUNBLHFCQUFBLENBRUEsa0NBQ0UsdUJBQUEsQ0FHRix1Q0FDRSxlQUFBLENBQ0Esa0JBQUEsQ0FFQSxnREFDRSxZQUFBLENBQ0EscUJBQUEsQ0FDQSxpQkFBQSxDQUNBLG1CQUFBLENBR0YsbURBQ0UsYUFBQSxDQUNBLGlCQUFBLENBQ0EsZ0JBQUEsQ0FHRiw4Q0FDRSxZQUFBLENBR0YsOENBQ0UsV0FBQSxDQUNBLGlCQUFBLENBSUEsd0RBQ0Usa0JBQUEsQ0FDQSxlQUFBLENBQ0EsbUJBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyoqXFxuICogwqkgQ29weXJpZ2h0IElCTSBDb3JwLiAyMDIyLCAyMDI1XFxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcXG4gKi9cXG5cXG5AaW1wb3J0ICdAY2FyYm9uL2NoYXJ0cy9zdHlsZXMuY3NzJztcXG4gXFxuLmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuXFxuICA+IGRpdiB7XFxuICAgIGJvcmRlcjogdW5zZXQgIWltcG9ydGFudDtcXG4gIH1cXG4gIFxcbiAgLmhlYXRtYXAge1xcbiAgICBiYWNrZ3JvdW5kOiAjZmZmO1xcbiAgICBtYXJnaW46IDFyZW0gMXJlbSAwO1xcbiAgICBcXG4gICAgJl9faGVhZGluZyB7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gICAgICBwYWRkaW5nOiAxcmVtIDFyZW0gMDtcXG4gICAgfVxcbiAgICBcXG4gICAgJl9fc3ViaGVhZGluZyB7XFxuICAgICAgY29sb3I6ICM1MjUyNTI7XFxuICAgICAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gICAgICBsaW5lLWhlaWdodDogMnJlbTtcXG4gICAgfVxcbiAgICBcXG4gICAgJl9fY2hhcnQge1xcbiAgICAgIHBhZGRpbmc6IDFyZW07XFxuICAgIH1cXG4gICAgXFxuICAgICZfX3Jlc2V0IHtcXG4gICAgICBmbG9hdDogcmlnaHQ7XFxuICAgICAgbWFyZ2luLXJpZ2h0OiAxcmVtO1xcbiAgICB9XFxuXFxuICAgICYtb3B0aW9ucyB7XFxuICAgICAgJi1maXJzdHJvdyB7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgY29sdW1uLWdhcDogMTJweDtcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2249\n')},4775:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Default: function() { return /* binding */ Default; },\n  Skeleton: function() { return /* binding */ Skeleton; },\n  \"default\": function() { return /* binding */ Heatmap_stories; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(4674);\n// EXTERNAL MODULE: ./node_modules/react-dom/client.js\nvar client = __webpack_require__(5148);\n// EXTERNAL MODULE: ./node_modules/@carbon/react/es/index.js + 52 modules\nvar es = __webpack_require__(6732);\n// EXTERNAL MODULE: ./node_modules/@carbon/charts-react/dist/index.mjs\nvar dist = __webpack_require__(8645);\n// EXTERNAL MODULE: ./src/components/constants.ts\nvar constants = __webpack_require__(4224);\n;// ./src/helpers/getTimeGroupCountsByApp.ts\n/**\n * © Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\nfunction getAlertCountGroups(alerts, timeWindow) {\n  const alertsByApp = {\n    ALL_APPS_FIRST_OCC: {},\n    ALL_APPS_LAST_OCC: {}\n  };\n  const alertCountData = [];\n  const chopOccurrence = occ => {\n    // aggregate by minute\n    if (timeWindow === '15Min') return occ.slice(0, -7) + '00.000Z';\n    // aggregate by hour\n    return occ.slice(0, -10) + '00:00.000Z';\n  };\n  alerts?.forEach(alertRow => {\n    const applicationString = alertRow.fields[constants/* ALERT_QUERY_PARAMS */.vb.columns.indexOf('@insights.type=\\'aiops.ibm.com/insight-type/topology/group\\'')];\n    let application = {\n      id: null,\n      details: {\n        name: null\n      }\n    };\n    if (applicationString) {\n      try {\n        application = JSON.parse(applicationString)[0];\n      } catch {\n        // ignore\n      }\n    }\n    const firstOccurrenceUnchopped = alertRow.fields[constants/* ALERT_QUERY_PARAMS */.vb.columns.indexOf('firstOccurrenceTime')];\n    const lastOccurrenceUnchopped = alertRow.fields[constants/* ALERT_QUERY_PARAMS */.vb.columns.indexOf('lastOccurrenceTime')];\n\n    // prepare data for aggregation by minutes or hours\n    const firstOccurrence = chopOccurrence(firstOccurrenceUnchopped);\n    const lastOccurrence = chopOccurrence(lastOccurrenceUnchopped);\n\n    // data group names as seen in model\n    const {\n      id,\n      details: {\n        name\n      }\n    } = application;\n    const firstGroupKey = (name || 'None') + '_' + id + '_first';\n    const lastGroupKey = (name || 'None') + '_' + id + '_last';\n\n    // initialize obj if necessary\n    if (!alertsByApp[firstGroupKey]?.[firstOccurrence]) alertsByApp[firstGroupKey] = {\n      ...alertsByApp[firstGroupKey],\n      [firstOccurrence]: 0\n    };\n    if (!alertsByApp[lastGroupKey]?.[lastOccurrence]) alertsByApp[lastGroupKey] = {\n      ...alertsByApp[lastGroupKey],\n      [lastOccurrence]: 0\n    };\n    if (!alertsByApp[constants/* ALL_APPS_FIRST_OCC */.Gg]?.[firstOccurrence]) alertsByApp[constants/* ALL_APPS_FIRST_OCC */.Gg] = {\n      ...alertsByApp[constants/* ALL_APPS_FIRST_OCC */.Gg],\n      [firstOccurrence]: 0\n    };\n    if (!alertsByApp[constants/* ALL_APPS_LAST_OCC */.Kx]?.[lastOccurrence]) alertsByApp[constants/* ALL_APPS_LAST_OCC */.Kx] = {\n      ...alertsByApp[constants/* ALL_APPS_LAST_OCC */.Kx],\n      [lastOccurrence]: 0\n    };\n\n    // increment alert count for that application + occurrence\n    alertsByApp[firstGroupKey][firstOccurrence]++;\n    alertsByApp[lastGroupKey][lastOccurrence]++;\n\n    // increment alert count for that occurrence over all apps\n    alertsByApp[constants/* ALL_APPS_FIRST_OCC */.Gg][firstOccurrence]++;\n    alertsByApp[constants/* ALL_APPS_LAST_OCC */.Kx][lastOccurrence]++;\n  });\n  for (const groupKey in alertsByApp) {\n    for (const date of Object.keys(alertsByApp[groupKey]).sort()) {\n      alertCountData.push({\n        group: groupKey,\n        date: date,\n        value: alertsByApp[groupKey][date]\n      });\n    }\n  }\n  return alertCountData;\n}\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(5072);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(7659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(5056);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(1113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./src/components/heatmap/heatmap.scss\nvar heatmap = __webpack_require__(2249);\n;// ./src/components/heatmap/heatmap.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, \"head\");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(heatmap/* default */.A, options);\n\n\n\n\n       /* harmony default export */ var heatmap_heatmap = (heatmap/* default */.A && heatmap/* default */.A.locals ? heatmap/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/@ibm/akora-renderer-react/dist/akora-renderer-react.umd.js\nvar akora_renderer_react_umd = __webpack_require__(1515);\nvar akora_renderer_react_umd_default = /*#__PURE__*/__webpack_require__.n(akora_renderer_react_umd);\n;// ./src/components/heatmap/Heatmap.tsx\n/**\n * © Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n\n\n// @ts-ignore\n\n\n\n\n\n// @ts-ignore\n\nconst ReactRenderer = akora_renderer_react_umd_default()(react, client);\nconst {\n  useAkoraState,\n  setUrlParameters\n} = ReactRenderer.components;\nconst className = 'heatmap';\nconst Heatmap = props => {\n  const {\n    data,\n    loading,\n    refetch: fetchAlerts\n  } = props;\n  const alerts = data?.tenant.alerts.rows;\n  const {\n    state,\n    app\n  } = useAkoraState();\n  const chartRef = (0,react.useRef)(null);\n  const [useFirstOccurrence, setUseFirstOccurrence] = (0,react.useState)(true);\n  const [useLastOccurrence, setUseLastOccurrence] = (0,react.useState)(false);\n  // we want to rerender when timewindow updates but we also want to use it in event listener so we need ref + state mgmt\n  const [timeWindow, setTimeWindow] = (0,react.useState)('15Min');\n  const timeWindowRef = (0,react.useRef)('15Min');\n  const targetUrl = app.resolvePathExpression(state.path);\n  const {\n    title\n  } = app.getStateForPath(targetUrl);\n  const alertCountGroups = (0,react.useMemo)(() => getAlertCountGroups(alerts, timeWindow), [alerts, timeWindow]);\n  const getTimeWindowLeftEdge = () => {\n    // replace with line below for accurate chart (this date is for example purposes)\n    const threshold = new Date('2023-08-22T16:49:00.000Z');\n    // const threshold = new Date(); // todo change to date now\n    let dateThresh;\n    // window is either last 15 min or last 24 hours\n    if (timeWindow === '15Min') {\n      dateThresh = threshold;\n      dateThresh.setMinutes(threshold.getMinutes() - 15);\n    } else {\n      dateThresh = new Date(threshold.getTime() - 24 * 60 * 60 * 1000);\n    }\n    return dateThresh.toISOString();\n  };\n  const onPointClick = filterStr => {\n    const newRoute = setUrlParameters(state?.resolvedFullPath || state?.fullPath, {\n      filtername: 'All alerts',\n      filterwhereclause: filterStr\n    });\n    app.replaceRoute(newRoute);\n  };\n  const getFilteredFirstLast = alertCount => {\n    // filter out first occurrence data points if necessary\n    const filteredFirst = useFirstOccurrence ? alertCount : alertCount.filter(dp => dp.group.slice(-5) !== 'first');\n    // filter out last occurrence data points if necessary\n    const filteredLast = useLastOccurrence ? filteredFirst : filteredFirst.filter(dp => dp.group.slice(-4) !== 'last');\n    const timeCutoff = getTimeWindowLeftEdge();\n    // remove data points outside time window (because alert query filters on firstOcc >= cutoff OR lastOcc >= cutoff)\n    const filteredDate = filteredLast.filter(dp => dp.date >= timeCutoff);\n    return filteredDate;\n  };\n\n  // we want alerts that have a first occurrence within window or a last occurrence within window\n  const getQueryFilter = filter => {\n    const timeCutoff = getTimeWindowLeftEdge();\n    const firstOccFilter = `firstOccurrenceTime >= '${timeCutoff}'`;\n    const lastOccFilter = `lastOccurrenceTime >= '${timeCutoff}'`;\n    return filter + ` and (${firstOccFilter} or ${lastOccFilter})`;\n  };\n  const getUrlFilter = datum => {\n    const windowLeftEdge = typeof datum.date === 'string' ? new Date(datum.date) : datum.date;\n    let windowRightEdge;\n    if (timeWindowRef.current === '15Min') {\n      // aggregate by minute so add one minute\n      windowRightEdge = new Date(windowLeftEdge.getTime() + 60 * 1000);\n    } else {\n      // aggregate by hour so add one hour\n      windowRightEdge = new Date(windowLeftEdge.getTime() + 60 * 60 * 1000);\n    }\n    const occType = datum.group.slice(-5) === 'first' ? 'firstOccurrenceTime' : 'lastOccurrenceTime';\n    const filterTemplate = `state != 'clear' and ${occType} >= '${windowLeftEdge.toISOString()}' and ${occType} < '${windowRightEdge.toISOString()}'`;\n    const [name, id] = datum.group.split('_');\n    const filterWithApplication = ['AllApplications', 'None'].includes(name) ? filterTemplate : filterTemplate + ` and insights.id = '${id}'`;\n    return filterWithApplication;\n  };\n\n  // we refetch data everytime we click refresh OR change time window. we don't refresh for occurrence type change but we do refilter\n  const getAlertOptions = () => {\n    return /*#__PURE__*/react.createElement(\"div\", {\n      className: `${className}-options`\n    }, /*#__PURE__*/react.createElement(\"div\", {\n      className: `${className}-options-firstrow`\n    }, /*#__PURE__*/react.createElement(es/* Dropdown */.msM, {\n      id: \"timewindow-dropdown\",\n      label: \"Time window\",\n      items: Object.keys(constants/* DROPDOWN_ITEMS */.Rd),\n      itemToString: item => constants/* DROPDOWN_ITEMS */.Rd[item],\n      selectedItem: timeWindow,\n      onChange: e => {\n        setTimeWindow(e.selectedItem);\n        timeWindowRef.current = e.selectedItem;\n      },\n      titleText: '',\n      type: \"inline\"\n    }), /*#__PURE__*/react.createElement(es/* Checkbox */.Sc0, {\n      labelText: \"First occurrence\",\n      id: \"first-occur-chkbox\",\n      checked: useFirstOccurrence,\n      onChange: (e, _ref) => {\n        let {\n          checked\n        } = _ref;\n        return setUseFirstOccurrence(checked);\n      }\n    }), /*#__PURE__*/react.createElement(es/* Checkbox */.Sc0, {\n      labelText: \"Last occurrence\",\n      id: \"last-occur-chkbox\",\n      checked: useLastOccurrence,\n      onChange: (e, _ref2) => {\n        let {\n          checked\n        } = _ref2;\n        return setUseLastOccurrence(checked);\n      }\n    })), /*#__PURE__*/react.createElement(es/* Button */.$nd, {\n      className: `${className}__reset`,\n      disabled: loading,\n      kind: \"ghost\",\n      onClick: () => onPointClick('')\n    }, \"Reset filter\"));\n  };\n  (0,react.useEffect)(() => {\n    const onRefresh = e => {\n      if (e.data === 'alertsrefresh' && e.origin === state.clientConfiguration.publicurl) {\n        fetchAlerts({\n          filter: getQueryFilter(constants/* ALERT_QUERY_PARAMS */.vb.filter)\n        });\n      }\n    };\n    window.addEventListener('message', onRefresh, false);\n    chartRef.current?.chart.services.events.addEventListener('heatmap-click', e => {\n      onPointClick(getUrlFilter(e.detail.datum));\n    });\n    fetchAlerts({\n      filter: getQueryFilter(constants/* ALERT_QUERY_PARAMS */.vb.filter)\n    });\n    return () => window.removeEventListener('message', onRefresh);\n  }, []);\n  (0,react.useEffect)(() => {\n    fetchAlerts({\n      filter: getQueryFilter(constants/* ALERT_QUERY_PARAMS */.vb.filter)\n    });\n  }, [timeWindow]);\n  const options = {\n    axes: {\n      bottom: {\n        title: 'Date',\n        mapsTo: 'date',\n        scaleType: dist/* ScaleTypes */.Wh.LABELS,\n        visible: false\n      },\n      left: {\n        title: 'Application',\n        mapsTo: 'group',\n        scaleType: dist/* ScaleTypes */.Wh.LABELS\n      }\n    },\n    heatmap: {\n      colorLegend: {\n        title: 'Heat gradient'\n      }\n    },\n    experimental: true,\n    data: {\n      loading\n    },\n    height: '300px'\n  };\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: className,\n    role: \"contentinfo\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: `${className}__heading`\n  }, title), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${className}__chart`\n  }, getAlertOptions(), /*#__PURE__*/react.createElement(dist/* HeatmapChart */.dM, {\n    data: getFilteredFirstLast(alertCountGroups),\n    options: options,\n    ref: chartRef\n  })));\n};\n/* harmony default export */ var heatmap_Heatmap = (Heatmap);\n// EXTERNAL MODULE: ./src/mocks/alerts.json\nvar alerts = __webpack_require__(6862);\n;// ./src/components/heatmap/Heatmap.stories.tsx\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\n/**\n * © Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n\n\n/* harmony default export */ var Heatmap_stories = ({\n  title: 'Application heatmap',\n  component: heatmap_Heatmap,\n  argTypes: {\n    data: {\n      control: 'object'\n    }\n  }\n});\nconst Template = args => /*#__PURE__*/react.createElement(heatmap_Heatmap, _extends({}, args, {\n  refetch: () => {}\n}));\nconst Default = Template.bind({});\nDefault.args = {\n  data: alerts/* data */.p\n};\nconst Skeleton = () => {\n  return /*#__PURE__*/react.createElement(\"div\", {\n    style: {\n      border: '1px solid #E0E0E0'\n    }\n  }, /*#__PURE__*/react.createElement(heatmap_Heatmap, {\n    loading: true,\n    refetch: () => {}\n  }));\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"(args: {\\n  data: {};\\n}) => <Heatmap {...args} refetch={() => {}} />\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nSkeleton.parameters = {\n  ...Skeleton.parameters,\n  docs: {\n    ...Skeleton.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  return <div style={{\\n    border: '1px solid #E0E0E0'\\n  }}>\\n      <Heatmap loading={true} refetch={() => {}} />\\n    </div>;\\n}\",\n      ...Skeleton.parameters?.docs?.source\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4775\n")}}]);