"use strict";(self.webpackChunk_ibm_aiops_ui_extension_template=self.webpackChunk_ibm_aiops_ui_extension_template||[]).push([[754],{5295:function(module,__webpack_exports__,__webpack_require__){eval('/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4860);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7028);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, ".hdm--custom-layout-container{display:flex;flex-direction:column}.hdm--custom-layout-container>div{border:unset !important}.hdm--custom-layout-container .alert-timeline{background:#fff;height:45vh;margin:1rem 1rem 0}.hdm--custom-layout-container .alert-timeline__heading{display:flex;flex-direction:column;font-size:1.25rem;padding:1rem 1rem 0}.hdm--custom-layout-container .alert-timeline__chart{padding:1rem 1rem 0}.hdm--custom-layout-container .alert-timeline__reset{float:right;margin-right:1rem}.hdm--custom-layout-container .alert-timeline-options-firstrow{align-items:center;column-gap:12px;display:inline-flex}", "",{"version":3,"sources":["webpack://./src/components/alert-timeline/alert-timeline.scss"],"names":[],"mappings":"AAKA,8BACE,YAAA,CACA,qBAAA,CAEA,kCACE,uBAAA,CAGF,8CACE,eAAA,CACA,WAAA,CACA,kBAAA,CAEA,uDACE,YAAA,CACA,qBAAA,CACA,iBAAA,CACA,mBAAA,CAGF,qDACE,mBAAA,CAGF,qDACE,WAAA,CACA,iBAAA,CAIA,+DACE,kBAAA,CACA,eAAA,CACA,mBAAA","sourcesContent":["/**\\n * © Copyright IBM Corp. 2022, 2025\\n * SPDX-License-Identifier: Apache-2.0\\n */\\n\\n.hdm--custom-layout-container {\\n  display: flex;\\n  flex-direction: column;\\n\\n  > div {\\n    border: unset !important;\\n  }\\n\\n  .alert-timeline {\\n    background: #fff;\\n    height: 45vh;\\n    margin: 1rem 1rem 0;\\n    \\n    &__heading {\\n      display: flex;\\n      flex-direction: column;\\n      font-size: 1.25rem;\\n      padding: 1rem 1rem 0;\\n    }\\n\\n    &__chart {\\n      padding: 1rem 1rem 0;\\n    }\\n\\n    &__reset {\\n      float: right;\\n      margin-right: 1rem;\\n    }   \\n    \\n    &-options {\\n      &-firstrow {\\n        align-items: center;\\n        column-gap: 12px;\\n        display: inline-flex;\\n      }\\n    }\\n  }\\n}\\n"],"sourceRoot":""}]);\n// Exports\n/* harmony default export */ __webpack_exports__.A = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTI5NS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDZ0g7QUFDakI7QUFDL0YsOEJBQThCLG1GQUEyQixDQUFDLDRGQUFxQztBQUMvRjtBQUNBLHdFQUF3RSxhQUFhLHNCQUFzQixrQ0FBa0Msd0JBQXdCLDhDQUE4QyxnQkFBZ0IsWUFBWSxtQkFBbUIsdURBQXVELGFBQWEsc0JBQXNCLGtCQUFrQixvQkFBb0IscURBQXFELG9CQUFvQixxREFBcUQsWUFBWSxrQkFBa0IsK0RBQStELG1CQUFtQixnQkFBZ0Isb0JBQW9CLE9BQU8sK2NBQStjLGtCQUFrQiwyQkFBMkIsYUFBYSwrQkFBK0IsS0FBSyx1QkFBdUIsdUJBQXVCLG1CQUFtQiwwQkFBMEIsd0JBQXdCLHNCQUFzQiwrQkFBK0IsMkJBQTJCLDZCQUE2QixPQUFPLGtCQUFrQiw2QkFBNkIsT0FBTyxrQkFBa0IscUJBQXFCLDJCQUEyQixVQUFVLHVCQUF1QixvQkFBb0IsOEJBQThCLDJCQUEyQiwrQkFBK0IsU0FBUyxPQUFPLEtBQUssR0FBRyxxQkFBcUI7QUFDanVEO0FBQ0Esc0RBQWUsdUJBQXVCLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaWJtL2Fpb3BzLXVpLWV4dGVuc2lvbi10ZW1wbGF0ZS8uL3NyYy9jb21wb25lbnRzL2FsZXJ0LXRpbWVsaW5lL2FsZXJ0LXRpbWVsaW5lLnNjc3M/YWNmNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcIi5oZG0tLWN1c3RvbS1sYXlvdXQtY29udGFpbmVye2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXI+ZGl2e2JvcmRlcjp1bnNldCAhaW1wb3J0YW50fS5oZG0tLWN1c3RvbS1sYXlvdXQtY29udGFpbmVyIC5hbGVydC10aW1lbGluZXtiYWNrZ3JvdW5kOiNmZmY7aGVpZ2h0OjQ1dmg7bWFyZ2luOjFyZW0gMXJlbSAwfS5oZG0tLWN1c3RvbS1sYXlvdXQtY29udGFpbmVyIC5hbGVydC10aW1lbGluZV9faGVhZGluZ3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2ZvbnQtc2l6ZToxLjI1cmVtO3BhZGRpbmc6MXJlbSAxcmVtIDB9LmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXIgLmFsZXJ0LXRpbWVsaW5lX19jaGFydHtwYWRkaW5nOjFyZW0gMXJlbSAwfS5oZG0tLWN1c3RvbS1sYXlvdXQtY29udGFpbmVyIC5hbGVydC10aW1lbGluZV9fcmVzZXR7ZmxvYXQ6cmlnaHQ7bWFyZ2luLXJpZ2h0OjFyZW19LmhkbS0tY3VzdG9tLWxheW91dC1jb250YWluZXIgLmFsZXJ0LXRpbWVsaW5lLW9wdGlvbnMtZmlyc3Ryb3d7YWxpZ24taXRlbXM6Y2VudGVyO2NvbHVtbi1nYXA6MTJweDtkaXNwbGF5OmlubGluZS1mbGV4fVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9jb21wb25lbnRzL2FsZXJ0LXRpbWVsaW5lL2FsZXJ0LXRpbWVsaW5lLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBS0EsOEJBQ0UsWUFBQSxDQUNBLHFCQUFBLENBRUEsa0NBQ0UsdUJBQUEsQ0FHRiw4Q0FDRSxlQUFBLENBQ0EsV0FBQSxDQUNBLGtCQUFBLENBRUEsdURBQ0UsWUFBQSxDQUNBLHFCQUFBLENBQ0EsaUJBQUEsQ0FDQSxtQkFBQSxDQUdGLHFEQUNFLG1CQUFBLENBR0YscURBQ0UsV0FBQSxDQUNBLGlCQUFBLENBSUEsK0RBQ0Usa0JBQUEsQ0FDQSxlQUFBLENBQ0EsbUJBQUFcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLyoqXFxuICogwqkgQ29weXJpZ2h0IElCTSBDb3JwLiAyMDIyLCAyMDI1XFxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcXG4gKi9cXG5cXG4uaGRtLS1jdXN0b20tbGF5b3V0LWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG5cXG4gID4gZGl2IHtcXG4gICAgYm9yZGVyOiB1bnNldCAhaW1wb3J0YW50O1xcbiAgfVxcblxcbiAgLmFsZXJ0LXRpbWVsaW5lIHtcXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcXG4gICAgaGVpZ2h0OiA0NXZoO1xcbiAgICBtYXJnaW46IDFyZW0gMXJlbSAwO1xcbiAgICBcXG4gICAgJl9faGVhZGluZyB7XFxuICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgIGZvbnQtc2l6ZTogMS4yNXJlbTtcXG4gICAgICBwYWRkaW5nOiAxcmVtIDFyZW0gMDtcXG4gICAgfVxcblxcbiAgICAmX19jaGFydCB7XFxuICAgICAgcGFkZGluZzogMXJlbSAxcmVtIDA7XFxuICAgIH1cXG5cXG4gICAgJl9fcmVzZXQge1xcbiAgICAgIGZsb2F0OiByaWdodDtcXG4gICAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICAgIH0gICBcXG4gICAgXFxuICAgICYtb3B0aW9ucyB7XFxuICAgICAgJi1maXJzdHJvdyB7XFxuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICAgICAgY29sdW1uLWdhcDogMTJweDtcXG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgfVxcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5295\n')},5610:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Default: function() { return /* binding */ Default; },\n  Skeleton: function() { return /* binding */ Skeleton; },\n  \"default\": function() { return /* binding */ AlertTimeline_stories; }\n});\n\n// EXTERNAL MODULE: ./node_modules/react/index.js\nvar react = __webpack_require__(4674);\n// EXTERNAL MODULE: ./node_modules/react-dom/client.js\nvar client = __webpack_require__(5148);\n// EXTERNAL MODULE: ./node_modules/@carbon/react/es/index.js + 52 modules\nvar es = __webpack_require__(6732);\n// EXTERNAL MODULE: ./node_modules/@carbon/charts-react/dist/index.mjs\nvar dist = __webpack_require__(8645);\n// EXTERNAL MODULE: ./src/components/constants.ts\nvar constants = __webpack_require__(4224);\n;// ./src/helpers/getTimeGroupCounts.ts\n/**\n * © Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\nfunction getAlertCountGroups(alerts, timeWindow) {\n  const alertsBySev = {\n    ALL_SEVS_FIRST_OCC: {},\n    ALL_SEVS_LAST_OCC: {}\n  };\n  const alertCountData = [];\n  const chopOccurrence = occ => {\n    // aggregate by minute\n    if (timeWindow === '15Min') return occ.slice(0, -7) + '00.000Z';\n    // aggregate by hour\n    return occ.slice(0, -10) + '00:00.000Z';\n  };\n  alerts?.forEach(alertRow => {\n    const severity = +alertRow.fields[constants/* ALERT_QUERY_PARAMS */.vb.columns.indexOf('severity')];\n    const firstOccurrenceUnchopped = alertRow.fields[constants/* ALERT_QUERY_PARAMS */.vb.columns.indexOf('firstOccurrenceTime')];\n    const lastOccurrenceUnchopped = alertRow.fields[constants/* ALERT_QUERY_PARAMS */.vb.columns.indexOf('lastOccurrenceTime')];\n\n    // prepare data for aggregation by minutes or hours\n    const firstOccurrence = chopOccurrence(firstOccurrenceUnchopped);\n    const lastOccurrence = chopOccurrence(lastOccurrenceUnchopped);\n\n    // data group names as seen in model\n    const firstGroupKey = constants/* SEVERITIES */.oC[severity] + '_first';\n    const lastGroupKey = constants/* SEVERITIES */.oC[severity] + '_last';\n\n    // initialize obj if necessary\n    if (!alertsBySev[firstGroupKey]?.[firstOccurrence]) alertsBySev[firstGroupKey] = {\n      ...alertsBySev[firstGroupKey],\n      [firstOccurrence]: 0\n    };\n    if (!alertsBySev[lastGroupKey]?.[lastOccurrence]) alertsBySev[lastGroupKey] = {\n      ...alertsBySev[lastGroupKey],\n      [lastOccurrence]: 0\n    };\n    if (!alertsBySev[constants/* ALL_SEVS_FIRST_OCC */.DS]?.[firstOccurrence]) alertsBySev[constants/* ALL_SEVS_FIRST_OCC */.DS] = {\n      ...alertsBySev[constants/* ALL_SEVS_FIRST_OCC */.DS],\n      [firstOccurrence]: 0\n    };\n    if (!alertsBySev[constants/* ALL_SEVS_LAST_OCC */.J1]?.[lastOccurrence]) alertsBySev[constants/* ALL_SEVS_LAST_OCC */.J1] = {\n      ...alertsBySev[constants/* ALL_SEVS_LAST_OCC */.J1],\n      [lastOccurrence]: 0\n    };\n\n    // increment alert count for that severity + occurrence\n    alertsBySev[firstGroupKey][firstOccurrence]++;\n    alertsBySev[lastGroupKey][lastOccurrence]++;\n\n    // increment alert count for that occurrence over all sevs\n    alertsBySev[constants/* ALL_SEVS_FIRST_OCC */.DS][firstOccurrence]++;\n    alertsBySev[constants/* ALL_SEVS_LAST_OCC */.J1][lastOccurrence]++;\n  });\n  for (const groupKey in alertsBySev) {\n    for (const date of Object.keys(alertsBySev[groupKey]).sort()) {\n      alertCountData.push({\n        group: groupKey,\n        date: date,\n        value: alertsBySev[groupKey][date]\n      });\n    }\n  }\n  return alertCountData;\n}\n// EXTERNAL MODULE: ./node_modules/@carbon/charts-react/dist/styles.css\nvar styles = __webpack_require__(8760);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\nvar injectStylesIntoStyleTag = __webpack_require__(5072);\nvar injectStylesIntoStyleTag_default = /*#__PURE__*/__webpack_require__.n(injectStylesIntoStyleTag);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleDomAPI.js\nvar styleDomAPI = __webpack_require__(7825);\nvar styleDomAPI_default = /*#__PURE__*/__webpack_require__.n(styleDomAPI);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertBySelector.js\nvar insertBySelector = __webpack_require__(7659);\nvar insertBySelector_default = /*#__PURE__*/__webpack_require__.n(insertBySelector);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\nvar setAttributesWithoutAttributes = __webpack_require__(5056);\nvar setAttributesWithoutAttributes_default = /*#__PURE__*/__webpack_require__.n(setAttributesWithoutAttributes);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/insertStyleElement.js\nvar insertStyleElement = __webpack_require__(540);\nvar insertStyleElement_default = /*#__PURE__*/__webpack_require__.n(insertStyleElement);\n// EXTERNAL MODULE: ./node_modules/style-loader/dist/runtime/styleTagTransform.js\nvar styleTagTransform = __webpack_require__(1113);\nvar styleTagTransform_default = /*#__PURE__*/__webpack_require__.n(styleTagTransform);\n// EXTERNAL MODULE: ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[2].use[2]!./src/components/alert-timeline/alert-timeline.scss\nvar alert_timeline = __webpack_require__(5295);\n;// ./src/components/alert-timeline/alert-timeline.scss\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (styleTagTransform_default());\noptions.setAttributes = (setAttributesWithoutAttributes_default());\n\n      options.insert = insertBySelector_default().bind(null, \"head\");\n    \noptions.domAPI = (styleDomAPI_default());\noptions.insertStyleElement = (insertStyleElement_default());\n\nvar update = injectStylesIntoStyleTag_default()(alert_timeline/* default */.A, options);\n\n\n\n\n       /* harmony default export */ var alert_timeline_alert_timeline = (alert_timeline/* default */.A && alert_timeline/* default */.A.locals ? alert_timeline/* default */.A.locals : undefined);\n\n// EXTERNAL MODULE: ./node_modules/@ibm/akora-renderer-react/dist/akora-renderer-react.umd.js\nvar akora_renderer_react_umd = __webpack_require__(1515);\nvar akora_renderer_react_umd_default = /*#__PURE__*/__webpack_require__.n(akora_renderer_react_umd);\n;// ./src/components/alert-timeline/AlertTimeline.tsx\n/**\n * © Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n\n\n// @ts-ignore\n\n\n\n\n\n\n// @ts-ignore\n\nconst ReactRenderer = akora_renderer_react_umd_default()(react, client);\nconst {\n  useAkoraState,\n  setUrlParameters\n} = ReactRenderer.components;\nconst className = 'alert-timeline';\nconst AlertTimeline = props => {\n  const {\n    data,\n    loading,\n    refetch: fetchAlerts\n  } = props;\n  const alerts = data?.tenant.alerts.rows;\n  const {\n    state,\n    app\n  } = useAkoraState();\n  const chartRef = (0,react.useRef)(null);\n  const [useFirstOccurrence, setUseFirstOccurrence] = (0,react.useState)(true);\n  const [useLastOccurrence, setUseLastOccurrence] = (0,react.useState)(false);\n  // we want to rerender when timewindow updates but we also want to use it in event listener so we need ref + state mgmt\n  const [timeWindow, setTimeWindow] = (0,react.useState)('15Min');\n  const timeWindowRef = (0,react.useRef)('15Min');\n  const targetUrl = app.resolvePathExpression(state.path);\n  const {\n    title\n  } = app.getStateForPath(targetUrl);\n  const alertCountGroups = (0,react.useMemo)(() => getAlertCountGroups(alerts, timeWindow), [alerts, timeWindow]);\n  const getTimeWindowLeftEdge = () => {\n    // replace with line below for accurate chart (this date is for example purposes)\n    const threshold = new Date('2023-08-22T16:49:00.000Z');\n    // const threshold = new Date(); // todo change to date now\n    let dateThresh;\n    // window is either last 15 min or last 24 hours\n    if (timeWindow === '15Min') {\n      dateThresh = threshold;\n      dateThresh.setMinutes(threshold.getMinutes() - 15);\n    } else {\n      dateThresh = new Date(threshold.getTime() - 24 * 60 * 60 * 1000);\n    }\n    return dateThresh.toISOString();\n  };\n  const onPointClick = filterStr => {\n    const newRoute = setUrlParameters(state?.resolvedFullPath || state?.fullPath, {\n      filtername: 'All alerts',\n      filterwhereclause: filterStr\n    });\n    app.replaceRoute(newRoute);\n  };\n  const getFilteredFirstLast = alertCount => {\n    // filter out first occurrence data points if necessary\n    const filteredFirst = useFirstOccurrence ? alertCount : alertCount.filter(dp => dp.group.slice(-5) !== 'first');\n    // filter out last occurrence data points if necessary\n    const filteredLast = useLastOccurrence ? filteredFirst : filteredFirst.filter(dp => dp.group.slice(-4) !== 'last');\n    const timeCutoff = getTimeWindowLeftEdge();\n    // remove data points outside time window (because alert query filters on firstOcc >= cutoff OR lastOcc >= cutoff)\n    const filteredDate = filteredLast.filter(dp => dp.date >= timeCutoff);\n    return filteredDate;\n  };\n\n  // we want alerts that have a first occurrence within window or a last occurrence within window\n  const getQueryFilter = filter => {\n    const timeCutoff = getTimeWindowLeftEdge();\n    const firstOccFilter = `firstOccurrenceTime >= '${timeCutoff}'`;\n    const lastOccFilter = `lastOccurrenceTime >= '${timeCutoff}'`;\n    return filter + ` and (${firstOccFilter} or ${lastOccFilter})`;\n  };\n  const getUrlFilter = datum => {\n    const windowLeftEdge = datum.date;\n    let windowRightEdge;\n    if (timeWindowRef.current === '15Min') {\n      // aggregate by minute so add one minute\n      windowRightEdge = new Date(windowLeftEdge.getTime() + 60 * 1000);\n    } else {\n      // aggregate by hour so add one hour\n      windowRightEdge = new Date(windowLeftEdge.getTime() + 60 * 60 * 1000);\n    }\n    const occType = datum.group.slice(-5) === 'first' ? 'firstOccurrenceTime' : 'lastOccurrenceTime';\n    const filterTemplate = `state != 'clear' and ${occType} >= '${windowLeftEdge.toISOString()}' and ${occType} < '${windowRightEdge.toISOString()}'`;\n    const severityStr = datum.group.slice(0, datum.group.indexOf('_'));\n    const severity = severityStr === 'AllSeverities' ? 7 : constants/* SEVERITIES */.oC.indexOf(severityStr);\n    const filterWithSeverity = severity < 7 ? filterTemplate + ` and severity = ${severity.toString()}` : filterTemplate;\n    return filterWithSeverity;\n  };\n\n  // we refetch data everytime we click refresh OR change time window. we don't refresh for occurrence type change but we do refilter\n  const getAlertOptions = () => {\n    return /*#__PURE__*/react.createElement(\"div\", {\n      className: `${className}-options`\n    }, /*#__PURE__*/react.createElement(\"div\", {\n      className: `${className}-options-firstrow`\n    }, /*#__PURE__*/react.createElement(es/* Dropdown */.msM, {\n      id: \"timewindow-dropdown\",\n      titleText: \"\",\n      label: \"Time window\",\n      items: Object.keys(constants/* DROPDOWN_ITEMS */.Rd),\n      itemToString: item => constants/* DROPDOWN_ITEMS */.Rd[item],\n      selectedItem: timeWindow,\n      onChange: e => {\n        setTimeWindow(e.selectedItem);\n        timeWindowRef.current = e.selectedItem;\n      },\n      type: \"inline\"\n    }), /*#__PURE__*/react.createElement(es/* Checkbox */.Sc0, {\n      labelText: \"First occurrence\",\n      id: \"first-occur-chkbox\",\n      checked: useFirstOccurrence,\n      onChange: (e, _ref) => {\n        let {\n          checked\n        } = _ref;\n        return setUseFirstOccurrence(checked);\n      }\n    }), /*#__PURE__*/react.createElement(es/* Checkbox */.Sc0, {\n      labelText: \"Last occurrence\",\n      id: \"last-occur-chkbox\",\n      checked: useLastOccurrence,\n      onChange: (e, _ref2) => {\n        let {\n          checked\n        } = _ref2;\n        return setUseLastOccurrence(checked);\n      }\n    })), /*#__PURE__*/react.createElement(es/* Button */.$nd, {\n      className: `${className}__reset`,\n      disabled: loading,\n      kind: \"ghost\",\n      onClick: () => onPointClick('')\n    }, \"Reset filter\"));\n  };\n  (0,react.useEffect)(() => {\n    const onRefresh = e => {\n      if (e.data === 'alertsrefresh' && e.origin === state.clientConfiguration.publicurl) {\n        fetchAlerts({\n          filter: getQueryFilter(constants/* ALERT_QUERY_PARAMS */.vb.filter)\n        });\n      }\n    };\n    window.addEventListener('message', onRefresh, false);\n    chartRef.current?.chart.services.events.addEventListener('scatter-click', e => {\n      onPointClick(getUrlFilter(e.detail.datum));\n    });\n    fetchAlerts({\n      filter: getQueryFilter(constants/* ALERT_QUERY_PARAMS */.vb.filter)\n    });\n    return () => window.removeEventListener('message', onRefresh);\n  }, []);\n  (0,react.useEffect)(() => {\n    fetchAlerts({\n      filter: getQueryFilter(constants/* ALERT_QUERY_PARAMS */.vb.filter)\n    });\n  }, [timeWindow]);\n  return /*#__PURE__*/react.createElement(\"div\", {\n    className: className,\n    role: \"contentinfo\"\n  }, /*#__PURE__*/react.createElement(\"div\", {\n    className: `${className}__heading`\n  }, title), /*#__PURE__*/react.createElement(\"div\", {\n    className: `${className}__chart`\n  }, getAlertOptions(), /*#__PURE__*/react.createElement(dist/* LineChart */.bl, {\n    data: getFilteredFirstLast(alertCountGroups),\n    options: {\n      ...constants/* LINE_CHART_OPTIONS */.np,\n      data: {\n        loading\n      }\n    },\n    ref: chartRef\n  })));\n};\n/* harmony default export */ var alert_timeline_AlertTimeline = (AlertTimeline);\n// EXTERNAL MODULE: ./src/mocks/alerts.json\nvar alerts = __webpack_require__(6862);\n;// ./src/components/alert-timeline/AlertTimeline.stories.tsx\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\n/**\n * © Copyright IBM Corp. 2022, 2025\n * SPDX-License-Identifier: Apache-2.0\n */\n\n\n\n\n/* harmony default export */ var AlertTimeline_stories = ({\n  title: 'Alerts timeline',\n  component: alert_timeline_AlertTimeline,\n  argTypes: {\n    data: {\n      control: 'object'\n    }\n  }\n});\nconst Template = args => /*#__PURE__*/react.createElement(alert_timeline_AlertTimeline, _extends({}, args, {\n  refetch: () => {}\n}));\nconst Default = Template.bind({});\nDefault.args = {\n  data: alerts/* data */.p\n};\nconst Skeleton = () => {\n  return /*#__PURE__*/react.createElement(\"div\", {\n    style: {\n      border: '1px solid #E0E0E0'\n    }\n  }, /*#__PURE__*/react.createElement(alert_timeline_AlertTimeline, {\n    loading: true,\n    refetch: () => {}\n  }));\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"(args: {\\n  data: {};\\n}) => <AlertTimeline {...args} refetch={() => {}} />\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nSkeleton.parameters = {\n  ...Skeleton.parameters,\n  docs: {\n    ...Skeleton.parameters?.docs,\n    source: {\n      originalSource: \"() => {\\n  return <div style={{\\n    border: '1px solid #E0E0E0'\\n  }}>\\n      <AlertTimeline loading={true} refetch={() => {}} />\\n    </div>;\\n}\",\n      ...Skeleton.parameters?.docs?.source\n    }\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsY0FBQTtNQUFBLEdBQUFSLE9BQUEsQ0FBQUssVUFBQSxFQUFBQyxJQUFBLEVBQUFDO0lBQUE7RUFBQTtBQUFBO0FBQUFMLFFBQUEsQ0FBQUcsVUFBQTtFQUFBLEdBQUFILFFBQUEsQ0FBQUcsVUFBQTtFQUFBQyxJQUFBO0lBQUEsR0FBQUosUUFBQSxDQUFBRyxVQUFBLEVBQUFDLElBQUE7SUFBQUMsTUFBQTtNQUFBQyxjQUFBO01BQUEsR0FBQU4sUUFBQSxDQUFBRyxVQUFBLEVBQUFDLElBQUEsRUFBQUM7SUFBQTtFQUFBO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AaWJtL2Fpb3BzLXVpLWV4dGVuc2lvbi10ZW1wbGF0ZS8uL3NyYy9oZWxwZXJzL2dldFRpbWVHcm91cENvdW50cy50cz9jMzZmIiwid2VicGFjazovL0BpYm0vYWlvcHMtdWktZXh0ZW5zaW9uLXRlbXBsYXRlLy4vc3JjL2NvbXBvbmVudHMvYWxlcnQtdGltZWxpbmUvYWxlcnQtdGltZWxpbmUuc2Nzcz9mMDcxIiwid2VicGFjazovL0BpYm0vYWlvcHMtdWktZXh0ZW5zaW9uLXRlbXBsYXRlLy4vc3JjL2NvbXBvbmVudHMvYWxlcnQtdGltZWxpbmUvQWxlcnRUaW1lbGluZS50c3g/OTZlOSIsIndlYnBhY2s6Ly9AaWJtL2Fpb3BzLXVpLWV4dGVuc2lvbi10ZW1wbGF0ZS8uL3NyYy9jb21wb25lbnRzL2FsZXJ0LXRpbWVsaW5lL0FsZXJ0VGltZWxpbmUuc3Rvcmllcy50c3g/NWNjMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIMKpIENvcHlyaWdodCBJQk0gQ29ycC4gMjAyMiwgMjAyNVxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbiAqL1xuXG5pbXBvcnQge1xuICBBTEVSVF9RVUVSWV9QQVJBTVMsXG4gIEFMTF9TRVZTX0ZJUlNUX09DQyxcbiAgQUxMX1NFVlNfTEFTVF9PQ0MsXG4gIFNFVkVSSVRJRVNcbn0gZnJvbSAnLi4vY29tcG9uZW50cy9jb25zdGFudHMnO1xuXG50eXBlIEFsZXJ0c0J5U2V2ID0ge1xuICBbZ3JvdXBLZXk6IHN0cmluZ106IHtcbiAgICBbZGF0ZTogc3RyaW5nXSA6IG51bWJlclxuICB9XG59O1xuXG50eXBlIEFsZXJ0Q291bnREYXRhUG9pbnQgPSB7XG4gIGdyb3VwOiBzdHJpbmcsXG4gIGRhdGU6IHN0cmluZyxcbiAgdmFsdWU6IG51bWJlclxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBbGVydENvdW50R3JvdXBzKGFsZXJ0czogQXJyYXk8e2ZpZWxkczoge1trZXk6IHN0cmluZ106IHN0cmluZ319PiwgdGltZVdpbmRvdzogc3RyaW5nKSB7XG4gIGNvbnN0IGFsZXJ0c0J5U2V2IDogQWxlcnRzQnlTZXYgPSB7XG4gICAgQUxMX1NFVlNfRklSU1RfT0NDOiB7fSxcbiAgICBBTExfU0VWU19MQVNUX09DQzoge31cbiAgfTtcblxuICBjb25zdCBhbGVydENvdW50RGF0YTogQWxlcnRDb3VudERhdGFQb2ludFtdID0gW107XG5cbiAgY29uc3QgY2hvcE9jY3VycmVuY2UgPSAob2NjOiBzdHJpbmcpID0+IHtcbiAgICAvLyBhZ2dyZWdhdGUgYnkgbWludXRlXG4gICAgaWYgKHRpbWVXaW5kb3cgPT09ICcxNU1pbicpIHJldHVybiBvY2Muc2xpY2UoMCwgLTcpICsgJzAwLjAwMFonXG4gICAgLy8gYWdncmVnYXRlIGJ5IGhvdXJcbiAgICByZXR1cm4gb2NjLnNsaWNlKDAsIC0xMCkgKyAnMDA6MDAuMDAwWidcbiAgfVxuXG4gIGFsZXJ0cz8uZm9yRWFjaChhbGVydFJvdyA9PiB7XG4gICAgY29uc3Qgc2V2ZXJpdHkgPSArYWxlcnRSb3cuZmllbGRzW0FMRVJUX1FVRVJZX1BBUkFNUy5jb2x1bW5zLmluZGV4T2YoJ3NldmVyaXR5JyldO1xuICAgIGNvbnN0IGZpcnN0T2NjdXJyZW5jZVVuY2hvcHBlZCA6IHN0cmluZyA9IGFsZXJ0Um93LmZpZWxkc1tBTEVSVF9RVUVSWV9QQVJBTVMuY29sdW1ucy5pbmRleE9mKCdmaXJzdE9jY3VycmVuY2VUaW1lJyldO1xuICAgIGNvbnN0IGxhc3RPY2N1cnJlbmNlVW5jaG9wcGVkIDogc3RyaW5nID0gYWxlcnRSb3cuZmllbGRzW0FMRVJUX1FVRVJZX1BBUkFNUy5jb2x1bW5zLmluZGV4T2YoJ2xhc3RPY2N1cnJlbmNlVGltZScpXTtcblxuICAgIC8vIHByZXBhcmUgZGF0YSBmb3IgYWdncmVnYXRpb24gYnkgbWludXRlcyBvciBob3Vyc1xuICAgIGNvbnN0IGZpcnN0T2NjdXJyZW5jZSA9IGNob3BPY2N1cnJlbmNlKGZpcnN0T2NjdXJyZW5jZVVuY2hvcHBlZCk7XG4gICAgY29uc3QgbGFzdE9jY3VycmVuY2UgPSBjaG9wT2NjdXJyZW5jZShsYXN0T2NjdXJyZW5jZVVuY2hvcHBlZCk7XG5cblxuICAgIC8vIGRhdGEgZ3JvdXAgbmFtZXMgYXMgc2VlbiBpbiBtb2RlbFxuICAgIGNvbnN0IGZpcnN0R3JvdXBLZXkgPSBTRVZFUklUSUVTW3NldmVyaXR5XSArICdfZmlyc3QnO1xuICAgIGNvbnN0IGxhc3RHcm91cEtleSA9IFNFVkVSSVRJRVNbc2V2ZXJpdHldICsgJ19sYXN0JztcblxuICAgIC8vIGluaXRpYWxpemUgb2JqIGlmIG5lY2Vzc2FyeVxuICAgIGlmICghYWxlcnRzQnlTZXZbZmlyc3RHcm91cEtleV0/LltmaXJzdE9jY3VycmVuY2VdKSBhbGVydHNCeVNldltmaXJzdEdyb3VwS2V5XSA9IHsuLi5hbGVydHNCeVNldltmaXJzdEdyb3VwS2V5XSwgW2ZpcnN0T2NjdXJyZW5jZV06IDB9O1xuICAgIGlmICghYWxlcnRzQnlTZXZbbGFzdEdyb3VwS2V5XT8uW2xhc3RPY2N1cnJlbmNlXSkgYWxlcnRzQnlTZXZbbGFzdEdyb3VwS2V5XSA9IHsuLi5hbGVydHNCeVNldltsYXN0R3JvdXBLZXldLCBbbGFzdE9jY3VycmVuY2VdOiAwfTtcbiAgICBpZiAoIWFsZXJ0c0J5U2V2W0FMTF9TRVZTX0ZJUlNUX09DQ10/LltmaXJzdE9jY3VycmVuY2VdKSBhbGVydHNCeVNldltBTExfU0VWU19GSVJTVF9PQ0NdID0gey4uLmFsZXJ0c0J5U2V2W0FMTF9TRVZTX0ZJUlNUX09DQ10sIFtmaXJzdE9jY3VycmVuY2VdOiAwfTtcbiAgICBpZiAoIWFsZXJ0c0J5U2V2W0FMTF9TRVZTX0xBU1RfT0NDXT8uW2xhc3RPY2N1cnJlbmNlXSkgYWxlcnRzQnlTZXZbQUxMX1NFVlNfTEFTVF9PQ0NdID0gey4uLmFsZXJ0c0J5U2V2W0FMTF9TRVZTX0xBU1RfT0NDXSwgW2xhc3RPY2N1cnJlbmNlXTogMH07XG5cbiAgICAvLyBpbmNyZW1lbnQgYWxlcnQgY291bnQgZm9yIHRoYXQgc2V2ZXJpdHkgKyBvY2N1cnJlbmNlXG4gICAgYWxlcnRzQnlTZXZbZmlyc3RHcm91cEtleV1bZmlyc3RPY2N1cnJlbmNlXSsrO1xuICAgIGFsZXJ0c0J5U2V2W2xhc3RHcm91cEtleV1bbGFzdE9jY3VycmVuY2VdKys7XG5cbiAgICAvLyBpbmNyZW1lbnQgYWxlcnQgY291bnQgZm9yIHRoYXQgb2NjdXJyZW5jZSBvdmVyIGFsbCBzZXZzXG4gICAgYWxlcnRzQnlTZXZbQUxMX1NFVlNfRklSU1RfT0NDXVtmaXJzdE9jY3VycmVuY2VdKys7XG4gICAgYWxlcnRzQnlTZXZbQUxMX1NFVlNfTEFTVF9PQ0NdW2xhc3RPY2N1cnJlbmNlXSsrO1xuICB9KTtcblxuICBmb3IgKGNvbnN0IGdyb3VwS2V5IGluIGFsZXJ0c0J5U2V2KSB7XG4gICAgZm9yIChjb25zdCBkYXRlIG9mIE9iamVjdC5rZXlzKGFsZXJ0c0J5U2V2W2dyb3VwS2V5XSkuc29ydCgpKSB7XG4gICAgICBhbGVydENvdW50RGF0YS5wdXNoKFxuICAgICAgICB7XG4gICAgICAgICAgZ3JvdXA6IGdyb3VwS2V5LFxuICAgICAgICAgIGRhdGU6IGRhdGUsXG4gICAgICAgICAgdmFsdWU6IGFsZXJ0c0J5U2V2W2dyb3VwS2V5XVtkYXRlXVxuICAgICAgICB9XG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFsZXJ0Q291bnREYXRhO1xufVxuIiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3J1bGVTZXRbMV0ucnVsZXNbMl0udXNlWzJdIS4vYWxlcnQtdGltZWxpbmUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cnVsZVNldFsxXS5ydWxlc1syXS51c2VbMl0hLi9hbGVydC10aW1lbGluZS5zY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiLyoqXG4gKiDCqSBDb3B5cmlnaHQgSUJNIENvcnAuIDIwMjIsIDIwMjVcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBBcGFjaGUtMi4wXG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTWVtbywgdXNlU3RhdGUsIHVzZVJlZiB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20vY2xpZW50JztcbmltcG9ydCB7IEJ1dHRvbiwgQ2hlY2tib3gsIERyb3Bkb3dufSBmcm9tICdAY2FyYm9uL3JlYWN0Jztcbi8vIEB0cy1pZ25vcmVcbmltcG9ydCB7IExpbmVDaGFydCB9IGZyb20gJ0BjYXJib24vY2hhcnRzLXJlYWN0JztcbmltcG9ydCB7XG4gIEFMRVJUX1FVRVJZX1BBUkFNUyxcbiAgRFJPUERPV05fSVRFTVMsXG4gIExJTkVfQ0hBUlRfT1BUSU9OUyxcbiAgU0VWRVJJVElFU1xufSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IGdldFRpbWVHcm91cENvdW50cyBmcm9tICcuLi8uLi9oZWxwZXJzL2dldFRpbWVHcm91cENvdW50cyc7XG5cbmltcG9ydCAnQGNhcmJvbi9jaGFydHMtcmVhY3Qvc3R5bGVzLmNzcydcbmltcG9ydCAnLi9hbGVydC10aW1lbGluZS5zY3NzJztcblxuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IGdldFJlYWN0UmVuZGVyZXIgZnJvbSAnQGlibS9ha29yYS1yZW5kZXJlci1yZWFjdCc7XG5cbmNvbnN0IFJlYWN0UmVuZGVyZXIgPSBnZXRSZWFjdFJlbmRlcmVyKFJlYWN0LCBSZWFjdERPTSk7XG5jb25zdCB7IHVzZUFrb3JhU3RhdGUsIHNldFVybFBhcmFtZXRlcnMgfSA9IFJlYWN0UmVuZGVyZXIuY29tcG9uZW50cztcblxuY29uc3QgY2xhc3NOYW1lID0gJ2FsZXJ0LXRpbWVsaW5lJztcblxudHlwZSBBbGVydENvdW50RGF0YVBvaW50ID0ge1xuICBncm91cDogc3RyaW5nLFxuICBkYXRlOiBzdHJpbmcsXG4gIHZhbHVlOiBudW1iZXJcbn1cblxudHlwZSBDaGFydERhdGFQb2ludCA9IHtcbiAgZGF0ZTogRGF0ZSxcbiAgZ3JvdXA6IHN0cmluZyxcbiAgdmFsdWU6IG51bWJlclxufVxuXG5cbmNvbnN0IEFsZXJ0VGltZWxpbmUgPSAocHJvcHM6IGFueSkgPT4ge1xuICBjb25zdCB7XG4gICAgZGF0YSxcbiAgICBsb2FkaW5nLFxuICAgIHJlZmV0Y2g6IGZldGNoQWxlcnRzXG4gIH0gPSBwcm9wcztcbiAgY29uc3QgYWxlcnRzID0gZGF0YT8udGVuYW50LmFsZXJ0cy5yb3dzO1xuXG4gIGNvbnN0IHsgc3RhdGUsIGFwcCB9ID0gdXNlQWtvcmFTdGF0ZSgpO1xuICBjb25zdCBjaGFydFJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgW3VzZUZpcnN0T2NjdXJyZW5jZSwgc2V0VXNlRmlyc3RPY2N1cnJlbmNlXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbdXNlTGFzdE9jY3VycmVuY2UsIHNldFVzZUxhc3RPY2N1cnJlbmNlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgLy8gd2Ugd2FudCB0byByZXJlbmRlciB3aGVuIHRpbWV3aW5kb3cgdXBkYXRlcyBidXQgd2UgYWxzbyB3YW50IHRvIHVzZSBpdCBpbiBldmVudCBsaXN0ZW5lciBzbyB3ZSBuZWVkIHJlZiArIHN0YXRlIG1nbXRcbiAgY29uc3QgW3RpbWVXaW5kb3csIHNldFRpbWVXaW5kb3ddID0gdXNlU3RhdGUoJzE1TWluJyk7XG4gIGNvbnN0IHRpbWVXaW5kb3dSZWYgPSB1c2VSZWYoJzE1TWluJyk7XG4gIGNvbnN0IHRhcmdldFVybCA9IGFwcC5yZXNvbHZlUGF0aEV4cHJlc3Npb24oc3RhdGUucGF0aCk7XG4gIGNvbnN0IHsgdGl0bGUgfSA9IGFwcC5nZXRTdGF0ZUZvclBhdGgodGFyZ2V0VXJsKTtcbiAgY29uc3QgYWxlcnRDb3VudEdyb3VwcyA9IHVzZU1lbW8oKCkgPT4gZ2V0VGltZUdyb3VwQ291bnRzKGFsZXJ0cywgdGltZVdpbmRvdyksIFthbGVydHMsIHRpbWVXaW5kb3ddKTtcblxuICBjb25zdCBnZXRUaW1lV2luZG93TGVmdEVkZ2UgPSAoKSA9PiB7XG4gICAgLy8gcmVwbGFjZSB3aXRoIGxpbmUgYmVsb3cgZm9yIGFjY3VyYXRlIGNoYXJ0ICh0aGlzIGRhdGUgaXMgZm9yIGV4YW1wbGUgcHVycG9zZXMpXG4gICAgY29uc3QgdGhyZXNob2xkID0gbmV3IERhdGUoJzIwMjMtMDgtMjJUMTY6NDk6MDAuMDAwWicpXG4gICAgLy8gY29uc3QgdGhyZXNob2xkID0gbmV3IERhdGUoKTsgLy8gdG9kbyBjaGFuZ2UgdG8gZGF0ZSBub3dcbiAgICBsZXQgZGF0ZVRocmVzaDtcbiAgICAvLyB3aW5kb3cgaXMgZWl0aGVyIGxhc3QgMTUgbWluIG9yIGxhc3QgMjQgaG91cnNcbiAgICBpZiAodGltZVdpbmRvdyA9PT0gJzE1TWluJykge1xuICAgICAgZGF0ZVRocmVzaCA9IHRocmVzaG9sZDtcbiAgICAgIGRhdGVUaHJlc2guc2V0TWludXRlcyh0aHJlc2hvbGQuZ2V0TWludXRlcygpIC0gMTUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXRlVGhyZXNoID0gbmV3IERhdGUodGhyZXNob2xkLmdldFRpbWUoKSAtICgyNCAqIDYwICogNjAgKiAxMDAwKSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRlVGhyZXNoLnRvSVNPU3RyaW5nKCk7XG4gIH1cblxuICBjb25zdCBvblBvaW50Q2xpY2sgPSAoZmlsdGVyU3RyOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBuZXdSb3V0ZSA9IHNldFVybFBhcmFtZXRlcnMoc3RhdGU/LnJlc29sdmVkRnVsbFBhdGggfHwgc3RhdGU/LmZ1bGxQYXRoLCB7IGZpbHRlcm5hbWU6ICdBbGwgYWxlcnRzJywgZmlsdGVyd2hlcmVjbGF1c2U6IGZpbHRlclN0ciB9KTtcbiAgICBhcHAucmVwbGFjZVJvdXRlKG5ld1JvdXRlKTtcbiAgfVxuXG4gIGNvbnN0IGdldEZpbHRlcmVkRmlyc3RMYXN0ID0gKGFsZXJ0Q291bnQ6IEFsZXJ0Q291bnREYXRhUG9pbnRbXSkgPT4ge1xuICAgIC8vIGZpbHRlciBvdXQgZmlyc3Qgb2NjdXJyZW5jZSBkYXRhIHBvaW50cyBpZiBuZWNlc3NhcnlcbiAgICBjb25zdCBmaWx0ZXJlZEZpcnN0ID0gdXNlRmlyc3RPY2N1cnJlbmNlID8gYWxlcnRDb3VudCA6IGFsZXJ0Q291bnQuZmlsdGVyKChkcCkgPT4gZHAuZ3JvdXAuc2xpY2UoLTUpICE9PSAnZmlyc3QnKVxuICAgIC8vIGZpbHRlciBvdXQgbGFzdCBvY2N1cnJlbmNlIGRhdGEgcG9pbnRzIGlmIG5lY2Vzc2FyeVxuICAgIGNvbnN0IGZpbHRlcmVkTGFzdCA9IHVzZUxhc3RPY2N1cnJlbmNlID8gZmlsdGVyZWRGaXJzdCA6IGZpbHRlcmVkRmlyc3QuZmlsdGVyKChkcCkgPT4gZHAuZ3JvdXAuc2xpY2UoLTQpICE9PSAnbGFzdCcpXG4gICAgY29uc3QgdGltZUN1dG9mZiA9IGdldFRpbWVXaW5kb3dMZWZ0RWRnZSgpO1xuICAgIC8vIHJlbW92ZSBkYXRhIHBvaW50cyBvdXRzaWRlIHRpbWUgd2luZG93IChiZWNhdXNlIGFsZXJ0IHF1ZXJ5IGZpbHRlcnMgb24gZmlyc3RPY2MgPj0gY3V0b2ZmIE9SIGxhc3RPY2MgPj0gY3V0b2ZmKVxuICAgIGNvbnN0IGZpbHRlcmVkRGF0ZSA9IGZpbHRlcmVkTGFzdC5maWx0ZXIoKGRwKSA9PiBkcC5kYXRlID49IHRpbWVDdXRvZmYpO1xuICAgIHJldHVybiBmaWx0ZXJlZERhdGU7XG4gIH1cblxuICAvLyB3ZSB3YW50IGFsZXJ0cyB0aGF0IGhhdmUgYSBmaXJzdCBvY2N1cnJlbmNlIHdpdGhpbiB3aW5kb3cgb3IgYSBsYXN0IG9jY3VycmVuY2Ugd2l0aGluIHdpbmRvd1xuICBjb25zdCBnZXRRdWVyeUZpbHRlciA9IChmaWx0ZXI6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHRpbWVDdXRvZmYgPSBnZXRUaW1lV2luZG93TGVmdEVkZ2UoKTtcbiAgICBjb25zdCBmaXJzdE9jY0ZpbHRlciA9IGBmaXJzdE9jY3VycmVuY2VUaW1lID49ICcke3RpbWVDdXRvZmZ9J2A7XG4gICAgY29uc3QgbGFzdE9jY0ZpbHRlciA9IGBsYXN0T2NjdXJyZW5jZVRpbWUgPj0gJyR7dGltZUN1dG9mZn0nYDtcbiAgICByZXR1cm4gZmlsdGVyICsgYCBhbmQgKCR7Zmlyc3RPY2NGaWx0ZXJ9IG9yICR7bGFzdE9jY0ZpbHRlcn0pYFxuICB9XG5cbiAgY29uc3QgZ2V0VXJsRmlsdGVyID0gKGRhdHVtOiBDaGFydERhdGFQb2ludCkgPT4ge1xuICAgIGNvbnN0IHdpbmRvd0xlZnRFZGdlID0gZGF0dW0uZGF0ZTtcbiAgICBsZXQgd2luZG93UmlnaHRFZGdlO1xuICAgIGlmICh0aW1lV2luZG93UmVmLmN1cnJlbnQgPT09ICcxNU1pbicpIHtcbiAgICAgIC8vIGFnZ3JlZ2F0ZSBieSBtaW51dGUgc28gYWRkIG9uZSBtaW51dGVcbiAgICAgIHdpbmRvd1JpZ2h0RWRnZSA9IG5ldyBEYXRlKHdpbmRvd0xlZnRFZGdlLmdldFRpbWUoKSArIDYwICogMTAwMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGFnZ3JlZ2F0ZSBieSBob3VyIHNvIGFkZCBvbmUgaG91clxuICAgICAgd2luZG93UmlnaHRFZGdlID0gbmV3IERhdGUod2luZG93TGVmdEVkZ2UuZ2V0VGltZSgpICsgNjAgKiA2MCAqIDEwMDApO1xuICAgIH1cbiAgICBjb25zdCBvY2NUeXBlID0gZGF0dW0uZ3JvdXAuc2xpY2UoLTUpID09PSAnZmlyc3QnID8gJ2ZpcnN0T2NjdXJyZW5jZVRpbWUnIDogJ2xhc3RPY2N1cnJlbmNlVGltZSc7XG4gICAgY29uc3QgZmlsdGVyVGVtcGxhdGUgPSBgc3RhdGUgIT0gJ2NsZWFyJyBhbmQgJHtvY2NUeXBlfSA+PSAnJHt3aW5kb3dMZWZ0RWRnZS50b0lTT1N0cmluZygpfScgYW5kICR7b2NjVHlwZX0gPCAnJHt3aW5kb3dSaWdodEVkZ2UudG9JU09TdHJpbmcoKX0nYFxuICAgIGNvbnN0IHNldmVyaXR5U3RyID0gZGF0dW0uZ3JvdXAuc2xpY2UoMCwgZGF0dW0uZ3JvdXAuaW5kZXhPZignXycpKTtcbiAgICBjb25zdCBzZXZlcml0eSA9IHNldmVyaXR5U3RyID09PSAnQWxsU2V2ZXJpdGllcycgPyA3IDogU0VWRVJJVElFUy5pbmRleE9mKHNldmVyaXR5U3RyKTtcbiAgICBjb25zdCBmaWx0ZXJXaXRoU2V2ZXJpdHkgPSBzZXZlcml0eSA8IDcgPyAoZmlsdGVyVGVtcGxhdGUgKyBgIGFuZCBzZXZlcml0eSA9ICR7c2V2ZXJpdHkudG9TdHJpbmcoKX1gKSA6IGZpbHRlclRlbXBsYXRlO1xuICAgIHJldHVybiBmaWx0ZXJXaXRoU2V2ZXJpdHk7XG4gIH1cblxuICAvLyB3ZSByZWZldGNoIGRhdGEgZXZlcnl0aW1lIHdlIGNsaWNrIHJlZnJlc2ggT1IgY2hhbmdlIHRpbWUgd2luZG93LiB3ZSBkb24ndCByZWZyZXNoIGZvciBvY2N1cnJlbmNlIHR5cGUgY2hhbmdlIGJ1dCB3ZSBkbyByZWZpbHRlclxuICBjb25zdCBnZXRBbGVydE9wdGlvbnMgPSAoKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9LW9wdGlvbnNgfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2NsYXNzTmFtZX0tb3B0aW9ucy1maXJzdHJvd2B9PlxuICAgICAgICAgIDxEcm9wZG93blxuICAgICAgICAgICAgaWQ9J3RpbWV3aW5kb3ctZHJvcGRvd24nXG4gICAgICAgICAgICB0aXRsZVRleHQ9JydcbiAgICAgICAgICAgIGxhYmVsPSdUaW1lIHdpbmRvdydcbiAgICAgICAgICAgIGl0ZW1zPXtPYmplY3Qua2V5cyhEUk9QRE9XTl9JVEVNUyl9IGl0ZW1Ub1N0cmluZz17KGl0ZW0pID0+IERST1BET1dOX0lURU1TW2l0ZW1dfVxuICAgICAgICAgICAgc2VsZWN0ZWRJdGVtPXt0aW1lV2luZG93fVxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7c2V0VGltZVdpbmRvdyhlLnNlbGVjdGVkSXRlbSk7IHRpbWVXaW5kb3dSZWYuY3VycmVudCA9IGUuc2VsZWN0ZWRJdGVtfX1cbiAgICAgICAgICAgIHR5cGU9J2lubGluZSdcbiAgICAgICAgICAvPlxuICAgICAgICAgIDxDaGVja2JveCBsYWJlbFRleHQ9J0ZpcnN0IG9jY3VycmVuY2UnIGlkPSdmaXJzdC1vY2N1ci1jaGtib3gnIGNoZWNrZWQ9e3VzZUZpcnN0T2NjdXJyZW5jZX0gb25DaGFuZ2U9eyhlLCB7Y2hlY2tlZH0pID0+IHNldFVzZUZpcnN0T2NjdXJyZW5jZShjaGVja2VkKX0vPlxuICAgICAgICAgIDxDaGVja2JveCBsYWJlbFRleHQ9J0xhc3Qgb2NjdXJyZW5jZScgaWQ9J2xhc3Qtb2NjdXItY2hrYm94JyBjaGVja2VkPXt1c2VMYXN0T2NjdXJyZW5jZX0gb25DaGFuZ2U9eyhlLCB7Y2hlY2tlZH0pID0+IHNldFVzZUxhc3RPY2N1cnJlbmNlKGNoZWNrZWQpfS8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgY2xhc3NOYW1lPXtgJHtjbGFzc05hbWV9X19yZXNldGB9XG4gICAgICAgICAgZGlzYWJsZWQ9e2xvYWRpbmd9XG4gICAgICAgICAga2luZD0nZ2hvc3QnXG4gICAgICAgICAgb25DbGljaz17KCkgPT4gb25Qb2ludENsaWNrKCcnKX0+XG4gICAgICAgICAgUmVzZXQgZmlsdGVyXG4gICAgICAgIDwvQnV0dG9uPlxuICAgICAgPC9kaXY+XG4gICAgKVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBvblJlZnJlc2ggPSAoZTogYW55KSA9PiB7XG4gICAgICBpZiAoZS5kYXRhID09PSAnYWxlcnRzcmVmcmVzaCcgJiYgZS5vcmlnaW4gPT09IHN0YXRlLmNsaWVudENvbmZpZ3VyYXRpb24ucHVibGljdXJsKSB7XG4gICAgICAgIGZldGNoQWxlcnRzKHsgZmlsdGVyOiBnZXRRdWVyeUZpbHRlcihBTEVSVF9RVUVSWV9QQVJBTVMuZmlsdGVyKSB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBvblJlZnJlc2gsIGZhbHNlKTtcbiAgICBjaGFydFJlZi5jdXJyZW50Py5jaGFydC5zZXJ2aWNlcy5ldmVudHMuYWRkRXZlbnRMaXN0ZW5lcignc2NhdHRlci1jbGljaycsIChlIDogYW55KSA9PiB7XG4gICAgICBvblBvaW50Q2xpY2soZ2V0VXJsRmlsdGVyKGUuZGV0YWlsLmRhdHVtKSk7XG4gICAgfSk7XG4gICAgZmV0Y2hBbGVydHMoeyBmaWx0ZXI6IGdldFF1ZXJ5RmlsdGVyKEFMRVJUX1FVRVJZX1BBUkFNUy5maWx0ZXIpIH0pO1xuICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIG9uUmVmcmVzaCk7XG4gIH0sIFtdKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGZldGNoQWxlcnRzKHsgZmlsdGVyOiBnZXRRdWVyeUZpbHRlcihBTEVSVF9RVUVSWV9QQVJBTVMuZmlsdGVyKSB9KTtcbiAgfSwgW3RpbWVXaW5kb3ddKVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2NsYXNzTmFtZX0gcm9sZT0nY29udGVudGluZm8nPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Ake2NsYXNzTmFtZX1fX2hlYWRpbmdgfT5cbiAgICAgICAge3RpdGxlfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17YCR7Y2xhc3NOYW1lfV9fY2hhcnRgfT5cbiAgICAgICAge2dldEFsZXJ0T3B0aW9ucygpfVxuICAgICAgICA8TGluZUNoYXJ0IGRhdGE9e2dldEZpbHRlcmVkRmlyc3RMYXN0KGFsZXJ0Q291bnRHcm91cHMpfSBvcHRpb25zPXt7Li4uTElORV9DSEFSVF9PUFRJT05TLCBkYXRhOiB7IGxvYWRpbmcgfX19IHJlZj17Y2hhcnRSZWZ9Lz5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQWxlcnRUaW1lbGluZTtcbiIsIi8qKlxuICogwqkgQ29weXJpZ2h0IElCTSBDb3JwLiAyMDIyLCAyMDI1XG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgQWxlcnRUaW1lbGluZSBmcm9tICcuL0FsZXJ0VGltZWxpbmUnO1xuaW1wb3J0IG1vY2tBbGVydHMgZnJvbSAnLi4vLi4vbW9ja3MvYWxlcnRzLmpzb24nO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHRpdGxlOiAnQWxlcnRzIHRpbWVsaW5lJyxcbiAgY29tcG9uZW50OiBBbGVydFRpbWVsaW5lLFxuICBhcmdUeXBlczoge1xuICAgIGRhdGE6IHtcbiAgICAgIGNvbnRyb2w6ICdvYmplY3QnXG4gICAgfVxuICB9XG59O1xuXG5jb25zdCBUZW1wbGF0ZSA9IChhcmdzOiB7ZGF0YToge319KSA9PiA8QWxlcnRUaW1lbGluZSB7Li4uYXJnc30gcmVmZXRjaD17KCkgPT4ge319IC8+XG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0ID0gVGVtcGxhdGUuYmluZCh7fSk7XG5EZWZhdWx0LmFyZ3MgPSB7XG4gIGRhdGE6IG1vY2tBbGVydHMuZGF0YVxufTtcblxuZXhwb3J0IGNvbnN0IFNrZWxldG9uID0gKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3tib3JkZXI6ICcxcHggc29saWQgI0UwRTBFMCd9fT5cbiAgICAgIDxBbGVydFRpbWVsaW5lIGxvYWRpbmc9e3RydWV9IHJlZmV0Y2g9eygpID0+IHt9fSAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcbiJdLCJuYW1lcyI6WyJBTEVSVF9RVUVSWV9QQVJBTVMiLCJBTExfU0VWU19GSVJTVF9PQ0MiLCJBTExfU0VWU19MQVNUX09DQyIsIlNFVkVSSVRJRVMiLCJnZXRBbGVydENvdW50R3JvdXBzIiwiYWxlcnRzIiwidGltZVdpbmRvdyIsImFsZXJ0c0J5U2V2IiwiYWxlcnRDb3VudERhdGEiLCJjaG9wT2NjdXJyZW5jZSIsIm9jYyIsInNsaWNlIiwiZm9yRWFjaCIsImFsZXJ0Um93Iiwic2V2ZXJpdHkiLCJmaWVsZHMiLCJjb2x1bW5zIiwiaW5kZXhPZiIsImZpcnN0T2NjdXJyZW5jZVVuY2hvcHBlZCIsImxhc3RPY2N1cnJlbmNlVW5jaG9wcGVkIiwiZmlyc3RPY2N1cnJlbmNlIiwibGFzdE9jY3VycmVuY2UiLCJmaXJzdEdyb3VwS2V5IiwibGFzdEdyb3VwS2V5IiwiZ3JvdXBLZXkiLCJkYXRlIiwiT2JqZWN0Iiwia2V5cyIsInNvcnQiLCJwdXNoIiwiZ3JvdXAiLCJ2YWx1ZSIsIlJlYWN0IiwidXNlRWZmZWN0IiwidXNlTWVtbyIsInVzZVN0YXRlIiwidXNlUmVmIiwiUmVhY3RET00iLCJCdXR0b24iLCJDaGVja2JveCIsIkRyb3Bkb3duIiwiTGluZUNoYXJ0IiwiRFJPUERPV05fSVRFTVMiLCJMSU5FX0NIQVJUX09QVElPTlMiLCJnZXRUaW1lR3JvdXBDb3VudHMiLCJnZXRSZWFjdFJlbmRlcmVyIiwiUmVhY3RSZW5kZXJlciIsInVzZUFrb3JhU3RhdGUiLCJzZXRVcmxQYXJhbWV0ZXJzIiwiY29tcG9uZW50cyIsImNsYXNzTmFtZSIsIkFsZXJ0VGltZWxpbmUiLCJwcm9wcyIsImRhdGEiLCJsb2FkaW5nIiwicmVmZXRjaCIsImZldGNoQWxlcnRzIiwidGVuYW50Iiwicm93cyIsInN0YXRlIiwiYXBwIiwiY2hhcnRSZWYiLCJ1c2VGaXJzdE9jY3VycmVuY2UiLCJzZXRVc2VGaXJzdE9jY3VycmVuY2UiLCJ1c2VMYXN0T2NjdXJyZW5jZSIsInNldFVzZUxhc3RPY2N1cnJlbmNlIiwic2V0VGltZVdpbmRvdyIsInRpbWVXaW5kb3dSZWYiLCJ0YXJnZXRVcmwiLCJyZXNvbHZlUGF0aEV4cHJlc3Npb24iLCJwYXRoIiwidGl0bGUiLCJnZXRTdGF0ZUZvclBhdGgiLCJhbGVydENvdW50R3JvdXBzIiwiZ2V0VGltZVdpbmRvd0xlZnRFZGdlIiwidGhyZXNob2xkIiwiRGF0ZSIsImRhdGVUaHJlc2giLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsImdldFRpbWUiLCJ0b0lTT1N0cmluZyIsIm9uUG9pbnRDbGljayIsImZpbHRlclN0ciIsIm5ld1JvdXRlIiwicmVzb2x2ZWRGdWxsUGF0aCIsImZ1bGxQYXRoIiwiZmlsdGVybmFtZSIsImZpbHRlcndoZXJlY2xhdXNlIiwicmVwbGFjZVJvdXRlIiwiZ2V0RmlsdGVyZWRGaXJzdExhc3QiLCJhbGVydENvdW50IiwiZmlsdGVyZWRGaXJzdCIsImZpbHRlciIsImRwIiwiZmlsdGVyZWRMYXN0IiwidGltZUN1dG9mZiIsImZpbHRlcmVkRGF0ZSIsImdldFF1ZXJ5RmlsdGVyIiwiZmlyc3RPY2NGaWx0ZXIiLCJsYXN0T2NjRmlsdGVyIiwiZ2V0VXJsRmlsdGVyIiwiZGF0dW0iLCJ3aW5kb3dMZWZ0RWRnZSIsIndpbmRvd1JpZ2h0RWRnZSIsImN1cnJlbnQiLCJvY2NUeXBlIiwiZmlsdGVyVGVtcGxhdGUiLCJzZXZlcml0eVN0ciIsImZpbHRlcldpdGhTZXZlcml0eSIsInRvU3RyaW5nIiwiZ2V0QWxlcnRPcHRpb25zIiwiY3JlYXRlRWxlbWVudCIsImlkIiwidGl0bGVUZXh0IiwibGFiZWwiLCJpdGVtcyIsIml0ZW1Ub1N0cmluZyIsIml0ZW0iLCJzZWxlY3RlZEl0ZW0iLCJvbkNoYW5nZSIsImUiLCJ0eXBlIiwibGFiZWxUZXh0IiwiY2hlY2tlZCIsIl9yZWYiLCJfcmVmMiIsImRpc2FibGVkIiwia2luZCIsIm9uQ2xpY2siLCJvblJlZnJlc2giLCJvcmlnaW4iLCJjbGllbnRDb25maWd1cmF0aW9uIiwicHVibGljdXJsIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImNoYXJ0Iiwic2VydmljZXMiLCJldmVudHMiLCJkZXRhaWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicm9sZSIsIm9wdGlvbnMiLCJyZWYiLCJtb2NrQWxlcnRzIiwiY29tcG9uZW50IiwiYXJnVHlwZXMiLCJjb250cm9sIiwiVGVtcGxhdGUiLCJhcmdzIiwiX2V4dGVuZHMiLCJEZWZhdWx0IiwiYmluZCIsIlNrZWxldG9uIiwic3R5bGUiLCJib3JkZXIiLCJwYXJhbWV0ZXJzIiwiZG9jcyIsInNvdXJjZSIsIm9yaWdpbmFsU291cmNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5610\n")}}]);